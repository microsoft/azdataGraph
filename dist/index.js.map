{
  "version": 3,
  "sources": ["build.js", "../src/ts/index.ts", "../src/ts/mx.ts", "../src/ts/schemaDesigner/schemaDesignerInterfaces.ts", "../src/ts/schemaDesigner/schemaDesignerToolbar.ts", "../src/ts/schemaDesigner/utils.ts", "../node_modules/create-color/src/hashToHex.js", "../node_modules/create-color/src/hashToHsl.js", "../node_modules/create-color/src/hashToRgb.js", "../node_modules/create-color/src/index.js", "../src/ts/schemaDesigner/schemaDesignerEntity.ts", "../src/ts/schemaDesigner/schemaDesignerLayout.ts", "../node_modules/uuid/dist/esm-browser/stringify.js", "../node_modules/uuid/dist/esm-browser/rng.js", "../node_modules/uuid/dist/esm-browser/native.js", "../node_modules/uuid/dist/esm-browser/v4.js", "../src/ts/schemaDesigner/schemaDesigner.ts"],
  "sourcesContent": ["(function (root, factory) {\nif (typeof define === 'function' && define.amd) {\ndefine([], factory);\n} else if (typeof module === 'object' && module.exports) {\nmodule.exports = factory();\n} else {\nroot.mxgraph = factory();\n}\n}(this, function () {\nreturn function (opts) {\nfor (var name in opts) { this[name] = opts[name]; }\nvar __mxOutput = {};\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\nvar mxClient =\n{\n\t/**\n\t * Class: mxClient\n\t *\n\t * Bootstrapping mechanism for the mxGraph thin client. The production version\n\t * of this file contains all code required to run the mxGraph thin client, as\n\t * well as global constants to identify the browser and operating system in\n\t * use. You may have to load chrome://global/content/contentAreaUtils.js in\n\t * your page to disable certain security restrictions in Mozilla.\n\t * \n\t * Variable: VERSION\n\t *\n\t * Contains the current version of the mxGraph library. The strings that\n\t * communicate versions of mxGraph use the following format.\n\t * \n\t * versionMajor.versionMinor.buildNumber.revisionNumber\n\t * \n\t * Current version is 4.2.2.\n\t */\n\tVERSION: '4.2.2',\n\n\t/**\n\t * Variable: IS_IE\n\t *\n\t * True if the current browser is Internet Explorer 10 or below. Use <mxClient.IS_IE11>\n\t * to detect IE 11.\n\t */\n\tIS_IE: navigator.userAgent != null && navigator.userAgent.indexOf('MSIE') >= 0,\n\n\t/**\n\t * Variable: IS_IE6\n\t *\n\t * True if the current browser is Internet Explorer 6.x.\n\t */\n\tIS_IE6: navigator.userAgent != null && navigator.userAgent.indexOf('MSIE 6') >= 0,\n\n\t/**\n\t * Variable: IS_IE11\n\t *\n\t * True if the current browser is Internet Explorer 11.x.\n\t */\n\tIS_IE11: navigator.userAgent != null && !!navigator.userAgent.match(/Trident\\/7\\./),\n\n\t/**\n\t * Variable: IS_EDGE\n\t *\n\t * True if the current browser is Microsoft Edge.\n\t */\n\tIS_EDGE: navigator.userAgent != null && !!navigator.userAgent.match(/Edge\\//),\n\n\t/**\n\t * Variable: IS_QUIRKS\n\t *\n\t * True if the current browser is Internet Explorer and it is in quirks mode.\n\t */\n\tIS_QUIRKS: navigator.userAgent != null && navigator.userAgent.indexOf('MSIE') >= 0 &&\n\t\t(document.documentMode == null || document.documentMode == 5),\n\n\t/**\n\t * Variable: IS_EM\n\t * \n\t * True if the browser is IE11 in enterprise mode (IE8 standards mode).\n\t */\n\tIS_EM: 'spellcheck' in document.createElement('textarea') && document.documentMode == 8,\n\n\t/**\n\t * Variable: VML_PREFIX\n\t * \n\t * Prefix for VML namespace in node names. Default is 'v'.\n\t */\n\tVML_PREFIX: 'v',\n\n\t/**\n\t * Variable: OFFICE_PREFIX\n\t * \n\t * Prefix for VML office namespace in node names. Default is 'o'.\n\t */\n\tOFFICE_PREFIX: 'o',\n\n\t/**\n\t * Variable: IS_NS\n\t *\n\t * True if the current browser is Netscape (including Firefox).\n\t */\n  \tIS_NS: navigator.userAgent != null &&\n  \t\tnavigator.userAgent.indexOf('Mozilla/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('MSIE') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Edge/') < 0,\n\n\t/**\n\t * Variable: IS_OP\n\t *\n\t * True if the current browser is Opera.\n\t */\n  \tIS_OP: navigator.userAgent != null &&\n  \t\t(navigator.userAgent.indexOf('Opera/') >= 0 ||\n  \t\tnavigator.userAgent.indexOf('OPR/') >= 0),\n\n\t/**\n\t * Variable: IS_OT\n\t *\n\t * True if -o-transform is available as a CSS style, ie for Opera browsers\n\t * based on a Presto engine with version 2.5 or later.\n\t */\n  \tIS_OT: navigator.userAgent != null &&\n  \t\tnavigator.userAgent.indexOf('Presto/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.4.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.3.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.2.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.0.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/1.') < 0,\n  \t\n\t/**\n\t * Variable: IS_SF\n\t *\n\t * True if the current browser is Safari.\n\t */\n  \tIS_SF: /Apple Computer, Inc/.test(navigator.vendor),\n\n\t/**\n\t * Variable: IS_ANDROID\n\t * \n\t * Returns true if the user agent contains Android.\n\t */\n  \tIS_ANDROID: navigator.appVersion.indexOf('Android') >= 0,\n\n\t/**\n\t * Variable: IS_IOS\n\t * \n\t * Returns true if the user agent is an iPad, iPhone or iPod.\n\t */\n  \tIS_IOS: (/iP(hone|od|ad)/.test(navigator.platform)),\n\n\t/**\n\t * Variable: IS_GC\n\t *\n\t * True if the current browser is Google Chrome.\n\t */\n  \tIS_GC: /Google Inc/.test(navigator.vendor),\n\t\n\t/**\n\t * Variable: IS_CHROMEAPP\n\t *\n\t * True if the this is running inside a Chrome App.\n\t */\n  \tIS_CHROMEAPP: window.chrome != null && chrome.app != null && chrome.app.runtime != null,\n\n\t/**\n\t * Variable: IS_FF\n\t *\n\t * True if the current browser is Firefox.\n\t */\n  \tIS_FF: typeof InstallTrigger !== 'undefined',\n  \t\n\t/**\n\t * Variable: IS_MT\n\t *\n\t * True if -moz-transform is available as a CSS style. This is the case\n\t * for all Firefox-based browsers newer than or equal 3, such as Camino,\n\t * Iceweasel, Seamonkey and Iceape.\n\t */\n  \tIS_MT: (navigator.userAgent.indexOf('Firefox/') >= 0 &&\n\t\tnavigator.userAgent.indexOf('Firefox/1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Firefox/2.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('Iceweasel/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceweasel/1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceweasel/2.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('SeaMonkey/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('SeaMonkey/1.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('Iceape/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceape/1.') < 0),\n\n\t/**\n\t * Variable: IS_VML\n\t *\n\t * True if the browser supports VML.\n\t */\n  \tIS_VML: navigator.appName.toUpperCase() == 'MICROSOFT INTERNET EXPLORER',\n\n\t/**\n\t * Variable: IS_SVG\n\t *\n\t * True if the browser supports SVG.\n\t */\n  \tIS_SVG: navigator.appName.toUpperCase() != 'MICROSOFT INTERNET EXPLORER',\n\n\t/**\n\t * Variable: NO_FO\n\t *\n\t * True if foreignObject support is not available. This is the case for\n\t * Opera, older SVG-based browsers and all versions of IE.\n\t */\n  \tNO_FO: !document.createElementNS || document.createElementNS('http://www.w3.org/2000/svg',\n  \t\t'foreignObject') != '[object SVGForeignObjectElement]' || navigator.userAgent.indexOf('Opera/') >= 0,\n\n\t/**\n\t * Variable: IS_WIN\n\t *\n\t * True if the client is a Windows.\n\t */\n  \tIS_WIN: navigator.appVersion.indexOf('Win') > 0,\n\n\t/**\n\t * Variable: IS_MAC\n\t *\n\t * True if the client is a Mac.\n\t */\n  \tIS_MAC: navigator.appVersion.indexOf('Mac') > 0,\n\t\n\t/**\n\t * Variable: IS_CHROMEOS\n\t *\n\t * True if the client is a Chrome OS.\n\t */\n  \tIS_CHROMEOS: /\\bCrOS\\b/.test(navigator.appVersion),\n\n\t/**\n\t * Variable: IS_TOUCH\n\t * \n\t * True if this device supports touchstart/-move/-end events (Apple iOS,\n\t * Android, Chromebook and Chrome Browser on touch-enabled devices).\n\t */\n  \tIS_TOUCH: 'ontouchstart' in document.documentElement,\n\n\t/**\n\t * Variable: IS_POINTER\n\t * \n\t * True if this device supports Microsoft pointer events (always false on Macs).\n\t */\n  \tIS_POINTER: window.PointerEvent != null && !(navigator.appVersion.indexOf('Mac') > 0),\n\n\t/**\n\t * Variable: IS_LOCAL\n\t *\n\t * True if the documents location does not start with http:// or https://.\n\t */\n  \tIS_LOCAL: document.location.href.indexOf('http://') < 0 &&\n  \t\t\t  document.location.href.indexOf('https://') < 0,\n\n\t/**\n\t * Variable: defaultBundles\n\t * \n\t * Contains the base names of the default bundles if mxLoadResources is false.\n\t */\n  \tdefaultBundles: [],\n\n\t/**\n\t * Function: isBrowserSupported\n\t *\n\t * Returns true if the current browser is supported, that is, if\n\t * <mxClient.IS_VML> or <mxClient.IS_SVG> is true.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * if (!mxClient.isBrowserSupported())\n\t * {\n\t *   mxUtils.error('Browser is not supported!', 200, false);\n\t * }\n\t * (end)\n\t */\n\tisBrowserSupported: function()\n\t{\n\t\treturn mxClient.IS_VML || mxClient.IS_SVG;\n\t},\n\n\t/**\n\t * Function: link\n\t *\n\t * Adds a link node to the head of the document. Use this\n\t * to add a stylesheet to the page as follows:\n\t *\n\t * (code)\n\t * mxClient.link('stylesheet', filename);\n\t * (end)\n\t *\n\t * where filename is the (relative) URL of the stylesheet. The charset\n\t * is hardcoded to ISO-8859-1 and the type is text/css.\n\t * \n\t * Parameters:\n\t * \n\t * rel - String that represents the rel attribute of the link node.\n\t * href - String that represents the href attribute of the link node.\n\t * doc - Optional parent document of the link node.\n\t * id - unique id for the link element to check if it already exists\n\t */\n\tlink: function(rel, href, doc, id)\n\t{\n\t\tdoc = doc || document;\n\n\t\t// Workaround for Operation Aborted in IE6 if base tag is used in head\n\t\tif (mxClient.IS_IE6)\n\t\t{\n\t\t\tdoc.write('<link rel=\"' + rel + '\" href=\"' + href + '\" charset=\"UTF-8\" type=\"text/css\"/>');\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\tvar link = doc.createElement('link');\n\t\t\t\n\t\t\tlink.setAttribute('rel', rel);\n\t\t\tlink.setAttribute('href', href);\n\t\t\tlink.setAttribute('charset', 'UTF-8');\n\t\t\tlink.setAttribute('type', 'text/css');\n\t\t\t\n\t\t\tif (id)\n\t\t\t{\n\t\t\t\tlink.setAttribute('id', id);\n\t\t\t}\n\t\t\t\n\t\t\tvar head = doc.getElementsByTagName('head')[0];\n\t   \t\thead.appendChild(link);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: loadResources\n\t * \n\t * Helper method to load the default bundles if mxLoadResources is false.\n\t * \n\t * Parameters:\n\t * \n\t * fn - Function to call after all resources have been loaded.\n\t * lan - Optional string to pass to <mxResources.add>.\n\t */\n\tloadResources: function(fn, lan)\n\t{\n\t\tvar pending = mxClient.defaultBundles.length;\n\t\t\n\t\tfunction callback()\n\t\t{\n\t\t\tif (--pending == 0)\n\t\t\t{\n\t\t\t\tfn();\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < mxClient.defaultBundles.length; i++)\n\t\t{\n\t\t\tmxResources.add(mxClient.defaultBundles[i], lan, callback);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: include\n\t *\n\t * Dynamically adds a script node to the document header.\n\t * \n\t * In production environments, the includes are resolved in the mxClient.js\n\t * file to reduce the number of requests required for client startup. This\n\t * function should only be used in development environments, but not in\n\t * production systems.\n\t */\n\tinclude: function(src)\n\t{\n\t\tdocument.write('<script src=\"'+src+'\"></script>');\n\t}\n};\n\n/**\n * Variable: mxLoadResources\n * \n * Optional global config variable to toggle loading of the two resource files\n * in <mxGraph> and <mxEditor>. Default is true. NOTE: This is a global variable,\n * not a variable of mxClient. If this is false, you can use <mxClient.loadResources>\n * with its callback to load the default bundles asynchronously.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadResources = false;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxLoadResources) == 'undefined')\n{\n\tmxLoadResources = true;\n}\n\n/**\n * Variable: mxForceIncludes\n * \n * Optional global config variable to force loading the JavaScript files in\n * development mode. Default is undefined. NOTE: This is a global variable,\n * not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadResources = true;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxForceIncludes) == 'undefined')\n{\n\tmxForceIncludes = false;\n}\n\n/**\n * Variable: mxResourceExtension\n * \n * Optional global config variable to specify the extension of resource files.\n * Default is true. NOTE: This is a global variable, not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxResourceExtension = '.txt';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxResourceExtension) == 'undefined')\n{\n\tmxResourceExtension = '.txt';\n}\n\n/**\n * Variable: mxLoadStylesheets\n * \n * Optional global config variable to toggle loading of the CSS files when\n * the library is initialized. Default is true. NOTE: This is a global variable,\n * not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadStylesheets = false;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxLoadStylesheets) == 'undefined')\n{\n\tmxLoadStylesheets = true;\n}\n\n/**\n * Variable: basePath\n *\n * Basepath for all URLs in the core without trailing slash. Default is '.'.\n * Set mxBasePath prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxBasePath = '/path/to/core/directory';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n * \n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n */\nif (typeof(mxBasePath) != 'undefined' && mxBasePath.length > 0)\n{\n\t// Adds a trailing slash if required\n\tif (mxBasePath.substring(mxBasePath.length - 1) == '/')\n\t{\n\t\tmxBasePath = mxBasePath.substring(0, mxBasePath.length - 1);\n\t}\n\n\tmxClient.basePath = mxBasePath;\n}\nelse\n{\n\tmxClient.basePath = '.';\n}\n\n/**\n * Variable: imageBasePath\n *\n * Basepath for all images URLs in the core without trailing slash. Default is\n * <mxClient.basePath> + '/images'. Set mxImageBasePath prior to loading the\n * mxClient library as follows to override this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxImageBasePath = '/path/to/image/directory';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n * \n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n */\nif (typeof(mxImageBasePath) != 'undefined' && mxImageBasePath.length > 0)\n{\n\t// Adds a trailing slash if required\n\tif (mxImageBasePath.substring(mxImageBasePath.length - 1) == '/')\n\t{\n\t\tmxImageBasePath = mxImageBasePath.substring(0, mxImageBasePath.length - 1);\n\t}\n\n\tmxClient.imageBasePath = mxImageBasePath;\n}\nelse\n{\n\tmxClient.imageBasePath = mxClient.basePath + '/images';\t\n}\n\n/**\n * Variable: language\n *\n * Defines the language of the client, eg. en for english, de for german etc.\n * The special value 'none' will disable all built-in internationalization and\n * resource loading. See <mxResources.getSpecialBundle> for handling identifiers\n * with and without a dash.\n * \n * Set mxLanguage prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxLanguage = 'en';\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n * \n * If internationalization is disabled, then the following variables should be\n * overridden to reflect the current language of the system. These variables are\n * cleared when i18n is disabled.\n * <mxEditor.askZoomResource>, <mxEditor.lastSavedResource>,\n * <mxEditor.currentFileResource>, <mxEditor.propertiesResource>,\n * <mxEditor.tasksResource>, <mxEditor.helpResource>, <mxEditor.outlineResource>,\n * <mxElbowEdgeHandler.doubleClickOrientationResource>, <mxUtils.errorResource>,\n * <mxUtils.closeResource>, <mxGraphSelectionModel.doneResource>,\n * <mxGraphSelectionModel.updatingSelectionResource>, <mxGraphView.doneResource>,\n * <mxGraphView.updatingDocumentResource>, <mxCellRenderer.collapseExpandResource>,\n * <mxGraph.containsValidationErrorsResource> and\n * <mxGraph.alreadyConnectedResource>.\n */\nif (typeof(mxLanguage) != 'undefined' && mxLanguage != null)\n{\n\tmxClient.language = mxLanguage;\n}\nelse\n{\n\tmxClient.language = (mxClient.IS_IE) ? navigator.userLanguage : navigator.language;\n}\n\n/**\n * Variable: defaultLanguage\n * \n * Defines the default language which is used in the common resource files. Any\n * resources for this language will only load the common resource file, but not\n * the language-specific resource file. Default is 'en'.\n * \n * Set mxDefaultLanguage prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxDefaultLanguage = 'de';\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxDefaultLanguage) != 'undefined' && mxDefaultLanguage != null)\n{\n\tmxClient.defaultLanguage = mxDefaultLanguage;\n}\nelse\n{\n\tmxClient.defaultLanguage = 'en';\n}\n\n// Adds all required stylesheets and namespaces\nif (mxLoadStylesheets)\n{\n\tmxClient.link('stylesheet', mxClient.basePath + '/css/common.css');\n}\n\n/**\n * Variable: languages\n *\n * Defines the optional array of all supported language extensions. The default\n * language does not have to be part of this list. See\n * <mxResources.isLanguageSupported>.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxLanguages = ['de', 'it', 'fr'];\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n * \n * This is used to avoid unnecessary requests to language files, ie. if a 404\n * will be returned.\n */\nif (typeof(mxLanguages) != 'undefined' && mxLanguages != null)\n{\n\tmxClient.languages = mxLanguages;\n}\n\n// Adds required namespaces, stylesheets and memory handling for older IE browsers\nif (mxClient.IS_VML)\n{\n\tif (mxClient.IS_SVG)\n\t{\n\t\tmxClient.IS_VML = false;\n\t}\n\telse\n\t{\n\t\t// Enables support for IE8 standards mode. Note that this requires all attributes for VML\n\t\t// elements to be set using direct notation, ie. node.attr = value, not setAttribute.\n\t\tif (document.namespaces != null)\n\t\t{\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\tdocument.namespaces.add(mxClient.VML_PREFIX, 'urn:schemas-microsoft-com:vml', '#default#VML');\n\t\t\t\tdocument.namespaces.add(mxClient.OFFICE_PREFIX, 'urn:schemas-microsoft-com:office:office', '#default#VML');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdocument.namespaces.add(mxClient.VML_PREFIX, 'urn:schemas-microsoft-com:vml');\n\t\t\t\tdocument.namespaces.add(mxClient.OFFICE_PREFIX, 'urn:schemas-microsoft-com:office:office');\n\t\t\t}\n\t\t}\n\n\t\t// Workaround for limited number of stylesheets in IE (does not work in standards mode)\n\t\tif (mxClient.IS_QUIRKS && document.styleSheets.length >= 30)\n\t\t{\n\t\t\t(function()\n\t\t\t{\n\t\t\t\tvar node = document.createElement('style');\n\t\t\t\tnode.type = 'text/css';\n\t\t\t\tnode.styleSheet.cssText = mxClient.VML_PREFIX + '\\\\:*{behavior:url(#default#VML)}' +\n\t\t        \tmxClient.OFFICE_PREFIX + '\\\\:*{behavior:url(#default#VML)}';\n\t\t        document.getElementsByTagName('head')[0].appendChild(node);\n\t\t\t})();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.createStyleSheet().cssText = mxClient.VML_PREFIX + '\\\\:*{behavior:url(#default#VML)}' +\n\t\t    \tmxClient.OFFICE_PREFIX + '\\\\:*{behavior:url(#default#VML)}';\n\t\t}\n\t    \n\t    if (mxLoadStylesheets)\n\t    {\n\t    \tmxClient.link('stylesheet', mxClient.basePath + '/css/explorer.css');\n\t    }\n\t}\n}\n\n// PREPROCESSOR-REMOVE-START\n// If script is loaded via CommonJS, do not write <script> tags to the page\n// for dependencies. These are already included in the build.\nif (mxForceIncludes)\n{\n// PREPROCESSOR-REMOVE-END\n\tmxClient.include(mxClient.basePath+'/js/util/mxLog.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxObjectIdentity.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDictionary.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxResources.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPoint.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxRectangle.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEffects.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUtils.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxConstants.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEventObject.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxMouseEvent.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEventSource.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEvent.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxXmlRequest.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxClipboard.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxWindow.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxForm.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImage.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDivResizer.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDragSource.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxToolbar.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUndoableEdit.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUndoManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUrlConverter.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPanningManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPopupMenu.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAutoSaveManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAnimation.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxMorphing.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImageBundle.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImageExport.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAbstractCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxXmlCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxSvgCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxVmlCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxGuide.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxStencil.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxStencilRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxMarker.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxActor.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxCloud.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxRectangleShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxEllipse.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxDoubleEllipse.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxRhombus.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxPolyline.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxPolygon.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxArrow.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxArrowConnector.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxText.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxTriangle.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxHexagon.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxLine.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxImageShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxLabel.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxCylinder.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxConnector.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxSwimlane.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxGraphLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxStackLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxPartitionLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCompactTreeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxRadialTreeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxFastOrganicLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCircleLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxParallelEdgeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCompositeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxEdgeLabelLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphAbstractHierarchyCell.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyNode.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyEdge.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyModel.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxSwimlaneModel.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxHierarchicalLayoutStage.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxMedianHybridCrossingReduction.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxMinimumCycleRemover.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxCoordinateAssignment.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxSwimlaneOrdering.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/mxHierarchicalLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/mxSwimlaneLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxGraphModel.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxCell.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxGeometry.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxCellPath.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxPerimeter.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxPrintPreview.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxStylesheet.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellState.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraphSelectionModel.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellEditor.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellRenderer.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxEdgeStyle.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxStyleRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraphView.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraph.js');\n\tmxClient.include(mxClient.basePath+'/js/azdata/view/azDataGraph.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellOverlay.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxOutline.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxMultiplicity.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxLayoutManager.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxSwimlaneManager.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxTemporaryCellStates.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellStatePreview.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxConnectionConstraint.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxGraphHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxPanningHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxPopupMenuHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellMarker.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxSelectionCellsHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxConnectionHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxConstraintHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxRubberband.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxHandle.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxVertexHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxEdgeHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxElbowEdgeHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxEdgeSegmentHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxKeyHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxTooltipHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellTracker.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellHighlight.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultKeyHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultPopupMenu.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultToolbar.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxEditor.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCodecRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxObjectCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCellCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxModelCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxRootChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxChildChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxTerminalChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGenericChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGraphCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGraphViewCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxStylesheetCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultKeyHandlerCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultToolbarCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultPopupMenuCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxEditorCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/azdata/azdataQueryPlan.js');\n// PREPROCESSOR-REMOVE-START\n}\n// PREPROCESSOR-REMOVE-END\n\n__mxOutput.mxClient = typeof mxClient !== 'undefined' ? mxClient : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxLog =\n{\n\t/**\n\t * Class: mxLog\n\t * \n\t * A singleton class that implements a simple console.\n\t * \n\t * Variable: consoleName\n\t * \n\t * Specifies the name of the console window. Default is 'Console'.\n\t */\n\tconsoleName: 'Console',\n\t\n\t/**\n\t * Variable: TRACE\n\t * \n\t * Specified if the output for <enter> and <leave> should be visible in the\n\t * console. Default is false.\n\t */\n\tTRACE: false,\n\n\t/**\n\t * Variable: DEBUG\n\t * \n\t * Specifies if the output for <debug> should be visible in the console.\n\t * Default is true.\n\t */\n\tDEBUG: true,\n\n\t/**\n\t * Variable: WARN\n\t * \n\t * Specifies if the output for <warn> should be visible in the console.\n\t * Default is true.\n\t */\n\tWARN: true,\n\n\t/**\n\t * Variable: buffer\n\t * \n\t * Buffer for pre-initialized content.\n\t */\n\tbuffer: '',\n\t\n\t/**\n\t * Function: init\n\t *\n\t * Initializes the DOM node for the console. This requires document.body to\n\t * point to a non-null value. This is called from within <setVisible> if the\n\t * log has not yet been initialized.\n\t */\n\tinit: function()\n\t{\n\t\tif (mxLog.window == null && document.body != null)\n\t\t{\n\t\t\tvar title = mxLog.consoleName + ' - mxGraph ' + mxClient.VERSION;\n\n\t\t\t// Creates a table that maintains the layout\n\t\t\tvar table = document.createElement('table');\n\t\t\ttable.setAttribute('width', '100%');\n\t\t\ttable.setAttribute('height', '100%');\n\n\t\t\tvar tbody = document.createElement('tbody');\n\t\t\tvar tr = document.createElement('tr');\n\t\t\tvar td = document.createElement('td');\n\t\t\ttd.style.verticalAlign = 'top';\n\t\t\t\t\n\t\t\t// Adds the actual console as a textarea\n\t\t\tmxLog.textarea = document.createElement('textarea');\n\t\t\tmxLog.textarea.setAttribute('wrap', 'off');\n\t\t\tmxLog.textarea.setAttribute('readOnly', 'true');\n\t\t\tmxLog.textarea.style.height = '100%';\n\t\t\tmxLog.textarea.style.resize = 'none';\n\t\t\tmxLog.textarea.value = mxLog.buffer;\n\n\t\t\t// Workaround for wrong width in standards mode\n\t\t\tif (mxClient.IS_NS && document.compatMode != 'BackCompat')\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.width = '99%';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.width = '100%';\n\t\t\t}\n\t\t\t\n\t\t\ttd.appendChild(mxLog.textarea);\n\t\t\ttr.appendChild(td);\n\t\t\ttbody.appendChild(tr);\n\n\t\t\t// Creates the container div\n\t\t\ttr = document.createElement('tr');\n\t\t\tmxLog.td = document.createElement('td');\n\t\t\tmxLog.td.style.verticalAlign = 'top';\n\t\t\tmxLog.td.setAttribute('height', '30px');\n\t\t\t\n\t\t\ttr.appendChild(mxLog.td);\n\t\t\ttbody.appendChild(tr);\n\t\t\ttable.appendChild(tbody);\n\n\t\t\t// Adds various debugging buttons\n\t\t\tmxLog.addButton('Info', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.info();\n\t\t\t});\n\t\t\n\t\t\tmxLog.addButton('DOM', function (evt)\n\t\t\t{\n\t\t\t\tvar content = mxUtils.getInnerHtml(document.body);\n\t\t\t\tmxLog.debug(content);\n\t\t\t});\n\t\n\t\t\tmxLog.addButton('Trace', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.TRACE = !mxLog.TRACE;\n\t\t\t\t\n\t\t\t\tif (mxLog.TRACE)\n\t\t\t\t{\n\t\t\t\t\tmxLog.debug('Tracing enabled');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmxLog.debug('Tracing disabled');\n\t\t\t\t}\n\t\t\t});\t\n\n\t\t\tmxLog.addButton('Copy', function (evt)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tmxUtils.copy(mxLog.textarea.value);\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.alert(err);\n\t\t\t\t}\n\t\t\t});\t\t\t\n\n\t\t\tmxLog.addButton('Show', function (evt)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tmxUtils.popup(mxLog.textarea.value);\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.alert(err);\n\t\t\t\t}\n\t\t\t});\t\n\t\t\t\n\t\t\tmxLog.addButton('Clear', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.textarea.value = '';\n\t\t\t});\n\n\t\t\t// Cross-browser code to get window size\n\t\t\tvar h = 0;\n\t\t\tvar w = 0;\n\t\t\t\n\t\t\tif (typeof(window.innerWidth) === 'number')\n\t\t\t{\n\t\t\t\th = window.innerHeight;\n\t\t\t\tw = window.innerWidth;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\th = (document.documentElement.clientHeight || document.body.clientHeight);\n\t\t\t\tw = document.body.clientWidth;\n\t\t\t}\n\n\t\t\tmxLog.window = new mxWindow(title, table, Math.max(0, w - 320), Math.max(0, h - 210), 300, 160);\n\t\t\tmxLog.window.setMaximizable(true);\n\t\t\tmxLog.window.setScrollable(false);\n\t\t\tmxLog.window.setResizable(true);\n\t\t\tmxLog.window.setClosable(true);\n\t\t\tmxLog.window.destroyOnClose = false;\n\t\t\t\n\t\t\t// Workaround for ignored textarea height in various setups\n\t\t\tif (((mxClient.IS_NS || mxClient.IS_IE) && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_SF && document.compatMode != 'BackCompat') ||\n\t\t\t\tdocument.documentMode == 11)\n\t\t\t{\n\t\t\t\tvar elt = mxLog.window.getElement();\n\t\t\t\t\n\t\t\t\tvar resizeHandler = function(sender, evt)\n\t\t\t\t{\n\t\t\t\t\tmxLog.textarea.style.height = Math.max(0, elt.offsetHeight - 70) + 'px';\n\t\t\t\t}; \n\t\t\t\t\n\t\t\t\tmxLog.window.addListener(mxEvent.RESIZE_END, resizeHandler);\n\t\t\t\tmxLog.window.addListener(mxEvent.MAXIMIZE, resizeHandler);\n\t\t\t\tmxLog.window.addListener(mxEvent.NORMALIZE, resizeHandler);\n\n\t\t\t\tmxLog.textarea.style.height = '92px';\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: info\n\t * \n\t * Writes the current navigator information to the console.\n\t */\n\tinfo: function()\n\t{\n\t\tmxLog.writeln(mxUtils.toString(navigator));\n\t},\n\t\t\t\n\t/**\n\t * Function: addButton\n\t * \n\t * Adds a button to the console using the given label and function.\n\t */\n\taddButton: function(lab, funct)\n\t{\n\t\tvar button = document.createElement('button');\n\t\tmxUtils.write(button, lab);\n\t\tmxEvent.addListener(button, 'click', funct);\n\t\tmxLog.td.appendChild(button);\n\t},\n\t\t\t\t\n\t/**\n\t * Function: isVisible\n\t * \n\t * Returns true if the console is visible.\n\t */\n\tisVisible: function()\n\t{\n\t\tif (mxLog.window != null)\n\t\t{\n\t\t\treturn mxLog.window.isVisible();\n\t\t}\n\t\t\n\t\treturn false;\n\t},\n\t\n\n\t/**\n\t * Function: show\n\t * \n\t * Shows the console.\n\t */\n\tshow: function()\n\t{\n\t\tmxLog.setVisible(true);\n\t},\n\n\t/**\n\t * Function: setVisible\n\t * \n\t * Shows or hides the console.\n\t */\n\tsetVisible: function(visible)\n\t{\n\t\tif (mxLog.window == null)\n\t\t{\n\t\t\tmxLog.init();\n\t\t}\n\n\t\tif (mxLog.window != null)\n\t\t{\n\t\t\tmxLog.window.setVisible(visible);\n\t\t}\n\t},\n\n\t/**\n\t * Function: enter\n\t * \n\t * Writes the specified string to the console\n\t * if <TRACE> is true and returns the current \n\t * time in milliseconds.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * var t0 = mxLog.enter('Hello');\n\t * // Do something\n\t * mxLog.leave('World!', t0);\n\t * (end)\n\t */\n\tenter: function(string)\n\t{\n\t\tif (mxLog.TRACE)\n\t\t{\n\t\t\tmxLog.writeln('Entering '+string);\n\t\t\t\n\t\t\treturn new Date().getTime();\n\t\t}\n\t},\n\n\t/**\n\t * Function: leave\n\t * \n\t * Writes the specified string to the console\n\t * if <TRACE> is true and computes the difference\n\t * between the current time and t0 in milliseconds.\n\t * See <enter> for an example.\n\t */\n\tleave: function(string, t0)\n\t{\n\t\tif (mxLog.TRACE)\n\t\t{\n\t\t\tvar dt = (t0 != 0) ? ' ('+(new Date().getTime() - t0)+' ms)' : '';\n\t\t\tmxLog.writeln('Leaving '+string+dt);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: debug\n\t * \n\t * Adds all arguments to the console if <DEBUG> is enabled.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * mxLog.debug('Hello, World!');\n\t * (end)\n\t */\n\tdebug: function()\n\t{\n\t\tif (mxLog.DEBUG)\n\t\t{\n\t\t\tmxLog.writeln.apply(this, arguments);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: warn\n\t * \n\t * Adds all arguments to the console if <WARN> is enabled.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * mxLog.warn('Hello, World!');\n\t * (end)\n\t */\n\twarn: function()\n\t{\n\t\tif (mxLog.WARN)\n\t\t{\n\t\t\tmxLog.writeln.apply(this, arguments);\n\t\t}\n\t},\n\n\t/**\n\t * Function: write\n\t * \n\t * Adds the specified strings to the console.\n\t */\n\twrite: function()\n\t{\n\t\tvar string = '';\n\t\t\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t{\n\t\t\tstring += arguments[i];\n\t\t\t\n\t\t\tif (i < arguments.length - 1)\n\t\t\t{\n\t\t\t\tstring += ' ';\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (mxLog.textarea != null)\n\t\t{\n\t\t\tmxLog.textarea.value = mxLog.textarea.value + string;\n\n\t\t\t// Workaround for no update in Presto 2.5.22 (Opera 10.5)\n\t\t\tif (navigator.userAgent != null &&\n\t\t\t\tnavigator.userAgent.indexOf('Presto/2.5') >= 0)\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.visibility = 'hidden';\n\t\t\t\tmxLog.textarea.style.visibility = 'visible';\n\t\t\t}\n\t\t\t\n\t\t\tmxLog.textarea.scrollTop = mxLog.textarea.scrollHeight;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxLog.buffer += string;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: writeln\n\t * \n\t * Adds the specified strings to the console, appending a linefeed at the\n\t * end of each string.\n\t */\n\twriteln: function()\n\t{\n\t\tvar string = '';\n\t\t\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t{\n\t\t\tstring += arguments[i];\n\t\t\t\n\t\t\tif (i < arguments.length - 1)\n\t\t\t{\n\t\t\t\tstring += ' ';\n\t\t\t}\n\t\t}\n\n\t\tmxLog.write(string + '\\n');\n\t}\n\t\n};\n\n__mxOutput.mxLog = typeof mxLog !== 'undefined' ? mxLog : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxObjectIdentity =\n{\n\t/**\n\t * Class: mxObjectIdentity\n\t * \n\t * Identity for JavaScript objects and functions. This is implemented using\n\t * a simple incrementing counter which is stored in each object under\n\t * <FIELD_NAME>.\n\t * \n\t * The identity for an object does not change during its lifecycle.\n\t * \n\t * Variable: FIELD_NAME\n\t * \n\t * Name of the field to be used to store the object ID. Default is\n\t * <code>mxObjectId</code>.\n\t */\n\tFIELD_NAME: 'mxObjectId',\n\n\t/**\n\t * Variable: counter\n\t * \n\t * Current counter.\n\t */\n\tcounter: 0,\n\n\t/**\n\t * Function: get\n\t * \n\t * Returns the ID for the given object or function or null if no object\n\t * is specified.\n\t */\n\tget: function(obj)\n\t{\n\t\tif (obj != null)\n\t\t{\n\t\t\tif (obj[mxObjectIdentity.FIELD_NAME] == null)\n\t\t\t{\n\t\t\t\tif (typeof obj === 'object')\n\t\t\t\t{\n\t\t\t\t\tvar ctor = mxUtils.getFunctionName(obj.constructor);\n\t\t\t\t\tobj[mxObjectIdentity.FIELD_NAME] = ctor + '#' + mxObjectIdentity.counter++;\n\t\t\t\t}\n\t\t\t\telse if (typeof obj === 'function')\n\t\t\t\t{\n\t\t\t\t\tobj[mxObjectIdentity.FIELD_NAME] = 'Function#' + mxObjectIdentity.counter++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn obj[mxObjectIdentity.FIELD_NAME];\n\t\t}\n\t\t\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: clear\n\t * \n\t * Deletes the ID from the given object or function.\n\t */\n\tclear: function(obj)\n\t{\n\t\tif (typeof(obj) === 'object' || typeof obj === 'function')\n\t\t{\n\t\t\tdelete obj[mxObjectIdentity.FIELD_NAME];\n\t\t}\n\t}\n\n};\n\n__mxOutput.mxObjectIdentity = typeof mxObjectIdentity !== 'undefined' ? mxObjectIdentity : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDictionary\n *\n * A wrapper class for an associative array with object keys. Note: This\n * implementation uses <mxObjectIdentitiy> to turn object keys into strings.\n * \n * Constructor: mxEventSource\n *\n * Constructs a new dictionary which allows object to be used as keys.\n */\nfunction mxDictionary()\n{\n\tthis.clear();\n};\n\n/**\n * Function: map\n *\n * Stores the (key, value) pairs in this dictionary.\n */\nmxDictionary.prototype.map = null;\n\n/**\n * Function: clear\n *\n * Clears the dictionary.\n */\nmxDictionary.prototype.clear = function()\n{\n\tthis.map = {};\n};\n\n/**\n * Function: get\n *\n * Returns the value for the given key.\n */\nmxDictionary.prototype.get = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\t\n\treturn this.map[id];\n};\n\n/**\n * Function: put\n *\n * Stores the value under the given key and returns the previous\n * value for that key.\n */\nmxDictionary.prototype.put = function(key, value)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tthis.map[id] = value;\n\t\n\treturn previous;\n};\n\n/**\n * Function: remove\n *\n * Removes the value for the given key and returns the value that\n * has been removed.\n */\nmxDictionary.prototype.remove = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tdelete this.map[id];\n\t\n\treturn previous;\n};\n\n/**\n * Function: getKeys\n *\n * Returns all keys as an array.\n */\nmxDictionary.prototype.getKeys = function()\n{\n\tvar result = [];\n\t\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(key);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getValues\n *\n * Returns all values as an array.\n */\nmxDictionary.prototype.getValues = function()\n{\n\tvar result = [];\n\t\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(this.map[key]);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: visit\n *\n * Visits all entries in the dictionary using the given function with the\n * following signature: function(key, value) where key is a string and\n * value is an object.\n * \n * Parameters:\n * \n * visitor - A function that takes the key and value as arguments.\n */\nmxDictionary.prototype.visit = function(visitor)\n{\n\tfor (var key in this.map)\n\t{\n\t\tvisitor(key, this.map[key]);\n\t}\n};\n\n__mxOutput.mxDictionary = typeof mxDictionary !== 'undefined' ? mxDictionary : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\nvar mxResources =\n{\n\t/**\n\t * Class: mxResources\n\t * \n\t * Implements internationalization. You can provide any number of \n\t * resource files on the server using the following format for the \n\t * filename: name[-en].properties. The en stands for any lowercase \n\t * 2-character language shortcut (eg. de for german, fr for french).\n\t *\n\t * If the optional language extension is omitted, then the file is used as a \n\t * default resource which is loaded in all cases. If a properties file for a \n\t * specific language exists, then it is used to override the settings in the \n\t * default resource. All entries in the file are of the form key=value. The\n\t * values may then be accessed in code via <get>. Lines without \n\t * equal signs in the properties files are ignored.\n\t *\n\t * Resource files may either be added programmatically using\n\t * <add> or via a resource tag in the UI section of the \n\t * editor configuration file, eg:\n\t * \n\t * (code)\n\t * <mxEditor>\n\t *   <ui>\n\t *     <resource basename=\"examples/resources/mxWorkflow\"/>\n\t * (end)\n\t * \n\t * The above element will load examples/resources/mxWorkflow.properties as well\n\t * as the language specific file for the current language, if it exists.\n\t * \n\t * Values may contain placeholders of the form {1}...{n} where each placeholder\n\t * is replaced with the value of the corresponding array element in the params\n\t * argument passed to <mxResources.get>. The placeholder {1} maps to the first\n\t * element in the array (at index 0).\n\t * \n\t * See <mxClient.language> for more information on specifying the default\n\t * language or disabling all loading of resources.\n\t * \n\t * Lines that start with a # sign will be ignored.\n\t * \n\t * Special characters\n\t * \n\t * To use unicode characters, use the standard notation (eg. \\u8fd1) or %u as a\n\t * prefix (eg. %u20AC will display a Euro sign). For normal hex encoded strings,\n\t * use % as a prefix, eg. %F6 will display a \"o umlaut\" (&ouml;).\n\t * \n\t * See <resourcesEncoded> to disable this. If you disable this, make sure that\n\t * your files are UTF-8 encoded.\n\t * \n\t * Asynchronous loading\n\t * \n\t * By default, the core adds two resource files synchronously at load time.\n\t * To load these files asynchronously, set <mxLoadResources> to false\n\t * before loading mxClient.js and use <mxResources.loadResources> instead.\n\t * \n\t * Variable: resources\n\t * \n\t * Object that maps from keys to values.\n\t */\n\tresources: {},\n\n\t/**\n\t * Variable: extension\n\t * \n\t * Specifies the extension used for language files. Default is <mxResourceExtension>.\n\t */\n\textension: mxResourceExtension,\n\n\t/**\n\t * Variable: resourcesEncoded\n\t * \n\t * Specifies whether or not values in resource files are encoded with \\u or\n\t * percentage. Default is false.\n\t */\n\tresourcesEncoded: false,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t * \n\t * Specifies if the default file for a given basename should be loaded.\n\t * Default is true.\n\t */\n\tloadDefaultBundle: true,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t * \n\t * Specifies if the specific language file file for a given basename should\n\t * be loaded. Default is true.\n\t */\n\tloadSpecialBundle: true,\n\n\t/**\n\t * Function: isLanguageSupported\n\t * \n\t * Hook for subclassers to disable support for a given language. This\n\t * implementation returns true if lan is in <mxClient.languages>.\n\t * \n\t * Parameters:\n\t *\n\t * lan - The current language.\n\t */\n\tisLanguageSupported: function(lan)\n\t{\n\t\tif (mxClient.languages != null)\n\t\t{\n\t\t\treturn mxUtils.indexOf(mxClient.languages, lan) >= 0;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getDefaultBundle\n\t * \n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + <extension> or null if\n\t * <loadDefaultBundle> is false.\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The current language.\n\t */\n\tgetDefaultBundle: function(basename, lan)\n\t{\n\t\tif (mxResources.loadDefaultBundle || !mxResources.isLanguageSupported(lan))\n\t\t{\n\t\t\treturn basename + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: getSpecialBundle\n\t * \n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + '_' + lan + <extension> or null if\n\t * <loadSpecialBundle> is false or lan equals <mxClient.defaultLanguage>.\n\t * \n\t * If <mxResources.languages> is not null and <mxClient.language> contains\n\t * a dash, then this method checks if <isLanguageSupported> returns true\n\t * for the full language (including the dash). If that returns false the\n\t * first part of the language (up to the dash) will be tried as an extension.\n\t * \n\t * If <mxResources.language> is null then the first part of the language is\n\t * used to maintain backwards compatibility.\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t */\n\tgetSpecialBundle: function(basename, lan)\n\t{\n\t\tif (mxClient.languages == null || !this.isLanguageSupported(lan))\n\t\t{\n\t\t\tvar dash = lan.indexOf('-');\n\t\t\t\n\t\t\tif (dash > 0)\n\t\t\t{\n\t\t\t\tlan = lan.substring(0, dash);\n\t\t\t}\n\t\t}\n\n\t\tif (mxResources.loadSpecialBundle && mxResources.isLanguageSupported(lan) && lan != mxClient.defaultLanguage)\n\t\t{\n\t\t\treturn basename + '_' + lan + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: add\n\t * \n\t * Adds the default and current language properties file for the specified\n\t * basename. Existing keys are overridden as new files are added. If no\n\t * callback is used then the request is synchronous.\n\t *\n\t * Example:\n\t * \n\t * At application startup, additional resources may be \n\t * added using the following code:\n\t * \n\t * (code)\n\t * mxResources.add('resources/editor');\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t * callback - Optional callback for asynchronous loading.\n\t */\n\tadd: function(basename, lan, callback)\n\t{\n\t\tlan = (lan != null) ? lan : ((mxClient.language != null) ?\n\t\t\tmxClient.language.toLowerCase() : mxConstants.NONE);\n\t\t\n\t\tif (lan != mxConstants.NONE)\n\t\t{\n\t\t\tvar defaultBundle = mxResources.getDefaultBundle(basename, lan);\n\t\t\tvar specialBundle = mxResources.getSpecialBundle(basename, lan);\n\t\t\t\n\t\t\tvar loadSpecialBundle = function()\n\t\t\t{\n\t\t\t\tif (specialBundle != null)\n\t\t\t\t{\n\t\t\t\t\tif (callback)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxUtils.get(specialBundle, function(req)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t}, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t   \t\tvar req = mxUtils.load(specialBundle);\n\t\t\t\t\t   \t\t\n\t\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t\t   \t\t{\n\t\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t\t   \t\t}\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\tcatch (e)\n\t\t\t\t   \t\t{\n\t\t\t\t   \t\t\t// ignore\n\t\t\t\t\t   \t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (callback != null)\n\t\t\t\t{\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (defaultBundle != null)\n\t\t\t{\n\t\t\t\tif (callback)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.get(defaultBundle, function(req)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t}, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t   \t\tvar req = mxUtils.load(defaultBundle);\n\t\t\t\t   \t\t\n\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t   \t\t{\n\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\t\n\t\t\t\t   \t\tloadSpecialBundle();\n\t\t\t\t  \t}\n\t\t\t\t  \tcatch (e)\n\t\t\t\t  \t{\n\t\t\t\t  \t\t// ignore\n\t\t\t\t  \t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Overlays the language specific file (_lan-extension)\n\t\t\t\tloadSpecialBundle();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: parse\n\t * \n\t * Parses the key, value pairs in the specified\n\t * text and stores them as local resources.\n\t */\n\tparse: function(text)\n\t{\n\t\tif (text != null)\n\t\t{\n\t\t\tvar lines = text.split('\\n');\n\t\t\t\n\t\t\tfor (var i = 0; i < lines.length; i++)\n\t\t\t{\n\t\t\t\tif (lines[i].charAt(0) != '#')\n\t\t\t\t{\n\t\t\t\t\tvar index = lines[i].indexOf('=');\n\t\t\t\t\t\n\t\t\t\t\tif (index > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar key = lines[i].substring(0, index);\n\t\t\t\t\t\tvar idx = lines[i].length;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (lines[i].charCodeAt(idx - 1) == 13)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tidx--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar value = lines[i].substring(index + 1, idx);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.resourcesEncoded)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvalue = value.replace(/\\\\(?=u[a-fA-F\\d]{4})/g,\"%\");\n\t\t\t\t\t\t\tmxResources.resources[key] = unescape(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.resources[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: get\n\t * \n\t * Returns the value for the specified resource key.\n\t *\n\t * Example:\n\t * To read the value for 'welomeMessage', use the following:\n\t * (code)\n\t * var result = mxResources.get('welcomeMessage') || '';\n\t * (end)\n\t *\n\t * This would require an entry of the following form in\n\t * one of the English language resource files:\n\t * (code)\n\t * welcomeMessage=Welcome to mxGraph!\n\t * (end)\n\t * \n\t * The part behind the || is the string value to be used if the given\n\t * resource is not available.\n\t * \n\t * Parameters:\n\t * \n\t * key - String that represents the key of the resource to be returned.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t * defaultValue - Optional string that specifies the default return value.\n\t */\n\tget: function(key, params, defaultValue)\n\t{\n\t\tvar value = mxResources.resources[key];\n\t\t\n\t\t// Applies the default value if no resource was found\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\t\n\t\t// Replaces the placeholders with the values in the array\n\t\tif (value != null && params != null)\n\t\t{\n\t\t\tvalue = mxResources.replacePlaceholders(value, params);\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: replacePlaceholders\n\t * \n\t * Replaces the given placeholders with the given parameters.\n\t * \n\t * Parameters:\n\t * \n\t * value - String that contains the placeholders.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t */\n\treplacePlaceholders: function(value, params)\n\t{\n\t\tvar result = [];\n\t\tvar index = null;\n\t\t\n\t\tfor (var i = 0; i < value.length; i++)\n\t\t{\n\t\t\tvar c = value.charAt(i);\n\n\t\t\tif (c == '{')\n\t\t\t{\n\t\t\t\tindex = '';\n\t\t\t}\n\t\t\telse if (index != null && \tc == '}')\n\t\t\t{\n\t\t\t\tindex = parseInt(index)-1;\n\t\t\t\t\n\t\t\t\tif (index >= 0 && index < params.length)\n\t\t\t\t{\n\t\t\t\t\tresult.push(params[index]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tindex = null;\n\t\t\t}\n\t\t\telse if (index != null)\n\t\t\t{\n\t\t\t\tindex += c;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(c);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join('');\n\t},\n\n\t/**\n\t * Function: loadResources\n\t * \n\t * Loads all required resources asynchronously. Use this to load the graph and\n\t * editor resources if <mxLoadResources> is false.\n\t * \n\t * Parameters:\n\t * \n\t * callback - Callback function for asynchronous loading.\n\t */\n\tloadResources: function(callback)\n\t{\n\t\tmxResources.add(mxClient.basePath+'/resources/editor', null, function()\n\t\t{\n\t\t\tmxResources.add(mxClient.basePath+'/resources/graph', null, callback);\n\t\t});\n\t}\n\n};\n\n__mxOutput.mxResources = typeof mxResources !== 'undefined' ? mxResources : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPoint\n *\n * Implements a 2-dimensional vector with double precision coordinates.\n * \n * Constructor: mxPoint\n *\n * Constructs a new point for the optional x and y coordinates. If no\n * coordinates are given, then the default values for <x> and <y> are used.\n */\nfunction mxPoint(x, y)\n{\n\tthis.x = (x != null) ? x : 0;\n\tthis.y = (y != null) ? y : 0;\n};\n\n/**\n * Variable: x\n *\n * Holds the x-coordinate of the point. Default is 0.\n */\nmxPoint.prototype.x = null;\n\n/**\n * Variable: y\n *\n * Holds the y-coordinate of the point. Default is 0.\n */\nmxPoint.prototype.y = null;\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this point.\n */\nmxPoint.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxPoint.prototype.clone = function()\n{\n\t// Handles subclasses as well\n\treturn mxUtils.clone(this);\n};\n\n__mxOutput.mxPoint = typeof mxPoint !== 'undefined' ? mxPoint : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangle\n *\n * Extends <mxPoint> to implement a 2-dimensional rectangle with double\n * precision coordinates.\n * \n * Constructor: mxRectangle\n *\n * Constructs a new rectangle for the optional parameters. If no parameters\n * are given then the respective default values are used.\n */\nfunction mxRectangle(x, y, width, height)\n{\n\tmxPoint.call(this, x, y);\n\n\tthis.width = (width != null) ? width : 0;\n\tthis.height = (height != null) ? height : 0;\n};\n\n/**\n * Extends mxPoint.\n */\nmxRectangle.prototype = new mxPoint();\nmxRectangle.prototype.constructor = mxRectangle;\n\n/**\n * Variable: width\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxRectangle.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxRectangle.prototype.height = null;\n\n/**\n * Function: setRect\n * \n * Sets this rectangle to the specified values\n */\nmxRectangle.prototype.setRect = function(x, y, w, h)\n{\n    this.x = x;\n    this.y = y;\n    this.width = w;\n    this.height = h;\n};\n\n/**\n * Function: getCenterX\n * \n * Returns the x-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterX = function ()\n{\n\treturn this.x + this.width/2;\n};\n\n/**\n * Function: getCenterY\n * \n * Returns the y-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterY = function ()\n{\n\treturn this.y + this.height/2;\n};\n\n/**\n * Function: add\n *\n * Adds the given rectangle to this rectangle.\n */\nmxRectangle.prototype.add = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar minX = Math.min(this.x, rect.x);\n\t\tvar minY = Math.min(this.y, rect.y);\n\t\tvar maxX = Math.max(this.x + this.width, rect.x + rect.width);\n\t\tvar maxY = Math.max(this.y + this.height, rect.y + rect.height);\n\t\t\n\t\tthis.x = minX;\n\t\tthis.y = minY;\n\t\tthis.width = maxX - minX;\n\t\tthis.height = maxY - minY;\n\t}\n};\n\n/**\n * Function: intersect\n * \n * Changes this rectangle to where it overlaps with the given rectangle.\n */\nmxRectangle.prototype.intersect = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar r1 = this.x + this.width;\n\t\tvar r2 = rect.x + rect.width;\n\t\t\n\t\tvar b1 = this.y + this.height;\n\t\tvar b2 = rect.y + rect.height;\n\t\t\n\t\tthis.x = Math.max(this.x, rect.x);\n\t\tthis.y = Math.max(this.y, rect.y);\n\t\tthis.width = Math.min(r1, r2) - this.x;\n\t\tthis.height = Math.min(b1, b2) - this.y;\n\t}\n};\n\n/**\n * Function: grow\n *\n * Grows the rectangle by the given amount, that is, this method subtracts\n * the given amount from the x- and y-coordinates and adds twice the amount\n * to the width and height.\n */\nmxRectangle.prototype.grow = function(amount)\n{\n\tthis.x -= amount;\n\tthis.y -= amount;\n\tthis.width += 2 * amount;\n\tthis.height += 2 * amount;\n\t\n\treturn this;\n};\n\n/**\n * Function: getPoint\n * \n * Returns the top, left corner as a new <mxPoint>.\n */\nmxRectangle.prototype.getPoint = function()\n{\n\treturn new mxPoint(this.x, this.y);\n};\n\n/**\n * Function: rotate90\n * \n * Rotates this rectangle by 90 degree around its center point.\n */\nmxRectangle.prototype.rotate90 = function()\n{\n\tvar t = (this.width - this.height) / 2;\n\tthis.x += t;\n\tthis.y -= t;\n\tvar tmp = this.width;\n\tthis.width = this.height;\n\tthis.height = tmp;\n};\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this rectangle.\n */\nmxRectangle.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y &&\n\t\tobj.width == this.width && obj.height == this.height;\n};\n\n/**\n * Function: fromRectangle\n * \n * Returns a new <mxRectangle> which is a copy of the given rectangle.\n */\nmxRectangle.fromRectangle = function(rect)\n{\n\treturn new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n};\n\n__mxOutput.mxRectangle = typeof mxRectangle !== 'undefined' ? mxRectangle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEffects =\n{\n\n\t/**\n\t * Class: mxEffects\n\t * \n\t * Provides animation effects.\n\t */\n\n\t/**\n\t * Function: animateChanges\n\t * \n\t * Asynchronous animated move operation. See also: <mxMorphing>.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n\t * {\n\t *   var changes = evt.getProperty('edit').changes;\n\t * \n\t *   if (changes.length < 10)\n\t *   {\n\t *     mxEffects.animateChanges(graph, changes);\n\t *   }\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that received the changes.\n\t * changes - Array of changes to be animated.\n\t * done - Optional function argument that is invoked after the\n\t * last step of the animation.\n\t */\n\tanimateChanges: function(graph, changes, done)\n\t{\n\t\tvar maxStep = 10;\n\t\tvar step = 0;\n\n\t\tvar animate = function() \n\t\t{\n\t\t\tvar isRequired = false;\n\t\t\t\n\t\t\tfor (var i = 0; i < changes.length; i++)\n\t\t\t{\n\t\t\t\tvar change = changes[i];\n\t\t\t\t\n\t\t\t\tif (change instanceof mxGeometryChange ||\n\t\t\t\t\tchange instanceof mxTerminalChange ||\n\t\t\t\t\tchange instanceof mxValueChange ||\n\t\t\t\t\tchange instanceof mxChildChange ||\n\t\t\t\t\tchange instanceof mxStyleChange)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.getView().getState(change.cell || change.child, false);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tisRequired = true;\n\t\t\t\t\t\n\t\t\t\t\t\tif (change.constructor != mxGeometryChange || graph.model.isEdge(change.cell))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxUtils.setOpacity(state.shape.node, 100 * step / maxStep);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar scale = graph.getView().scale;\t\t\t\t\t\n\n\t\t\t\t\t\t\tvar dx = (change.geometry.x - change.previous.x) * scale;\n\t\t\t\t\t\t\tvar dy = (change.geometry.y - change.previous.y) * scale;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar sx = (change.geometry.width - change.previous.width) * scale;\n\t\t\t\t\t\t\tvar sy = (change.geometry.height - change.previous.height) * scale;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (step == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.x -= dx;\n\t\t\t\t\t\t\t\tstate.y -= dy;\n\t\t\t\t\t\t\t\tstate.width -= sx;\n\t\t\t\t\t\t\t\tstate.height -= sy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.x += dx / maxStep;\n\t\t\t\t\t\t\t\tstate.y += dy / maxStep;\n\t\t\t\t\t\t\t\tstate.width += sx / maxStep;\n\t\t\t\t\t\t\t\tstate.height += sy / maxStep;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tgraph.cellRenderer.redraw(state);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Fades all connected edges and children\n\t\t\t\t\t\t\tmxEffects.cascadeOpacity(graph, change.cell, 100 * step / maxStep);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (step < maxStep && isRequired)\n\t\t\t{\n\t\t\t\tstep++;\n\t\t\t\twindow.setTimeout(animate, delay);\n\t\t\t}\n\t\t\telse if (done != null)\n\t\t\t{\n\t\t\t\tdone();\n\t\t\t}\n\t\t};\n\t\t\n\t\tvar delay = 30;\n\t\tanimate();\n\t},\n    \n\t/**\n\t * Function: cascadeOpacity\n\t * \n\t * Sets the opacity on the given cell and its descendants.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells.\n\t * cell - <mxCell> to set the opacity for.\n\t * opacity - New value for the opacity in %.\n\t */\n    cascadeOpacity: function(graph, cell, opacity)\n\t{\n\t\t// Fades all children\n\t\tvar childCount = graph.model.getChildCount(cell);\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tvar child = graph.model.getChildAt(cell, i);\n\t\t\tvar childState = graph.getView().getState(child);\n\t\t\t\n\t\t\tif (childState != null)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(childState.shape.node, opacity);\n\t\t\t\tmxEffects.cascadeOpacity(graph, child, opacity);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Fades all connected edges\n\t\tvar edges = graph.model.getEdges(cell);\n\t\t\n\t\tif (edges != null)\n\t\t{\n\t\t\tfor (var i=0; i<edges.length; i++)\n\t\t\t{\n\t\t\t\tvar edgeState = graph.getView().getState(edges[i]);\n\t\t\t\t\n\t\t\t\tif (edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.setOpacity(edgeState.shape.node, opacity);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: fadeOut\n\t * \n\t * Asynchronous fade-out operation.\n\t */\n\tfadeOut: function(node, from, remove, step, delay, isEnabled)\n\t{\n\t\tstep = step || 40;\n\t\tdelay = delay || 30;\n\t\t\n\t\tvar opacity = from || 100;\n\t\t\n\t\tmxUtils.setOpacity(node, opacity);\n\t\t\n\t\tif (isEnabled || isEnabled == null)\n\t\t{\n\t\t\tvar f = function()\n\t\t\t{\n\t\t\t    opacity = Math.max(opacity-step, 0);\n\t\t\t\tmxUtils.setOpacity(node, opacity);\n\t\t\t\t\n\t\t\t\tif (opacity > 0)\n\t\t\t\t{\n\t\t\t\t\twindow.setTimeout(f, delay);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\t\t\n\t\t\t\t\tif (remove && node.parentNode)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\twindow.setTimeout(f, delay);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\n\t\t\tif (remove && node.parentNode)\n\t\t\t{\n\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t}\n\t\t}\n\t}\n\n};\n\n__mxOutput.mxEffects = typeof mxEffects !== 'undefined' ? mxEffects : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxUtils =\n{\n\t/**\n\t * Class: mxUtils\n\t * \n\t * A singleton class that provides cross-browser helper methods.\n\t * This is a global functionality. To access the functions in this\n\t * class, use the global classname appended by the functionname.\n\t * You may have to load chrome://global/content/contentAreaUtils.js\n\t * to disable certain security restrictions in Mozilla for the <open>,\n\t * <save>, <saveAs> and <copy> function.\n\t * \n\t * For example, the following code displays an error message:\n\t * \n\t * (code)\n\t * mxUtils.error('Browser is not supported!', 200, false);\n\t * (end)\n\t * \n\t * Variable: errorResource\n\t * \n\t * Specifies the resource key for the title of the error window. If the\n\t * resource for this key does not exist then the value is used as\n\t * the title. Default is 'error'.\n\t */\n\terrorResource: (mxClient.language != 'none') ? 'error' : '',\n\t\n\t/**\n\t * Variable: closeResource\n\t * \n\t * Specifies the resource key for the label of the close button. If the\n\t * resource for this key does not exist then the value is used as\n\t * the label. Default is 'close'.\n\t */\n\tcloseResource: (mxClient.language != 'none') ? 'close' : '',\n\n\t/**\n\t * Variable: errorImage\n\t * \n\t * Defines the image used for error dialogs.\n\t */\n\terrorImage: mxClient.imageBasePath + '/error.gif',\n\t\n\t/**\n\t * Function: removeCursors\n\t * \n\t * Removes the cursors from the style of the given DOM node and its\n\t * descendants.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node to remove the cursor style from.\n\t */\n\tremoveCursors: function(element)\n\t{\n\t\tif (element.style != null)\n\t\t{\n\t\t\telement.style.cursor = '';\n\t\t}\n\t\t\n\t\tvar children = element.childNodes;\n\t\t\n\t\tif (children != null)\n\t\t{\n\t        var childCount = children.length;\n\t        \n\t        for (var i = 0; i < childCount; i += 1)\n\t        {\n\t            mxUtils.removeCursors(children[i]);\n\t        }\n\t    }\n\t},\n\n\t/**\n\t * Function: getCurrentStyle\n\t * \n\t * Returns the current style of the specified element.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node whose current style should be returned.\n\t */\n\tgetCurrentStyle: function()\n\t{\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode < 9))\n\t\t{\n\t\t\treturn function(element)\n\t\t\t{\n\t\t\t\treturn (element != null) ? element.currentStyle : null;\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element)\n\t\t\t{\n\t\t\t\treturn (element != null) ?\n\t\t\t\t\twindow.getComputedStyle(element, '') :\n\t\t\t\t\tnull;\n\t\t\t};\n\t\t}\n\t}(),\n\t\n\t/**\n\t * Function: parseCssNumber\n\t * \n\t * Parses the given CSS numeric value adding handling for the values thin,\n\t * medium and thick (2, 4 and 6).\n\t */\n\tparseCssNumber: function(value)\n\t{\n\t\tif (value == 'thin')\n\t\t{\n\t\t\tvalue = '2';\n\t\t}\n\t\telse if (value == 'medium')\n\t\t{\n\t\t\tvalue = '4';\n\t\t}\n\t\telse if (value == 'thick')\n\t\t{\n\t\t\tvalue = '6';\n\t\t}\n\t\t\n\t\tvalue = parseFloat(value);\n\t\t\n\t\tif (isNaN(value))\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: setPrefixedStyle\n\t * \n\t * Adds the given style with the standard name and an optional vendor prefix for the current\n\t * browser.\n\t * \n\t * (code)\n\t * mxUtils.setPrefixedStyle(node.style, 'transformOrigin', '0% 0%');\n\t * (end)\n\t */\n\tsetPrefixedStyle: function()\n\t{\n\t\tvar prefix = null;\n\t\t\n\t\tif (mxClient.IS_OT)\n\t\t{\n\t\t\tprefix = 'O';\n\t\t}\n\t\telse if (mxClient.IS_SF || mxClient.IS_GC)\n\t\t{\n\t\t\tprefix = 'Webkit';\n\t\t}\n\t\telse if (mxClient.IS_MT)\n\t\t{\n\t\t\tprefix = 'Moz';\n\t\t}\n\t\telse if (mxClient.IS_IE && document.documentMode >= 9 && document.documentMode < 10)\n\t\t{\n\t\t\tprefix = 'ms';\n\t\t}\n\n\t\treturn function(style, name, value)\n\t\t{\n\t\t\tstyle[name] = value;\n\t\t\t\n\t\t\tif (prefix != null && name.length > 0)\n\t\t\t{\n\t\t\t\tname = prefix + name.substring(0, 1).toUpperCase() + name.substring(1);\n\t\t\t\tstyle[name] = value;\n\t\t\t}\n\t\t};\n\t}(),\n\t\n\t/**\n\t * Function: hasScrollbars\n\t * \n\t * Returns true if the overflow CSS property of the given node is either\n\t * scroll or auto.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose style should be checked for scrollbars.\n\t */\n\thasScrollbars: function(node)\n\t{\n\t\tvar style = mxUtils.getCurrentStyle(node);\n\n\t\treturn style != null && (style.overflow == 'scroll' || style.overflow == 'auto');\n\t},\n\t\n\t/**\n\t * Function: bind\n\t * \n\t * Returns a wrapper function that locks the execution scope of the given\n\t * function to the specified scope. Inside funct, the \"this\" keyword\n\t * becomes a reference to that scope.\n\t */\n\tbind: function(scope, funct)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\treturn funct.apply(scope, arguments);\n\t\t};\n\t},\n\t\n\t/**\n\t * Function: eval\n\t * \n\t * Evaluates the given expression using eval and returns the JavaScript\n\t * object that represents the expression result. Supports evaluation of\n\t * expressions that define functions and returns the function object for\n\t * these expressions.\n\t * \n\t * Parameters:\n\t * \n\t * expr - A string that represents a JavaScript expression.\n\t */\n\teval: function(expr)\n\t{\n\t\tvar result = null;\n\n\t\tif (expr.indexOf('function') >= 0)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\teval('var _mxJavaScriptExpression='+expr);\n\t\t\t\tresult = _mxJavaScriptExpression;\n\t\t\t\t// TODO: Use delete here?\n\t\t\t\t_mxJavaScriptExpression = null;\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tmxLog.warn(e.message + ' while evaluating ' + expr);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tresult = eval(expr);\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tmxLog.warn(e.message + ' while evaluating ' + expr);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: findNode\n\t * \n\t * Returns the first node where attr equals value.\n\t * This implementation does not use XPath.\n\t */\n\tfindNode: function(node, attr, value)\n\t{\n\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\tvar tmp = node.getAttribute(attr);\n\t\n\t\t\tif (tmp != null && tmp == value)\n\t\t\t{\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\t\n\t\tnode = node.firstChild;\n\t\t\n\t\twhile (node != null)\n\t\t{\n\t\t\tvar result = mxUtils.findNode(node, attr, value);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.nextSibling;\n\t\t}\n\t\t\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: getFunctionName\n\t * \n\t * Returns the name for the given function.\n\t * \n\t * Parameters:\n\t * \n\t * f - JavaScript object that represents a function.\n\t */\n\tgetFunctionName: function(f)\n\t{\n\t\tvar str = null;\n\n\t\tif (f != null)\n\t\t{\n\t\t\tif (f.name != null)\n\t\t\t{\n\t\t\t\tstr = f.name;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstr = mxUtils.trim(f.toString());\n\t\t\t\t\n\t\t\t\tif (/^function\\s/.test(str))\n\t\t\t\t{\n\t\t\t\t\tstr = mxUtils.ltrim(str.substring(9));\n\t\t\t\t\tvar idx2 = str.indexOf('(');\n\t\t\t\t\t\n\t\t\t\t\tif (idx2 > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tstr = str.substring(0, idx2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn str;\n\t},\n\n\t/**\n\t * Function: indexOf\n\t * \n\t * Returns the index of obj in array or -1 if the array does not contain\n\t * the given object.\n\t * \n\t * Parameters:\n\t * \n\t * array - Array to check for the given obj.\n\t * obj - Object to find in the given array.\n\t */\n\tindexOf: function(array, obj)\n\t{\n\t\tif (array != null && obj != null)\n\t\t{\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tif (array[i] == obj)\n\t\t\t\t{\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn -1;\n\t},\n\n\t/**\n\t * Function: forEach\n\t * \n\t * Calls the given function for each element of the given array and returns\n\t * the array.\n\t * \n\t * Parameters:\n\t * \n\t * array - Array that contains the elements.\n\t * fn - Function to be called for each object.\n\t */\n\tforEach: function(array, fn)\n\t{\n\t\tif (array != null && fn != null)\n\t\t{\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tfn(array[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn array;\n\t},\n\n\t/**\n\t * Function: remove\n\t * \n\t * Removes all occurrences of the given object in the given array or\n\t * object. If there are multiple occurrences of the object, be they\n\t * associative or as an array entry, all occurrences are removed from\n\t * the array or deleted from the object. By removing the object from\n\t * the array, all elements following the removed element are shifted\n\t * by one step towards the beginning of the array.\n\t * \n\t * The length of arrays is not modified inside this function.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to find in the given array.\n\t * array - Array to check for the given obj.\n\t */\n\tremove: function(obj, array)\n\t{\n\t\tvar result = null;\n\t\t\n\t\tif (typeof(array) == 'object')\n\t\t{\n\t\t\tvar index = mxUtils.indexOf(array, obj);\n\t\t\t\n\t\t\twhile (index >= 0)\n\t\t\t{\n\t\t\t\tarray.splice(index, 1);\n\t\t\t\tresult = obj;\n\t\t\t\tindex = mxUtils.indexOf(array, obj);\n\t\t\t}\n\t\t}\n\n\t\tfor (var key in array)\n\t\t{\n\t\t\tif (array[key] == obj)\n\t\t\t{\n\t\t\t\tdelete array[key];\n\t\t\t\tresult = obj;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: isNode\n\t * \n\t * Returns true if the given value is an XML node with the node name\n\t * and if the optional attribute has the specified value.\n\t * \n\t * This implementation assumes that the given value is a DOM node if the\n\t * nodeType property is numeric, that is, if isNaN returns false for\n\t * value.nodeType.\n\t * \n\t * Parameters:\n\t * \n\t * value - Object that should be examined as a node.\n\t * nodeName - String that specifies the node name.\n\t * attributeName - Optional attribute name to check.\n\t * attributeValue - Optional attribute value to check.\n\t */\n\t isNode: function(value, nodeName, attributeName, attributeValue)\n\t {\n\t \tif (value != null && !isNaN(value.nodeType) && (nodeName == null ||\n\t \t\tvalue.nodeName.toLowerCase() == nodeName.toLowerCase()))\n \t\t{\n \t\t\treturn attributeName == null ||\n \t\t\t\tvalue.getAttribute(attributeName) == attributeValue;\n \t\t}\n\t \t\n\t \treturn false;\n\t },\n\t\n\t/**\n\t * Function: isAncestorNode\n\t * \n\t * Returns true if the given ancestor is an ancestor of the\n\t * given DOM node in the DOM. This also returns true if the\n\t * child is the ancestor.\n\t * \n\t * Parameters:\n\t * \n\t * ancestor - DOM node that represents the ancestor.\n\t * child - DOM node that represents the child.\n\t */\n\t isAncestorNode: function(ancestor, child)\n\t {\n\t \tvar parent = child;\n\t \t\n\t \twhile (parent != null)\n\t \t{\n\t \t\tif (parent == ancestor)\n\t \t\t{\n\t \t\t\treturn true;\n\t \t\t}\n\n\t \t\tparent = parent.parentNode;\n\t \t}\n\t \t\n\t \treturn false;\n\t },\n\n\t/**\n\t * Function: getChildNodes\n\t * \n\t * Returns an array of child nodes that are of the given node type.\n\t * \n\t * Parameters:\n\t * \n\t * node - Parent DOM node to return the children from.\n\t * nodeType - Optional node type to return. Default is\n\t * <mxConstants.NODETYPE_ELEMENT>.\n\t */\n\tgetChildNodes: function(node, nodeType)\n\t{\n\t\tnodeType = nodeType || mxConstants.NODETYPE_ELEMENT;\n\t\t\n\t\tvar children = [];\n\t\tvar tmp = node.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == nodeType)\n\t\t\t{\n\t\t\t\tchildren.push(tmp);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t\t\n\t\treturn children;\n\t},\n\n\t/**\n\t * Function: importNode\n\t * \n\t * Cross browser implementation for document.importNode. Uses document.importNode\n\t * in all browsers but IE, where the node is cloned by creating a new node and\n\t * copying all attributes and children into it using importNode, recursively.\n\t * \n\t * Parameters:\n\t * \n\t * doc - Document to import the node into.\n\t * node - Node to be imported.\n\t * allChildren - If all children should be imported.\n\t */\n\timportNode: function(doc, node, allChildren)\n\t{\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode < 10))\n\t\t{\n\t\t\treturn mxUtils.importNodeImplementation(doc, node, allChildren);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn doc.importNode(node, allChildren);\n\t\t}\n\t},\n\n\t/**\n\t * Function: importNodeImplementation\n\t * \n\t * Full DOM API implementation for importNode without using importNode API call.\n\t * \n\t * Parameters:\n\t * \n\t * doc - Document to import the node into.\n\t * node - Node to be imported.\n\t * allChildren - If all children should be imported.\n\t */\n\timportNodeImplementation: function(doc, node, allChildren)\n\t{\n\t\tswitch (node.nodeType)\n\t\t{\n\t\t\tcase 1: /* element */\n\t\t\t{\n\t\t\t\tvar newNode = doc.createElement(node.nodeName);\n\t\t\t\t\n\t\t\t\tif (node.attributes && node.attributes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < node.attributes.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewNode.setAttribute(node.attributes[i].nodeName,\n\t\t\t\t\t\t\tnode.getAttribute(node.attributes[i].nodeName));\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (allChildren && node.childNodes && node.childNodes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < node.childNodes.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewNode.appendChild(mxUtils.importNodeImplementation(doc, node.childNodes[i], allChildren));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn newNode;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3: /* text */\n\t\t    case 4: /* cdata-section */\n\t\t    case 8: /* comment */\n\t\t    {\n\t\t    \treturn doc.createTextNode((node.nodeValue != null) ? node.nodeValue : node.value);\n\t\t    \tbreak;\n\t\t    }\n\t\t};\n\t},\n\n\t/**\n\t * Function: createXmlDocument\n\t * \n\t * Returns a new, empty XML document.\n\t */\n\tcreateXmlDocument: function()\n\t{\n\t\tvar doc = null;\n\t\t\n\t\tif (document.implementation && document.implementation.createDocument)\n\t\t{\n\t\t\tdoc = document.implementation.createDocument('', '', null);\n\t\t}\n\t\telse if (\"ActiveXObject\" in window)\n\t\t{\n\t\t\tdoc = mxUtils.createMsXmlDocument();\n\t \t}\n\t \t\n\t \treturn doc;\n\t},\n\n\t/**\n\t * Function: createMsXmlDocument\n\t * \n\t * Returns a new, empty Microsoft.XMLDOM document using ActiveXObject.\n\t */\n\tcreateMsXmlDocument: function()\n\t{\n\t\tvar doc = new ActiveXObject('Microsoft.XMLDOM');\n\t\tdoc.async = false;\n\n\t\t// Workaround for parsing errors with SVG DTD\n\t\tdoc.validateOnParse = false;\n\t\tdoc.resolveExternals = false;\n\t \t\n\t \treturn doc;\n\t},\n\n\t/**\n\t * Function: parseXml\n\t * \n\t * Parses the specified XML string into a new XML document and returns the\n\t * new document.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var doc = mxUtils.parseXml(\n\t *   '<mxGraphModel><root><MyDiagram id=\"0\"><mxCell/></MyDiagram>'+\n\t *   '<MyLayer id=\"1\"><mxCell parent=\"0\" /></MyLayer><MyObject id=\"2\">'+\n\t *   '<mxCell style=\"strokeColor=blue;fillColor=red\" parent=\"1\" vertex=\"1\">'+\n\t *   '<mxGeometry x=\"10\" y=\"10\" width=\"80\" height=\"30\" as=\"geometry\"/>'+\n\t *   '</mxCell></MyObject></root></mxGraphModel>');\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * xml - String that contains the XML data.\n\t */\n\tparseXml: function()\n\t{\n\t\tif (window.DOMParser)\n\t\t{\n\t\t\treturn function(xml)\n\t\t\t{\n\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\n\t\t\t\treturn parser.parseFromString(xml, 'text/xml');\n\t\t\t};\n\t\t}\n\t\telse // IE<=9\n\t\t{\n\t\t\treturn function(xml)\n\t\t\t{\n\t\t\t\tvar doc = mxUtils.createMsXmlDocument();\n\t\t\t\tdoc.loadXML(xml);\n\t\t\t\t\n\t\t\t\treturn doc;\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: clearSelection\n\t * \n\t * Clears the current selection in the page.\n\t */\n\tclearSelection: function()\n\t{\n\t\tif (document.selection)\n\t\t{\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tdocument.selection.empty();\n\t\t\t};\n\t\t}\n\t\telse if (window.getSelection)\n\t\t{\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tif (window.getSelection().empty)\n\t\t\t\t{\n\t\t\t\t\twindow.getSelection().empty();\n\t\t\t\t}\n\t\t\t\telse if (window.getSelection().removeAllRanges)\n\t\t\t\t{\n\t\t\t\t\twindow.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function() { };\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeWhitespace\n\t * \n\t * Removes the sibling text nodes for the given node that only consists\n\t * of tabs, newlines and spaces.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose siblings should be removed.\n\t * before - Optional boolean that specifies the direction of the traversal.\n\t */\n\tremoveWhitespace: function(node, before)\n\t{\n\t\tvar tmp = (before) ? node.previousSibling : node.nextSibling;\n\t\t\n\t\twhile (tmp != null && tmp.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t{\n\t\t\tvar next = (before) ? tmp.previousSibling : tmp.nextSibling;\n\t\t\tvar text = mxUtils.getTextContent(tmp);\n\t\t\t\n\t\t\tif (mxUtils.trim(text).length == 0)\n\t\t\t{\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = next;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: htmlEntities\n\t * \n\t * Replaces characters (less than, greater than, newlines and quotes) with\n\t * their HTML entities in the given string and returns the result.\n\t * \n\t * Parameters:\n\t * \n\t * s - String that contains the characters to be converted.\n\t * newline - If newlines should be replaced. Default is true.\n\t */\n\thtmlEntities: function(s, newline)\n\t{\n\t\ts = String(s || '');\n\t\t\n\t\ts = s.replace(/&/g,'&amp;'); // 38 26\n\t\ts = s.replace(/\"/g,'&quot;'); // 34 22\n\t\ts = s.replace(/\\'/g,'&#39;'); // 39 27\n\t\ts = s.replace(/</g,'&lt;'); // 60 3C\n\t\ts = s.replace(/>/g,'&gt;'); // 62 3E\n\n\t\tif (newline == null || newline)\n\t\t{\n\t\t\ts = s.replace(/\\n/g, '&#xa;');\n\t\t}\n\t\t\n\t\treturn s;\n\t},\n\t\n\t/**\n\t * Function: isVml\n\t * \n\t * Returns true if the given node is in the VML namespace.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose tag urn should be checked.\n\t */\n\tisVml: function(node)\n\t{\n\t\treturn node != null && node.tagUrn == 'urn:schemas-microsoft-com:vml';\n\t},\n\n\t/**\n\t * Function: getXml\n\t * \n\t * Returns the XML content of the specified node. For Internet Explorer,\n\t * all \\r\\n\\t[\\t]* are removed from the XML string and the remaining \\r\\n\n\t * are replaced by \\n. All \\n are then replaced with linefeed, or &#xa; if\n\t * no linefeed is defined.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the XML for.\n\t * linefeed - Optional string that linefeeds are converted into. Default is\n\t * &#xa;\n\t */\n\tgetXml: function(node, linefeed)\n\t{\n\t\tvar xml = '';\n\t\t\n\t\tif (mxClient.IS_IE || mxClient.IS_IE11)\n\t\t{\n\t\t\txml = mxUtils.getPrettyXml(node, '', '', '');\n\t\t}\n\t\telse if (window.XMLSerializer != null)\n\t\t{\n\t\t\tvar xmlSerializer = new XMLSerializer();\n\t\t\txml = xmlSerializer.serializeToString(node);     \n\t\t}\n\t\telse if (node.xml != null)\n\t\t{\n\t\t\txml = node.xml.replace(/\\r\\n\\t[\\t]*/g, '').\n\t\t\t\treplace(/>\\r\\n/g, '>').\n\t\t\t\treplace(/\\r\\n/g, '\\n');\n\t\t}\n\n\t\t// Replaces linefeeds with HTML Entities.\n\t\tlinefeed = linefeed || '&#xa;';\n\t\txml = xml.replace(/\\n/g, linefeed);\n\t\t  \n\t\treturn xml;\n\t},\n\t\n\t/**\n\t * Function: getPrettyXML\n\t * \n\t * Returns a pretty printed string that represents the XML tree for the\n\t * given node. This method should only be used to print XML for reading,\n\t * use <getXml> instead to obtain a string for processing.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the XML for.\n\t * tab - Optional string that specifies the indentation for one level.\n\t * Default is two spaces.\n\t * indent - Optional string that represents the current indentation.\n\t * Default is an empty string.\n\t * newline - Option string that represents a linefeed. Default is '\\n'.\n\t */\n\tgetPrettyXml: function(node, tab, indent, newline, ns)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (node != null)\n\t\t{\n\t\t\ttab = (tab != null) ? tab : '  ';\n\t\t\tindent = (indent != null) ? indent : '';\n\t\t\tnewline = (newline != null) ? newline : '\\n';\n\t\t\t\n\t\t\tif (node.namespaceURI != null && node.namespaceURI != ns)\n\t\t\t{\n\t\t\t\tns = node.namespaceURI;\n\t\t\t\t\n\t\t\t\tif (node.getAttribute('xmlns') == null)\n\t\t\t\t{\n\t\t\t\t\tnode.setAttribute('xmlns', node.namespaceURI);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (node.nodeType == mxConstants.NODETYPE_DOCUMENT)\n\t\t\t{\n\t\t\t\tresult.push(mxUtils.getPrettyXml(node.documentElement, tab, indent, newline, ns));\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_DOCUMENT_FRAGMENT)\n\t\t\t{\n\t\t\t\tvar tmp = node.firstChild;\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(mxUtils.getPrettyXml(tmp, tab, indent, newline, ns));\n\t\t\t\t\t\ttmp = tmp.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_COMMENT)\n\t\t\t{\n\t\t\t\tvar value = mxUtils.getTextContent(node);\n\t\t\t\t\n\t\t\t\tif (value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(indent + '<!--' + value + '-->' + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t\t{\n\t\t\t\tvar value = mxUtils.trim(mxUtils.getTextContent(node));\n\t\t\t\t\n\t\t\t\tif (value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(indent + mxUtils.htmlEntities(value, false) + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_CDATA)\n\t\t\t{\n\t\t\t\tvar value = mxUtils.getTextContent(node);\n\t\t\t\t\n\t\t\t\tif (value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(indent + '<![CDATA[' + value + ']]' + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(indent + '<' + node.nodeName);\n\t\t\t\t\n\t\t\t\t// Creates the string with the node attributes\n\t\t\t\t// and converts all HTML entities in the values\n\t\t\t\tvar attrs = node.attributes;\n\t\t\t\t\n\t\t\t\tif (attrs != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar val = mxUtils.htmlEntities(attrs[i].value);\n\t\t\t\t\t\tresult.push(' ' + attrs[i].nodeName + '=\"' + val + '\"');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Recursively creates the XML string for each child\n\t\t\t\t// node and appends it here with an indentation\n\t\t\t\tvar tmp = node.firstChild;\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tresult.push('>' + newline);\n\t\t\t\t\t\n\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(mxUtils.getPrettyXml(tmp, tab, indent + tab, newline, ns));\n\t\t\t\t\t\ttmp = tmp.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tresult.push(indent + '</'+ node.nodeName + '>' + newline);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult.push(' />' + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join('');\n\t},\n\t\n\t/**\n\t * Function: extractTextWithWhitespace\n\t * \n\t * Returns the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * elems - DOM nodes to return the text for.\n\t */\n\textractTextWithWhitespace: function(elems)\n\t{\n\t    // Known block elements for handling linefeeds (list is not complete)\n\t\tvar blocks = ['BLOCKQUOTE', 'DIV', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'OL', 'P', 'PRE', 'TABLE', 'UL'];\n\t\tvar ret = [];\n\t\t\n\t\tfunction doExtract(elts)\n\t\t{\n\t\t\t// Single break should be ignored\n\t\t\tif (elts.length == 1 && (elts[0].nodeName == 'BR' ||\n\t\t\t\telts[0].innerHTML == '\\n'))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t    for (var i = 0; i < elts.length; i++)\n\t\t    {\n\t\t        var elem = elts[i];\n\n\t\t\t\t// DIV with a br or linefeed forces a linefeed\n\t\t\t\tif (elem.nodeName == 'BR' || elem.innerHTML == '\\n' ||\n\t\t\t\t\t((elts.length == 1 || i == 0) && (elem.nodeName == 'DIV' &&\n\t\t\t\t\telem.innerHTML.toLowerCase() == '<br>')))\n\t\t    \t{\n\t    \t\t\tret.push('\\n');\n\t\t    \t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t        if (elem.nodeType === 3 || elem.nodeType === 4)\n\t\t\t        {\n\t\t\t        \tif (elem.nodeValue.length > 0)\n\t\t\t        \t{\n\t\t\t        \t\tret.push(elem.nodeValue);\n\t\t\t        \t}\n\t\t\t        }\n\t\t\t        else if (elem.nodeType !== 8 && elem.childNodes.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdoExtract(elem.childNodes);\n\t\t\t\t\t}\n\t\t\t        \n\t        \t\tif (i < elts.length - 1 && mxUtils.indexOf(blocks, elts[i + 1].nodeName) >= 0)\n\t        \t\t{\n\t        \t\t\tret.push('\\n');\t\t\n\t        \t\t}\n\t\t\t\t}\n\t\t    }\n\t\t};\n\t\t\n\t\tdoExtract(elems);\n\t    \n\t    return ret.join('');\n\t},\n\n\t/**\n\t * Function: replaceTrailingNewlines\n\t * \n\t * Replaces each trailing newline with the given pattern.\n\t */\n\treplaceTrailingNewlines: function(str, pattern)\n\t{\n\t\t// LATER: Check is this can be done with a regular expression\n\t\tvar postfix = '';\n\t\t\n\t\twhile (str.length > 0 && str.charAt(str.length - 1) == '\\n')\n\t\t{\n\t\t\tstr = str.substring(0, str.length - 1);\n\t\t\tpostfix += pattern;\n\t\t}\n\t\t\n\t\treturn str + postfix;\n\t},\n\n\t/**\n\t * Function: getTextContent\n\t * \n\t * Returns the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the text content for.\n\t */\n\tgetTextContent: function(node)\n\t{\n\t\t// Only IE10-\n\t\tif (mxClient.IS_IE && node.innerText !== undefined)\n\t\t{\n\t\t\treturn node.innerText;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn (node != null) ? node[(node.textContent === undefined) ? 'text' : 'textContent'] : '';\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setTextContent\n\t * \n\t * Sets the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to set the text content for.\n\t * text - String that represents the text content.\n\t */\n\tsetTextContent: function(node, text)\n\t{\n\t\tif (node.innerText !== undefined)\n\t\t{\n\t\t\tnode.innerText = text;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode[(node.textContent === undefined) ? 'text' : 'textContent'] = text;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: getInnerHtml\n\t * \n\t * Returns the inner HTML for the given node as a string or an empty string\n\t * if no node was specified. The inner HTML is the text representing all\n\t * children of the node, but not the node itself.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the inner HTML for.\n\t */\n\tgetInnerHtml: function()\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\treturn node.innerHTML;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tvar serializer = new XMLSerializer();\n\t\t\t\t\treturn serializer.serializeToString(node);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: getOuterHtml\n\t * \n\t * Returns the outer HTML for the given node as a string or an empty\n\t * string if no node was specified. The outer HTML is the text representing\n\t * all children of the node including the node itself.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the outer HTML for.\n\t */\n\tgetOuterHtml: function()\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tif (node.outerHTML != null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn node.outerHTML;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = [];\n\t\t\t\t\t\ttmp.push('<'+node.nodeName);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar attrs = node.attributes;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (attrs != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar value = attrs[i].value;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (value != null && value.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp.push(' ');\n\t\t\t\t\t\t\t\t\ttmp.push(attrs[i].nodeName);\n\t\t\t\t\t\t\t\t\ttmp.push('=\"');\n\t\t\t\t\t\t\t\t\ttmp.push(value);\n\t\t\t\t\t\t\t\t\ttmp.push('\"');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (node.innerHTML.length == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttmp.push('/>');\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttmp.push('>');\n\t\t\t\t\t\t\ttmp.push(node.innerHTML);\n\t\t\t\t\t\t\ttmp.push('</'+node.nodeName+'>');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn tmp.join('');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tvar serializer = new XMLSerializer();\n\t\t\t\t\treturn serializer.serializeToString(node);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}(),\n\t\n\t/**\n\t * Function: write\n\t * \n\t * Creates a text node for the given string and appends it to the given\n\t * parent. Returns the text node.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text to be added.\n\t */\n\twrite: function(parent, text)\n\t{\n\t\tvar doc = parent.ownerDocument;\n\t\tvar node = doc.createTextNode(text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(node);\n\t\t}\n\t\t\n\t\treturn node;\n\t},\n\t\n\t/**\n\t * Function: writeln\n\t * \n\t * Creates a text node for the given string and appends it to the given\n\t * parent with an additional linefeed. Returns the text node.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text to be added.\n\t */\n\twriteln: function(parent, text)\n\t{\n\t\tvar doc = parent.ownerDocument;\n\t\tvar node = doc.createTextNode(text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(node);\n\t\t\tparent.appendChild(document.createElement('br'));\n\t\t}\n\t\t\n\t\treturn node;\n\t},\n\t\n\t/**\n\t * Function: br\n\t * \n\t * Appends a linebreak to the given parent and returns the linebreak.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the linebreak to.\n\t */\n\tbr: function(parent, count)\n\t{\n\t\tcount = count || 1;\n\t\tvar br = null;\n\t\t\n\t\tfor (var i = 0; i < count; i++)\n\t\t{\n\t\t\tif (parent != null)\n\t\t\t{\n\t\t\t\tbr = parent.ownerDocument.createElement('br');\n\t\t\t\tparent.appendChild(br);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn br;\n\t},\n\t\t\n\t/**\n\t * Function: button\n\t * \n\t * Returns a new button with the given level and function as an onclick\n\t * event handler.\n\t * \n\t * (code)\n\t * document.body.appendChild(mxUtils.button('Test', function(evt)\n\t * {\n\t *   alert('Hello, World!');\n\t * }));\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * label - String that represents the label of the button.\n\t * funct - Function to be called if the button is pressed.\n\t * doc - Optional document to be used for creating the button. Default is the\n\t * current document.\n\t */\n\tbutton: function(label, funct, doc)\n\t{\n\t\tdoc = (doc != null) ? doc : document;\n\t\t\n\t\tvar button = doc.createElement('button');\n\t\tmxUtils.write(button, label);\n\n\t\tmxEvent.addListener(button, 'click', function(evt)\n\t\t{\n\t\t\tfunct(evt);\n\t\t});\n\t\t\n\t\treturn button;\n\t},\n\t\n\t/**\n\t * Function: para\n\t * \n\t * Appends a new paragraph with the given text to the specified parent and\n\t * returns the paragraph.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text for the new paragraph.\n\t */\n\tpara: function(parent, text)\n\t{\n\t\tvar p = document.createElement('p');\n\t\tmxUtils.write(p, text);\n\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(p);\n\t\t}\n\t\t\n\t\treturn p;\n\t},\n\n\t/**\n\t * Function: addTransparentBackgroundFilter\n\t * \n\t * Adds a transparent background to the filter of the given node. This\n\t * background can be used in IE8 standards mode (native IE8 only) to pass\n\t * events through the node.\n\t */\n\taddTransparentBackgroundFilter: function(node)\n\t{\n\t\tnode.style.filter += 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\\'' +\n\t\t\tmxClient.imageBasePath + '/transparent.gif\\', sizingMethod=\\'scale\\')';\n\t},\n\n\t/**\n\t * Function: linkAction\n\t * \n\t * Adds a hyperlink to the specified parent that invokes action on the\n\t * specified editor.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * editor - <mxEditor> that will execute the action.\n\t * action - String that defines the name of the action to be executed.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlinkAction: function(parent, text, editor, action, pad)\n\t{\n\t\treturn mxUtils.link(parent, text, function()\n\t\t{\n\t\t\teditor.execute(action);\n\t\t}, pad);\n\t},\n\n\t/**\n\t * Function: linkInvoke\n\t * \n\t * Adds a hyperlink to the specified parent that invokes the specified\n\t * function on the editor passing along the specified argument. The\n\t * function name is the name of a function of the editor instance,\n\t * not an action name.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * editor - <mxEditor> instance to execute the function on.\n\t * functName - String that represents the name of the function.\n\t * arg - Object that represents the argument to the function.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlinkInvoke: function(parent, text, editor, functName, arg, pad)\n\t{\n\t\treturn mxUtils.link(parent, text, function()\n\t\t{\n\t\t\teditor[functName](arg);\n\t\t}, pad);\n\t},\n\t\n\t/**\n\t * Function: link\n\t * \n\t * Adds a hyperlink to the specified parent and invokes the given function\n\t * when the link is clicked.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * funct - Function to execute when the link is clicked.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlink: function(parent, text, funct, pad)\n\t{\n\t\tvar a = document.createElement('span');\n\t\t\n\t\ta.style.color = 'blue';\n\t\ta.style.textDecoration = 'underline';\n\t\ta.style.cursor = 'pointer';\n\t\t\n\t\tif (pad != null)\n\t\t{\n\t\t\ta.style.paddingLeft = pad+'px';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(a, 'click', funct);\n\t\tmxUtils.write(a, text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(a);\n\t\t}\n\t\t\n\t\treturn a;\n\t},\n\n\t/**\n\t * Function: getDocumentSize\n\t * \n\t * Returns the client size for the current document as an <mxRectangle>.\n\t */\n\tgetDocumentSize: function()\n\t{\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\t\n\t\ttry\n\t\t{\n\t\t\treturn new mxRectangle(0, 0, b.clientWidth || d.clientWidth, Math.max(b.clientHeight || 0, d.clientHeight));\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\treturn new mxRectangle();\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: fit\n\t * \n\t * Makes sure the given node is inside the visible area of the window. This\n\t * is done by setting the left and top in the style. \n\t */\n\tfit: function(node)\n\t{\n\t\tvar ds = mxUtils.getDocumentSize();\n\t\tvar left = parseInt(node.offsetLeft);\n\t\tvar width = parseInt(node.offsetWidth);\n\t\t\t\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(node.ownerDocument);\n\t\tvar sl = offset.x;\n\t\tvar st = offset.y;\n\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\tvar right = (sl) + ds.width;\n\t\t\n\t\tif (left + width > right)\n\t\t{\n\t\t\tnode.style.left = Math.max(sl, right - width) + 'px';\n\t\t}\n\t\t\n\t\tvar top = parseInt(node.offsetTop);\n\t\tvar height = parseInt(node.offsetHeight);\n\t\t\n\t\tvar bottom = st + ds.height;\n\t\t\n\t\tif (top + height > bottom)\n\t\t{\n\t\t\tnode.style.top = Math.max(st, bottom - height) + 'px';\n\t\t}\n\t},\n\n\t/**\n\t * Function: load\n\t * \n\t * Loads the specified URL *synchronously* and returns the <mxXmlRequest>.\n\t * Throws an exception if the file cannot be loaded. See <mxUtils.get> for\n\t * an asynchronous implementation.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * try\n\t * {\n\t *   var req = mxUtils.load(filename);\n\t *   var root = req.getDocumentElement();\n\t *   // Process XML DOM...\n\t * }\n\t * catch (ex)\n\t * {\n\t *   mxUtils.alert('Cannot load '+filename+': '+ex);\n\t * }\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t */\n\tload: function(url)\n\t{\n\t\tvar req = new mxXmlRequest(url, null, 'GET', false);\n\t\treq.send();\n\t\t\n\t\treturn req;\n\t},\n\n\t/**\n\t * Function: get\n\t * \n\t * Loads the specified URL *asynchronously* and invokes the given functions\n\t * depending on the request status. Returns the <mxXmlRequest> in use. Both\n\t * functions take the <mxXmlRequest> as the only parameter. See\n\t * <mxUtils.load> for a synchronous implementation.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxUtils.get(url, function(req)\n\t * {\n\t *    var node = req.getDocumentElement();\n\t *    // Process XML DOM...\n\t * });\n\t * (end)\n\t * \n\t * So for example, to load a diagram into an existing graph model, the\n\t * following code is used.\n\t * \n\t * (code)\n\t * mxUtils.get(url, function(req)\n\t * {\n\t *   var node = req.getDocumentElement();\n\t *   var dec = new mxCodec(node.ownerDocument);\n\t *   dec.decode(node, graph.getModel());\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * onload - Optional function to execute for a successful response.\n\t * onerror - Optional function to execute on error.\n\t * binary - Optional boolean parameter that specifies if the request is\n\t * binary.\n\t * timeout - Optional timeout in ms before calling ontimeout.\n\t * ontimeout - Optional function to execute on timeout.\n\t * headers - Optional with headers, eg. {'Authorization': 'token xyz'}\n\t */\n\tget: function(url, onload, onerror, binary, timeout, ontimeout, headers)\n\t{\n\t\tvar req = new mxXmlRequest(url, null, 'GET');\n\t\tvar setRequestHeaders = req.setRequestHeaders;\n\t\t\n\t\tif (headers)\n\t\t{\n\t\t\treq.setRequestHeaders = function(request, params)\n\t\t\t{\n\t\t\t\tsetRequestHeaders.apply(this, arguments);\n\t\t\t\t\n\t\t\t\tfor (var key in headers)\n\t\t\t\t{\n\t\t\t\t\trequest.setRequestHeader(key, headers[key]);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\t\n\t\tif (binary != null)\n\t\t{\n\t\t\treq.setBinary(binary);\n\t\t}\n\t\t\n\t\treq.send(onload, onerror, timeout, ontimeout);\n\t\t\n\t\treturn req;\n\t},\n\n\t/**\n\t * Function: getAll\n\t * \n\t * Loads the URLs in the given array *asynchronously* and invokes the given function\n\t * if all requests returned with a valid 2xx status. The error handler is invoked\n\t * once on the first error or invalid response.\n\t *\n\t * Parameters:\n\t * \n\t * urls - Array of URLs to be loaded.\n\t * onload - Callback with array of <mxXmlRequests>.\n\t * onerror - Optional function to execute on error.\n\t */\n\tgetAll: function(urls, onload, onerror)\n\t{\n\t\tvar remain = urls.length;\n\t\tvar result = [];\n\t\tvar errors = 0;\n\t\tvar err = function()\n\t\t{\n\t\t\tif (errors == 0 && onerror != null)\n\t\t\t{\n\t\t\t\tonerror();\n\t\t\t}\n\n\t\t\terrors++;\n\t\t};\n\t\t\n\t\tfor (var i = 0; i < urls.length; i++)\n\t\t{\n\t\t\t(function(url, index)\n\t\t\t{\n\t\t\t\tmxUtils.get(url, function(req)\n\t\t\t\t{\n\t\t\t\t\tvar status = req.getStatus();\n\t\t\t\t\t\n\t\t\t\t\tif (status < 200 || status > 299)\n\t\t\t\t\t{\n\t\t\t\t\t\terr();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult[index] = req;\n\t\t\t\t\t\tremain--;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (remain == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonload(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, err);\n\t\t\t})(urls[i], i);\n\t\t}\n\t\t\n\t\tif (remain == 0)\n\t\t{\n\t\t\tonload(result);\t\t\t\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: post\n\t * \n\t * Posts the specified params to the given URL *asynchronously* and invokes\n\t * the given functions depending on the request status. Returns the\n\t * <mxXmlRequest> in use. Both functions take the <mxXmlRequest> as the\n\t * only parameter. Make sure to use encodeURIComponent for the parameter\n\t * values.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxUtils.post(url, 'key=value', function(req)\n\t * {\n\t * \tmxUtils.alert('Ready: '+req.isReady()+' Status: '+req.getStatus());\n\t *  // Process req.getDocumentElement() using DOM API if OK...\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * params - Parameters for the post request.\n\t * onload - Optional function to execute for a successful response.\n\t * onerror - Optional function to execute on error.\n\t */\n\tpost: function(url, params, onload, onerror)\n\t{\n\t\treturn new mxXmlRequest(url, params).send(onload, onerror);\n\t},\n\t\n\t/**\n\t * Function: submit\n\t * \n\t * Submits the given parameters to the specified URL using\n\t * <mxXmlRequest.simulate> and returns the <mxXmlRequest>.\n\t * Make sure to use encodeURIComponent for the parameter\n\t * values.\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * params - Parameters for the form.\n\t * doc - Document to create the form in.\n\t * target - Target to send the form result to.\n\t */\n\tsubmit: function(url, params, doc, target)\n\t{\n\t\treturn new mxXmlRequest(url, params).simulate(doc, target);\n\t},\n\t\n\t/**\n\t * Function: loadInto\n\t * \n\t * Loads the specified URL *asynchronously* into the specified document,\n\t * invoking onload after the document has been loaded. This implementation\n\t * does not use <mxXmlRequest>, but the document.load method.\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * doc - The document to load the URL into.\n\t * onload - Function to execute when the URL has been loaded.\n\t */\n\tloadInto: function(url, doc, onload)\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tdoc.onreadystatechange = function ()\n\t\t\t{\n\t\t\t\tif (doc.readyState == 4)\n\t\t\t\t{\n\t\t\t\t\tonload();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.addEventListener('load', onload, false);\n\t\t}\n\t\t\n\t\tdoc.load(url);\n\t},\n\t\n\t/**\n\t * Function: getValue\n\t * \n\t * Returns the value for the given key in the given associative array or\n\t * the given default value if the value is null.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null.\n\t */\n\tgetValue: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\t\t\t\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\t\n\t/**\n\t * Function: getNumber\n\t * \n\t * Returns the numeric value for the given key in the given associative\n\t * array or the given default value (or 0) if the value is null. The value\n\t * is converted to a numeric value using the Number function.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null. Default is 0.\n\t */\n\tgetNumber: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue || 0;\t\t\t\n\t\t}\n\t\t\n\t\treturn Number(value);\n\t},\n\t\n\t/**\n\t * Function: getColor\n\t * \n\t * Returns the color value for the given key in the given associative\n\t * array or the given default value if the value is null. If the value\n\t * is <mxConstants.NONE> then null is returned.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null. Default is null.\n\t */\n\tgetColor: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\telse if (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: clone\n\t * \n\t * Recursively clones the specified object ignoring all fieldnames in the\n\t * given array of transient fields. <mxObjectIdentity.FIELD_NAME> is always\n\t * ignored by this function.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to be cloned.\n\t * transients - Optional array of strings representing the fieldname to be\n\t * ignored.\n\t * shallow - Optional boolean argument to specify if a shallow clone should\n\t * be created, that is, one where all object references are not cloned or,\n\t * in other words, one where only atomic (strings, numbers) values are\n\t * cloned. Default is false.\n\t */\n\tclone: function(obj, transients, shallow)\n\t{\n\t\tshallow = (shallow != null) ? shallow : false;\n\t\tvar clone = null;\n\t\t\n\t\tif (obj != null && typeof(obj.constructor) == 'function')\n\t\t{\n\t\t\tclone = new obj.constructor();\n\t\t\t\n\t\t    for (var i in obj)\n\t\t    {\n\t\t    \tif (i != mxObjectIdentity.FIELD_NAME && (transients == null ||\n\t\t    \t\tmxUtils.indexOf(transients, i) < 0))\n\t\t    \t{\n\t\t\t    \tif (!shallow && typeof(obj[i]) == 'object')\n\t\t\t    \t{\n\t\t\t            clone[i] = mxUtils.clone(obj[i]);\n\t\t\t        }\n\t\t\t        else\n\t\t\t        {\n\t\t\t            clone[i] = obj[i];\n\t\t\t        }\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t\t\n\t    return clone;\n\t},\n\n\t/**\n\t * Function: equalPoints\n\t * \n\t * Compares all mxPoints in the given lists.\n\t * \n\t * Parameters:\n\t * \n\t * a - Array of <mxPoints> to be compared.\n\t * b - Array of <mxPoints> to be compared.\n\t */\n\tequalPoints: function(a, b)\n\t{\n\t\tif ((a == null && b != null) || (a != null && b == null) ||\n\t\t\t(a != null && b != null && a.length != b.length))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (a != null && b != null)\n\t\t{\n\t\t\tfor (var i = 0; i < a.length; i++)\n\t\t\t{\n\t\t\t\tif ((a[i] != null && b[i] == null) ||\n\t\t\t\t\t(a[i] == null && b[i] != null) ||\n\t\t\t\t\t(a[i] != null && b[i] != null &&\n\t\t\t\t\t(a[i].x != b[i].x || a[i].y != b[i].y)))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: equalEntries\n\t * \n\t * Returns true if all properties of the given objects are equal. Values\n\t * with NaN are equal to NaN and unequal to any other value.\n\t * \n\t * Parameters:\n\t * \n\t * a - First object to be compared.\n\t * b - Second object to be compared.\n\t */\n\tequalEntries: function(a, b)\n\t{\n\t\t// Counts keys in b to check if all values have been compared\n\t\tvar count = 0;\n\n\t\tif ((a == null && b != null) || (a != null && b == null) ||\n\t\t\t(a != null && b != null && a.length != b.length))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (a != null && b != null)\n\t\t{\n\t\t\tfor (var key in b)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tfor (var key in a)\n\t\t\t{\n\t\t\t\tcount--\n\t\t\t\t\n\t\t\t\tif ((!mxUtils.isNaN(a[key]) || !mxUtils.isNaN(b[key])) && a[key] != b[key])\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn count == 0;\n\t},\n\t\n\t/**\n\t * Function: removeDuplicates\n\t * \n\t * Removes all duplicates from the given array.\n\t */\n\tremoveDuplicates: function(arr)\n\t{\n\t\tvar dict = new mxDictionary();\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 0; i < arr.length; i++)\n\t\t{\n\t\t\tif (!dict.get(arr[i]))\n\t\t\t{\n\t\t\t\tresult.push(arr[i]);\n\t\t\t\tdict.put(arr[i], true);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: isNaN\n\t *\n\t * Returns true if the given value is of type number and isNaN returns true.\n\t */\n\tisNaN: function(value)\n\t{\n\t\treturn typeof(value) == 'number' && isNaN(value);\n\t},\n\t\n\t/**\n\t * Function: extend\n\t *\n\t * Assigns a copy of the superclass prototype to the subclass prototype.\n\t * Note that this does not call the constructor of the superclass at this\n\t * point, the superclass constructor should be called explicitely in the\n\t * subclass constructor. Below is an example.\n\t * \n\t * (code)\n\t * MyGraph = function(container, model, renderHint, stylesheet)\n\t * {\n\t *   mxGraph.call(this, container, model, renderHint, stylesheet);\n\t * }\n\t * \n\t * mxUtils.extend(MyGraph, mxGraph);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * ctor - Constructor of the subclass.\n\t * superCtor - Constructor of the superclass.\n\t */\n\textend: function(ctor, superCtor)\n\t{\n\t\tvar f = function() {};\n\t\tf.prototype = superCtor.prototype;\n\t\t\n\t\tctor.prototype = new f();\n\t\tctor.prototype.constructor = ctor;\n\t},\n\n\t/**\n\t * Function: toString\n\t * \n\t * Returns a textual representation of the specified object.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to return the string representation for.\n\t */\n\ttoString: function(obj)\n\t{\n\t    var output = '';\n\t    \n\t    for (var i in obj)\n\t    {\n\t    \ttry\n\t    \t{\n\t\t\t    if (obj[i] == null)\n\t\t\t    {\n\t\t            output += i + ' = [null]\\n';\n\t\t\t    }\n\t\t\t    else if (typeof(obj[i]) == 'function')\n\t\t\t    {\n\t\t            output += i + ' => [Function]\\n';\n\t\t        }\n\t\t        else if (typeof(obj[i]) == 'object')\n\t\t        {\n\t\t        \tvar ctor = mxUtils.getFunctionName(obj[i].constructor); \n\t\t            output += i + ' => [' + ctor + ']\\n';\n\t\t        }\n\t\t        else\n\t\t        {\n\t\t            output += i + ' = ' + obj[i] + '\\n';\n\t\t        }\n\t    \t}\n\t    \tcatch (e)\n\t    \t{\n\t    \t\toutput += i + '=' + e.message;\n\t    \t}\n\t    }\n\t    \n\t    return output;\n\t},\n\n\t/**\n\t * Function: toRadians\n\t * \n\t * Converts the given degree to radians.\n\t */\n\ttoRadians: function(deg)\n\t{\n\t\treturn Math.PI * deg / 180;\n\t},\n\n\t/**\n\t * Function: toDegree\n\t * \n\t * Converts the given radians to degree.\n\t */\n\ttoDegree: function(rad)\n\t{\n\t\treturn rad * 180 / Math.PI;\n\t},\n\t\n\t/**\n\t * Function: arcToCurves\n\t * \n\t * Converts the given arc to a series of curves.\n\t */\n\tarcToCurves: function(x0, y0, r1, r2, angle, largeArcFlag, sweepFlag, x, y)\n\t{\n\t\tx -= x0;\n\t\ty -= y0;\n\t\t\n        if (r1 === 0 || r2 === 0) \n        {\n        \treturn result;\n        }\n        \n        var fS = sweepFlag;\n        var psai = angle;\n        r1 = Math.abs(r1);\n        r2 = Math.abs(r2);\n        var ctx = -x / 2;\n        var cty = -y / 2;\n        var cpsi = Math.cos(psai * Math.PI / 180);\n        var spsi = Math.sin(psai * Math.PI / 180);\n        var rxd = cpsi * ctx + spsi * cty;\n        var ryd = -1 * spsi * ctx + cpsi * cty;\n        var rxdd = rxd * rxd;\n        var rydd = ryd * ryd;\n        var r1x = r1 * r1;\n        var r2y = r2 * r2;\n        var lamda = rxdd / r1x + rydd / r2y;\n        var sds;\n        \n        if (lamda > 1) \n        {\n        \tr1 = Math.sqrt(lamda) * r1;\n        \tr2 = Math.sqrt(lamda) * r2;\n        \tsds = 0;\n        }  \n        else\n        {\n        \tvar seif = 1;\n            \n        \tif (largeArcFlag === fS) \n        \t{\n        \t\tseif = -1;\n        \t}\n            \n        \tsds = seif * Math.sqrt((r1x * r2y - r1x * rydd - r2y * rxdd) / (r1x * rydd + r2y * rxdd));\n        }\n        \n        var txd = sds * r1 * ryd / r2;\n        var tyd = -1 * sds * r2 * rxd / r1;\n        var tx = cpsi * txd - spsi * tyd + x / 2;\n        var ty = spsi * txd + cpsi * tyd + y / 2;\n        var rad = Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1) - Math.atan2(0, 1);\n        var s1 = (rad >= 0) ? rad : 2 * Math.PI + rad;\n        rad = Math.atan2((-ryd - tyd) / r2, (-rxd - txd) / r1) - Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1);\n        var dr = (rad >= 0) ? rad : 2 * Math.PI + rad;\n        \n        if (fS == 0 && dr > 0) \n        {\n        \tdr -= 2 * Math.PI;\n        }\n        else if (fS != 0 && dr < 0) \n        {\n        \tdr += 2 * Math.PI;\n        }\n        \n        var sse = dr * 2 / Math.PI;\n        var seg = Math.ceil(sse < 0 ? -1 * sse : sse);\n        var segr = dr / seg;\n        var t = 8/3 * Math.sin(segr / 4) * Math.sin(segr / 4) / Math.sin(segr / 2);\n        var cpsir1 = cpsi * r1;\n        var cpsir2 = cpsi * r2;\n        var spsir1 = spsi * r1;\n        var spsir2 = spsi * r2;\n        var mc = Math.cos(s1);\n        var ms = Math.sin(s1);\n        var x2 = -t * (cpsir1 * ms + spsir2 * mc);\n        var y2 = -t * (spsir1 * ms - cpsir2 * mc);\n        var x3 = 0;\n        var y3 = 0;\n\n\t\tvar result = [];\n        \n        for (var n = 0; n < seg; ++n) \n        {\n            s1 += segr;\n            mc = Math.cos(s1);\n            ms = Math.sin(s1);\n            \n            x3 = cpsir1 * mc - spsir2 * ms + tx;\n            y3 = spsir1 * mc + cpsir2 * ms + ty;\n            var dx = -t * (cpsir1 * ms + spsir2 * mc);\n            var dy = -t * (spsir1 * ms - cpsir2 * mc);\n            \n            // CurveTo updates x0, y0 so need to restore it\n            var index = n * 6;\n            result[index] = Number(x2 + x0);\n            result[index + 1] = Number(y2 + y0);\n            result[index + 2] = Number(x3 - dx + x0);\n            result[index + 3] = Number(y3 - dy + y0);\n            result[index + 4] = Number(x3 + x0);\n            result[index + 5] = Number(y3 + y0);\n            \n\t\t\tx2 = x3 + dx;\n            y2 = y3 + dy;\n        }\n        \n        return result;\n\t},\n\n\t/**\n\t * Function: getBoundingBox\n\t * \n\t * Returns the bounding box for the rotated rectangle.\n\t * \n\t * Parameters:\n\t * \n\t * rect - <mxRectangle> to be rotated.\n\t * angle - Number that represents the angle (in degrees).\n\t * cx - Optional <mxPoint> that represents the rotation center. If no\n\t * rotation center is given then the center of rect is used.\n\t */\n\tgetBoundingBox: function(rect, rotation, cx)\n\t{\n        var result = null;\n\n        if (rect != null && rotation != null && rotation != 0)\n        {\n            var rad = mxUtils.toRadians(rotation);\n            var cos = Math.cos(rad);\n            var sin = Math.sin(rad);\n\n            cx = (cx != null) ? cx : new mxPoint(rect.x + rect.width / 2, rect.y + rect.height / 2);\n\n            var p1 = new mxPoint(rect.x, rect.y);\n            var p2 = new mxPoint(rect.x + rect.width, rect.y);\n            var p3 = new mxPoint(p2.x, rect.y + rect.height);\n            var p4 = new mxPoint(rect.x, p3.y);\n\n            p1 = mxUtils.getRotatedPoint(p1, cos, sin, cx);\n            p2 = mxUtils.getRotatedPoint(p2, cos, sin, cx);\n            p3 = mxUtils.getRotatedPoint(p3, cos, sin, cx);\n            p4 = mxUtils.getRotatedPoint(p4, cos, sin, cx);\n\n            result = new mxRectangle(p1.x, p1.y, 0, 0);\n            result.add(new mxRectangle(p2.x, p2.y, 0, 0));\n            result.add(new mxRectangle(p3.x, p3.y, 0, 0));\n            result.add(new mxRectangle(p4.x, p4.y, 0, 0));\n        }\n\n        return result;\n\t},\n\n\t/**\n\t * Function: getRotatedPoint\n\t * \n\t * Rotates the given point by the given cos and sin.\n\t */\n\tgetRotatedPoint: function(pt, cos, sin, c)\n\t{\n\t\tc = (c != null) ? c : new mxPoint();\n\t\tvar x = pt.x - c.x;\n\t\tvar y = pt.y - c.y;\n\n\t\tvar x1 = x * cos - y * sin;\n\t\tvar y1 = y * cos + x * sin;\n\n\t\treturn new mxPoint(x1 + c.x, y1 + c.y);\n\t},\n\t\n\t/**\n\t * Returns an integer mask of the port constraints of the given map\n\t * @param dict the style map to determine the port constraints for\n\t * @param defaultValue Default value to return if the key is undefined.\n\t * @return the mask of port constraint directions\n\t * \n\t * Parameters:\n\t * \n\t * terminal - <mxCelState> that represents the terminal.\n\t * edge - <mxCellState> that represents the edge.\n\t * source - Boolean that specifies if the terminal is the source terminal.\n\t * defaultValue - Default value to be returned.\n\t */\n\tgetPortConstraints: function(terminal, edge, source, defaultValue)\n\t{\n\t\tvar value = mxUtils.getValue(terminal.style, mxConstants.STYLE_PORT_CONSTRAINT,\n\t\t\tmxUtils.getValue(edge.style, (source) ? mxConstants.STYLE_SOURCE_PORT_CONSTRAINT :\n\t\t\t\tmxConstants.STYLE_TARGET_PORT_CONSTRAINT, null));\n\t\t\n\t\tif (value == null)\n\t\t{\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar directions = value.toString();\n\t\t\tvar returnValue = mxConstants.DIRECTION_MASK_NONE;\n\t\t\tvar constraintRotationEnabled = mxUtils.getValue(terminal.style, mxConstants.STYLE_PORT_CONSTRAINT_ROTATION, 0);\n\t\t\tvar rotation = 0;\n\t\t\t\n\t\t\tif (constraintRotationEnabled == 1)\n\t\t\t{\n\t\t\t\trotation = mxUtils.getValue(terminal.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t}\n\t\t\t\n\t\t\tvar quad = 0;\n\n\t\t\tif (rotation > 45)\n\t\t\t{\n\t\t\t\tquad = 1;\n\t\t\t\t\n\t\t\t\tif (rotation >= 135)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (rotation < -45)\n\t\t\t{\n\t\t\t\tquad = 3;\n\t\t\t\t\n\t\t\t\tif (rotation <= -135)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_NORTH) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_WEST) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_SOUTH) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_EAST) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn returnValue;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: reversePortConstraints\n\t * \n\t * Reverse the port constraint bitmask. For example, north | east\n\t * becomes south | west\n\t */\n\treversePortConstraints: function(constraint)\n\t{\n\t\tvar result = 0;\n\t\t\n\t\tresult = (constraint & mxConstants.DIRECTION_MASK_WEST) << 3;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_NORTH) << 1;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_SOUTH) >> 1;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_EAST) >> 3;\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: findNearestSegment\n\t * \n\t * Finds the index of the nearest segment on the given cell state for\n\t * the specified coordinate pair.\n\t */\n\tfindNearestSegment: function(state, x, y)\n\t{\n\t\tvar index = -1;\n\t\t\n\t\tif (state.absolutePoints.length > 0)\n\t\t{\n\t\t\tvar last = state.absolutePoints[0];\n\t\t\tvar min = null;\n\t\t\t\n\t\t\tfor (var i = 1; i < state.absolutePoints.length; i++)\n\t\t\t{\n\t\t\t\tvar current = state.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(last.x, last.y,\n\t\t\t\t\tcurrent.x, current.y, x, y);\n\t\t\t\t\n\t\t\t\tif (min == null || dist < min)\n\t\t\t\t{\n\t\t\t\t\tmin = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t}\n\n\t\t\t\tlast = current;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn index;\n\t},\n\n\t/**\n\t * Function: getDirectedBounds\n\t * \n\t * Adds the given margins to the given rectangle and rotates and flips the\n\t * rectangle according to the respective styles in style.\n\t */\n\tgetDirectedBounds: function (rect, m, style, flipH, flipV)\n\t{\n\t\tvar d = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\t\tflipH = (flipH != null) ? flipH : mxUtils.getValue(style, mxConstants.STYLE_FLIPH, false);\n\t\tflipV = (flipV != null) ? flipV : mxUtils.getValue(style, mxConstants.STYLE_FLIPV, false);\n\n\t\tm.x = Math.round(Math.max(0, Math.min(rect.width, m.x)));\n\t\tm.y = Math.round(Math.max(0, Math.min(rect.height, m.y)));\n\t\tm.width = Math.round(Math.max(0, Math.min(rect.width, m.width)));\n\t\tm.height = Math.round(Math.max(0, Math.min(rect.height, m.height)));\n\t\t\n\t\tif ((flipV && (d == mxConstants.DIRECTION_SOUTH || d == mxConstants.DIRECTION_NORTH)) ||\n\t\t\t(flipH && (d == mxConstants.DIRECTION_EAST || d == mxConstants.DIRECTION_WEST)))\n\t\t{\n\t\t\tvar tmp = m.x;\n\t\t\tm.x = m.width;\n\t\t\tm.width = tmp;\n\t\t}\n\t\t\t\n\t\tif ((flipH && (d == mxConstants.DIRECTION_SOUTH || d == mxConstants.DIRECTION_NORTH)) ||\n\t\t\t(flipV && (d == mxConstants.DIRECTION_EAST || d == mxConstants.DIRECTION_WEST)))\n\t\t{\n\t\t\tvar tmp = m.y;\n\t\t\tm.y = m.height;\n\t\t\tm.height = tmp;\n\t\t}\n\t\t\n\t\tvar m2 = mxRectangle.fromRectangle(m);\n\t\t\n\t\tif (d == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tm2.y = m.x;\n\t\t\tm2.x = m.height;\n\t\t\tm2.width = m.y;\n\t\t\tm2.height = m.width;\n\t\t}\n\t\telse if (d == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tm2.y = m.height;\n\t\t\tm2.x = m.width;\n\t\t\tm2.width = m.x;\n\t\t\tm2.height = m.y;\n\t\t}\n\t\telse if (d == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tm2.y = m.width;\n\t\t\tm2.x = m.y;\n\t\t\tm2.width = m.height;\n\t\t\tm2.height = m.x;\n\t\t}\n\t\t\n\t\treturn new mxRectangle(rect.x + m2.x, rect.y + m2.y, rect.width - m2.width - m2.x, rect.height - m2.height - m2.y);\n\t},\n\n\t/**\n\t * Function: getPerimeterPoint\n\t * \n\t * Returns the intersection between the polygon defined by the array of\n\t * points and the line between center and point.\n\t */\n\tgetPerimeterPoint: function (pts, center, point)\n\t{\n\t\tvar min = null;\n\t\t\n\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t{\n\t\t\tvar pt = mxUtils.intersection(pts[i].x, pts[i].y, pts[i + 1].x, pts[i + 1].y,\n\t\t\t\tcenter.x, center.y, point.x, point.y);\n\t\t\t\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar dx = point.x - pt.x;\n\t\t\t\tvar dy = point.y - pt.y;\n\t\t\t\tvar ip = {p: pt, distSq: dy * dy + dx * dx};\n\t\t\t\t\n\t\t\t\tif (ip != null && (min == null || min.distSq > ip.distSq))\n\t\t\t\t{\n\t\t\t\t\tmin = ip;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (min != null) ? min.p : null;\n\t},\n\n\t/**\n\t * Function: rectangleIntersectsSegment\n\t * \n\t * Returns true if the given rectangle intersects the given segment.\n\t * \n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the rectangle.\n\t * p1 - <mxPoint> that represents the first point of the segment.\n\t * p2 - <mxPoint> that represents the second point of the segment.\n\t */\n\trectangleIntersectsSegment: function(bounds, p1, p2)\n\t{\n\t\tvar top = bounds.y;\n\t\tvar left = bounds.x;\n\t\tvar bottom = top + bounds.height;\n\t\tvar right = left + bounds.width;\n\t\t\t\n\t\t// Find min and max X for the segment\n\t\tvar minX = p1.x;\n\t\tvar maxX = p2.x;\n\t\t\n\t\tif (p1.x > p2.x)\n\t\t{\n\t\t  minX = p2.x;\n\t\t  maxX = p1.x;\n\t\t}\n\t\t\n\t\t// Find the intersection of the segment's and rectangle's x-projections\n\t\tif (maxX > right)\n\t\t{\n\t\t  maxX = right;\n\t\t}\n\t\t\n\t\tif (minX < left)\n\t\t{\n\t\t  minX = left;\n\t\t}\n\t\t\n\t\tif (minX > maxX) // If their projections do not intersect return false\n\t\t{\n\t\t  return false;\n\t\t}\n\t\t\n\t\t// Find corresponding min and max Y for min and max X we found before\n\t\tvar minY = p1.y;\n\t\tvar maxY = p2.y;\n\t\tvar dx = p2.x - p1.x;\n\t\t\n\t\tif (Math.abs(dx) > 0.0000001)\n\t\t{\n\t\t  var a = (p2.y - p1.y) / dx;\n\t\t  var b = p1.y - a * p1.x;\n\t\t  minY = a * minX + b;\n\t\t  maxY = a * maxX + b;\n\t\t}\n\t\t\n\t\tif (minY > maxY)\n\t\t{\n\t\t  var tmp = maxY;\n\t\t  maxY = minY;\n\t\t  minY = tmp;\n\t\t}\n\t\t\n\t\t// Find the intersection of the segment's and rectangle's y-projections\n\t\tif (maxY > bottom)\n\t\t{\n\t\t  maxY = bottom;\n\t\t}\n\t\t\n\t\tif (minY < top)\n\t\t{\n\t\t  minY = top;\n\t\t}\n\t\t\n\t\tif (minY > maxY) // If Y-projections do not intersect return false\n\t\t{\n\t\t  return false;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\t\n\t/**\n\t * Function: contains\n\t * \n\t * Returns true if the specified point (x, y) is contained in the given rectangle.\n\t * \n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the area.\n\t * x - X-coordinate of the point.\n\t * y - Y-coordinate of the point.\n\t */\n\tcontains: function(bounds, x, y)\n\t{\n\t\treturn (bounds.x <= x && bounds.x + bounds.width >= x &&\n\t\t\t\tbounds.y <= y && bounds.y + bounds.height >= y);\n\t},\n\n\t/**\n\t * Function: intersects\n\t * \n\t * Returns true if the two rectangles intersect.\n\t * \n\t * Parameters:\n\t * \n\t * a - <mxRectangle> to be checked for intersection.\n\t * b - <mxRectangle> to be checked for intersection.\n\t */\n\tintersects: function(a, b)\n\t{\n\t\tvar tw = a.width;\n\t\tvar th = a.height;\n\t\tvar rw = b.width;\n\t\tvar rh = b.height;\n\t\t\n\t\tif (rw <= 0 || rh <= 0 || tw <= 0 || th <= 0)\n\t\t{\n\t\t    return false;\n\t\t}\n\t\t\n\t\tvar tx = a.x;\n\t\tvar ty = a.y;\n\t\tvar rx = b.x;\n\t\tvar ry = b.y;\n\t\t\n\t\trw += rx;\n\t\trh += ry;\n\t\ttw += tx;\n\t\tth += ty;\n\n\t\treturn ((rw < rx || rw > tx) &&\n\t\t\t(rh < ry || rh > ty) &&\n\t\t\t(tw < tx || tw > rx) &&\n\t\t\t(th < ty || th > ry));\n\t},\n\n\t/**\n\t * Function: intersectsHotspot\n\t * \n\t * Returns true if the state and the hotspot intersect.\n\t * \n\t * Parameters:\n\t * \n\t * state - <mxCellState>\n\t * x - X-coordinate.\n\t * y - Y-coordinate.\n\t * hotspot - Optional size of the hostpot.\n\t * min - Optional min size of the hostpot.\n\t * max - Optional max size of the hostpot.\n\t */\n\tintersectsHotspot: function(state, x, y, hotspot, min, max)\n\t{\n\t\thotspot = (hotspot != null) ? hotspot : 1;\n\t\tmin = (min != null) ? min : 0;\n\t\tmax = (max != null) ? max : 0;\n\t\t\n\t\tif (hotspot > 0)\n\t\t{\n\t\t\tvar cx = state.getCenterX();\n\t\t\tvar cy = state.getCenterY();\n\t\t\tvar w = state.width;\n\t\t\tvar h = state.height;\n\t\t\t\n\t\t\tvar start = mxUtils.getValue(state.style, mxConstants.STYLE_STARTSIZE) * state.view.scale;\n\n\t\t\tif (start > 0)\n\t\t\t{\n\t\t\t\tif (mxUtils.getValue(state.style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t{\n\t\t\t\t\tcy = state.y + start / 2;\n\t\t\t\t\th = start;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcx = state.x + start / 2;\n\t\t\t\t\tw = start;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tw = Math.max(min, w * hotspot);\n\t\t\th = Math.max(min, h * hotspot);\n\t\t\t\n\t\t\tif (max > 0)\n\t\t\t{\n\t\t\t\tw = Math.min(w, max);\n\t\t\t\th = Math.min(h, max);\n\t\t\t}\n\t\t\t\n\t\t\tvar rect = new mxRectangle(cx - w / 2, cy - h / 2, w, h);\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(x, y), cos, sin, cx);\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\treturn mxUtils.contains(rect, x, y);\t\t\t\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getOffset\n\t * \n\t * Returns the offset for the specified container as an <mxPoint>. The\n\t * offset is the distance from the top left corner of the container to the\n\t * top left corner of the document.\n\t * \n\t * Parameters:\n\t * \n\t * container - DOM node to return the offset for.\n\t * scollOffset - Optional boolean to add the scroll offset of the document.\n\t * Default is false.\n\t */\n\tgetOffset: function(container, scrollOffset)\n\t{\n\t\tvar offsetLeft = 0;\n\t\tvar offsetTop = 0;\n\t\t\n\t\t// Ignores document scroll origin for fixed elements\n\t\tvar fixed = false;\n\t\tvar node = container;\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\n\t\twhile (node != null && node != b && node != d && !fixed)\n\t\t{\n\t\t\tvar style = mxUtils.getCurrentStyle(node);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tfixed = fixed || style.position == 'fixed';\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.parentNode;\n\t\t}\n\t\t\n\t\tif (!scrollOffset && !fixed)\n\t\t{\n\t\t\tvar offset = mxUtils.getDocumentScrollOrigin(container.ownerDocument);\n\t\t\toffsetLeft += offset.x;\n\t\t\toffsetTop += offset.y;\n\t\t}\n\t\t\n\t\tvar r = container.getBoundingClientRect();\n\t\t\n\t\tif (r != null)\n\t\t{\n\t\t\toffsetLeft += r.left;\n\t\t\toffsetTop += r.top;\n\t\t}\n\t\t\n\t\treturn new mxPoint(offsetLeft, offsetTop);\n\t},\n\n\t/**\n\t * Function: getDocumentScrollOrigin\n\t * \n\t * Returns the scroll origin of the given document or the current document\n\t * if no document is given.\n\t */\n\tgetDocumentScrollOrigin: function(doc)\n\t{\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\treturn new mxPoint(doc.body.scrollLeft, doc.body.scrollTop);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar wnd = doc.defaultView || doc.parentWindow;\n\t\t\t\n\t\t\tvar x = (wnd != null && window.pageXOffset !== undefined) ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft;\n\t\t\tvar y = (wnd != null && window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n\t\t\t\n\t\t\treturn new mxPoint(x, y);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: getScrollOrigin\n\t * \n\t * Returns the top, left corner of the viewrect as an <mxPoint>.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose scroll origin should be returned.\n\t * includeAncestors - Whether the scroll origin of the ancestors should be\n\t * included. Default is false.\n\t * includeDocument - Whether the scroll origin of the document should be\n\t * included. Default is true.\n\t */\n\tgetScrollOrigin: function(node, includeAncestors, includeDocument)\n\t{\n\t\tincludeAncestors = (includeAncestors != null) ? includeAncestors : false;\n\t\tincludeDocument = (includeDocument != null) ? includeDocument : true;\n\t\t\n\t\tvar doc = (node != null) ? node.ownerDocument : document;\n\t\tvar b = doc.body;\n\t\tvar d = doc.documentElement;\n\t\tvar result = new mxPoint();\n\t\tvar fixed = false;\n\n\t\twhile (node != null && node != b && node != d)\n\t\t{\n\t\t\tif (!isNaN(node.scrollLeft) && !isNaN(node.scrollTop))\n\t\t\t{\n\t\t\t\tresult.x += node.scrollLeft;\n\t\t\t\tresult.y += node.scrollTop;\n\t\t\t}\n\t\t\t\n\t\t\tvar style = mxUtils.getCurrentStyle(node);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tfixed = fixed || style.position == 'fixed';\n\t\t\t}\n\n\t\t\tnode = (includeAncestors) ? node.parentNode : null;\n\t\t}\n\n\t\tif (!fixed && includeDocument)\n\t\t{\n\t\t\tvar origin = mxUtils.getDocumentScrollOrigin(doc);\n\n\t\t\tresult.x += origin.x;\n\t\t\tresult.y += origin.y;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: convertPoint\n\t * \n\t * Converts the specified point (x, y) using the offset of the specified\n\t * container and returns a new <mxPoint> with the result.\n\t * \n\t * (code)\n\t * var pt = mxUtils.convertPoint(graph.container,\n\t *   mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * container - DOM node to use for the offset.\n\t * x - X-coordinate of the point to be converted.\n\t * y - Y-coordinate of the point to be converted.\n\t */\n\tconvertPoint: function(container, x, y)\n\t{\n\t\tvar origin = mxUtils.getScrollOrigin(container, false);\n\t\tvar offset = mxUtils.getOffset(container);\n\n\t\toffset.x -= origin.x;\n\t\toffset.y -= origin.y;\n\t\t\n\t\treturn new mxPoint(x - offset.x, y - offset.y);\n\t},\n\t\n\t/**\n\t * Function: ltrim\n\t * \n\t * Strips all whitespaces from the beginning of the string. Without the\n\t * second parameter, this will trim these characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\tltrim: function(str, chars)\n\t{\n\t\tchars = chars || \"\\\\s\";\n\t\t\n\t\treturn (str != null) ? str.replace(new RegExp(\"^[\" + chars + \"]+\", \"g\"), \"\") : null;\n\t},\n\t\n\t/**\n\t * Function: rtrim\n\t * \n\t * Strips all whitespaces from the end of the string. Without the second\n\t * parameter, this will trim these characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\trtrim: function(str, chars)\n\t{\n\t\tchars = chars || \"\\\\s\";\n\t\t\n\t\treturn (str != null) ? str.replace(new RegExp(\"[\" + chars + \"]+$\", \"g\"), \"\") : null;\n\t},\n\t\n\t/**\n\t * Function: trim\n\t * \n\t * Strips all whitespaces from both end of the string.\n\t * Without the second parameter, Javascript function will trim these\n\t * characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\ttrim: function(str, chars)\n\t{\n\t\treturn mxUtils.ltrim(mxUtils.rtrim(str, chars), chars);\n\t},\n\t\n\t/**\n\t * Function: isNumeric\n\t * \n\t * Returns true if the specified value is numeric, that is, if it is not\n\t * null, not an empty string, not a HEX number and isNaN returns false.\n\t * \n\t * Parameters:\n\t * \n\t * n - String representing the possibly numeric value.\n\t */\n\tisNumeric: function(n)\n\t{\n\t\treturn !isNaN(parseFloat(n)) && isFinite(n) && (typeof(n) != 'string' || n.toLowerCase().indexOf('0x') < 0);\n\t},\n\n\t/**\n\t * Function: isInteger\n\t * \n\t * Returns true if the given value is an valid integer number.\n\t * \n\t * Parameters:\n\t * \n\t * n - String representing the possibly numeric value.\n\t */\n\tisInteger: function(n)\n\t{\n\t\treturn String(parseInt(n)) === String(n);\n\t},\n\n\t/**\n\t * Function: mod\n\t * \n\t * Returns the remainder of division of n by m. You should use this instead\n\t * of the built-in operation as the built-in operation does not properly\n\t * handle negative numbers.\n\t */\n\tmod: function(n, m)\n\t{\n\t\treturn ((n % m) + m) % m;\n\t},\n\n\t/**\n\t * Function: intersection\n\t * \n\t * Returns the intersection of two lines as an <mxPoint>.\n\t * \n\t * Parameters:\n\t * \n\t * x0 - X-coordinate of the first line's startpoint.\n\t * y0 - X-coordinate of the first line's startpoint.\n\t * x1 - X-coordinate of the first line's endpoint.\n\t * y1 - Y-coordinate of the first line's endpoint.\n\t * x2 - X-coordinate of the second line's startpoint.\n\t * y2 - Y-coordinate of the second line's startpoint.\n\t * x3 - X-coordinate of the second line's endpoint.\n\t * y3 - Y-coordinate of the second line's endpoint.\n\t */\n\tintersection: function (x0, y0, x1, y1, x2, y2, x3, y3)\n\t{\n\t\tvar denom = ((y3 - y2) * (x1 - x0)) - ((x3 - x2) * (y1 - y0));\n\t\tvar nume_a = ((x3 - x2) * (y0 - y2)) - ((y3 - y2) * (x0 - x2));\n\t\tvar nume_b = ((x1 - x0) * (y0 - y2)) - ((y1 - y0) * (x0 - x2));\n\n\t\tvar ua = nume_a / denom;\n\t\tvar ub = nume_b / denom;\n\t\t\n\t\tif(ua >= 0.0 && ua <= 1.0 && ub >= 0.0 && ub <= 1.0)\n\t\t{\n\t\t\t// Get the intersection point\n\t\t\tvar x = x0 + ua * (x1 - x0);\n\t\t\tvar y = y0 + ua * (y1 - y0);\n\t\t\t\n\t\t\treturn new mxPoint(x, y);\n\t\t}\n\t\t\n\t\t// No intersection\n\t\treturn null;\n\t},\n\t\n\t/**\n\t * Function: ptSegDistSq\n\t * \n\t * Returns the square distance between a segment and a point. To get the\n\t * distance between a point and a line (with infinite length) use\n\t * <mxUtils.ptLineDist>.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of the startpoint of the segment.\n\t * y1 - Y-coordinate of the startpoint of the segment.\n\t * x2 - X-coordinate of the endpoint of the segment.\n\t * y2 - Y-coordinate of the endpoint of the segment.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n\tptSegDistSq: function(x1, y1, x2, y2, px, py)\n    {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\n\t\tpx -= x1;\n\t\tpy -= y1;\n\n\t\tvar dotprod = px * x2 + py * y2;\n\t\tvar projlenSq;\n\n\t\tif (dotprod <= 0.0)\n\t\t{\n\t\t    projlenSq = 0.0;\n\t\t}\n\t\telse\n\t\t{\n\t\t    px = x2 - px;\n\t\t    py = y2 - py;\n\t\t    dotprod = px * x2 + py * y2;\n\n\t\t    if (dotprod <= 0.0)\n\t\t    {\n\t\t\t\tprojlenSq = 0.0;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\t\tprojlenSq = dotprod * dotprod / (x2 * x2 + y2 * y2);\n\t\t    }\n\t\t}\n\n\t\tvar lenSq = px * px + py * py - projlenSq;\n\t\t\n\t\tif (lenSq < 0)\n\t\t{\n\t\t    lenSq = 0;\n\t\t}\n\t\t\n\t\treturn lenSq;\n    },\n\t\n\t/**\n\t * Function: ptLineDist\n\t * \n\t * Returns the distance between a line defined by two points and a point.\n\t * To get the distance between a point and a segment (with a specific\n\t * length) use <mxUtils.ptSeqDistSq>.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of point 1 of the line.\n\t * y1 - Y-coordinate of point 1 of the line.\n\t * x2 - X-coordinate of point 1 of the line.\n\t * y2 - Y-coordinate of point 1 of the line.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n    ptLineDist: function(x1, y1, x2, y2, px, py)\n    {\n\t\treturn Math.abs((y2 - y1) * px - (x2 - x1) * py + x2 * y1 - y2 * x1) /\n\t\t\tMath.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));\n    },\n    \t\n\t/**\n\t * Function: relativeCcw\n\t * \n\t * Returns 1 if the given point on the right side of the segment, 0 if its\n\t * on the segment, and -1 if the point is on the left side of the segment.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of the startpoint of the segment.\n\t * y1 - Y-coordinate of the startpoint of the segment.\n\t * x2 - X-coordinate of the endpoint of the segment.\n\t * y2 - Y-coordinate of the endpoint of the segment.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n\trelativeCcw: function(x1, y1, x2, y2, px, py)\n    {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\t\tpx -= x1;\n\t\tpy -= y1;\n\t\tvar ccw = px * y2 - py * x2;\n\t\t\n\t\tif (ccw == 0.0)\n\t\t{\n\t\t    ccw = px * x2 + py * y2;\n\t\t    \n\t\t    if (ccw > 0.0)\n\t\t    {\n\t\t\t\tpx -= x2;\n\t\t\t\tpy -= y2;\n\t\t\t\tccw = px * x2 + py * y2;\n\t\t\t\t\n\t\t\t\tif (ccw < 0.0)\n\t\t\t\t{\n\t\t\t\t    ccw = 0.0;\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t\t\n\t\treturn (ccw < 0.0) ? -1 : ((ccw > 0.0) ? 1 : 0);\n    },\n    \n\t/**\n\t * Function: animateChanges\n\t * \n\t * See <mxEffects.animateChanges>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n\tanimateChanges: function(graph, changes)\n\t{\n\t\t// LATER: Deprecated, remove this function\n    \tmxEffects.animateChanges.apply(this, arguments);\n\t},\n    \n\t/**\n\t * Function: cascadeOpacity\n\t * \n\t * See <mxEffects.cascadeOpacity>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n    cascadeOpacity: function(graph, cell, opacity)\n\t{\n\t\tmxEffects.cascadeOpacity.apply(this, arguments);\n\t},\n\n\t/**\n\t * Function: fadeOut\n\t * \n\t * See <mxEffects.fadeOut>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n\tfadeOut: function(node, from, remove, step, delay, isEnabled)\n\t{\n\t\tmxEffects.fadeOut.apply(this, arguments);\n\t},\n\t\n\t/**\n\t * Function: setOpacity\n\t * \n\t * Sets the opacity of the specified DOM node to the given value in %.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to set the opacity for.\n\t * value - Opacity in %. Possible values are between 0 and 100.\n\t */\n\tsetOpacity: function(node, value)\n\t{\n\t\tif (mxUtils.isVml(node))\n\t\t{\n\t    \tif (value >= 100)\n\t    \t{\n\t    \t\tnode.style.filter = '';\n\t    \t}\n\t    \telse\n\t    \t{\n\t    \t\t// TODO: Why is the division by 5 needed in VML?\n\t\t\t    node.style.filter = 'alpha(opacity=' + (value/5) + ')';\n\t    \t}\n\t\t}\n\t\telse if (mxClient.IS_IE && (typeof(document.documentMode) === 'undefined' || document.documentMode < 9))\n\t    {\n\t    \tif (value >= 100)\n\t    \t{\n\t    \t\tnode.style.filter = '';\n\t    \t}\n\t    \telse\n\t    \t{\n\t\t\t    node.style.filter = 'alpha(opacity=' + value + ')';\n\t    \t}\n\t\t}\n\t\telse\n\t\t{\n\t\t    node.style.opacity = (value / 100);\n\t\t}\n\t},\n\n\t/**\n\t * Function: createImage\n\t * \n\t * Creates and returns an image (IMG node) or VML image (v:image) in IE6 in\n\t * quirks mode.\n\t * \n\t * Parameters:\n\t * \n\t * src - URL that points to the image to be displayed.\n\t */\n\tcreateImage: function(src)\n\t{\n        var imageNode = null;\n        \n\t\tif (mxClient.IS_IE6 && document.compatMode != 'CSS1Compat')\n\t\t{\n        \timageNode = document.createElement(mxClient.VML_PREFIX + ':image');\n        \timageNode.setAttribute('src', src);\n        \timageNode.style.borderStyle = 'none';\n        }\n\t\telse\n\t\t{\n\t\t\timageNode = document.createElement('img');\n\t\t\timageNode.setAttribute('src', src);\n\t\t\timageNode.setAttribute('border', '0');\n\t\t}\n\t\t\n\t\treturn imageNode;\n\t},\n\n\t/**\n\t * Function: sortCells\n\t * \n\t * Sorts the given cells according to the order in the cell hierarchy.\n\t * Ascending is optional and defaults to true.\n\t */\n\tsortCells: function(cells, ascending)\n\t{\n\t\tascending = (ascending != null) ? ascending : true;\n\t\tvar lookup = new mxDictionary();\n\t\tcells.sort(function(o1, o2)\n\t\t{\n\t\t\tvar p1 = lookup.get(o1);\n\t\t\t\n\t\t\tif (p1 == null)\n\t\t\t{\n\t\t\t\tp1 = mxCellPath.create(o1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\tlookup.put(o1, p1);\n\t\t\t}\n\t\t\t\n\t\t\tvar p2 = lookup.get(o2);\n\t\t\t\n\t\t\tif (p2 == null)\n\t\t\t{\n\t\t\t\tp2 = mxCellPath.create(o2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\tlookup.put(o2, p2);\n\t\t\t}\n\t\t\t\n\t\t\tvar comp = mxCellPath.compare(p1, p2);\n\t\t\t\n\t\t\treturn (comp == 0) ? 0 : (((comp > 0) == ascending) ? 1 : -1);\n\t\t});\n\t\t\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: getStylename\n\t * \n\t * Returns the stylename in a style of the form [(stylename|key=value);] or\n\t * an empty string if the given style does not contain a stylename.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t */\n\tgetStylename: function(style)\n\t{\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\t\t\tvar stylename = pairs[0];\n\t\t\t\n\t\t\tif (stylename.indexOf('=') < 0)\n\t\t\t{\n\t\t\t\treturn stylename;\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn '';\n\t},\n\n\t/**\n\t * Function: getStylenames\n\t * \n\t * Returns the stylenames in a style of the form [(stylename|key=value);]\n\t * or an empty array if the given style does not contain any stylenames.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t */\n\tgetStylenames: function(style)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < pairs.length; i++)\n\t\t\t{\n\t\t\t\tif (pairs[i].indexOf('=') < 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(pairs[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: indexOfStylename\n\t * \n\t * Returns the index of the given stylename in the given style. This\n\t * returns -1 if the given stylename does not occur (as a stylename) in the\n\t * given style, otherwise it returns the index of the first character.\n\t */\n\tindexOfStylename: function(style, stylename)\n\t{\n\t\tif (style != null && stylename != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\tvar pos = 0;\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\tif (tokens[i] == stylename)\n\t\t\t\t{\n\t\t\t\t\treturn pos;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpos += tokens[i].length + 1;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t},\n\t\n\t/**\n\t * Function: addStylename\n\t * \n\t * Adds the specified stylename to the given style if it does not already\n\t * contain the stylename.\n\t */\n\taddStylename: function(style, stylename)\n\t{\n\t\tif (mxUtils.indexOfStylename(style, stylename) < 0)\n\t\t{\n\t\t\tif (style == null)\n\t\t\t{\n\t\t\t\tstyle = '';\n\t\t\t}\n\t\t\telse if (style.length > 0 && style.charAt(style.length - 1) != ';')\n\t\t\t{\n\t\t\t\tstyle += ';';\n\t\t\t}\n\t\t\t\n\t\t\tstyle += stylename;\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\t\n\t/**\n\t * Function: removeStylename\n\t * \n\t * Removes all occurrences of the specified stylename in the given style\n\t * and returns the updated style. Trailing semicolons are not preserved.\n\t */\n\tremoveStylename: function(style, stylename)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\tif (tokens[i] != stylename)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join(';');\n\t},\n\t\n\t/**\n\t * Function: removeAllStylenames\n\t * \n\t * Removes all stylenames from the given style and returns the updated\n\t * style.\n\t */\n\tremoveAllStylenames: function(style)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\t// Keeps the key, value assignments\n\t\t\t\tif (tokens[i].indexOf('=') >= 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join(';');\n\t},\n\n\t/**\n\t * Function: setCellStyles\n\t * \n\t * Assigns the value for the given key in the styles of the given cells, or\n\t * removes the key from the styles if the value is null.\n\t * \n\t * Parameters:\n\t * \n\t * model - <mxGraphModel> to execute the transaction in.\n\t * cells - Array of <mxCells> to be updated.\n\t * key - Key of the style to be changed.\n\t * value - New value for the given key.\n\t */\n\tsetCellStyles: function(model, cells, key, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyle(model.getStyle(cells[i]), key, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setStyle\n\t * \n\t * Adds or removes the given key, value pair to the style and returns the\n\t * new style. If value is null or zero length then the key is removed from\n\t * the style. This is for cell styles, not for CSS styles.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t * key - Key of the style to be changed.\n\t * value - New value for the given key.\n\t */\n\tsetStyle: function(style, key, value)\n\t{\n\t\tvar isValue = value != null && (typeof(value.length) == 'undefined' || value.length > 0);\n\t\t\n\t\tif (style == null || style.length == 0)\n\t\t{\n\t\t\tif (isValue)\n\t\t\t{\n\t\t\t\tstyle = key + '=' + value + ';';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (style.substring(0, key.length + 1) == key + '=')\n\t\t\t{\n\t\t\t\tvar next = style.indexOf(';');\n\t\t\t\t\n\t\t\t\tif (isValue)\n\t\t\t\t{\n\t\t\t\t\tstyle = key + '=' + value + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyle = (next < 0 || next == style.length - 1) ? '' : style.substring(next + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar index = style.indexOf(';' + key + '=');\n\t\t\t\t\n\t\t\t\tif (index < 0)\n\t\t\t\t{\n\t\t\t\t\tif (isValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar sep = (style.charAt(style.length - 1) == ';') ? '' : ';';\n\t\t\t\t\t\tstyle = style + sep + key + '=' + value + ';';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar next = style.indexOf(';', index + 1);\n\t\t\t\t\t\n\t\t\t\t\tif (isValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle = style.substring(0, index + 1) + key + '=' + value + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle = style.substring(0, index) + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\n\t/**\n\t * Function: setCellStyleFlags\n\t * \n\t * Sets or toggles the flag bit for the given key in the cell's styles.\n\t * If value is null then the flag is toggled.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var cells = graph.getSelectionCells();\n\t * mxUtils.setCellStyleFlags(graph.model,\n\t * \t\t\tcells,\n\t * \t\t\tmxConstants.STYLE_FONTSTYLE,\n\t * \t\t\tmxConstants.FONT_BOLD);\n\t * (end)\n\t * \n\t * Toggles the bold font style.\n\t * \n\t * Parameters:\n\t * \n\t * model - <mxGraphModel> that contains the cells.\n\t * cells - Array of <mxCells> to change the style for.\n\t * key - Key of the style to be changed.\n\t * flag - Integer for the bit to be changed.\n\t * value - Optional boolean value for the flag.\n\t */\n\tsetCellStyleFlags: function(model, cells, key, flag, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyleFlag(\n\t\t\t\t\t\t\tmodel.getStyle(cells[i]),\n\t\t\t\t\t\t\tkey, flag, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setStyleFlag\n\t * \n\t * Sets or removes the given key from the specified style and returns the\n\t * new style. If value is null then the flag is toggled.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t * key - Key of the style to be changed.\n\t * flag - Integer for the bit to be changed.\n\t * value - Optional boolean value for the given flag.\n\t */\n\tsetStyleFlag: function(style, key, flag, value)\n\t{\n\t\tif (style == null || style.length == 0)\n\t\t{\n\t\t\tif (value || value == null)\n\t\t\t{\n\t\t\t\tstyle = key+'='+flag;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstyle = key+'=0';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar index = style.indexOf(key+'=');\n\t\t\t\n\t\t\tif (index < 0)\n\t\t\t{\n\t\t\t\tvar sep = (style.charAt(style.length-1) == ';') ? '' : ';';\n\n\t\t\t\tif (value || value == null)\n\t\t\t\t{\n\t\t\t\t\tstyle = style + sep + key + '=' + flag;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyle = style + sep + key + '=0';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar cont = style.indexOf(';', index);\n\t\t\t\tvar tmp = '';\n\t\t\t\t\n\t\t\t\tif (cont < 0)\n\t\t\t\t{\n\t\t\t\t\ttmp  = style.substring(index+key.length+1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = style.substring(index+key.length+1, cont);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value == null)\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) ^ flag;\n\t\t\t\t}\n\t\t\t\telse if (value)\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) | flag;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) & ~flag;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstyle = style.substring(0, index) + key + '=' + tmp +\n\t\t\t\t\t((cont >= 0) ? style.substring(cont) : '');\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\t\n\t/**\n\t * Function: getAlignmentAsPoint\n\t * \n\t * Returns an <mxPoint> that represents the horizontal and vertical alignment\n\t * for numeric computations. X is -0.5 for center, -1 for right and 0 for\n\t * left alignment. Y is -0.5 for middle, -1 for bottom and 0 for top\n\t * alignment. Default values for missing arguments is top, left.\n\t */\n\tgetAlignmentAsPoint: function(align, valign)\n\t{\n\t\tvar dx = -0.5;\n\t\tvar dy = -0.5;\n\t\t\n\t\t// Horizontal alignment\n\t\tif (align == mxConstants.ALIGN_LEFT)\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tdx = -1;\n\t\t}\n\n\t\t// Vertical alignment\n\t\tif (valign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy = -1;\n\t\t}\n\t\t\n\t\treturn new mxPoint(dx, dy);\n\t},\n\t\n\t/**\n\t * Function: getSizeForString\n\t * \n\t * Returns an <mxRectangle> with the size (width and height in pixels) of\n\t * the given string. The string may contain HTML markup. Newlines should be\n\t * converted to <br> before calling this method. The caller is responsible\n\t * for sanitizing the HTML markup.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var label = graph.getLabel(cell).replace(/\\n/g, \"<br>\");\n\t * var size = graph.getSizeForString(label);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * text - String whose size should be returned.\n\t * fontSize - Integer that specifies the font size in pixels. Default is\n\t * <mxConstants.DEFAULT_FONTSIZE>.\n\t * fontFamily - String that specifies the name of the font family. Default\n\t * is <mxConstants.DEFAULT_FONTFAMILY>.\n\t * textWidth - Optional width for text wrapping.\n\t * fontStyle - Optional font style.\n\t */\n\tgetSizeForString: function(text, fontSize, fontFamily, textWidth, fontStyle)\n\t{\n\t\tfontSize = (fontSize != null) ? fontSize : mxConstants.DEFAULT_FONTSIZE;\n\t\tfontFamily = (fontFamily != null) ? fontFamily : mxConstants.DEFAULT_FONTFAMILY;\n\t\tvar div = document.createElement('div');\n\t\t\n\t\t// Sets the font size and family\n\t\tdiv.style.fontFamily = fontFamily;\n\t\tdiv.style.fontSize = Math.round(fontSize) + 'px';\n\t\tdiv.style.lineHeight = Math.round(fontSize * mxConstants.LINE_HEIGHT) + 'px';\n\t\t\n\t\t// Sets the font style\n\t\tif (fontStyle != null)\n\t\t{\n\t\t\tif ((fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t\t{\n\t\t\t\tdiv.style.fontWeight = 'bold';\n\t\t\t}\n\t\t\t\n\t\t\tif ((fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t\t{\n\t\t\t\tdiv.style.fontStyle = 'italic';\n\t\t\t}\n\t\t\t\n\t\t\tvar txtDecor = [];\n\t\t\t\n\t\t\tif ((fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t\t{\n\t\t\t\ttxtDecor.push('underline');\n\t\t\t}\n\t\t\t\n\t\t\tif ((fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t\t\t{\n\t\t\t\ttxtDecor.push('line-through');\n\t\t\t}\n\t\t\t\n\t\t\tif (txtDecor.length > 0)\n\t\t\t{\n\t\t\t\tdiv.style.textDecoration = txtDecor.join(' ');\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Disables block layout and outside wrapping and hides the div\n\t\tdiv.style.position = 'absolute';\n\t\tdiv.style.visibility = 'hidden';\n\t\tdiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tdiv.style.zoom = '1';\n\t\t\n\t\tif (textWidth != null)\n\t\t{\n\t\t\tdiv.style.width = textWidth + 'px';\n\t\t\tdiv.style.whiteSpace = 'normal';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t}\n\t\t\n\t\t// Adds the text and inserts into DOM for updating of size\n\t\tdiv.innerHTML = text;\n\t\tdocument.body.appendChild(div);\n\t\t\n\t\t// Gets the size and removes from DOM\n\t\tvar size = new mxRectangle(0, 0, div.offsetWidth, div.offsetHeight);\n\t\tdocument.body.removeChild(div);\n\t\t\n\t\treturn size;\n\t},\n\t\n\t/**\n\t * Function: getViewXml\n\t */\n\tgetViewXml: function(graph, scale, cells, x0, y0)\n\t{\n\t\tx0 = (x0 != null) ? x0 : 0;\n\t\ty0 = (y0 != null) ? y0 : 0;\n\t\tscale = (scale != null) ? scale : 1;\n\n\t\tif (cells == null)\n\t\t{\n\t\t\tvar model = graph.getModel();\n\t\t\tcells = [model.getRoot()];\n\t\t}\n\t\t\n\t\tvar view = graph.getView();\n\t\tvar result = null;\n\n\t\t// Disables events on the view\n\t\tvar eventsEnabled = view.isEventsEnabled();\n\t\tview.setEventsEnabled(false);\n\n\t\t// Workaround for label bounds not taken into account for image export.\n\t\t// Creates a temporary draw pane which is used for rendering the text.\n\t\t// Text rendering is required for finding the bounds of the labels.\n\t\tvar drawPane = view.drawPane;\n\t\tvar overlayPane = view.overlayPane;\n\n\t\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tview.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\t\tview.canvas.appendChild(view.drawPane);\n\n\t\t\t// Redirects cell overlays into temporary container\n\t\t\tview.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\t\tview.canvas.appendChild(view.overlayPane);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tview.drawPane = view.drawPane.cloneNode(false);\n\t\t\tview.canvas.appendChild(view.drawPane);\n\t\t\t\n\t\t\t// Redirects cell overlays into temporary container\n\t\t\tview.overlayPane = view.overlayPane.cloneNode(false);\n\t\t\tview.canvas.appendChild(view.overlayPane);\n\t\t}\n\n\t\t// Resets the translation\n\t\tvar translate = view.getTranslate();\n\t\tview.translate = new mxPoint(x0, y0);\n\n\t\t// Creates the temporary cell states in the view\n\t\tvar temp = new mxTemporaryCellStates(graph.getView(), scale, cells);\n\n\t\ttry\n\t\t{\n\t\t\tvar enc = new mxCodec();\n\t\t\tresult = enc.encode(graph.getView());\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\ttemp.destroy();\n\t\t\tview.translate = translate;\n\t\t\tview.canvas.removeChild(view.drawPane);\n\t\t\tview.canvas.removeChild(view.overlayPane);\n\t\t\tview.drawPane = drawPane;\n\t\t\tview.overlayPane = overlayPane;\n\t\t\tview.setEventsEnabled(eventsEnabled);\n\t\t}\n\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: getScaleForPageCount\n\t * \n\t * Returns the scale to be used for printing the graph with the given\n\t * bounds across the specifies number of pages with the given format. The\n\t * scale is always computed such that it given the given amount or fewer\n\t * pages in the print output. See <mxPrintPreview> for an example.\n\t * \n\t * Parameters:\n\t * \n\t * pageCount - Specifies the number of pages in the print output.\n\t * graph - <mxGraph> that should be printed.\n\t * pageFormat - Optional <mxRectangle> that specifies the page format.\n\t * Default is <mxConstants.PAGE_FORMAT_A4_PORTRAIT>.\n\t * border - The border along each side of every page.\n\t */\n\tgetScaleForPageCount: function(pageCount, graph, pageFormat, border)\n\t{\n\t\tif (pageCount < 1)\n\t\t{\n\t\t\t// We can't work with less than 1 page, return no scale\n\t\t\t// change\n\t\t\treturn 1;\n\t\t}\n\t\t\n\t\tpageFormat = (pageFormat != null) ? pageFormat : mxConstants.PAGE_FORMAT_A4_PORTRAIT;\n\t\tborder = (border != null) ? border : 0;\n\t\t\n\t\tvar availablePageWidth = pageFormat.width - (border * 2);\n\t\tvar availablePageHeight = pageFormat.height - (border * 2);\n\n\t\t// Work out the number of pages required if the\n\t\t// graph is not scaled.\n\t\tvar graphBounds = graph.getGraphBounds().clone();\n\t\tvar sc = graph.getView().getScale();\n\t\tgraphBounds.width /= sc;\n\t\tgraphBounds.height /= sc;\n\t\tvar graphWidth = graphBounds.width;\n\t\tvar graphHeight = graphBounds.height;\n\n\t\tvar scale = 1;\n\t\t\n\t\t// The ratio of the width/height for each printer page\n\t\tvar pageFormatAspectRatio = availablePageWidth / availablePageHeight;\n\t\t// The ratio of the width/height for the graph to be printer\n\t\tvar graphAspectRatio = graphWidth / graphHeight;\n\t\t\n\t\t// The ratio of horizontal pages / vertical pages for this \n\t\t// graph to maintain its aspect ratio on this page format\n\t\tvar pagesAspectRatio = graphAspectRatio / pageFormatAspectRatio;\n\t\t\n\t\t// Factor the square root of the page count up and down \n\t\t// by the pages aspect ratio to obtain a horizontal and \n\t\t// vertical page count that adds up to the page count\n\t\t// and has the correct aspect ratio\n\t\tvar pageRoot = Math.sqrt(pageCount);\n\t\tvar pagesAspectRatioSqrt = Math.sqrt(pagesAspectRatio);\n\t\tvar numRowPages = pageRoot * pagesAspectRatioSqrt;\n\t\tvar numColumnPages = pageRoot / pagesAspectRatioSqrt;\n\n\t\t// These value are rarely more than 2 rounding downs away from\n\t\t// a total that meets the page count. In cases of one being less \n\t\t// than 1 page, the other value can be too high and take more iterations \n\t\t// In this case, just change that value to be the page count, since \n\t\t// we know the other value is 1\n\t\tif (numRowPages < 1 && numColumnPages > pageCount)\n\t\t{\n\t\t\tvar scaleChange = numColumnPages / pageCount;\n\t\t\tnumColumnPages = pageCount;\n\t\t\tnumRowPages /= scaleChange;\n\t\t}\n\t\t\n\t\tif (numColumnPages < 1 && numRowPages > pageCount)\n\t\t{\n\t\t\tvar scaleChange = numRowPages / pageCount;\n\t\t\tnumRowPages = pageCount;\n\t\t\tnumColumnPages /= scaleChange;\n\t\t}\t\t\n\n\t\tvar currentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n\n\t\tvar numLoops = 0;\n\t\t\n\t\t// Iterate through while the rounded up number of pages comes to\n\t\t// a total greater than the required number\n\t\twhile (currentTotalPages > pageCount)\n\t\t{\n\t\t\t// Round down the page count (rows or columns) that is\n\t\t\t// closest to its next integer down in percentage terms.\n\t\t\t// i.e. Reduce the page total by reducing the total\n\t\t\t// page area by the least possible amount\n\n\t\t\tvar roundRowDownProportion = Math.floor(numRowPages) / numRowPages;\n\t\t\tvar roundColumnDownProportion = Math.floor(numColumnPages) / numColumnPages;\n\t\t\t\n\t\t\t// If the round down proportion is, work out the proportion to\n\t\t\t// round down to 1 page less\n\t\t\tif (roundRowDownProportion == 1)\n\t\t\t{\n\t\t\t\troundRowDownProportion = Math.floor(numRowPages-1) / numRowPages;\n\t\t\t}\n\t\t\tif (roundColumnDownProportion == 1)\n\t\t\t{\n\t\t\t\troundColumnDownProportion = Math.floor(numColumnPages-1) / numColumnPages;\n\t\t\t}\n\t\t\t\n\t\t\t// Check which rounding down is smaller, but in the case of very small roundings\n\t\t\t// try the other dimension instead\n\t\t\tvar scaleChange = 1;\n\t\t\t\n\t\t\t// Use the higher of the two values\n\t\t\tif (roundRowDownProportion > roundColumnDownProportion)\n\t\t\t{\n\t\t\t\tscaleChange = roundRowDownProportion;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tscaleChange = roundColumnDownProportion;\n\t\t\t}\n\n\t\t\tnumRowPages = numRowPages * scaleChange;\n\t\t\tnumColumnPages = numColumnPages * scaleChange;\n\t\t\tcurrentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n\t\t\t\n\t\t\tnumLoops++;\n\t\t\t\n\t\t\tif (numLoops > 10)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Work out the scale from the number of row pages required\n\t\t// The column pages will give the same value\n\t\tvar posterWidth = availablePageWidth * numRowPages;\n\t\tscale = posterWidth / graphWidth;\n\t\t\n\t\t// Allow for rounding errors\n\t\treturn scale * 0.99999;\n\t},\n\t\n\t/**\n\t * Function: show\n\t * \n\t * Copies the styles and the markup from the graph's container into the\n\t * given document and removes all cursor styles. The document is returned.\n\t * \n\t * This function should be called from within the document with the graph.\n\t * If you experience problems with missing stylesheets in IE then try adding\n\t * the domain to the trusted sites.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to be copied.\n\t * doc - Document where the new graph is created.\n\t * x0 - X-coordinate of the graph view origin. Default is 0.\n\t * y0 - Y-coordinate of the graph view origin. Default is 0.\n\t * w - Optional width of the graph view.\n\t * h - Optional height of the graph view.\n\t */\n\tshow: function(graph, doc, x0, y0, w, h)\n\t{\n\t\tx0 = (x0 != null) ? x0 : 0;\n\t\ty0 = (y0 != null) ? y0 : 0;\n\t\t\n\t\tif (doc == null)\n\t\t{\n\t\t\tvar wnd = window.open();\n\t\t\tdoc = wnd.document;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.open();\n\t\t}\n\n\t\t// Workaround for missing print output in IE9 standards\n\t\tif (document.documentMode == 9)\n\t\t{\n\t\t\tdoc.writeln('<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"><![endif]-->');\n\t\t}\n\t\t\n\t\tvar bounds = graph.getGraphBounds();\n\t\tvar dx = Math.ceil(x0 - bounds.x);\n\t\tvar dy = Math.ceil(y0 - bounds.y);\n\t\t\n\t\tif (w == null)\n\t\t{\n\t\t\tw = Math.ceil(bounds.width + x0) + Math.ceil(Math.ceil(bounds.x) - bounds.x);\n\t\t}\n\t\t\n\t\tif (h == null)\n\t\t{\n\t\t\th = Math.ceil(bounds.height + y0) + Math.ceil(Math.ceil(bounds.y) - bounds.y);\n\t\t}\n\t\t\n\t\t// Needs a special way of creating the page so that no click is required\n\t\t// to refresh the contents after the external CSS styles have been loaded.\n\t\t// To avoid a click or programmatic refresh, the styleSheets[].cssText\n\t\t// property is copied over from the original document.\n\t\tif (mxClient.IS_IE || document.documentMode == 11)\n\t\t{\n\t\t\tvar html = '<html><head>';\n\n\t\t\tvar base = document.getElementsByTagName('base');\n\t\t\t\n\t\t\tfor (var i = 0; i < base.length; i++)\n\t\t\t{\n\t\t\t\thtml += base[i].outerHTML;\n\t\t\t}\n\n\t\t\thtml += '<style>';\n\n\t\t\t// Copies the stylesheets without having to load them again\n\t\t\tfor (var i = 0; i < document.styleSheets.length; i++)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\thtml += document.styleSheets[i].cssText;\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore security exception\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thtml += '</style></head><body style=\"margin:0px;\">';\n\t\t\t\n\t\t\t// Copies the contents of the graph container\n\t\t\thtml += '<div style=\"position:absolute;overflow:hidden;width:' + w + 'px;height:' + h + 'px;\"><div style=\"position:relative;left:' + dx + 'px;top:' + dy + 'px;\">';\n\t\t\thtml += graph.container.innerHTML;\n\t\t\thtml += '</div></div></body><html>';\n\n\t\t\tdoc.writeln(html);\n\t\t\tdoc.close();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.writeln('<html><head>');\n\t\t\t\n\t\t\tvar base = document.getElementsByTagName('base');\n\t\t\t\n\t\t\tfor (var i = 0; i < base.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(base[i]));\n\t\t\t}\n\t\t\t\n\t\t\tvar links = document.getElementsByTagName('link');\n\t\t\t\n\t\t\tfor (var i = 0; i < links.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(links[i]));\n\t\t\t}\n\t\n\t\t\tvar styles = document.getElementsByTagName('style');\n\t\t\t\n\t\t\tfor (var i = 0; i < styles.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(styles[i]));\n\t\t\t}\n\n\t\t\tdoc.writeln('</head><body style=\"margin:0px;\"></body></html>');\n\t\t\tdoc.close();\n\n\t\t\tvar outer = doc.createElement('div');\n\t\t\touter.position = 'absolute';\n\t\t\touter.overflow = 'hidden';\n\t\t\touter.style.width = w + 'px';\n\t\t\touter.style.height = h + 'px';\n\n\t\t\t// Required for HTML labels if foreignObjects are disabled\n\t\t\tvar div = doc.createElement('div');\n\t\t\tdiv.style.position = 'absolute';\n\t\t\tdiv.style.left = dx + 'px';\n\t\t\tdiv.style.top = dy + 'px';\n\n\t\t\tvar node = graph.container.firstChild;\n\t\t\tvar svg = null;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tvar clone = node.cloneNode(true);\n\t\t\t\t\n\t\t\t\tif (node == graph.view.drawPane.ownerSVGElement)\n\t\t\t\t{\n\t\t\t\t\touter.appendChild(clone);\n\t\t\t\t\tsvg = clone;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdiv.appendChild(clone);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\n\t\t\tdoc.body.appendChild(outer);\n\t\t\t\n\t\t\tif (div.firstChild != null)\n\t\t\t{\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tif (svg != null)\n\t\t\t{\n\t\t\t\tsvg.style.minWidth = '';\n\t\t\t\tsvg.style.minHeight = '';\n\t\t\t\tsvg.firstChild.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t}\n\t\t}\n\t\t\n\t\tmxUtils.removeCursors(doc.body);\n\t\n\t\treturn doc;\n\t},\n\t\n\t/**\n\t * Function: printScreen\n\t * \n\t * Prints the specified graph using a new window and the built-in print\n\t * dialog.\n\t * \n\t * This function should be called from within the document with the graph.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to be printed.\n\t */\n\tprintScreen: function(graph)\n\t{\n\t\tvar wnd = window.open();\n\t\tvar bounds = graph.getGraphBounds();\n\t\tmxUtils.show(graph, wnd.document);\n\t\t\n\t\tvar print = function()\n\t\t{\n\t\t\twnd.focus();\n\t\t\twnd.print();\n\t\t\twnd.close();\n\t\t};\n\t\t\n\t\t// Workaround for Google Chrome which needs a bit of a\n\t\t// delay in order to render the SVG contents\n\t\tif (mxClient.IS_GC)\n\t\t{\n\t\t\twnd.setTimeout(print, 500);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprint();\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: popup\n\t * \n\t * Shows the specified text content in a new <mxWindow> or a new browser\n\t * window if isInternalWindow is false.\n\t * \n\t * Parameters:\n\t * \n\t * content - String that specifies the text to be displayed.\n\t * isInternalWindow - Optional boolean indicating if an mxWindow should be\n\t * used instead of a new browser window. Default is false.\n\t */\n\tpopup: function(content, isInternalWindow)\n\t{\n\t   \tif (isInternalWindow)\n\t   \t{\n\t\t\tvar div = document.createElement('div');\n\t\t\t\n\t\t\tdiv.style.overflow = 'scroll';\n\t\t\tdiv.style.width = '636px';\n\t\t\tdiv.style.height = '460px';\n\t\t\t\n\t\t\tvar pre = document.createElement('pre');\n\t\t    pre.innerHTML = mxUtils.htmlEntities(content, false).\n\t\t    \treplace(/\\n/g,'<br>').replace(/ /g, '&nbsp;');\n\t\t\t\n\t\t\tdiv.appendChild(pre);\n\t\t\t\n\t\t\tvar w = document.body.clientWidth;\n\t\t\tvar h = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight)\n\t\t\tvar wnd = new mxWindow('Popup Window', div,\n\t\t\t\tw/2-320, h/2-240, 640, 480, false, true);\n\n\t\t\twnd.setClosable(true);\n\t\t\twnd.setVisible(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Wraps up the XML content in a textarea\n\t\t\tif (mxClient.IS_NS)\n\t\t\t{\n\t\t\t    var wnd = window.open();\n\t\t\t\twnd.document.writeln('<pre>'+mxUtils.htmlEntities(content)+'</pre');\n\t\t\t   \twnd.document.close();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t    var wnd = window.open();\n\t\t\t    var pre = wnd.document.createElement('pre');\n\t\t\t    pre.innerHTML = mxUtils.htmlEntities(content, false).\n\t\t\t    \treplace(/\\n/g,'<br>').replace(/ /g, '&nbsp;');\n\t\t\t   \twnd.document.body.appendChild(pre);\n\t\t\t}\n\t   \t}\n\t},\n\t\n\t/**\n\t * Function: alert\n\t * \n\t * Displayss the given alert in a new dialog. This implementation uses the\n\t * built-in alert function. This is used to display validation errors when\n\t * connections cannot be changed or created.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t */\n\talert: function(message)\n\t{\n\t\talert(message);\n\t},\n\t\n\t/**\n\t * Function: prompt\n\t * \n\t * Displays the given message in a prompt dialog. This implementation uses\n\t * the built-in prompt function.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t * defaultValue - Optional string specifying the default value.\n\t */\n\tprompt: function(message, defaultValue)\n\t{\n\t\treturn prompt(message, (defaultValue != null) ? defaultValue : '');\n\t},\n\t\n\t/**\n\t * Function: confirm\n\t * \n\t * Displays the given message in a confirm dialog. This implementation uses\n\t * the built-in confirm function.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t */\n\tconfirm: function(message)\n\t{\n\t\treturn confirm(message);\n\t},\n\n\t/**\n\t * Function: error\n\t * \n\t * Displays the given error message in a new <mxWindow> of the given width.\n\t * If close is true then an additional close button is added to the window.\n\t * The optional icon specifies the icon to be used for the window. Default\n\t * is <mxUtils.errorImage>.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t * width - Integer specifying the width of the window.\n\t * close - Optional boolean indicating whether to add a close button.\n\t * icon - Optional icon for the window decoration.\n\t */\n\terror: function(message, width, close, icon)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '20px';\n\n\t\tvar img = document.createElement('img');\n\t\timg.setAttribute('src', icon || mxUtils.errorImage);\n\t\timg.setAttribute('valign', 'bottom');\n\t\timg.style.verticalAlign = 'middle';\n\t\tdiv.appendChild(img);\n\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tmxUtils.write(div, message);\n\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\t\tvar warn = new mxWindow(mxResources.get(mxUtils.errorResource) ||\n\t\t\tmxUtils.errorResource, div, (w-width)/2, h/4, width, null,\n\t\t\tfalse, true);\n\n\t\tif (close)\n\t\t{\n\t\t\tmxUtils.br(div);\n\t\t\t\n\t\t\tvar tmp = document.createElement('p');\n\t\t\tvar button = document.createElement('button');\n\n\t\t\tif (mxClient.IS_IE)\n\t\t\t{\n\t\t\t\tbutton.style.cssText = 'float:right';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbutton.setAttribute('style', 'float:right');\n\t\t\t}\n\n\t\t\tmxEvent.addListener(button, 'click', function(evt)\n\t\t\t{\n\t\t\t\twarn.destroy();\n\t\t\t});\n\n\t\t\tmxUtils.write(button, mxResources.get(mxUtils.closeResource) ||\n\t\t\t\tmxUtils.closeResource);\n\t\t\t\n\t\t\ttmp.appendChild(button);\n\t\t\tdiv.appendChild(tmp);\n\t\t\t\n\t\t\tmxUtils.br(div);\n\t\t\t\n\t\t\twarn.setClosable(true);\n\t\t}\n\t\t\n\t\twarn.setVisible(true);\n\t\t\n\t\treturn warn;\n\t},\n\n\t/**\n\t * Function: makeDraggable\n\t * \n\t * Configures the given DOM element to act as a drag source for the\n\t * specified graph. Returns a a new <mxDragSource>. If\n\t * <mxDragSource.guideEnabled> is enabled then the x and y arguments must\n\t * be used in funct to match the preview location.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var funct = function(graph, evt, cell, x, y)\n\t * {\n\t *   if (graph.canImportCell(cell))\n\t *   {\n\t *     var parent = graph.getDefaultParent();\n\t *     var vertex = null;\n\t *     \n\t *     graph.getModel().beginUpdate();\n\t *     try\n\t *     {\n\t * \t     vertex = graph.insertVertex(parent, null, 'Hello', x, y, 80, 30);\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.getModel().endUpdate();\n\t *     }\n\t *\n\t *     graph.setSelectionCell(vertex);\n\t *   }\n\t * }\n\t * \n\t * var img = document.createElement('img');\n\t * img.setAttribute('src', 'editors/images/rectangle.gif');\n\t * img.style.position = 'absolute';\n\t * img.style.left = '0px';\n\t * img.style.top = '0px';\n\t * img.style.width = '16px';\n\t * img.style.height = '16px';\n\t * \n\t * var dragImage = img.cloneNode(true);\n\t * dragImage.style.width = '32px';\n\t * dragImage.style.height = '32px';\n\t * mxUtils.makeDraggable(img, graph, funct, dragImage);\n\t * document.body.appendChild(img);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM element to make draggable.\n\t * graphF - <mxGraph> that acts as the drop target or a function that takes a\n\t * mouse event and returns the current <mxGraph>.\n\t * funct - Function to execute on a successful drop.\n\t * dragElement - Optional DOM node to be used for the drag preview.\n\t * dx - Optional horizontal offset between the cursor and the drag\n\t * preview.\n\t * dy - Optional vertical offset between the cursor and the drag\n\t * preview.\n\t * autoscroll - Optional boolean that specifies if autoscroll should be\n\t * used. Default is mxGraph.autoscroll.\n\t * scalePreview - Optional boolean that specifies if the preview element\n\t * should be scaled according to the graph scale. If this is true, then\n\t * the offsets will also be scaled. Default is false.\n\t * highlightDropTargets - Optional boolean that specifies if dropTargets\n\t * should be highlighted. Default is true.\n\t * getDropTarget - Optional function to return the drop target for a given\n\t * location (x, y). Default is mxGraph.getCellAt.\n\t */\n\tmakeDraggable: function(element, graphF, funct, dragElement, dx, dy, autoscroll,\n\t\t\tscalePreview, highlightDropTargets, getDropTarget)\n\t{\n\t\tvar dragSource = new mxDragSource(element, funct);\n\t\tdragSource.dragOffset = new mxPoint((dx != null) ? dx : 0,\n\t\t\t(dy != null) ? dy : mxConstants.TOOLTIP_VERTICAL_OFFSET);\n\t\tdragSource.autoscroll = autoscroll;\n\t\t\n\t\t// Cannot enable this by default. This needs to be enabled in the caller\n\t\t// if the funct argument uses the new x- and y-arguments.\n\t\tdragSource.setGuidesEnabled(false);\n\t\t\n\t\tif (highlightDropTargets != null)\n\t\t{\n\t\t\tdragSource.highlightDropTargets = highlightDropTargets;\n\t\t}\n\t\t\n\t\t// Overrides function to find drop target cell\n\t\tif (getDropTarget != null)\n\t\t{\n\t\t\tdragSource.getDropTarget = getDropTarget;\n\t\t}\n\t\t\n\t\t// Overrides function to get current graph\n\t\tdragSource.getGraphForEvent = function(evt)\n\t\t{\n\t\t\treturn (typeof(graphF) == 'function') ? graphF(evt) : graphF;\n\t\t};\n\t\t\n\t\t// Translates switches into dragSource customizations\n\t\tif (dragElement != null)\n\t\t{\n\t\t\tdragSource.createDragElement = function()\n\t\t\t{\n\t\t\t\treturn dragElement.cloneNode(true);\n\t\t\t};\n\t\t\t\n\t\t\tif (scalePreview)\n\t\t\t{\n\t\t\t\tdragSource.createPreviewElement = function(graph)\n\t\t\t\t{\n\t\t\t\t\tvar elt = dragElement.cloneNode(true);\n\n\t\t\t\t\tvar w = parseInt(elt.style.width);\n\t\t\t\t\tvar h = parseInt(elt.style.height);\n\t\t\t\t\telt.style.width = Math.round(w * graph.view.scale) + 'px';\n\t\t\t\t\telt.style.height = Math.round(h * graph.view.scale) + 'px';\n\t\t\t\t\t\n\t\t\t\t\treturn elt;\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn dragSource;\n\t}\n\n};\n\n__mxOutput.mxUtils = typeof mxUtils !== 'undefined' ? mxUtils : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n var mxConstants =\n {\n\t/**\n\t * Class: mxConstants\n\t * \n\t * Defines various global constants.\n\t * \n\t * Variable: DEFAULT_HOTSPOT\n\t * \n\t * Defines the portion of the cell which is to be used as a connectable\n\t * region. Default is 0.3. Possible values are 0 < x <= 1. \n\t */\n\tDEFAULT_HOTSPOT: 0.3,\n\n\t/**\n\t * Variable: MIN_HOTSPOT_SIZE\n\t * \n\t * Defines the minimum size in pixels of the portion of the cell which is\n\t * to be used as a connectable region. Default is 8.\n\t */\n\tMIN_HOTSPOT_SIZE: 8,\n\n\t/**\n\t * Variable: MAX_HOTSPOT_SIZE\n\t * \n\t * Defines the maximum size in pixels of the portion of the cell which is\n\t * to be used as a connectable region. Use 0 for no maximum. Default is 0.\n\t */\n\tMAX_HOTSPOT_SIZE: 0,\n\n\t/**\n\t * Variable: RENDERING_HINT_EXACT\n\t * \n\t * Defines the exact rendering hint.\n\t */\n\tRENDERING_HINT_EXACT: 'exact',\n\n\t/**\n\t * Variable: RENDERING_HINT_FASTER\n\t * \n\t * Defines the faster rendering hint.\n\t */\n\tRENDERING_HINT_FASTER: 'faster',\n\n\t/**\n\t * Variable: RENDERING_HINT_FASTEST\n\t * \n\t * Defines the fastest rendering hint.\n\t */\n\tRENDERING_HINT_FASTEST: 'fastest',\n\n\t/**\n\t * Variable: DIALECT_SVG\n\t * \n\t * Defines the SVG display dialect name.\n\t */\n\tDIALECT_SVG: 'svg',\n\n\t/**\n\t * Variable: DIALECT_VML\n\t * \n\t * Defines the VML display dialect name.\n\t */\n\tDIALECT_VML: 'vml',\n\n\t/**\n\t * Variable: DIALECT_MIXEDHTML\n\t * \n\t * Defines the mixed HTML display dialect name.\n\t */\n\tDIALECT_MIXEDHTML: 'mixedHtml',\n\n\t/**\n\t * Variable: DIALECT_PREFERHTML\n\t * \n\t * Defines the preferred HTML display dialect name.\n\t */\n\tDIALECT_PREFERHTML: 'preferHtml',\n\n\t/**\n\t * Variable: DIALECT_STRICTHTML\n\t * \n\t * Defines the strict HTML display dialect.\n\t */\n\tDIALECT_STRICTHTML: 'strictHtml',\n\n\t/**\n\t * Variable: NS_SVG\n\t * \n\t * Defines the SVG namespace.\n\t */\n\tNS_SVG: 'http://www.w3.org/2000/svg',\n\n\t/**\n\t * Variable: NS_XHTML\n\t * \n\t * Defines the XHTML namespace.\n\t */\n\tNS_XHTML: 'http://www.w3.org/1999/xhtml',\n\n\t/**\n\t * Variable: NS_XLINK\n\t * \n\t * Defines the XLink namespace.\n\t */\n\tNS_XLINK: 'http://www.w3.org/1999/xlink',\n\n\t/**\n\t * Variable: SHADOWCOLOR\n\t * \n\t * Defines the color to be used to draw shadows in shapes and windows.\n\t * Default is gray.\n\t */\n\tSHADOWCOLOR: 'gray',\n\n\t/**\n\t * Variable: VML_SHADOWCOLOR\n\t * \n\t * Used for shadow color in filters where transparency is not supported\n\t * (Microsoft Internet Explorer). Default is gray.\n\t */\n\tVML_SHADOWCOLOR: 'gray',\n\n\t/**\n\t * Variable: SHADOW_OFFSET_X\n\t * \n\t * Specifies the x-offset of the shadow. Default is 2.\n\t */\n\tSHADOW_OFFSET_X: 2,\n\n\t/**\n\t * Variable: SHADOW_OFFSET_Y\n\t * \n\t * Specifies the y-offset of the shadow. Default is 3.\n\t */\n\tSHADOW_OFFSET_Y: 3,\n\t\n\t/**\n\t * Variable: SHADOW_OPACITY\n\t * \n\t * Defines the opacity for shadows. Default is 1.\n\t */\n\tSHADOW_OPACITY: 1,\n \n\t/**\n\t * Variable: NODETYPE_ELEMENT\n\t * \n\t * DOM node of type ELEMENT.\n\t */\n\tNODETYPE_ELEMENT: 1,\n\n\t/**\n\t * Variable: NODETYPE_ATTRIBUTE\n\t * \n\t * DOM node of type ATTRIBUTE.\n\t */\n\tNODETYPE_ATTRIBUTE: 2,\n\n\t/**\n\t * Variable: NODETYPE_TEXT\n\t * \n\t * DOM node of type TEXT.\n\t */\n\tNODETYPE_TEXT: 3,\n\n\t/**\n\t * Variable: NODETYPE_CDATA\n\t * \n\t * DOM node of type CDATA.\n\t */\n\tNODETYPE_CDATA: 4,\n\t\n\t/**\n\t * Variable: NODETYPE_ENTITY_REFERENCE\n\t * \n\t * DOM node of type ENTITY_REFERENCE.\n\t */\n\tNODETYPE_ENTITY_REFERENCE: 5,\n\n\t/**\n\t * Variable: NODETYPE_ENTITY\n\t * \n\t * DOM node of type ENTITY.\n\t */\n\tNODETYPE_ENTITY: 6,\n\n\t/**\n\t * Variable: NODETYPE_PROCESSING_INSTRUCTION\n\t * \n\t * DOM node of type PROCESSING_INSTRUCTION.\n\t */\n\tNODETYPE_PROCESSING_INSTRUCTION: 7,\n\n\t/**\n\t * Variable: NODETYPE_COMMENT\n\t * \n\t * DOM node of type COMMENT.\n\t */\n\tNODETYPE_COMMENT: 8,\n\t\t\n\t/**\n\t * Variable: NODETYPE_DOCUMENT\n\t * \n\t * DOM node of type DOCUMENT.\n\t */\n\tNODETYPE_DOCUMENT: 9,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENTTYPE\n\t * \n\t * DOM node of type DOCUMENTTYPE.\n\t */\n\tNODETYPE_DOCUMENTTYPE: 10,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENT_FRAGMENT\n\t * \n\t * DOM node of type DOCUMENT_FRAGMENT.\n\t */\n\tNODETYPE_DOCUMENT_FRAGMENT: 11,\n\n\t/**\n\t * Variable: NODETYPE_NOTATION\n\t * \n\t * DOM node of type NOTATION.\n\t */\n\tNODETYPE_NOTATION: 12,\n\t\n\t/**\n\t * Variable: TOOLTIP_VERTICAL_OFFSET\n\t * \n\t * Defines the vertical offset for the tooltip.\n\t * Default is 16.\n\t */\n\tTOOLTIP_VERTICAL_OFFSET: 16,\n\n\t/**\n\t * Variable: DEFAULT_VALID_COLOR\n\t * \n\t * Specifies the default valid color. Default is #0000FF.\n\t */\n\tDEFAULT_VALID_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: DEFAULT_INVALID_COLOR\n\t * \n\t * Specifies the default invalid color. Default is #FF0000.\n\t */\n\tDEFAULT_INVALID_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: OUTLINE_HIGHLIGHT_COLOR\n\t * \n\t * Specifies the default highlight color for shape outlines.\n\t * Default is #0000FF. This is used in <mxEdgeHandler>.\n\t */\n\tOUTLINE_HIGHLIGHT_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: OUTLINE_HIGHLIGHT_COLOR\n\t * \n\t * Defines the strokewidth to be used for shape outlines.\n\t * Default is 5. This is used in <mxEdgeHandler>.\n\t */\n\tOUTLINE_HIGHLIGHT_STROKEWIDTH: 5,\n\n\t/**\n\t * Variable: HIGHLIGHT_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the highlights.\n\t * Default is 3.\n\t */\n\tHIGHLIGHT_STROKEWIDTH: 3,\n\n\t/**\n\t * Variable: CONSTRAINT_HIGHLIGHT_SIZE\n\t * \n\t * Size of the constraint highlight (in px). Default is 2.\n\t */\n\tHIGHLIGHT_SIZE: 2,\n\t\n\t/**\n\t * Variable: HIGHLIGHT_OPACITY\n\t * \n\t * Opacity (in %) used for the highlights (including outline).\n\t * Default is 100.\n\t */\n\tHIGHLIGHT_OPACITY: 100,\n\t\n\t/**\n\t * Variable: CURSOR_MOVABLE_VERTEX\n\t * \n\t * Defines the cursor for a movable vertex. Default is 'move'.\n\t */\n\tCURSOR_MOVABLE_VERTEX: 'move',\n\t\n\t/**\n\t * Variable: CURSOR_MOVABLE_EDGE\n\t * \n\t * Defines the cursor for a movable edge. Default is 'move'.\n\t */\n\tCURSOR_MOVABLE_EDGE: 'move',\n\t\n\t/**\n\t * Variable: CURSOR_LABEL_HANDLE\n\t * \n\t * Defines the cursor for a movable label. Default is 'default'.\n\t */\n\tCURSOR_LABEL_HANDLE: 'default',\n\t\n\t/**\n\t * Variable: CURSOR_TERMINAL_HANDLE\n\t * \n\t * Defines the cursor for a terminal handle. Default is 'pointer'.\n\t */\n\tCURSOR_TERMINAL_HANDLE: 'pointer',\n\t\n\t/**\n\t * Variable: CURSOR_BEND_HANDLE\n\t * \n\t * Defines the cursor for a movable bend. Default is 'crosshair'.\n\t */\n\tCURSOR_BEND_HANDLE: 'crosshair',\n\n\t/**\n\t * Variable: CURSOR_VIRTUAL_BEND_HANDLE\n\t * \n\t * Defines the cursor for a movable bend. Default is 'crosshair'.\n\t */\n\tCURSOR_VIRTUAL_BEND_HANDLE: 'crosshair',\n\t\n\t/**\n\t * Variable: CURSOR_CONNECT\n\t * \n\t * Defines the cursor for a connectable state. Default is 'pointer'.\n\t */\n\tCURSOR_CONNECT: 'pointer',\n\n\t/**\n\t * Variable: HIGHLIGHT_COLOR\n\t * \n\t * Defines the color to be used for the cell highlighting.\n\t * Use 'none' for no color. Default is #00FF00.\n\t */\n\tHIGHLIGHT_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: TARGET_HIGHLIGHT_COLOR\n\t * \n\t * Defines the color to be used for highlighting a target cell for a new\n\t * or changed connection. Note that this may be either a source or\n\t * target terminal in the graph. Use 'none' for no color.\n\t * Default is #0000FF.\n\t */\n\tCONNECT_TARGET_COLOR: '#0000FF',\n\n\t/**\n\t * Variable: INVALID_CONNECT_TARGET_COLOR\n\t * \n\t * Defines the color to be used for highlighting a invalid target cells\n\t * for a new or changed connections. Note that this may be either a source\n\t * or target terminal in the graph. Use 'none' for no color. Default is\n\t * #FF0000.\n\t */\n\tINVALID_CONNECT_TARGET_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: DROP_TARGET_COLOR\n\t * \n\t * Defines the color to be used for the highlighting target parent cells\n\t * (for drag and drop). Use 'none' for no color. Default is #0000FF.\n\t */\n\tDROP_TARGET_COLOR: '#0000FF',\n\n\t/**\n\t * Variable: VALID_COLOR\n\t * \n\t * Defines the color to be used for the coloring valid connection\n\t * previews. Use 'none' for no color. Default is #FF0000.\n\t */\n\tVALID_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: INVALID_COLOR\n\t * \n\t * Defines the color to be used for the coloring invalid connection\n\t * previews. Use 'none' for no color. Default is #FF0000.\n\t */\n\tINVALID_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: EDGE_SELECTION_COLOR\n\t * \n\t * Defines the color to be used for the selection border of edges. Use\n\t * 'none' for no color. Default is #00FF00.\n\t */\n\tEDGE_SELECTION_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: VERTEX_SELECTION_COLOR\n\t * \n\t * Defines the color to be used for the selection border of vertices. Use\n\t * 'none' for no color. Default is #00FF00.\n\t */\n\tVERTEX_SELECTION_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: VERTEX_SELECTION_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for vertex selections.\n\t * Default is 1.\n\t */\n\tVERTEX_SELECTION_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: EDGE_SELECTION_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for edge selections.\n\t * Default is 1.\n\t */\n\tEDGE_SELECTION_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: SELECTION_DASHED\n\t * \n\t * Defines the dashed state to be used for the vertex selection\n\t * border. Default is true.\n\t */\n\tVERTEX_SELECTION_DASHED: true,\n\n\t/**\n\t * Variable: SELECTION_DASHED\n\t * \n\t * Defines the dashed state to be used for the edge selection\n\t * border. Default is true.\n\t */\n\tEDGE_SELECTION_DASHED: true,\n\n\t/**\n\t * Variable: GUIDE_COLOR\n\t * \n\t * Defines the color to be used for the guidelines in mxGraphHandler.\n\t * Default is #FF0000.\n\t */\n\tGUIDE_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: GUIDE_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the guidelines in mxGraphHandler.\n\t * Default is 1.\n\t */\n\tGUIDE_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: OUTLINE_COLOR\n\t * \n\t * Defines the color to be used for the outline rectangle\n\t * border.  Use 'none' for no color. Default is #0099FF.\n\t */\n\tOUTLINE_COLOR: '#0099FF',\n\n\t/**\n\t * Variable: OUTLINE_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the outline rectangle\n\t * stroke width. Default is 3.\n\t */\n\tOUTLINE_STROKEWIDTH: (mxClient.IS_IE) ? 2 : 3,\n\n\t/**\n\t * Variable: HANDLE_SIZE\n\t * \n\t * Defines the default size for handles. Default is 6.\n\t */\n\tHANDLE_SIZE: 6,\n\n\t/**\n\t * Variable: LABEL_HANDLE_SIZE\n\t * \n\t * Defines the default size for label handles. Default is 4.\n\t */\n\tLABEL_HANDLE_SIZE: 4,\n\n\t/**\n\t * Variable: HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the handle fill color. Use 'none' for\n\t * no color. Default is #00FF00 (green).\n\t */\n\tHANDLE_FILLCOLOR: '#00FF00',\n\n\t/**\n\t * Variable: HANDLE_STROKECOLOR\n\t * \n\t * Defines the color to be used for the handle stroke color. Use 'none' for\n\t * no color. Default is black.\n\t */\n\tHANDLE_STROKECOLOR: 'black',\n\n\t/**\n\t * Variable: LABEL_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the label handle fill color. Use 'none'\n\t * for no color. Default is yellow.\n\t */\n\tLABEL_HANDLE_FILLCOLOR: 'yellow',\n\n\t/**\n\t * Variable: CONNECT_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the connect handle fill color. Use\n\t * 'none' for no color. Default is #0000FF (blue).\n\t */\n\tCONNECT_HANDLE_FILLCOLOR: '#0000FF',\n\n\t/**\n\t * Variable: LOCKED_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the locked handle fill color. Use\n\t * 'none' for no color. Default is #FF0000 (red).\n\t */\n\tLOCKED_HANDLE_FILLCOLOR: '#FF0000',\n\n\t/**\n\t * Variable: OUTLINE_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the outline sizer fill color. Use\n\t * 'none' for no color. Default is #00FFFF.\n\t */\n\tOUTLINE_HANDLE_FILLCOLOR: '#00FFFF',\n\n\t/**\n\t * Variable: OUTLINE_HANDLE_STROKECOLOR\n\t * \n\t * Defines the color to be used for the outline sizer stroke color. Use\n\t * 'none' for no color. Default is #0033FF.\n\t */\n\tOUTLINE_HANDLE_STROKECOLOR: '#0033FF',\n\n\t/**\n\t * Variable: DEFAULT_FONTFAMILY\n\t * \n\t * Defines the default family for all fonts. Default is Arial,Helvetica.\n\t */\n\tDEFAULT_FONTFAMILY: 'Arial,Helvetica',\n\n\t/**\n\t * Variable: DEFAULT_FONTSIZE\n\t * \n\t * Defines the default size (in px). Default is 11.\n\t */\n\tDEFAULT_FONTSIZE: 11,\n\n\t/**\n\t * Variable: DEFAULT_TEXT_DIRECTION\n\t * \n\t * Defines the default value for the <STYLE_TEXT_DIRECTION> if no value is\n\t * defined for it in the style. Default value is an empty string which means\n\t * the default system setting is used and no direction is set.\n\t */\n\tDEFAULT_TEXT_DIRECTION: '',\n\n\t/**\n\t * Variable: LINE_HEIGHT\n\t * \n\t * Defines the default line height for text labels. Default is 1.2.\n\t */\n\tLINE_HEIGHT: 1.2,\n\n\t/**\n\t * Variable: WORD_WRAP\n\t * \n\t * Defines the CSS value for the word-wrap property. Default is \"normal\".\n\t * Change this to \"break-word\" to allow long words to be able to be broken\n\t * and wrap onto the next line.\n\t */\n\tWORD_WRAP: 'normal',\n\n\t/**\n\t * Variable: ABSOLUTE_LINE_HEIGHT\n\t * \n\t * Specifies if absolute line heights should be used (px) in CSS. Default\n\t * is false. Set this to true for backwards compatibility.\n\t */\n\tABSOLUTE_LINE_HEIGHT: false,\n\n\t/**\n\t * Variable: DEFAULT_FONTSTYLE\n\t * \n\t * Defines the default style for all fonts. Default is 0. This can be set\n\t * to any combination of font styles as follows.\n\t * \n\t * (code)\n\t * mxConstants.DEFAULT_FONTSTYLE = mxConstants.FONT_BOLD | mxConstants.FONT_ITALIC;\n\t * (end)\n\t */\n\tDEFAULT_FONTSTYLE: 0,\n\n\t/**\n\t * Variable: DEFAULT_STARTSIZE\n\t * \n\t * Defines the default start size for swimlanes. Default is 40.\n\t */\n\tDEFAULT_STARTSIZE: 40,\n\n\t/**\n\t * Variable: DEFAULT_MARKERSIZE\n\t * \n\t * Defines the default size for all markers. Default is 6.\n\t */\n\tDEFAULT_MARKERSIZE: 6,\n\n\t/**\n\t * Variable: DEFAULT_IMAGESIZE\n\t * \n\t * Defines the default width and height for images used in the\n\t * label shape. Default is 24.\n\t */\n\tDEFAULT_IMAGESIZE: 24,\n\n\t/**\n\t * Variable: ENTITY_SEGMENT\n\t * \n\t * Defines the length of the horizontal segment of an Entity Relation.\n\t * This can be overridden using <mxConstants.STYLE_SEGMENT> style.\n\t * Default is 30.\n\t */\n\tENTITY_SEGMENT: 30,\n\n\t/**\n\t * Variable: RECTANGLE_ROUNDING_FACTOR\n\t * \n\t * Defines the rounding factor for rounded rectangles in percent between\n\t * 0 and 1. Values should be smaller than 0.5. Default is 0.15.\n\t */\n\tRECTANGLE_ROUNDING_FACTOR: 0.15,\n\n\t/**\n\t * Variable: LINE_ARCSIZE\n\t * \n\t * Defines the size of the arcs for rounded edges. Default is 20.\n\t */\n\tLINE_ARCSIZE: 20,\n\n\t/**\n\t * Variable: ARROW_SPACING\n\t * \n\t * Defines the spacing between the arrow shape and its terminals. Default is 0.\n\t */\n\tARROW_SPACING: 0,\n\n\t/**\n\t * Variable: ARROW_WIDTH\n\t * \n\t * Defines the width of the arrow shape. Default is 30.\n\t */\n\tARROW_WIDTH: 30,\n\n\t/**\n\t * Variable: ARROW_SIZE\n\t * \n\t * Defines the size of the arrowhead in the arrow shape. Default is 30.\n\t */\n\tARROW_SIZE: 30,\n\n\t/**\n\t * Variable: PAGE_FORMAT_A4_PORTRAIT\n\t * \n\t * Defines the rectangle for the A4 portrait page format. The dimensions\n\t * of this page format are 826x1169 pixels.\n\t */\n\tPAGE_FORMAT_A4_PORTRAIT: new mxRectangle(0, 0, 827, 1169),\n\n\t/**\n\t * Variable: PAGE_FORMAT_A4_PORTRAIT\n\t * \n\t * Defines the rectangle for the A4 portrait page format. The dimensions\n\t * of this page format are 826x1169 pixels.\n\t */\n\tPAGE_FORMAT_A4_LANDSCAPE: new mxRectangle(0, 0, 1169, 827),\n\n\t/**\n\t * Variable: PAGE_FORMAT_LETTER_PORTRAIT\n\t * \n\t * Defines the rectangle for the Letter portrait page format. The\n\t * dimensions of this page format are 850x1100 pixels.\n\t */\n\tPAGE_FORMAT_LETTER_PORTRAIT: new mxRectangle(0, 0, 850, 1100),\n\n\t/**\n\t * Variable: PAGE_FORMAT_LETTER_PORTRAIT\n\t * \n\t * Defines the rectangle for the Letter portrait page format. The dimensions\n\t * of this page format are 850x1100 pixels.\n\t */\n\tPAGE_FORMAT_LETTER_LANDSCAPE: new mxRectangle(0, 0, 1100, 850),\n\n\t/**\n\t * Variable: NONE\n\t * \n\t * Defines the value for none. Default is \"none\".\n\t */\n\tNONE: 'none',\n\n\t/**\n\t * Variable: STYLE_PERIMETER\n\t * \n\t * Defines the key for the perimeter style. This is a function that defines\n\t * the perimeter around a particular shape. Possible values are the\n\t * functions defined in <mxPerimeter>. Alternatively, the constants in this\n\t * class that start with \"PERIMETER_\" may be used to access\n\t * perimeter styles in <mxStyleRegistry>. Value is \"perimeter\".\n\t */\n\tSTYLE_PERIMETER: 'perimeter',\n\t\n\t/**\n\t * Variable: STYLE_SOURCE_PORT\n\t * \n\t * Defines the ID of the cell that should be used for computing the\n\t * perimeter point of the source for an edge. This allows for graphically\n\t * connecting to a cell while keeping the actual terminal of the edge.\n\t * Value is \"sourcePort\".\n\t */\n\tSTYLE_SOURCE_PORT: 'sourcePort',\n\t\n\t/**\n\t * Variable: STYLE_TARGET_PORT\n\t * \n\t * Defines the ID of the cell that should be used for computing the\n\t * perimeter point of the target for an edge. This allows for graphically\n\t * connecting to a cell while keeping the actual terminal of the edge.\n\t * Value is \"targetPort\".\n\t */\n\tSTYLE_TARGET_PORT: 'targetPort',\n\n\t/**\n\t * Variable: STYLE_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to cells in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, \n\t * DIRECTION_EAST\" and \"DIRECTION_WEST\". Value is\n\t * \"portConstraint\".\n\t */\n\tSTYLE_PORT_CONSTRAINT: 'portConstraint',\n\n\t/**\n\t * Variable: STYLE_PORT_CONSTRAINT_ROTATION\n\t * \n\t * Define whether port constraint directions are rotated with vertex\n\t * rotation. 0 (default) causes port constraints to remain absolute, \n\t * relative to the graph, 1 causes the constraints to rotate with\n\t * the vertex. Value is \"portConstraintRotation\".\n\t */\n\tSTYLE_PORT_CONSTRAINT_ROTATION: 'portConstraintRotation',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to sources in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, DIRECTION_EAST\"\n\t * and \"DIRECTION_WEST\". Value is \"sourcePortConstraint\".\n\t */\n\tSTYLE_SOURCE_PORT_CONSTRAINT: 'sourcePortConstraint',\n\n\t/**\n\t * Variable: STYLE_TARGET_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to targets in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, DIRECTION_EAST\"\n\t * and \"DIRECTION_WEST\". Value is \"targetPortConstraint\".\n\t */\n\tSTYLE_TARGET_PORT_CONSTRAINT: 'targetPortConstraint',\n\n\t/**\n\t * Variable: STYLE_OPACITY\n\t * \n\t * Defines the key for the opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"opacity\".\n\t */\n\tSTYLE_OPACITY: 'opacity',\n\n\t/**\n\t * Variable: STYLE_FILL_OPACITY\n\t * \n\t * Defines the key for the fill opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"fillOpacity\".\n\t */\n\tSTYLE_FILL_OPACITY: 'fillOpacity',\n\n\t/**\n\t * Variable: STYLE_STROKE_OPACITY\n\t * \n\t * Defines the key for the stroke opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"strokeOpacity\".\n\t */\n\tSTYLE_STROKE_OPACITY: 'strokeOpacity',\n\n\t/**\n\t * Variable: STYLE_TEXT_OPACITY\n\t * \n\t * Defines the key for the text opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"textOpacity\".\n\t */\n\tSTYLE_TEXT_OPACITY: 'textOpacity',\n\n\t/**\n\t * Variable: STYLE_TEXT_DIRECTION\n\t * \n\t * Defines the key for the text direction style. Possible values are\n\t * \"TEXT_DIRECTION_DEFAULT, TEXT_DIRECTION_AUTO, TEXT_DIRECTION_LTR\"\n\t * and \"TEXT_DIRECTION_RTL\". Value is \"textDirection\".\n\t * The default value for the style is defined in <DEFAULT_TEXT_DIRECTION>.\n\t * It is used is no value is defined for this key in a given style. This is\n\t * an experimental style that is currently ignored in the backends.\n\t */\n\tSTYLE_TEXT_DIRECTION: 'textDirection',\n\n\t/**\n\t * Variable: STYLE_OVERFLOW\n\t * \n\t * Defines the key for the overflow style. Possible values are 'visible',\n\t * 'hidden', 'fill' and 'width'. The default value is 'visible'. This value\n\t * specifies how overlapping vertex labels are handled. A value of\n\t * 'visible' will show the complete label. A value of 'hidden' will clip\n\t * the label so that it does not overlap the vertex bounds. A value of\n\t * 'fill' will use the vertex bounds and a value of 'width' will use the\n\t * vertex width for the label. See <mxGraph.isLabelClipped>. Note that\n\t * the vertical alignment is ignored for overflow fill and for horizontal\n\t * alignment, left should be used to avoid pixel offsets in Internet Explorer\n\t * 11 and earlier or if foreignObjects are disabled. Value is \"overflow\".\n\t */\n\tSTYLE_OVERFLOW: 'overflow',\n\n\t/**\n\t * Variable: STYLE_ORTHOGONAL\n\t * \n\t * Defines if the connection points on either end of the edge should be\n\t * computed so that the edge is vertical or horizontal if possible and\n\t * if the point is not at a fixed location. Default is false. This is\n\t * used in <mxGraph.isOrthogonal>, which also returns true if the edgeStyle\n\t * of the edge is an elbow or entity. Value is \"orthogonal\".\n\t */\n\tSTYLE_ORTHOGONAL: 'orthogonal',\n\n\t/**\n\t * Variable: STYLE_EXIT_X\n\t * \n\t * Defines the key for the horizontal relative coordinate connection point\n\t * of an edge with its source terminal. Value is \"exitX\".\n\t */\n\tSTYLE_EXIT_X: 'exitX',\n\n\t/**\n\t * Variable: STYLE_EXIT_Y\n\t * \n\t * Defines the key for the vertical relative coordinate connection point\n\t * of an edge with its source terminal. Value is \"exitY\".\n\t */\n\tSTYLE_EXIT_Y: 'exitY',\n\n\t\n\t/**\n\t* Variable: STYLE_EXIT_DX\n\t* \n\t* Defines the key for the horizontal offset of the connection point\n\t* of an edge with its source terminal. Value is \"exitDx\".\n\t*/\n\tSTYLE_EXIT_DX: 'exitDx',\n\n\t/**\n\t* Variable: STYLE_EXIT_DY\n\t* \n\t* Defines the key for the vertical offset of the connection point\n\t* of an edge with its source terminal. Value is \"exitDy\".\n\t*/\n\tSTYLE_EXIT_DY: 'exitDy',\n\t\n\t/**\n\t * Variable: STYLE_EXIT_PERIMETER\n\t * \n\t * Defines if the perimeter should be used to find the exact entry point\n\t * along the perimeter of the source. Possible values are 0 (false) and\n\t * 1 (true). Default is 1 (true). Value is \"exitPerimeter\".\n\t */\n\tSTYLE_EXIT_PERIMETER: 'exitPerimeter',\n\n\t/**\n\t * Variable: STYLE_ENTRY_X\n\t * \n\t * Defines the key for the horizontal relative coordinate connection point\n\t * of an edge with its target terminal. Value is \"entryX\".\n\t */\n\tSTYLE_ENTRY_X: 'entryX',\n\n\t/**\n\t * Variable: STYLE_ENTRY_Y\n\t * \n\t * Defines the key for the vertical relative coordinate connection point\n\t * of an edge with its target terminal. Value is \"entryY\".\n\t */\n\tSTYLE_ENTRY_Y: 'entryY',\n\n\t/**\n\t * Variable: STYLE_ENTRY_DX\n\t * \n\t* Defines the key for the horizontal offset of the connection point\n\t* of an edge with its target terminal. Value is \"entryDx\".\n\t*/\n\tSTYLE_ENTRY_DX: 'entryDx',\n\n\t/**\n\t * Variable: STYLE_ENTRY_DY\n\t * \n\t* Defines the key for the vertical offset of the connection point\n\t* of an edge with its target terminal. Value is \"entryDy\".\n\t*/\n\tSTYLE_ENTRY_DY: 'entryDy',\n\n\t/**\n\t * Variable: STYLE_ENTRY_PERIMETER\n\t * \n\t * Defines if the perimeter should be used to find the exact entry point\n\t * along the perimeter of the target. Possible values are 0 (false) and\n\t * 1 (true). Default is 1 (true). Value is \"entryPerimeter\".\n\t */\n\tSTYLE_ENTRY_PERIMETER: 'entryPerimeter',\n\n\t/**\n\t * Variable: STYLE_WHITE_SPACE\n\t * \n\t * Defines the key for the white-space style. Possible values are 'nowrap'\n\t * and 'wrap'. The default value is 'nowrap'. This value specifies how\n\t * white-space inside a HTML vertex label should be handled. A value of\n\t * 'nowrap' means the text will never wrap to the next line until a\n\t * linefeed is encountered. A value of 'wrap' means text will wrap when\n\t * necessary. This style is only used for HTML labels.\n\t * See <mxGraph.isWrapping>. Value is \"whiteSpace\".\n\t */\n\tSTYLE_WHITE_SPACE: 'whiteSpace',\n\n\t/**\n\t * Variable: STYLE_ROTATION\n\t * \n\t * Defines the key for the rotation style. The type of the value is \n\t * numeric and the possible range is 0-360. Value is \"rotation\".\n\t */\n\tSTYLE_ROTATION: 'rotation',\n\n\t/**\n\t * Variable: STYLE_FILLCOLOR\n\t * \n\t * Defines the key for the fill color. Possible values are all HTML color\n\t * names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit' or 'indicated' to use the color code of a related cell or the\n\t * indicator shape. Value is \"fillColor\".\n\t */\n\tSTYLE_FILLCOLOR: 'fillColor',\n\n\t/**\n\t * Variable: STYLE_POINTER_EVENTS\n\t * \n\t * Specifies if pointer events should be fired on transparent backgrounds.\n\t * This style is currently only supported in <mxRectangleShape>. Default\n\t * is true. Value is \"pointerEvents\". This is typically set to\n\t * false in groups where the transparent part should allow any underlying\n\t * cells to be clickable.\n\t */\n\tSTYLE_POINTER_EVENTS: 'pointerEvents',\n\n\t/**\n\t * Variable: STYLE_SWIMLANE_FILLCOLOR\n\t * \n\t * Defines the key for the fill color of the swimlane background. Possible\n\t * values are all HTML color names or HEX codes. Default is no background.\n\t * Value is \"swimlaneFillColor\".\n\t */\n\tSTYLE_SWIMLANE_FILLCOLOR: 'swimlaneFillColor',\n\n\t/**\n\t * Variable: STYLE_MARGIN\n\t * \n\t * Defines the key for the margin between the ellipses in the double ellipse shape.\n\t * Possible values are all positive numbers. Value is \"margin\".\n\t */\n\tSTYLE_MARGIN: 'margin',\n\n\t/**\n\t * Variable: STYLE_GRADIENTCOLOR\n\t * \n\t * Defines the key for the gradient color. Possible values are all HTML color\n\t * names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit' or 'indicated' to use the color code of a related cell or the\n\t * indicator shape. This is ignored if no fill color is defined. Value is\n\t * \"gradientColor\".\n\t */\n\tSTYLE_GRADIENTCOLOR: 'gradientColor',\n\n\t/**\n\t * Variable: STYLE_GRADIENT_DIRECTION\n\t * \n\t * Defines the key for the gradient direction. Possible values are\n\t * <DIRECTION_EAST>, <DIRECTION_WEST>, <DIRECTION_NORTH> and\n\t * <DIRECTION_SOUTH>. Default is <DIRECTION_SOUTH>. Generally, and by\n\t * default in mxGraph, gradient painting is done from the value of\n\t * <STYLE_FILLCOLOR> to the value of <STYLE_GRADIENTCOLOR>. Taking the\n\t * example of <DIRECTION_NORTH>, this means <STYLE_FILLCOLOR> color at the \n\t * bottom of paint pattern and <STYLE_GRADIENTCOLOR> at top, with a\n\t * gradient in-between. Value is \"gradientDirection\".\n\t */\n\tSTYLE_GRADIENT_DIRECTION: 'gradientDirection',\n\n\t/**\n\t * Variable: STYLE_STROKECOLOR\n\t * \n\t * Defines the key for the strokeColor style. Possible values are all HTML\n\t * color names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit', 'indicated' to use the color code of a related cell or the\n\t * indicator shape or 'none' for no color. Value is \"strokeColor\".\n\t */\n\tSTYLE_STROKECOLOR: 'strokeColor',\n\n\t/**\n\t * Variable: STYLE_SEPARATORCOLOR\n\t * \n\t * Defines the key for the separatorColor style. Possible values are all\n\t * HTML color names or HEX codes. This style is only used for\n\t * <SHAPE_SWIMLANE> shapes. Value is \"separatorColor\".\n\t */\n\tSTYLE_SEPARATORCOLOR: 'separatorColor',\n\n\t/**\n\t * Variable: STYLE_STROKEWIDTH\n\t * \n\t * Defines the key for the strokeWidth style. The type of the value is \n\t * numeric and the possible range is any non-negative value larger or equal\n\t * to 1. The value defines the stroke width in pixels. Note: To hide a\n\t * stroke use strokeColor none. Value is \"strokeWidth\".\n\t */\n\tSTYLE_STROKEWIDTH: 'strokeWidth',\n\n\t/**\n\t * Variable: STYLE_ALIGN\n\t * \n\t * Defines the key for the align style. Possible values are <ALIGN_LEFT>,\n\t * <ALIGN_CENTER> and <ALIGN_RIGHT>. This value defines how the lines of\n\t * the label are horizontally aligned. <ALIGN_LEFT> mean label text lines\n\t * are aligned to left of the label bounds, <ALIGN_RIGHT> to the right of\n\t * the label bounds and <ALIGN_CENTER> means the center of the text lines\n\t * are aligned in the center of the label bounds. Note this value doesn't\n\t * affect the positioning of the overall label bounds relative to the\n\t * vertex, to move the label bounds horizontally, use\n\t * <STYLE_LABEL_POSITION>. Value is \"align\".\n\t */\n\tSTYLE_ALIGN: 'align',\n\n\t/**\n\t * Variable: STYLE_VERTICAL_ALIGN\n\t * \n\t * Defines the key for the verticalAlign style. Possible values are\n\t * <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>. This value defines how\n\t * the lines of the label are vertically aligned. <ALIGN_TOP> means the\n\t * topmost label text line is aligned against the top of the label bounds,\n\t * <ALIGN_BOTTOM> means the bottom-most label text line is aligned against\n\t * the bottom of the label bounds and <ALIGN_MIDDLE> means there is equal\n\t * spacing between the topmost text label line and the top of the label\n\t * bounds and the bottom-most text label line and the bottom of the label\n\t * bounds. Note this value doesn't affect the positioning of the overall\n\t * label bounds relative to the vertex, to move the label bounds\n\t * vertically, use <STYLE_VERTICAL_LABEL_POSITION>. Value is \"verticalAlign\".\n\t */\n\tSTYLE_VERTICAL_ALIGN: 'verticalAlign',\n\n\t/**\n\t * Variable: STYLE_LABEL_WIDTH\n\t * \n\t * Defines the key for the width of the label if the label position is not\n\t * center. Value is \"labelWidth\".\n\t */\n\tSTYLE_LABEL_WIDTH: 'labelWidth',\n\n\t/**\n\t * Variable: STYLE_LABEL_POSITION\n\t * \n\t * Defines the key for the horizontal label position of vertices. Possible\n\t * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>. Default is\n\t * <ALIGN_CENTER>. The label align defines the position of the label\n\t * relative to the cell. <ALIGN_LEFT> means the entire label bounds is\n\t * placed completely just to the left of the vertex, <ALIGN_RIGHT> means\n\t * adjust to the right and <ALIGN_CENTER> means the label bounds are\n\t * vertically aligned with the bounds of the vertex. Note this value\n\t * doesn't affect the positioning of label within the label bounds, to move\n\t * the label horizontally within the label bounds, use <STYLE_ALIGN>.\n\t * Value is \"labelPosition\".\n\t */\n\tSTYLE_LABEL_POSITION: 'labelPosition',\n\n\t/**\n\t * Variable: STYLE_VERTICAL_LABEL_POSITION\n\t * \n\t * Defines the key for the vertical label position of vertices. Possible\n\t * values are <ALIGN_TOP>, <ALIGN_BOTTOM> and <ALIGN_MIDDLE>. Default is\n\t * <ALIGN_MIDDLE>. The label align defines the position of the label\n\t * relative to the cell. <ALIGN_TOP> means the entire label bounds is\n\t * placed completely just on the top of the vertex, <ALIGN_BOTTOM> means\n\t * adjust on the bottom and <ALIGN_MIDDLE> means the label bounds are\n\t * horizontally aligned with the bounds of the vertex. Note this value\n\t * doesn't affect the positioning of label within the label bounds, to move\n\t * the label vertically within the label bounds, use\n\t * <STYLE_VERTICAL_ALIGN>. Value is \"verticalLabelPosition\".\n\t */\n\tSTYLE_VERTICAL_LABEL_POSITION: 'verticalLabelPosition',\n\t\n\t/**\n\t * Variable: STYLE_IMAGE_ASPECT\n\t * \n\t * Defines the key for the image aspect style. Possible values are 0 (do\n\t * not preserve aspect) or 1 (keep aspect). This is only used in\n\t * <mxImageShape>. Default is 1. Value is \"imageAspect\".\n\t */\n\tSTYLE_IMAGE_ASPECT: 'imageAspect',\n\n\t/**\n\t * Variable: STYLE_IMAGE_ALIGN\n\t * \n\t * Defines the key for the align style. Possible values are <ALIGN_LEFT>,\n\t * <ALIGN_CENTER> and <ALIGN_RIGHT>. The value defines how any image in the\n\t * vertex label is aligned horizontally within the label bounds of a\n\t * <SHAPE_LABEL> shape. Value is \"imageAlign\".\n\t */\n\tSTYLE_IMAGE_ALIGN: 'imageAlign',\n\n\t/**\n\t * Variable: STYLE_IMAGE_VERTICAL_ALIGN\n\t * \n\t * Defines the key for the verticalAlign style. Possible values are\n\t * <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>. The value defines how\n\t * any image in the vertex label is aligned vertically within the label\n\t * bounds of a <SHAPE_LABEL> shape. Value is \"imageVerticalAlign\".\n\t */\n\tSTYLE_IMAGE_VERTICAL_ALIGN: 'imageVerticalAlign',\n\n\t/**\n\t * Variable: STYLE_GLASS\n\t * \n\t * Defines the key for the glass style. Possible values are 0 (disabled) and\n\t * 1(enabled). The default value is 0. This is used in <mxLabel>. Value is\n\t * \"glass\".\n\t */\n\tSTYLE_GLASS: 'glass',\n\n\t/**\n\t * Variable: STYLE_IMAGE\n\t * \n\t * Defines the key for the image style. Possible values are any image URL,\n\t * the type of the value is String. This is the path to the image that is\n\t * to be displayed within the label of a vertex. Data URLs should use the\n\t * following format: data:image/png,xyz where xyz is the base64 encoded\n\t * data (without the \"base64\"-prefix). Note that Data URLs are only\n\t * supported in modern browsers. Value is \"image\".\n\t */\n\tSTYLE_IMAGE: 'image',\n\n\t/**\n\t * Variable: STYLE_IMAGE_WIDTH\n\t * \n\t * Defines the key for the imageWidth style. The type of this value is\n\t * int, the value is the image width in pixels and must be greater than 0.\n\t * Value is \"imageWidth\".\n\t */\n\tSTYLE_IMAGE_WIDTH: 'imageWidth',\n\n\t/**\n\t * Variable: STYLE_IMAGE_HEIGHT\n\t * \n\t * Defines the key for the imageHeight style. The type of this value is\n\t * int, the value is the image height in pixels and must be greater than 0.\n\t * Value is \"imageHeight\".\n\t */\n\tSTYLE_IMAGE_HEIGHT: 'imageHeight',\n\n\t/**\n\t * Variable: STYLE_IMAGE_BACKGROUND\n\t * \n\t * Defines the key for the image background color. This style is only used\n\t * in <mxImageShape>. Possible values are all HTML color names or HEX\n\t * codes. Value is \"imageBackground\".\n\t */\n\tSTYLE_IMAGE_BACKGROUND: 'imageBackground',\n\n\t/**\n\t * Variable: STYLE_IMAGE_BORDER\n\t * \n\t * Defines the key for the image border color. This style is only used in\n\t * <mxImageShape>. Possible values are all HTML color names or HEX codes.\n\t * Value is \"imageBorder\".\n\t */\n\tSTYLE_IMAGE_BORDER: 'imageBorder',\n\n\t/**\n\t * Variable: STYLE_FLIPH\n\t * \n\t * Defines the key for the horizontal image flip. This style is only used\n\t * in <mxImageShape>. Possible values are 0 and 1. Default is 0. Value is\n\t * \"flipH\".\n\t */\n\tSTYLE_FLIPH: 'flipH',\n\n\t/**\n\t * Variable: STYLE_FLIPV\n\t * \n\t * Defines the key for the vertical flip. Possible values are 0 and 1.\n\t * Default is 0. Value is \"flipV\".\n\t */\n\tSTYLE_FLIPV: 'flipV',\n\n\t/**\n\t * Variable: STYLE_NOLABEL\n\t * \n\t * Defines the key for the noLabel style. If this is true then no label is\n\t * visible for a given cell. Possible values are true or false (1 or 0).\n\t * Default is false. Value is \"noLabel\".\n\t */\n\tSTYLE_NOLABEL: 'noLabel',\n\n\t/**\n\t * Variable: STYLE_NOEDGESTYLE\n\t * \n\t * Defines the key for the noEdgeStyle style. If this is true then no edge\n\t * style is applied for a given edge. Possible values are true or false\n\t * (1 or 0). Default is false. Value is \"noEdgeStyle\".\n\t */\n\tSTYLE_NOEDGESTYLE: 'noEdgeStyle',\n\n\t/**\n\t * Variable: STYLE_LABEL_BACKGROUNDCOLOR\n\t * \n\t * Defines the key for the label background color. Possible values are all\n\t * HTML color names or HEX codes. Value is \"labelBackgroundColor\".\n\t */\n\tSTYLE_LABEL_BACKGROUNDCOLOR: 'labelBackgroundColor',\n\n\t/**\n\t * Variable: STYLE_LABEL_BORDERCOLOR\n\t * \n\t * Defines the key for the label border color. Possible values are all\n\t * HTML color names or HEX codes. Value is \"labelBorderColor\".\n\t */\n\tSTYLE_LABEL_BORDERCOLOR: 'labelBorderColor',\n\n\t/**\n\t * Variable: STYLE_LABEL_PADDING\n\t * \n\t * Defines the key for the label padding, ie. the space between the label\n\t * border and the label. Value is \"labelPadding\".\n\t */\n\tSTYLE_LABEL_PADDING: 'labelPadding',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_SHAPE\n\t * \n\t * Defines the key for the indicator shape used within an <mxLabel>.\n\t * Possible values are all SHAPE_* constants or the names of any new\n\t * shapes. The indicatorShape has precedence over the indicatorImage.\n\t * Value is \"indicatorShape\".\n\t */\n\tSTYLE_INDICATOR_SHAPE: 'indicatorShape',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_IMAGE\n\t * \n\t * Defines the key for the indicator image used within an <mxLabel>.\n\t * Possible values are all image URLs. The indicatorShape has\n\t * precedence over the indicatorImage. Value is \"indicatorImage\".\n\t */\n\tSTYLE_INDICATOR_IMAGE: 'indicatorImage',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_COLOR\n\t * \n\t * Defines the key for the indicatorColor style. Possible values are all\n\t * HTML color names or HEX codes, as well as the special 'swimlane' keyword\n\t * to refer to the color of the parent swimlane if one exists. Value is\n\t * \"indicatorColor\".\n\t */\n\tSTYLE_INDICATOR_COLOR: 'indicatorColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_STROKECOLOR\n\t * \n\t * Defines the key for the indicator stroke color in <mxLabel>.\n\t * Possible values are all color codes. Value is \"indicatorStrokeColor\".\n\t */\n\tSTYLE_INDICATOR_STROKECOLOR: 'indicatorStrokeColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_GRADIENTCOLOR\n\t * \n\t * Defines the key for the indicatorGradientColor style. Possible values\n\t * are all HTML color names or HEX codes. This style is only supported in\n\t * <SHAPE_LABEL> shapes. Value is \"indicatorGradientColor\".\n\t */\n\tSTYLE_INDICATOR_GRADIENTCOLOR: 'indicatorGradientColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_SPACING\n\t * \n\t * The defines the key for the spacing between the label and the\n\t * indicator in <mxLabel>. Possible values are in pixels. Value is\n\t * \"indicatorSpacing\".\n\t */\n\tSTYLE_INDICATOR_SPACING: 'indicatorSpacing',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_WIDTH\n\t * \n\t * Defines the key for the indicator width. Possible values start at 0 (in\n\t * pixels). Value is \"indicatorWidth\".\n\t */\n\tSTYLE_INDICATOR_WIDTH: 'indicatorWidth',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_HEIGHT\n\t * \n\t * Defines the key for the indicator height. Possible values start at 0 (in\n\t * pixels). Value is \"indicatorHeight\".\n\t */\n\tSTYLE_INDICATOR_HEIGHT: 'indicatorHeight',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_DIRECTION\n\t * \n\t * Defines the key for the indicatorDirection style. The direction style is\n\t * used to specify the direction of certain shapes (eg. <mxTriangle>).\n\t * Possible values are <DIRECTION_EAST> (default), <DIRECTION_WEST>,\n\t * <DIRECTION_NORTH> and <DIRECTION_SOUTH>. Value is \"indicatorDirection\".\n\t */\n\tSTYLE_INDICATOR_DIRECTION: 'indicatorDirection',\n\n\t/**\n\t * Variable: STYLE_SHADOW\n\t * \n\t * Defines the key for the shadow style. The type of the value is Boolean.\n\t * Value is \"shadow\".\n\t */\n\tSTYLE_SHADOW: 'shadow',\n\t\n\t/**\n\t * Variable: STYLE_SEGMENT\n\t * \n\t * Defines the key for the segment style. The type of this value is float\n\t * and the value represents the size of the horizontal segment of the\n\t * entity relation style. Default is ENTITY_SEGMENT. Value is \"segment\".\n\t */\n\tSTYLE_SEGMENT: 'segment',\n\t\n\t/**\n\t * Variable: STYLE_ENDARROW\n\t *\n\t * Defines the key for the end arrow marker. Possible values are all\n\t * constants with an ARROW-prefix. This is only used in <mxConnector>.\n\t * Value is \"endArrow\".\n\t *\n\t * Example:\n\t * (code)\n\t * style[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\t * (end)\n\t */\n\tSTYLE_ENDARROW: 'endArrow',\n\n\t/**\n\t * Variable: STYLE_STARTARROW\n\t * \n\t * Defines the key for the start arrow marker. Possible values are all\n\t * constants with an ARROW-prefix. This is only used in <mxConnector>.\n\t * See <STYLE_ENDARROW>. Value is \"startArrow\".\n\t */\n\tSTYLE_STARTARROW: 'startArrow',\n\n\t/**\n\t * Variable: STYLE_ENDSIZE\n\t * \n\t * Defines the key for the endSize style. The type of this value is numeric\n\t * and the value represents the size of the end marker in pixels. Value is\n\t * \"endSize\".\n\t */\n\tSTYLE_ENDSIZE: 'endSize',\n\n\t/**\n\t * Variable: STYLE_STARTSIZE\n\t * \n\t * Defines the key for the startSize style. The type of this value is\n\t * numeric and the value represents the size of the start marker or the\n\t * size of the swimlane title region depending on the shape it is used for.\n\t * Value is \"startSize\".\n\t */\n\tSTYLE_STARTSIZE: 'startSize',\n\n\t/**\n\t * Variable: STYLE_SWIMLANE_LINE\n\t * \n\t * Defines the key for the swimlaneLine style. This style specifies whether\n\t * the line between the title regio of a swimlane should be visible. Use 0\n\t * for hidden or 1 (default) for visible. Value is \"swimlaneLine\".\n\t */\n\tSTYLE_SWIMLANE_LINE: 'swimlaneLine',\n\n\t/**\n\t * Variable: STYLE_ENDFILL\n\t * \n\t * Defines the key for the endFill style. Use 0 for no fill or 1 (default)\n\t * for fill. (This style is only exported via <mxImageExport>.) Value is\n\t * \"endFill\".\n\t */\n\tSTYLE_ENDFILL: 'endFill',\n\n\t/**\n\t * Variable: STYLE_STARTFILL\n\t * \n\t * Defines the key for the startFill style. Use 0 for no fill or 1 (default)\n\t * for fill. (This style is only exported via <mxImageExport>.) Value is\n\t * \"startFill\".\n\t */\n\tSTYLE_STARTFILL: 'startFill',\n\n\t/**\n\t * Variable: STYLE_DASHED\n\t * \n\t * Defines the key for the dashed style. Use 0 (default) for non-dashed or 1\n\t * for dashed. Value is \"dashed\".\n\t */\n\tSTYLE_DASHED: 'dashed',\n\n\t/**\n\t * Variable: STYLE_DASH_PATTERN\n\t * \n\t * Defines the key for the dashed pattern style in SVG and image exports.\n\t * The type of this value is a space separated list of numbers that specify\n\t * a custom-defined dash pattern. Dash styles are defined in terms of the\n\t * length of the dash (the drawn part of the stroke) and the length of the\n\t * space between the dashes. The lengths are relative to the line width: a\n\t * length of \"1\" is equal to the line width. VML ignores this style and\n\t * uses dashStyle instead as defined in the VML specification. This style\n\t * is only used in the <mxConnector> shape. Value is \"dashPattern\".\n\t */\n\tSTYLE_DASH_PATTERN: 'dashPattern',\n\n\t/**\n\t * Variable: STYLE_FIX_DASH\n\t * \n\t * Defines the key for the fixDash style. Use 0 (default) for dash patterns\n\t * that depend on the linewidth and 1 for dash patterns that ignore the\n\t * line width. Value is \"fixDash\".\n\t */\n\tSTYLE_FIX_DASH: 'fixDash',\n\n\t/**\n\t * Variable: STYLE_ROUNDED\n\t * \n\t * Defines the key for the rounded style. The type of this value is\n\t * Boolean. For edges this determines whether or not joins between edges\n\t * segments are smoothed to a rounded finish. For vertices that have the\n\t * rectangle shape, this determines whether or not the rectangle is\n\t * rounded. Use 0 (default) for non-rounded or 1 for rounded. Value is\n\t * \"rounded\".\n\t */\n\tSTYLE_ROUNDED: 'rounded',\n\n\t/**\n\t * Variable: STYLE_CURVED\n\t * \n\t * Defines the key for the curved style. The type of this value is\n\t * Boolean. It is only applicable for connector shapes. Use 0 (default)\n\t * for non-curved or 1 for curved. Value is \"curved\".\n\t */\n\tSTYLE_CURVED: 'curved',\n\n\t/**\n\t * Variable: STYLE_ARCSIZE\n\t * \n\t * Defines the rounding factor for a rounded rectangle in percent (without\n\t * the percent sign). Possible values are between 0 and 100. If this value\n\t * is not specified then RECTANGLE_ROUNDING_FACTOR * 100 is used. For\n\t * edges, this defines the absolute size of rounded corners in pixels. If\n\t * this values is not specified then LINE_ARCSIZE is used.\n\t * (This style is only exported via <mxImageExport>.) Value is \"arcSize\".\n\t */\n\tSTYLE_ARCSIZE: 'arcSize',\n\n\t/**\n\t * Variable: STYLE_ABSOLUTE_ARCSIZE\n\t * \n\t * Defines the key for the absolute arc size style. This specifies if\n\t * arcSize for rectangles is abolute or relative. Possible values are 1\n\t * and 0 (default). Value is \"absoluteArcSize\".\n\t */\n\tSTYLE_ABSOLUTE_ARCSIZE: 'absoluteArcSize',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PERIMETER_SPACING\n\t * \n\t * Defines the key for the source perimeter spacing. The type of this value\n\t * is numeric. This is the distance between the source connection point of\n\t * an edge and the perimeter of the source vertex in pixels. This style\n\t * only applies to edges. Value is \"sourcePerimeterSpacing\".\n\t */\n\tSTYLE_SOURCE_PERIMETER_SPACING: 'sourcePerimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_TARGET_PERIMETER_SPACING\n\t * \n\t * Defines the key for the target perimeter spacing. The type of this value\n\t * is numeric. This is the distance between the target connection point of\n\t * an edge and the perimeter of the target vertex in pixels. This style\n\t * only applies to edges. Value is \"targetPerimeterSpacing\".\n\t */\n\tSTYLE_TARGET_PERIMETER_SPACING: 'targetPerimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_PERIMETER_SPACING\n\t * \n\t * Defines the key for the perimeter spacing. This is the distance between\n\t * the connection point and the perimeter in pixels. When used in a vertex\n\t * style, this applies to all incoming edges to floating ports (edges that\n\t * terminate on the perimeter of the vertex). When used in an edge style,\n\t * this spacing applies to the source and target separately, if they\n\t * terminate in floating ports (on the perimeter of the vertex). Value is\n\t * \"perimeterSpacing\".\n\t */\n\tSTYLE_PERIMETER_SPACING: 'perimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_SPACING\n\t * \n\t * Defines the key for the spacing. The value represents the spacing, in\n\t * pixels, added to each side of a label in a vertex (style applies to\n\t * vertices only). Value is \"spacing\".\n\t */\n\tSTYLE_SPACING: 'spacing',\n\n\t/**\n\t * Variable: STYLE_SPACING_TOP\n\t * \n\t * Defines the key for the spacingTop style. The value represents the\n\t * spacing, in pixels, added to the top side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingTop\".\n\t */\n\tSTYLE_SPACING_TOP: 'spacingTop',\n\n\t/**\n\t * Variable: STYLE_SPACING_LEFT\n\t * \n\t * Defines the key for the spacingLeft style. The value represents the\n\t * spacing, in pixels, added to the left side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingLeft\".\n\t */\n\tSTYLE_SPACING_LEFT: 'spacingLeft',\n\n\t/**\n\t * Variable: STYLE_SPACING_BOTTOM\n\t * \n\t * Defines the key for the spacingBottom style The value represents the\n\t * spacing, in pixels, added to the bottom side of a label in a vertex\n\t * (style applies to vertices only). Value is \"spacingBottom\".\n\t */\n\tSTYLE_SPACING_BOTTOM: 'spacingBottom',\n\n\t/**\n\t * Variable: STYLE_SPACING_RIGHT\n\t * \n\t * Defines the key for the spacingRight style The value represents the\n\t * spacing, in pixels, added to the right side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingRight\".\n\t */\n\tSTYLE_SPACING_RIGHT: 'spacingRight',\n\n\t/**\n\t * Variable: STYLE_HORIZONTAL\n\t * \n\t * Defines the key for the horizontal style. Possible values are\n\t * true or false. This value only applies to vertices. If the <STYLE_SHAPE>\n\t * is \"SHAPE_SWIMLANE\" a value of false indicates that the\n\t * swimlane should be drawn vertically, true indicates to draw it\n\t * horizontally. If the shape style does not indicate that this vertex is a\n\t * swimlane, this value affects only whether the label is drawn\n\t * horizontally or vertically. Value is \"horizontal\".\n\t */\n\tSTYLE_HORIZONTAL: 'horizontal',\n\n\t/**\n\t * Variable: STYLE_DIRECTION\n\t * \n\t * Defines the key for the direction style. The direction style is used\n\t * to specify the direction of certain shapes (eg. <mxTriangle>).\n\t * Possible values are <DIRECTION_EAST> (default), <DIRECTION_WEST>,\n\t * <DIRECTION_NORTH> and <DIRECTION_SOUTH>. Value is \"direction\".\n\t */\n\tSTYLE_DIRECTION: 'direction',\n\n\t/**\n\t * Variable: STYLE_ANCHOR_POINT_DIRECTION\n\t * \n\t * Defines the key for the anchorPointDirection style. The defines if the\n\t * direction style should be taken into account when computing the fixed\n\t * point location for connected edges. Default is 1 (yes). Set this to 0\n\t * to ignore the direction style for fixed connection points. Value is\n\t * \"anchorPointDirection\".\n\t */\n\tSTYLE_ANCHOR_POINT_DIRECTION: 'anchorPointDirection',\n\n\t/**\n\t * Variable: STYLE_ELBOW\n\t * \n\t * Defines the key for the elbow style. Possible values are\n\t * <ELBOW_HORIZONTAL> and <ELBOW_VERTICAL>. Default is <ELBOW_HORIZONTAL>.\n\t * This defines how the three segment orthogonal edge style leaves its\n\t * terminal vertices. The vertical style leaves the terminal vertices at\n\t * the top and bottom sides. Value is \"elbow\".\n\t */\n\tSTYLE_ELBOW: 'elbow',\n\n\t/**\n\t * Variable: STYLE_FONTCOLOR\n\t * \n\t * Defines the key for the fontColor style. Possible values are all HTML\n\t * color names or HEX codes. Value is \"fontColor\".\n\t */\n\tSTYLE_FONTCOLOR: 'fontColor',\n\n\t/**\n\t * Variable: STYLE_FONTFAMILY\n\t * \n\t * Defines the key for the fontFamily style. Possible values are names such\n\t * as Arial; Dialog; Verdana; Times New Roman. The value is of type String.\n\t * Value is fontFamily.\n\t */\n\tSTYLE_FONTFAMILY: 'fontFamily',\n\n\t/**\n\t * Variable: STYLE_FONTSIZE\n\t * \n\t * Defines the key for the fontSize style (in px). The type of the value\n\t * is int. Value is \"fontSize\".\n\t */\n\tSTYLE_FONTSIZE: 'fontSize',\n\n\t/**\n\t * Variable: STYLE_FONTSTYLE\n\t * \n\t * Defines the key for the fontStyle style. Values may be any logical AND\n\t * (sum) of <FONT_BOLD>, <FONT_ITALIC> and <FONT_UNDERLINE>.\n\t * The type of the value is int. Value is \"fontStyle\".\n\t */\n\tSTYLE_FONTSTYLE: 'fontStyle',\n\t\n\t/**\n\t * Variable: STYLE_ASPECT\n\t * \n\t * Defines the key for the aspect style. Possible values are empty or fixed.\n\t * If fixed is used then the aspect ratio of the cell will be maintained\n\t * when resizing. Default is empty. Value is \"aspect\".\n\t */\n\tSTYLE_ASPECT: 'aspect',\n\n\t/**\n\t * Variable: STYLE_AUTOSIZE\n\t * \n\t * Defines the key for the autosize style. This specifies if a cell should be\n\t * resized automatically if the value has changed. Possible values are 0 or 1.\n\t * Default is 0. See <mxGraph.isAutoSizeCell>. This is normally combined with\n\t * <STYLE_RESIZABLE> to disable manual sizing. Value is \"autosize\".\n\t */\n\tSTYLE_AUTOSIZE: 'autosize',\n\n\t/**\n\t * Variable: STYLE_FOLDABLE\n\t * \n\t * Defines the key for the foldable style. This specifies if a cell is foldable\n\t * using a folding icon. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellFoldable>. Value is \"foldable\".\n\t */\n\tSTYLE_FOLDABLE: 'foldable',\n\n\t/**\n\t * Variable: STYLE_EDITABLE\n\t * \n\t * Defines the key for the editable style. This specifies if the value of\n\t * a cell can be edited using the in-place editor. Possible values are 0 or\n\t * 1. Default is 1. See <mxGraph.isCellEditable>. Value is \"editable\".\n\t */\n\tSTYLE_EDITABLE: 'editable',\n\n\t/**\n\t * Variable: STYLE_BACKGROUND_OUTLINE\n\t * \n\t * Defines the key for the backgroundOutline style. This specifies if a\n\t * only the background of a cell should be painted when it is highlighted.\n\t * Possible values are 0 or 1. Default is 0. Value is \"backgroundOutline\".\n\t */\n\tSTYLE_BACKGROUND_OUTLINE: 'backgroundOutline',\n\n\t/**\n\t * Variable: STYLE_BENDABLE\n\t * \n\t * Defines the key for the bendable style. This specifies if the control\n\t * points of an edge can be moved. Possible values are 0 or 1. Default is\n\t * 1. See <mxGraph.isCellBendable>. Value is \"bendable\".\n\t */\n\tSTYLE_BENDABLE: 'bendable',\n\n\t/**\n\t * Variable: STYLE_MOVABLE\n\t * \n\t * Defines the key for the movable style. This specifies if a cell can\n\t * be moved. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellMovable>. Value is \"movable\".\n\t */\n\tSTYLE_MOVABLE: 'movable',\n\n\t/**\n\t * Variable: STYLE_RESIZABLE\n\t * \n\t * Defines the key for the resizable style. This specifies if a cell can\n\t * be resized. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellResizable>. Value is \"resizable\".\n\t */\n\tSTYLE_RESIZABLE: 'resizable',\n\n\t/**\n\t * Variable: STYLE_RESIZE_WIDTH\n\t * \n\t * Defines the key for the resizeWidth style. This specifies if a cell's\n\t * width is resized if the parent is resized. If this is 1 then the width\n\t * will be resized even if the cell's geometry is relative. If this is 0\n\t * then the cell's width will not be resized. Default is not defined. Value\n\t * is \"resizeWidth\".\n\t */\n\tSTYLE_RESIZE_WIDTH: 'resizeWidth',\n\n\t/**\n\t * Variable: STYLE_RESIZE_WIDTH\n\t * \n\t * Defines the key for the resizeHeight style. This specifies if a cell's\n\t * height if resize if the parent is resized. If this is 1 then the height\n\t * will be resized even if the cell's geometry is relative. If this is 0\n\t * then the cell's height will not be resized. Default is not defined. Value\n\t * is \"resizeHeight\".\n\t */\n\tSTYLE_RESIZE_HEIGHT: 'resizeHeight',\n\n\t/**\n\t * Variable: STYLE_ROTATABLE\n\t * \n\t * Defines the key for the rotatable style. This specifies if a cell can\n\t * be rotated. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellRotatable>. Value is \"rotatable\".\n\t */\n\tSTYLE_ROTATABLE: 'rotatable',\n\n\t/**\n\t * Variable: STYLE_CLONEABLE\n\t * \n\t * Defines the key for the cloneable style. This specifies if a cell can\n\t * be cloned. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellCloneable>. Value is \"cloneable\".\n\t */\n\tSTYLE_CLONEABLE: 'cloneable',\n\n\t/**\n\t * Variable: STYLE_DELETABLE\n\t * \n\t * Defines the key for the deletable style. This specifies if a cell can be\n\t * deleted. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellDeletable>. Value is \"deletable\".\n\t */\n\tSTYLE_DELETABLE: 'deletable',\n\n\t/**\n\t * Variable: STYLE_SHAPE\n\t * \n\t * Defines the key for the shape. Possible values are all constants with\n\t * a SHAPE-prefix or any newly defined shape names. Value is \"shape\".\n\t */\n\tSTYLE_SHAPE: 'shape',\n\n\t/**\n\t * Variable: STYLE_EDGE\n\t * \n\t * Defines the key for the edge style. Possible values are the functions\n\t * defined in <mxEdgeStyle>. Value is \"edgeStyle\".\n\t */\n\tSTYLE_EDGE: 'edgeStyle',\n\n\t/**\n\t * Variable: STYLE_JETTY_SIZE\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are all numeric values or \"auto\".\n\t * Jetty size is the minimum length of the orthogonal segment before\n\t * it attaches to a shape.\n\t * Value is \"jettySize\".\n\t */\n\tSTYLE_JETTY_SIZE: 'jettySize',\n\n\t/**\n\t * Variable: STYLE_SOURCE_JETTY_SIZE\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are numeric values or \"auto\". This has\n\t * precedence over <STYLE_JETTY_SIZE>. Value is \"sourceJettySize\".\n\t */\n\tSTYLE_SOURCE_JETTY_SIZE: 'sourceJettySize',\n\n\t/**\n\t * Variable: targetJettySize\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are numeric values or \"auto\". This has\n\t * precedence over <STYLE_JETTY_SIZE>. Value is \"targetJettySize\".\n\t */\n\tSTYLE_TARGET_JETTY_SIZE: 'targetJettySize',\n\n\t/**\n\t * Variable: STYLE_LOOP\n\t * \n\t * Defines the key for the loop style. Possible values are the functions\n\t * defined in <mxEdgeStyle>. Value is \"loopStyle\". Default is\n\t * <mxGraph.defaultLoopStylean>.\n\t */\n\tSTYLE_LOOP: 'loopStyle',\n\n\t/**\n\t * Variable: STYLE_ORTHOGONAL_LOOP\n\t * \n\t * Defines the key for the orthogonal loop style. Possible values are 0 and\n\t * 1. Default is 0. Value is \"orthogonalLoop\". Use this style to specify\n\t * if loops with no waypoints and defined anchor points should be routed\n\t * using <STYLE_LOOP> or not routed.\n\t */\n\tSTYLE_ORTHOGONAL_LOOP: 'orthogonalLoop',\n\n\t/**\n\t * Variable: STYLE_ROUTING_CENTER_X\n\t * \n\t * Defines the key for the horizontal routing center. Possible values are\n\t * between -0.5 and 0.5. This is the relative offset from the center used\n\t * for connecting edges. The type of this value is numeric. Value is\n\t * \"routingCenterX\".\n\t */\n\tSTYLE_ROUTING_CENTER_X: 'routingCenterX',\n\n\t/**\n\t * Variable: STYLE_ROUTING_CENTER_Y\n\t * \n\t * Defines the key for the vertical routing center. Possible values are\n\t * between -0.5 and 0.5. This is the relative offset from the center used\n\t * for connecting edges. The type of this value is numeric. Value is\n\t * \"routingCenterY\".\n\t */\n\tSTYLE_ROUTING_CENTER_Y: 'routingCenterY',\n\n\t/**\n\t * Variable: STYLE_CELL_HIGHLIGHT_COLOR\n\t */\n\tSTYLE_CELL_HIGHLIGHT_COLOR: 'cellHighlightColor',\n\n\t/**\n\t * Variable: STYLE_CELL_HIGHLIGHT_STROKE_WIDTH\n\t */\n\tSTYLE_CELL_HIGHLIGHT_STROKE_WIDTH: 'cellHighlightStrokeWidth',\n\n\t/**\n\t * Variable: STYLE_CELL_HIGHLIGHT_DASHED\n\t */\n\tSTYLE_CELL_HIGHLIGHT_DASHED: 'cellHighlightDashed',\n\n\t/**\n\t * Variable: FONT_BOLD\n\t * \n\t * Constant for bold fonts. Default is 1.\n\t */\n\tFONT_BOLD: 1,\n\n\t/**\n\t * Variable: FONT_ITALIC\n\t * \n\t * Constant for italic fonts. Default is 2.\n\t */\n\tFONT_ITALIC: 2,\n\n\t/**\n\t * Variable: FONT_UNDERLINE\n\t * \n\t * Constant for underlined fonts. Default is 4.\n\t */\n\tFONT_UNDERLINE: 4,\n\n\t/**\n\t * Variable: FONT_STRIKETHROUGH\n\t * \n\t * Constant for strikthrough fonts. Default is 8.\n\t */\n\tFONT_STRIKETHROUGH: 8,\n\t\n\t/**\n\t * Variable: SHAPE_RECTANGLE\n\t * \n\t * Name under which <mxRectangleShape> is registered in <mxCellRenderer>.\n\t * Default is rectangle.\n\t */\n\tSHAPE_RECTANGLE: 'rectangle',\n\n\t/**\n\t * Variable: SHAPE_ELLIPSE\n\t * \n\t * Name under which <mxEllipse> is registered in <mxCellRenderer>.\n\t * Default is ellipse.\n\t */\n\tSHAPE_ELLIPSE: 'ellipse',\n\n\t/**\n\t * Variable: SHAPE_DOUBLE_ELLIPSE\n\t * \n\t * Name under which <mxDoubleEllipse> is registered in <mxCellRenderer>.\n\t * Default is doubleEllipse.\n\t */\n\tSHAPE_DOUBLE_ELLIPSE: 'doubleEllipse',\n\n\t/**\n\t * Variable: SHAPE_RHOMBUS\n\t * \n\t * Name under which <mxRhombus> is registered in <mxCellRenderer>.\n\t * Default is rhombus.\n\t */\n\tSHAPE_RHOMBUS: 'rhombus',\n\n\t/**\n\t * Variable: SHAPE_LINE\n\t * \n\t * Name under which <mxLine> is registered in <mxCellRenderer>.\n\t * Default is line.\n\t */\n\tSHAPE_LINE: 'line',\n\n\t/**\n\t * Variable: SHAPE_IMAGE\n\t * \n\t * Name under which <mxImageShape> is registered in <mxCellRenderer>.\n\t * Default is image.\n\t */\n\tSHAPE_IMAGE: 'image',\n\t\n\t/**\n\t * Variable: SHAPE_ARROW\n\t * \n\t * Name under which <mxArrow> is registered in <mxCellRenderer>.\n\t * Default is arrow.\n\t */\n\tSHAPE_ARROW: 'arrow',\n\t\n\t/**\n\t * Variable: SHAPE_ARROW_CONNECTOR\n\t * \n\t * Name under which <mxArrowConnector> is registered in <mxCellRenderer>.\n\t * Default is arrowConnector.\n\t */\n\tSHAPE_ARROW_CONNECTOR: 'arrowConnector',\n\t\n\t/**\n\t * Variable: SHAPE_LABEL\n\t * \n\t * Name under which <mxLabel> is registered in <mxCellRenderer>.\n\t * Default is label.\n\t */\n\tSHAPE_LABEL: 'label',\n\t\n\t/**\n\t * Variable: SHAPE_CYLINDER\n\t * \n\t * Name under which <mxCylinder> is registered in <mxCellRenderer>.\n\t * Default is cylinder.\n\t */\n\tSHAPE_CYLINDER: 'cylinder',\n\t\n\t/**\n\t * Variable: SHAPE_SWIMLANE\n\t * \n\t * Name under which <mxSwimlane> is registered in <mxCellRenderer>.\n\t * Default is swimlane.\n\t */\n\tSHAPE_SWIMLANE: 'swimlane',\n\t\t\n\t/**\n\t * Variable: SHAPE_CONNECTOR\n\t * \n\t * Name under which <mxConnector> is registered in <mxCellRenderer>.\n\t * Default is connector.\n\t */\n\tSHAPE_CONNECTOR: 'connector',\n\n\t/**\n\t * Variable: SHAPE_ACTOR\n\t * \n\t * Name under which <mxActor> is registered in <mxCellRenderer>.\n\t * Default is actor.\n\t */\n\tSHAPE_ACTOR: 'actor',\n\t\t\n\t/**\n\t * Variable: SHAPE_CLOUD\n\t * \n\t * Name under which <mxCloud> is registered in <mxCellRenderer>.\n\t * Default is cloud.\n\t */\n\tSHAPE_CLOUD: 'cloud',\n\t\t\n\t/**\n\t * Variable: SHAPE_TRIANGLE\n\t * \n\t * Name under which <mxTriangle> is registered in <mxCellRenderer>.\n\t * Default is triangle.\n\t */\n\tSHAPE_TRIANGLE: 'triangle',\n\t\t\n\t/**\n\t * Variable: SHAPE_HEXAGON\n\t * \n\t * Name under which <mxHexagon> is registered in <mxCellRenderer>.\n\t * Default is hexagon.\n\t */\n\tSHAPE_HEXAGON: 'hexagon',\n\n\t/**\n\t * Variable: ARROW_CLASSIC\n\t * \n\t * Constant for classic arrow markers.\n\t */\n\tARROW_CLASSIC: 'classic',\n\n\t/**\n\t * Variable: ARROW_CLASSIC_THIN\n\t * \n\t * Constant for thin classic arrow markers.\n\t */\n\tARROW_CLASSIC_THIN: 'classicThin',\n\n\t/**\n\t * Variable: ARROW_BLOCK\n\t * \n\t * Constant for block arrow markers.\n\t */\n\tARROW_BLOCK: 'block',\n\n\t/**\n\t * Variable: ARROW_BLOCK_THIN\n\t * \n\t * Constant for thin block arrow markers.\n\t */\n\tARROW_BLOCK_THIN: 'blockThin',\n\n\t/**\n\t * Variable: ARROW_OPEN\n\t * \n\t * Constant for open arrow markers.\n\t */\n\tARROW_OPEN: 'open',\n\n\t/**\n\t * Variable: ARROW_OPEN_THIN\n\t * \n\t * Constant for thin open arrow markers.\n\t */\n\tARROW_OPEN_THIN: 'openThin',\n\n\t/**\n\t * Variable: ARROW_OVAL\n\t * \n\t * Constant for oval arrow markers.\n\t */\n\tARROW_OVAL: 'oval',\n\n\t/**\n\t * Variable: ARROW_DIAMOND\n\t * \n\t * Constant for diamond arrow markers.\n\t */\n\tARROW_DIAMOND: 'diamond',\n\n\t/**\n\t * Variable: ARROW_DIAMOND_THIN\n\t * \n\t * Constant for thin diamond arrow markers.\n\t */\n\tARROW_DIAMOND_THIN: 'diamondThin',\n\n\t/**\n\t * Variable: ALIGN_LEFT\n\t * \n\t * Constant for left horizontal alignment. Default is left.\n\t */\n\tALIGN_LEFT: 'left',\n\n\t/**\n\t * Variable: ALIGN_CENTER\n\t * \n\t * Constant for center horizontal alignment. Default is center.\n\t */\n\tALIGN_CENTER: 'center',\n\n\t/**\n\t * Variable: ALIGN_RIGHT\n\t * \n\t * Constant for right horizontal alignment. Default is right.\n\t */\n\tALIGN_RIGHT: 'right',\n\n\t/**\n\t * Variable: ALIGN_TOP\n\t * \n\t * Constant for top vertical alignment. Default is top.\n\t */\n\tALIGN_TOP: 'top',\n\n\t/**\n\t * Variable: ALIGN_MIDDLE\n\t * \n\t * Constant for middle vertical alignment. Default is middle.\n\t */\n\tALIGN_MIDDLE: 'middle',\n\n\t/**\n\t * Variable: ALIGN_BOTTOM\n\t * \n\t * Constant for bottom vertical alignment. Default is bottom.\n\t */\n\tALIGN_BOTTOM: 'bottom',\n\n\t/**\n\t * Variable: DIRECTION_NORTH\n\t * \n\t * Constant for direction north. Default is north.\n\t */\n\tDIRECTION_NORTH: 'north',\n\n\t/**\n\t * Variable: DIRECTION_SOUTH\n\t * \n\t * Constant for direction south. Default is south.\n\t */\n\tDIRECTION_SOUTH: 'south',\n\n\t/**\n\t * Variable: DIRECTION_EAST\n\t * \n\t * Constant for direction east. Default is east.\n\t */\n\tDIRECTION_EAST: 'east',\n\n\t/**\n\t * Variable: DIRECTION_WEST\n\t * \n\t * Constant for direction west. Default is west.\n\t */\n\tDIRECTION_WEST: 'west',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_DEFAULT\n\t * \n\t * Constant for text direction default. Default is an empty string. Use\n\t * this value to use the default text direction of the operating system. \n\t */\n\tTEXT_DIRECTION_DEFAULT: '',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_AUTO\n\t * \n\t * Constant for text direction automatic. Default is auto. Use this value\n\t * to find the direction for a given text with <mxText.getAutoDirection>. \n\t */\n\tTEXT_DIRECTION_AUTO: 'auto',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_LTR\n\t * \n\t * Constant for text direction left to right. Default is ltr. Use this\n\t * value for left to right text direction.\n\t */\n\tTEXT_DIRECTION_LTR: 'ltr',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_RTL\n\t * \n\t * Constant for text direction right to left. Default is rtl. Use this\n\t * value for right to left text direction.\n\t */\n\tTEXT_DIRECTION_RTL: 'rtl',\n\n\t/**\n\t * Variable: DIRECTION_MASK_NONE\n\t * \n\t * Constant for no direction.\n\t */\n\tDIRECTION_MASK_NONE: 0,\n\n\t/**\n\t * Variable: DIRECTION_MASK_WEST\n\t * \n\t * Bitwise mask for west direction.\n\t */\n\tDIRECTION_MASK_WEST: 1,\n\t\n\t/**\n\t * Variable: DIRECTION_MASK_NORTH\n\t * \n\t * Bitwise mask for north direction.\n\t */\n\tDIRECTION_MASK_NORTH: 2,\n\n\t/**\n\t * Variable: DIRECTION_MASK_SOUTH\n\t * \n\t * Bitwise mask for south direction.\n\t */\n\tDIRECTION_MASK_SOUTH: 4,\n\n\t/**\n\t * Variable: DIRECTION_MASK_EAST\n\t * \n\t * Bitwise mask for east direction.\n\t */\n\tDIRECTION_MASK_EAST: 8,\n\t\n\t/**\n\t * Variable: DIRECTION_MASK_ALL\n\t * \n\t * Bitwise mask for all directions.\n\t */\n\tDIRECTION_MASK_ALL: 15,\n\n\t/**\n\t * Variable: ELBOW_VERTICAL\n\t * \n\t * Constant for elbow vertical. Default is horizontal.\n\t */\n\tELBOW_VERTICAL: 'vertical',\n\n\t/**\n\t * Variable: ELBOW_HORIZONTAL\n\t * \n\t * Constant for elbow horizontal. Default is horizontal.\n\t */\n\tELBOW_HORIZONTAL: 'horizontal',\n\n\t/**\n\t * Variable: EDGESTYLE_ELBOW\n\t * \n\t * Name of the elbow edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ELBOW: 'elbowEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_ENTITY_RELATION\n\t * \n\t * Name of the entity relation edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ENTITY_RELATION: 'entityRelationEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_LOOP\n\t * \n\t * Name of the loop edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_LOOP: 'loopEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_SIDETOSIDE\n\t * \n\t * Name of the side to side edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_SIDETOSIDE: 'sideToSideEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_TOPTOBOTTOM\n\t * \n\t * Name of the top to bottom edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_TOPTOBOTTOM: 'topToBottomEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_ORTHOGONAL\n\t * \n\t * Name of the generic orthogonal edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ORTHOGONAL: 'orthogonalEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_SEGMENT\n\t * \n\t * Name of the generic segment edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_SEGMENT: 'segmentEdgeStyle',\n \n\t/**\n\t * Variable: PERIMETER_ELLIPSE\n\t * \n\t * Name of the ellipse perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_ELLIPSE: 'ellipsePerimeter',\n\n\t/**\n\t * Variable: PERIMETER_RECTANGLE\n\t *\n\t * Name of the rectangle perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_RECTANGLE: 'rectanglePerimeter',\n\n\t/**\n\t * Variable: PERIMETER_RHOMBUS\n\t * \n\t * Name of the rhombus perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_RHOMBUS: 'rhombusPerimeter',\n\n\t/**\n\t * Variable: PERIMETER_HEXAGON\n\t * \n\t * Name of the hexagon perimeter. Can be used as a string value \n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_HEXAGON: 'hexagonPerimeter',\n\n\t/**\n\t * Variable: PERIMETER_TRIANGLE\n\t * \n\t * Name of the triangle perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_TRIANGLE: 'trianglePerimeter'\n};\n\n__mxOutput.mxConstants = typeof mxConstants !== 'undefined' ? mxConstants : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventObject\n * \n * The mxEventObject is a wrapper for all properties of a single event.\n * Additionally, it also offers functions to consume the event and check if it\n * was consumed as follows:\n * \n * (code)\n * evt.consume();\n * INV: evt.isConsumed() == true\n * (end)\n * \n * Constructor: mxEventObject\n *\n * Constructs a new event object with the specified name. An optional\n * sequence of key, value pairs can be appended to define properties.\n * \n * Example:\n *\n * (code)\n * new mxEventObject(\"eventName\", key1, val1, .., keyN, valN)\n * (end)\n */\nfunction mxEventObject(name)\n{\n\tthis.name = name;\n\tthis.properties = [];\n\t\n\tfor (var i = 1; i < arguments.length; i += 2)\n\t{\n\t\tif (arguments[i + 1] != null)\n\t\t{\n\t\t\tthis.properties[arguments[i]] = arguments[i + 1];\n\t\t}\n\t}\n};\n\n/**\n * Variable: name\n *\n * Holds the name.\n */\nmxEventObject.prototype.name = null;\n\n/**\n * Variable: properties\n *\n * Holds the properties as an associative array.\n */\nmxEventObject.prototype.properties = null;\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state. Default is false.\n */\nmxEventObject.prototype.consumed = false;\n\n/**\n * Function: getName\n * \n * Returns <name>.\n */\nmxEventObject.prototype.getName = function()\n{\n\treturn this.name;\n};\n\n/**\n * Function: getProperties\n * \n * Returns <properties>.\n */\nmxEventObject.prototype.getProperties = function()\n{\n\treturn this.properties;\n};\n\n/**\n * Function: getProperty\n * \n * Returns the property for the given key.\n */\nmxEventObject.prototype.getProperty = function(key)\n{\n\treturn this.properties[key];\n};\n\n/**\n * Function: isConsumed\n *\n * Returns true if the event has been consumed.\n */\nmxEventObject.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Consumes the event.\n */\nmxEventObject.prototype.consume = function()\n{\n\tthis.consumed = true;\n};\n\n__mxOutput.mxEventObject = typeof mxEventObject !== 'undefined' ? mxEventObject : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMouseEvent\n * \n * Base class for all mouse events in mxGraph. A listener for this event should\n * implement the following methods:\n * \n * (code)\n * graph.addMouseListener(\n * {\n *   mouseDown: function(sender, evt)\n *   {\n *     mxLog.debug('mouseDown');\n *   },\n *   mouseMove: function(sender, evt)\n *   {\n *     mxLog.debug('mouseMove');\n *   },\n *   mouseUp: function(sender, evt)\n *   {\n *     mxLog.debug('mouseUp');\n *   }\n * });\n * (end)\n * \n * Constructor: mxMouseEvent\n *\n * Constructs a new event object for the given arguments.\n * \n * Parameters:\n * \n * evt - Native mouse event.\n * state - Optional <mxCellState> under the mouse.\n * \n */\nfunction mxMouseEvent(evt, state)\n{\n\tthis.evt = evt;\n\tthis.state = state;\n\tthis.sourceState = state;\n};\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state of this event.\n */\nmxMouseEvent.prototype.consumed = false;\n\n/**\n * Variable: evt\n *\n * Holds the inner event object.\n */\nmxMouseEvent.prototype.evt = null;\n\n/**\n * Variable: graphX\n *\n * Holds the x-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphX = null;\n\n/**\n * Variable: graphY\n *\n * Holds the y-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphY = null;\n\n/**\n * Variable: state\n *\n * Holds the optional <mxCellState> associated with this event.\n */\nmxMouseEvent.prototype.state = null;\n\n/**\n * Variable: sourceState\n * \n * Holds the <mxCellState> that was passed to the constructor. This can be\n * different from <state> depending on the result of <mxGraph.getEventState>.\n */\nmxMouseEvent.prototype.sourceState = null;\n\n/**\n * Function: getEvent\n * \n * Returns <evt>.\n */\nmxMouseEvent.prototype.getEvent = function()\n{\n\treturn this.evt;\n};\n\n/**\n * Function: getSource\n * \n * Returns the target DOM element using <mxEvent.getSource> for <evt>.\n */\nmxMouseEvent.prototype.getSource = function()\n{\n\treturn mxEvent.getSource(this.evt);\n};\n\n/**\n * Function: isSource\n * \n * Returns true if the given <mxShape> is the source of <evt>.\n */\nmxMouseEvent.prototype.isSource = function(shape)\n{\n\tif (shape != null)\n\t{\n\t\treturn mxUtils.isAncestorNode(shape.node, this.getSource());\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getX\n * \n * Returns <evt.clientX>.\n */\nmxMouseEvent.prototype.getX = function()\n{\n\treturn mxEvent.getClientX(this.getEvent());\n};\n\n/**\n * Function: getY\n * \n * Returns <evt.clientY>.\n */\nmxMouseEvent.prototype.getY = function()\n{\n\treturn mxEvent.getClientY(this.getEvent());\n};\n\n/**\n * Function: getGraphX\n * \n * Returns <graphX>.\n */\nmxMouseEvent.prototype.getGraphX = function()\n{\n\treturn this.graphX;\n};\n\n/**\n * Function: getGraphY\n * \n * Returns <graphY>.\n */\nmxMouseEvent.prototype.getGraphY = function()\n{\n\treturn this.graphY;\n};\n\n/**\n * Function: getState\n * \n * Returns <state>.\n */\nmxMouseEvent.prototype.getState = function()\n{\n\treturn this.state;\n};\n\n/**\n * Function: getCell\n * \n * Returns the <mxCell> in <state> is not null.\n */\nmxMouseEvent.prototype.getCell = function()\n{\n\tvar state = this.getState();\n\t\n\tif (state != null)\n\t{\n\t\treturn state.cell;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: isPopupTrigger\n *\n * Returns true if the event is a popup trigger.\n */\nmxMouseEvent.prototype.isPopupTrigger = function()\n{\n\treturn mxEvent.isPopupTrigger(this.getEvent());\n};\n\n/**\n * Function: isConsumed\n *\n * Returns <consumed>.\n */\nmxMouseEvent.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Sets <consumed> to true and invokes preventDefault on the native event\n * if such a method is defined. This is used mainly to avoid the cursor from\n * being changed to a text cursor in Webkit. You can use the preventDefault\n * flag to disable this functionality.\n * \n * Parameters:\n * \n * preventDefault - Specifies if the native event should be canceled. Default\n * is true.\n */\nmxMouseEvent.prototype.consume = function(preventDefault)\n{\n\tpreventDefault = (preventDefault != null) ? preventDefault :\n\t\t(this.evt.touches != null || mxEvent.isMouseEvent(this.evt));\n\t\n\tif (preventDefault && this.evt.preventDefault)\n\t{\n\t\tthis.evt.preventDefault();\n\t}\n\n\t// Workaround for images being dragged in IE\n\t// Does not change returnValue in Opera\n\tif (mxClient.IS_IE)\n\t{\n\t\tthis.evt.returnValue = true;\n\t}\n\n\t// Sets local consumed state\n\tthis.consumed = true;\n};\n\n__mxOutput.mxMouseEvent = typeof mxMouseEvent !== 'undefined' ? mxMouseEvent : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventSource\n *\n * Base class for objects that dispatch named events. To create a subclass that\n * inherits from mxEventSource, the following code is used.\n *\n * (code)\n * function MyClass() { };\n *\n * MyClass.prototype = new mxEventSource();\n * MyClass.prototype.constructor = MyClass;\n * (end)\n *\n * Known Subclasses:\n *\n * <mxGraphModel>, <mxGraph>, <mxGraphView>, <mxEditor>, <mxCellOverlay>,\n * <mxToolbar>, <mxWindow>\n * \n * Constructor: mxEventSource\n *\n * Constructs a new event source.\n */\nfunction mxEventSource(eventSource)\n{\n\tthis.setEventSource(eventSource);\n};\n\n/**\n * Variable: eventListeners\n *\n * Holds the event names and associated listeners in an array. The array\n * contains the event name followed by the respective listener for each\n * registered listener.\n */\nmxEventSource.prototype.eventListeners = null;\n\n/**\n * Variable: eventsEnabled\n *\n * Specifies if events can be fired. Default is true.\n */\nmxEventSource.prototype.eventsEnabled = true;\n\n/**\n * Variable: eventSource\n *\n * Optional source for events. Default is null.\n */\nmxEventSource.prototype.eventSource = null;\n\n/**\n * Function: isEventsEnabled\n * \n * Returns <eventsEnabled>.\n */\nmxEventSource.prototype.isEventsEnabled = function()\n{\n\treturn this.eventsEnabled;\n};\n\n/**\n * Function: setEventsEnabled\n * \n * Sets <eventsEnabled>.\n */\nmxEventSource.prototype.setEventsEnabled = function(value)\n{\n\tthis.eventsEnabled = value;\n};\n\n/**\n * Function: getEventSource\n * \n * Returns <eventSource>.\n */\nmxEventSource.prototype.getEventSource = function()\n{\n\treturn this.eventSource;\n};\n\n/**\n * Function: setEventSource\n * \n * Sets <eventSource>.\n */\nmxEventSource.prototype.setEventSource = function(value)\n{\n\tthis.eventSource = value;\n};\n\n/**\n * Function: addListener\n *\n * Binds the specified function to the given event name. If no event name\n * is given, then the listener is registered for all events.\n * \n * The parameters of the listener are the sender and an <mxEventObject>.\n */\nmxEventSource.prototype.addListener = function(name, funct)\n{\n\tif (this.eventListeners == null)\n\t{\n\t\tthis.eventListeners = [];\n\t}\n\t\n\tthis.eventListeners.push(name);\n\tthis.eventListeners.push(funct);\n};\n\n/**\n * Function: removeListener\n *\n * Removes all occurrences of the given listener from <eventListeners>.\n */\nmxEventSource.prototype.removeListener = function(funct)\n{\n\tif (this.eventListeners != null)\n\t{\n\t\tvar i = 0;\n\t\t\n\t\twhile (i < this.eventListeners.length)\n\t\t{\n\t\t\tif (this.eventListeners[i+1] == funct)\n\t\t\t{\n\t\t\t\tthis.eventListeners.splice(i, 2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: fireEvent\n *\n * Dispatches the given event to the listeners which are registered for\n * the event. The sender argument is optional. The current execution scope\n * (\"this\") is used for the listener invocation (see <mxUtils.bind>).\n *\n * Example:\n *\n * (code)\n * fireEvent(new mxEventObject(\"eventName\", key1, val1, .., keyN, valN))\n * (end)\n * \n * Parameters:\n *\n * evt - <mxEventObject> that represents the event.\n * sender - Optional sender to be passed to the listener. Default value is\n * the return value of <getEventSource>.\n */\nmxEventSource.prototype.fireEvent = function(evt, sender)\n{\n\tif (this.eventListeners != null && this.isEventsEnabled())\n\t{\n\t\tif (evt == null)\n\t\t{\n\t\t\tevt = new mxEventObject();\n\t\t}\n\t\t\n\t\tif (sender == null)\n\t\t{\n\t\t\tsender = this.getEventSource();\n\t\t}\n\n\t\tif (sender == null)\n\t\t{\n\t\t\tsender = this;\n\t\t}\n\n\t\tvar args = [sender, evt];\n\t\t\n\t\tfor (var i = 0; i < this.eventListeners.length; i += 2)\n\t\t{\n\t\t\tvar listen = this.eventListeners[i];\n\t\t\t\n\t\t\tif (listen == null || listen == evt.getName())\n\t\t\t{\n\t\t\t\tthis.eventListeners[i+1].apply(this, args);\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxEventSource = typeof mxEventSource !== 'undefined' ? mxEventSource : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEvent =\n{\n\n\t/**\n\t * Class: mxEvent\n\t * \n\t * Cross-browser DOM event support. For internal event handling,\n\t * <mxEventSource> and the graph event dispatch loop in <mxGraph> are used.\n\t * \n\t * Memory Leaks:\n\t * \n\t * Use this class for adding and removing listeners to/from DOM nodes. The\n\t * <removeAllListeners> function is provided to remove all listeners that\n\t * have been added using <addListener>. The function should be invoked when\n\t * the last reference is removed in the JavaScript code, typically when the\n\t * referenced DOM node is removed from the DOM.\n\t *\n\t * Function: addListener\n\t * \n\t * Binds the function to the specified event on the given element. Use\n\t * <mxUtils.bind> in order to bind the \"this\" keyword inside the function\n\t * to a given execution scope.\n\t */\n\taddListener: function()\n\t{\n\t\tvar updateListenerList = function(element, eventName, funct)\n\t\t{\n\t\t\tif (element.mxListenerList == null)\n\t\t\t{\n\t\t\t\telement.mxListenerList = [];\n\t\t\t}\n\t\t\t\n\t\t\tvar entry = {name: eventName, f: funct};\n\t\t\telement.mxListenerList.push(entry);\n\t\t};\n\t\t\n\t\tif (window.addEventListener)\n\t\t{\n\t\t\t// Checks if passive event listeners are supported\n\t\t\t// see https://github.com/Modernizr/Modernizr/issues/1894\n\t\t\tvar supportsPassive = false;\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\tdocument.addEventListener('test', function() {}, Object.defineProperty &&\n\t\t\t\t\tObject.defineProperty({}, 'passive', {get: function()\n\t\t\t\t\t{supportsPassive = true;}}));\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// ignore\n\t\t\t}\n\t\t\t\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.addEventListener(eventName, funct,\n\t\t\t\t\t(supportsPassive) ?\n\t\t\t\t\t{passive: false} : false);\n\t\t\t\tupdateListenerList(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.attachEvent('on' + eventName, funct);\n\t\t\t\tupdateListenerList(element, eventName, funct);\t\t\t\t\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeListener\n\t *\n\t * Removes the specified listener from the given element.\n\t */\n\tremoveListener: function()\n\t{\n\t\tvar updateListener = function(element, eventName, funct)\n\t\t{\n\t\t\tif (element.mxListenerList != null)\n\t\t\t{\n\t\t\t\tvar listenerCount = element.mxListenerList.length;\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < listenerCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar entry = element.mxListenerList[i];\n\t\t\t\t\t\n\t\t\t\t\tif (entry.f == funct)\n\t\t\t\t\t{\n\t\t\t\t\t\telement.mxListenerList.splice(i, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (element.mxListenerList.length == 0)\n\t\t\t\t{\n\t\t\t\t\telement.mxListenerList = null;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\tif (window.removeEventListener)\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.removeEventListener(eventName, funct, false);\n\t\t\t\tupdateListener(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.detachEvent('on' + eventName, funct);\n\t\t\t\tupdateListener(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeAllListeners\n\t * \n\t * Removes all listeners from the given element.\n\t */\n\tremoveAllListeners: function(element)\n\t{\n\t\tvar list = element.mxListenerList;\n\n\t\tif (list != null)\n\t\t{\n\t\t\twhile (list.length > 0)\n\t\t\t{\n\t\t\t\tvar entry = list[0];\n\t\t\t\tmxEvent.removeListener(element, entry.name, entry.f);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: addGestureListeners\n\t * \n\t * Adds the given listeners for touch, mouse and/or pointer events. If\n\t * <mxClient.IS_POINTER> is true then pointer events will be registered,\n\t * else the respective mouse events will be registered. If <mxClient.IS_POINTER>\n\t * is false and <mxClient.IS_TOUCH> is true then the respective touch events\n\t * will be registered as well as the mouse events.\n\t */\n\taddGestureListeners: function(node, startListener, moveListener, endListener)\n\t{\n\t\tif (startListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', startListener);\n\t\t}\n\t\t\n\t\tif (moveListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointermove' : 'mousemove', moveListener);\n\t\t}\n\t\t\n\t\tif (endListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', endListener);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_POINTER && mxClient.IS_TOUCH)\n\t\t{\n\t\t\tif (startListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchstart', startListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (moveListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchmove', moveListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (endListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchend', endListener);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: removeGestureListeners\n\t * \n\t * Removes the given listeners from mousedown, mousemove, mouseup and the\n\t * respective touch events if <mxClient.IS_TOUCH> is true.\n\t */\n\tremoveGestureListeners: function(node, startListener, moveListener, endListener)\n\t{\n\t\tif (startListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', startListener);\n\t\t}\n\t\t\n\t\tif (moveListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointermove' : 'mousemove', moveListener);\n\t\t}\n\t\t\n\t\tif (endListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', endListener);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_POINTER && mxClient.IS_TOUCH)\n\t\t{\n\t\t\tif (startListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchstart', startListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (moveListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchmove', moveListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (endListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchend', endListener);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: redirectMouseEvents\n\t *\n\t * Redirects the mouse events from the given DOM node to the graph dispatch\n\t * loop using the event and given state as event arguments. State can\n\t * either be an instance of <mxCellState> or a function that returns an\n\t * <mxCellState>. The down, move, up and dblClick arguments are optional\n\t * functions that take the trigger event as arguments and replace the\n\t * default behaviour.\n\t */\n\tredirectMouseEvents: function(node, graph, state, down, move, up, dblClick)\n\t{\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\treturn (typeof(state) == 'function') ? state(evt) : state;\n\t\t};\n\t\t\n\t\tmxEvent.addGestureListeners(node, function (evt)\n\t\t{\n\t\t\tif (down != null)\n\t\t\t{\n\t\t\t\tdown(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tif (move != null)\n\t\t\t{\n\t\t\t\tmove(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tif (up != null)\n\t\t\t{\n\t\t\t\tup(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.addListener(node, 'dblclick', function (evt)\n\t\t{\n\t\t\tif (dblClick != null)\n\t\t\t{\n\t\t\t\tdblClick(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tvar tmp = getState(evt);\n\t\t\t\tgraph.dblClick(evt, (tmp != null) ? tmp.cell : null);\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Function: release\n\t * \n\t * Removes the known listeners from the given DOM node and its descendants.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node to remove the listeners from.\n\t */\n\trelease: function(element)\n\t{\n\t\ttry\n\t\t{\n\t\t\tif (element != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeAllListeners(element);\n\t\t\t\t\n\t\t\t\tvar children = element.childNodes;\n\t\t\t\t\n\t\t\t\tif (children != null)\n\t\t\t\t{\n\t\t\t        var childCount = children.length;\n\t\t\t        \n\t\t\t        for (var i = 0; i < childCount; i += 1)\n\t\t\t        {\n\t\t\t        \tmxEvent.release(children[i]);\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\t// ignores errors as this is typically called in cleanup code\n\t\t}\n\t},\n\n\t/**\n\t * Function: addMouseWheelListener\n\t * \n\t * Installs the given function as a handler for mouse wheel events. The\n\t * function has two arguments: the mouse event and a boolean that specifies\n\t * if the wheel was moved up or down.\n\t * \n\t * This has been tested with IE 6 and 7, Firefox (all versions), Opera and\n\t * Safari. It does currently not work on Safari for Mac.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * mxEvent.addMouseWheelListener(function (evt, up, pinch)\n\t * {\n\t *   mxLog.show();\n\t *   mxLog.debug('mouseWheel: up='+up);\n\t * });\n\t *(end)\n\t * \n\t * Parameters:\n\t * \n\t * funct - Handler function that takes the event argument, a boolean argument\n\t * for the mousewheel direction and a boolean to specify if the underlying\n\t * event was a pinch gesture on a touch device.\n\t * target - Target for installing the listener in Google Chrome. See \n\t * https://www.chromestatus.com/features/6662647093133312.\n\t */\n\taddMouseWheelListener: function(funct, target)\n\t{\n\t\tif (funct != null)\n\t\t{\n\t\t\tvar wheelHandler = function(evt)\n\t\t\t{\n\t\t\t\t// IE does not give an event object but the\n\t\t\t\t// global event object is the mousewheel event\n\t\t\t\t// at this point in time.\n\t\t\t\tif (evt == null)\n\t\t\t\t{\n\t\t\t\t\tevt = window.event;\n\t\t\t\t}\n\t\t\t\n\t\t\t\t//To prevent window zoom on trackpad pinch\n\t\t\t\tif (evt.ctrlKey) \n\t\t\t\t{\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t}\n\n\t\t\t\t// Handles the event using the given function\n\t\t\t\tif (Math.abs(evt.deltaX) > 0.5 || Math.abs(evt.deltaY) > 0.5)\n\t\t\t\t{\n\t\t\t\t\tfunct(evt, (evt.deltaY == 0) ?  -evt.deltaX > 0 : -evt.deltaY > 0);\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\ttarget = target != null ? target : window;\n\t\t\t\t\t\n\t\t\tif (mxClient.IS_SF && !mxClient.IS_TOUCH)\n\t\t\t{\n\t\t\t\tvar scale = 1;\n\t\t\t\t\n\t\t\t\tmxEvent.addListener(target, 'gesturestart', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\tscale = 1;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tmxEvent.addListener(target, 'gesturechange', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\tvar diff = scale - evt.scale;\n\t\t\t\t\t\n\t\t\t\t\tif (Math.abs(diff) > 0.2)\n\t\t\t\t\t{\n\t\t\t\t\t\tfunct(evt, diff < 0, true);\n\t\t\t\t\t\tscale = evt.scale;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tmxEvent.addListener(target, 'gestureend', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar evtCache = [];\n\t\t\t\tvar dx0 = 0;\n\t\t\t\tvar dy0 = 0;\n\t\t\t\t\n\t\t\t\t// Adds basic listeners for graph event dispatching\n\t\t\t\tmxEvent.addGestureListeners(target, mxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tif (!mxEvent.isMouseEvent(evt) && evt.pointerId != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tevtCache.push(evt);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tif (!mxEvent.isMouseEvent(evt) && evtCache.length == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Find this event in the cache and update its record with this event\n\t\t\t\t\t\tfor (var i = 0; i < evtCache.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (evt.pointerId == evtCache[i].pointerId)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tevtCache[i] = evt;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t   \t// Calculate the distance between the two pointers\n\t\t\t\t\t\tvar dx = Math.abs(evtCache[0].clientX - evtCache[1].clientX);\n\t\t\t\t\t\tvar dy = Math.abs(evtCache[0].clientY - evtCache[1].clientY);\n\t\t\t\t\t\tvar tx = Math.abs(dx - dx0);\n\t\t\t\t\t\tvar ty = Math.abs(dy - dy0);\n\t\t\t\t\t\n\t\t\t\t\t\tif (tx > mxEvent.PINCH_THRESHOLD || ty > mxEvent.PINCH_THRESHOLD)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar cx = evtCache[0].clientX + (evtCache[1].clientX - evtCache[0].clientX) / 2;\n\t\t\t\t\t\t\tvar cy = evtCache[0].clientY + (evtCache[1].clientY - evtCache[0].clientY) / 2;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfunct(evtCache[0], (tx > ty) ? dx > dx0 : dy > dy0, true, cx, cy);\n\t\t\t\t\t\t\n\t\t\t\t\t\t   \t// Cache the distance for the next move event \n\t\t\t\t\t\t\tdx0 = dx;\n\t\t\t\t\t\t\tdy0 = dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tevtCache = [];\n\t\t\t\t\tdx0 = 0;\n\t\t\t\t\tdy0 = 0;\n\t\t\t\t}));\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.addListener(target, 'wheel', wheelHandler);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: disableContextMenu\n\t *\n\t * Disables the context menu for the given element.\n\t */\n\tdisableContextMenu: function(element)\n\t{\n\t\tmxEvent.addListener(element, 'contextmenu', function(evt)\n\t\t{\n\t\t\tif (evt.preventDefault)\n\t\t\t{\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t},\n\t\n\t/**\n\t * Function: getSource\n\t * \n\t * Returns the event's target or srcElement depending on the browser.\n\t */\n\tgetSource: function(evt)\n\t{\n\t\treturn (evt.srcElement != null) ? evt.srcElement : evt.target;\n\t},\n\n\t/**\n\t * Function: isConsumed\n\t * \n\t * Returns true if the event has been consumed using <consume>.\n\t */\n\tisConsumed: function(evt)\n\t{\n\t\treturn evt.isConsumed != null && evt.isConsumed;\n\t},\n\n\t/**\n\t * Function: isTouchEvent\n\t * \n\t * Returns true if the event was generated using a touch device (not a pen or mouse).\n\t */\n\tisTouchEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'touch' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_TOUCH) : ((evt.mozInputSource != null) ?\n\t\t\t\t\tevt.mozInputSource == 5 : evt.type.indexOf('touch') == 0);\n\t},\n\n\t/**\n\t * Function: isPenEvent\n\t * \n\t * Returns true if the event was generated using a pen (not a touch device or mouse).\n\t */\n\tisPenEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'pen' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_PEN) : ((evt.mozInputSource != null) ?\n\t\t\t\t\tevt.mozInputSource == 2 : evt.type.indexOf('pen') == 0);\n\t},\n\n\t/**\n\t * Function: isMultiTouchEvent\n\t * \n\t * Returns true if the event was generated using a touch device (not a pen or mouse).\n\t */\n\tisMultiTouchEvent: function(evt)\n\t{\n\t\treturn (evt.type != null && evt.type.indexOf('touch') == 0 && evt.touches != null && evt.touches.length > 1);\n\t},\n\n\t/**\n\t * Function: isMouseEvent\n\t * \n\t * Returns true if the event was generated using a mouse (not a pen or touch device).\n\t */\n\tisMouseEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'mouse' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_MOUSE) : ((evt.mozInputSource != null) ?\n\t\t\t\tevt.mozInputSource == 1 : evt.type.indexOf('mouse') == 0);\n\t},\n\t\n\t/**\n\t * Function: isLeftMouseButton\n\t * \n\t * Returns true if the left mouse button is pressed for the given event.\n\t * To check if a button is pressed during a mouseMove you should use the\n\t * <mxGraph.isMouseDown> property. Note that this returns true in Firefox\n\t * for control+left-click on the Mac.\n\t */\n\tisLeftMouseButton: function(evt)\n\t{\n\t\t// Special case for mousemove and mousedown we check the buttons\n\t\t// if it exists because which is 0 even if no button is pressed\n\t\tif ('buttons' in evt && (evt.type == 'mousedown' || evt.type == 'mousemove'))\n\t\t{\n\t\t\treturn evt.buttons == 1;\n\t\t}\n\t\telse if ('which' in evt)\n\t\t{\n\t        return evt.which === 1;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 1;\n\t    }\n\t},\n\t\n\t/**\n\t * Function: isMiddleMouseButton\n\t * \n\t * Returns true if the middle mouse button is pressed for the given event.\n\t * To check if a button is pressed during a mouseMove you should use the\n\t * <mxGraph.isMouseDown> property.\n\t */\n\tisMiddleMouseButton: function(evt)\n\t{\n\t\tif ('which' in evt)\n\t\t{\n\t        return evt.which === 2;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 4;\n\t    }\n\t},\n\t\n\t/**\n\t * Function: isRightMouseButton\n\t * \n\t * Returns true if the right mouse button was pressed. Note that this\n\t * button might not be available on some systems. For handling a popup\n\t * trigger <isPopupTrigger> should be used.\n\t */\n\tisRightMouseButton: function(evt)\n\t{\n\t\tif ('which' in evt)\n\t\t{\n\t        return evt.which === 3;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 2;\n\t    }\n\t},\n\n\t/**\n\t * Function: isPopupTrigger\n\t * \n\t * Returns true if the event is a popup trigger. This implementation\n\t * returns true if the right button or the left button and control was\n\t * pressed on a Mac.\n\t */\n\tisPopupTrigger: function(evt)\n\t{\n\t\treturn mxEvent.isRightMouseButton(evt) || (mxClient.IS_MAC && mxEvent.isControlDown(evt) &&\n\t\t\t!mxEvent.isShiftDown(evt) && !mxEvent.isMetaDown(evt) && !mxEvent.isAltDown(evt));\n\t},\n\n\t/**\n\t * Function: isShiftDown\n\t * \n\t * Returns true if the shift key is pressed for the given event.\n\t */\n\tisShiftDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.shiftKey : false;\n\t},\n\n\t/**\n\t * Function: isAltDown\n\t * \n\t * Returns true if the alt key is pressed for the given event.\n\t */\n\tisAltDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.altKey : false;\n\t},\n\n\t/**\n\t * Function: isControlDown\n\t * \n\t * Returns true if the control key is pressed for the given event.\n\t */\n\tisControlDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.ctrlKey : false;\n\t},\n\n\t/**\n\t * Function: isMetaDown\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tisMetaDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.metaKey : false;\n\t},\n\n\t/**\n\t * Function: getMainEvent\n\t * \n\t * Returns the touch or mouse event that contains the mouse coordinates.\n\t */\n\tgetMainEvent: function(e)\n\t{\n\t\tif ((e.type == 'touchstart' || e.type == 'touchmove') && e.touches != null && e.touches[0] != null)\n\t\t{\n\t\t\te = e.touches[0];\n\t\t}\n\t\telse if (e.type == 'touchend' && e.changedTouches != null && e.changedTouches[0] != null)\n\t\t{\n\t\t\te = e.changedTouches[0];\n\t\t}\n\t\t\n\t\treturn e;\n\t},\n\t\n\t/**\n\t * Function: getClientX\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tgetClientX: function(e)\n\t{\n\t\treturn mxEvent.getMainEvent(e).clientX;\n\t},\n\n\t/**\n\t * Function: getClientY\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tgetClientY: function(e)\n\t{\n\t\treturn mxEvent.getMainEvent(e).clientY;\n\t},\n\n\t/**\n\t * Function: consume\n\t * \n\t * Consumes the given event.\n\t * \n\t * Parameters:\n\t * \n\t * evt - Native event to be consumed.\n\t * preventDefault - Optional boolean to prevent the default for the event.\n\t * Default is true.\n\t * stopPropagation - Option boolean to stop event propagation. Default is\n\t * true.\n\t */\n\tconsume: function(evt, preventDefault, stopPropagation)\n\t{\n\t\tpreventDefault = (preventDefault != null) ? preventDefault : true;\n\t\tstopPropagation = (stopPropagation != null) ? stopPropagation : true;\n\t\t\n\t\tif (preventDefault)\n\t\t{\n\t\t\tif (evt.preventDefault)\n\t\t\t{\n\t\t\t\tif (stopPropagation)\n\t\t\t\t{\n\t\t\t\t\tevt.stopPropagation();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t\telse if (stopPropagation)\n\t\t\t{\n\t\t\t\tevt.cancelBubble = true;\n\t\t\t}\n\t\t}\n\n\t\t// Opera\n\t\tevt.isConsumed = true;\n\n\t\t// Other browsers\n\t\tif (!evt.preventDefault)\n\t\t{\n\t\t\tevt.returnValue = false;\n\t\t}\n\t},\n\t\n\t//\n\t// Special handles in mouse events\n\t//\n\t\n\t/**\n\t * Variable: LABEL_HANDLE\n\t * \n\t * Index for the label handle in an mxMouseEvent. This should be a negative\n\t * value that does not interfere with any possible handle indices. Default\n\t * is -1.\n\t */\n\tLABEL_HANDLE: -1,\n\t\n\t/**\n\t * Variable: ROTATION_HANDLE\n\t * \n\t * Index for the rotation handle in an mxMouseEvent. This should be a\n\t * negative value that does not interfere with any possible handle indices.\n\t * Default is -2.\n\t */\n\tROTATION_HANDLE: -2,\n\t\n\t/**\n\t * Variable: CUSTOM_HANDLE\n\t * \n\t * Start index for the custom handles in an mxMouseEvent. This should be a\n\t * negative value and is the start index which is decremented for each\n\t * custom handle. Default is -100.\n\t */\n\tCUSTOM_HANDLE: -100,\n\t\n\t/**\n\t * Variable: VIRTUAL_HANDLE\n\t * \n\t * Start index for the virtual handles in an mxMouseEvent. This should be a\n\t * negative value and is the start index which is decremented for each\n\t * virtual handle. Default is -100000. This assumes that there are no more\n\t * than VIRTUAL_HANDLE - CUSTOM_HANDLE custom handles.\n\t * \n\t */\n\tVIRTUAL_HANDLE: -100000,\n\t\n\t//\n\t// Event names\n\t//\n\t\n\t/**\n\t * Variable: MOUSE_DOWN\n\t *\n\t * Specifies the event name for mouseDown.\n\t */\n\tMOUSE_DOWN: 'mouseDown',\n\t\n\t/**\n\t * Variable: MOUSE_MOVE\n\t *\n\t * Specifies the event name for mouseMove. \n\t */\n\tMOUSE_MOVE: 'mouseMove',\n\t\n\t/**\n\t * Variable: MOUSE_UP\n\t *\n\t * Specifies the event name for mouseUp. \n\t */\n\tMOUSE_UP: 'mouseUp',\n\n\t/**\n\t * Variable: ACTIVATE\n\t *\n\t * Specifies the event name for activate.\n\t */\n\tACTIVATE: 'activate',\n\n\t/**\n\t * Variable: RESIZE_START\n\t *\n\t * Specifies the event name for resizeStart.\n\t */\n\tRESIZE_START: 'resizeStart',\n\n\t/**\n\t * Variable: RESIZE\n\t *\n\t * Specifies the event name for resize.\n\t */\n\tRESIZE: 'resize',\n\n\t/**\n\t * Variable: RESIZE_END\n\t *\n\t * Specifies the event name for resizeEnd.\n\t */\n\tRESIZE_END: 'resizeEnd',\n\n\t/**\n\t * Variable: MOVE_START\n\t *\n\t * Specifies the event name for moveStart.\n\t */\n\tMOVE_START: 'moveStart',\n\n\t/**\n\t * Variable: MOVE\n\t *\n\t * Specifies the event name for move.\n\t */\n\tMOVE: 'move',\n\n\t/**\n\t * Variable: MOVE_END\n\t *\n\t * Specifies the event name for moveEnd.\n\t */\n\tMOVE_END: 'moveEnd',\n\n\t/**\n\t * Variable: PAN_START\n\t *\n\t * Specifies the event name for panStart.\n\t */\n\tPAN_START: 'panStart',\n\n\t/**\n\t * Variable: PAN\n\t *\n\t * Specifies the event name for pan.\n\t */\n\tPAN: 'pan',\n\n\t/**\n\t * Variable: PAN_END\n\t *\n\t * Specifies the event name for panEnd.\n\t */\n\tPAN_END: 'panEnd',\n\n\t/**\n\t * Variable: MINIMIZE\n\t *\n\t * Specifies the event name for minimize.\n\t */\n\tMINIMIZE: 'minimize',\n\n\t/**\n\t * Variable: NORMALIZE\n\t *\n\t * Specifies the event name for normalize.\n\t */\n\tNORMALIZE: 'normalize',\n\n\t/**\n\t * Variable: MAXIMIZE\n\t *\n\t * Specifies the event name for maximize.\n\t */\n\tMAXIMIZE: 'maximize',\n\n\t/**\n\t * Variable: HIDE\n\t *\n\t * Specifies the event name for hide.\n\t */\n\tHIDE: 'hide',\n\n\t/**\n\t * Variable: SHOW\n\t *\n\t * Specifies the event name for show.\n\t */\n\tSHOW: 'show',\n\n\t/**\n\t * Variable: CLOSE\n\t *\n\t * Specifies the event name for close.\n\t */\n\tCLOSE: 'close',\n\n\t/**\n\t * Variable: DESTROY\n\t *\n\t * Specifies the event name for destroy.\n\t */\n\tDESTROY: 'destroy',\n\n\t/**\n\t * Variable: REFRESH\n\t *\n\t * Specifies the event name for refresh.\n\t */\n\tREFRESH: 'refresh',\n\n\t/**\n\t * Variable: SIZE\n\t *\n\t * Specifies the event name for size.\n\t */\n\tSIZE: 'size',\n\t\n\t/**\n\t * Variable: SELECT\n\t *\n\t * Specifies the event name for select.\n\t */\n\tSELECT: 'select',\n\n\t/**\n\t * Variable: FIRED\n\t *\n\t * Specifies the event name for fired.\n\t */\n\tFIRED: 'fired',\n\n\t/**\n\t * Variable: FIRE_MOUSE_EVENT\n\t *\n\t * Specifies the event name for fireMouseEvent.\n\t */\n\tFIRE_MOUSE_EVENT: 'fireMouseEvent',\n\n\t/**\n\t * Variable: GESTURE\n\t *\n\t * Specifies the event name for gesture.\n\t */\n\tGESTURE: 'gesture',\n\n\t/**\n\t * Variable: TAP_AND_HOLD\n\t *\n\t * Specifies the event name for tapAndHold.\n\t */\n\tTAP_AND_HOLD: 'tapAndHold',\n\n\t/**\n\t * Variable: GET\n\t *\n\t * Specifies the event name for get.\n\t */\n\tGET: 'get',\n\n\t/**\n\t * Variable: RECEIVE\n\t *\n\t * Specifies the event name for receive.\n\t */\n\tRECEIVE: 'receive',\n\n\t/**\n\t * Variable: CONNECT\n\t *\n\t * Specifies the event name for connect.\n\t */\n\tCONNECT: 'connect',\n\n\t/**\n\t * Variable: DISCONNECT\n\t *\n\t * Specifies the event name for disconnect.\n\t */\n\tDISCONNECT: 'disconnect',\n\n\t/**\n\t * Variable: SUSPEND\n\t *\n\t * Specifies the event name for suspend.\n\t */\n\tSUSPEND: 'suspend',\n\n\t/**\n\t * Variable: RESUME\n\t *\n\t * Specifies the event name for suspend.\n\t */\n\tRESUME: 'resume',\n\n\t/**\n\t * Variable: MARK\n\t *\n\t * Specifies the event name for mark.\n\t */\n\tMARK: 'mark',\n\n\t/**\n\t * Variable: ROOT\n\t *\n\t * Specifies the event name for root.\n\t */\n\tROOT: 'root',\n\n\t/**\n\t * Variable: POST\n\t *\n\t * Specifies the event name for post.\n\t */\n\tPOST: 'post',\n\n\t/**\n\t * Variable: OPEN\n\t *\n\t * Specifies the event name for open.\n\t */\n\tOPEN: 'open',\n\n\t/**\n\t * Variable: SAVE\n\t *\n\t * Specifies the event name for open.\n\t */\n\tSAVE: 'save',\n\n\t/**\n\t * Variable: BEFORE_ADD_VERTEX\n\t *\n\t * Specifies the event name for beforeAddVertex.\n\t */\n\tBEFORE_ADD_VERTEX: 'beforeAddVertex',\n\n\t/**\n\t * Variable: ADD_VERTEX\n\t *\n\t * Specifies the event name for addVertex.\n\t */\n\tADD_VERTEX: 'addVertex',\n\n\t/**\n\t * Variable: AFTER_ADD_VERTEX\n\t *\n\t * Specifies the event name for afterAddVertex.\n\t */\n\tAFTER_ADD_VERTEX: 'afterAddVertex',\n\n\t/**\n\t * Variable: DONE\n\t *\n\t * Specifies the event name for done.\n\t */\n\tDONE: 'done',\n\n\t/**\n\t * Variable: EXECUTE\n\t *\n\t * Specifies the event name for execute.\n\t */\n\tEXECUTE: 'execute',\n\n\t/**\n\t * Variable: EXECUTED\n\t *\n\t * Specifies the event name for executed.\n\t */\n\tEXECUTED: 'executed',\n\n\t/**\n\t * Variable: BEGIN_UPDATE\n\t *\n\t * Specifies the event name for beginUpdate.\n\t */\n\tBEGIN_UPDATE: 'beginUpdate',\n\n\t/**\n\t * Variable: START_EDIT\n\t *\n\t * Specifies the event name for startEdit.\n\t */\n\tSTART_EDIT: 'startEdit',\n\n\t/**\n\t * Variable: END_UPDATE\n\t *\n\t * Specifies the event name for endUpdate.\n\t */\n\tEND_UPDATE: 'endUpdate',\n\n\t/**\n\t * Variable: END_EDIT\n\t *\n\t * Specifies the event name for endEdit.\n\t */\n\tEND_EDIT: 'endEdit',\n\n\t/**\n\t * Variable: BEFORE_UNDO\n\t *\n\t * Specifies the event name for beforeUndo.\n\t */\n\tBEFORE_UNDO: 'beforeUndo',\n\n\t/**\n\t * Variable: UNDO\n\t *\n\t * Specifies the event name for undo.\n\t */\n\tUNDO: 'undo',\n\n\t/**\n\t * Variable: REDO\n\t *\n\t * Specifies the event name for redo.\n\t */\n\tREDO: 'redo',\n\n\t/**\n\t * Variable: CHANGE\n\t *\n\t * Specifies the event name for change.\n\t */\n\tCHANGE: 'change',\n\n\t/**\n\t * Variable: NOTIFY\n\t *\n\t * Specifies the event name for notify.\n\t */\n\tNOTIFY: 'notify',\n\n\t/**\n\t * Variable: LAYOUT_CELLS\n\t *\n\t * Specifies the event name for layoutCells.\n\t */\n\tLAYOUT_CELLS: 'layoutCells',\n\n\t/**\n\t * Variable: CLICK\n\t *\n\t * Specifies the event name for click.\n\t */\n\tCLICK: 'click',\n\n\t/**\n\t * Variable: SCALE\n\t *\n\t * Specifies the event name for scale.\n\t */\n\tSCALE: 'scale',\n\n\t/**\n\t * Variable: TRANSLATE\n\t *\n\t * Specifies the event name for translate.\n\t */\n\tTRANSLATE: 'translate',\n\n\t/**\n\t * Variable: SCALE_AND_TRANSLATE\n\t *\n\t * Specifies the event name for scaleAndTranslate.\n\t */\n\tSCALE_AND_TRANSLATE: 'scaleAndTranslate',\n\n\t/**\n\t * Variable: UP\n\t *\n\t * Specifies the event name for up.\n\t */\n\tUP: 'up',\n\n\t/**\n\t * Variable: DOWN\n\t *\n\t * Specifies the event name for down.\n\t */\n\tDOWN: 'down',\n\n\t/**\n\t * Variable: ADD\n\t *\n\t * Specifies the event name for add.\n\t */\n\tADD: 'add',\n\n\t/**\n\t * Variable: REMOVE\n\t *\n\t * Specifies the event name for remove.\n\t */\n\tREMOVE: 'remove',\n\t\n\t/**\n\t * Variable: CLEAR\n\t *\n\t * Specifies the event name for clear.\n\t */\n\tCLEAR: 'clear',\n\n\t/**\n\t * Variable: ADD_CELLS\n\t *\n\t * Specifies the event name for addCells.\n\t */\n\tADD_CELLS: 'addCells',\n\n\t/**\n\t * Variable: CELLS_ADDED\n\t *\n\t * Specifies the event name for cellsAdded.\n\t */\n\tCELLS_ADDED: 'cellsAdded',\n\n\t/**\n\t * Variable: MOVE_CELLS\n\t *\n\t * Specifies the event name for moveCells.\n\t */\n\tMOVE_CELLS: 'moveCells',\n\n\t/**\n\t * Variable: CELLS_MOVED\n\t *\n\t * Specifies the event name for cellsMoved.\n\t */\n\tCELLS_MOVED: 'cellsMoved',\n\n\t/**\n\t * Variable: RESIZE_CELLS\n\t *\n\t * Specifies the event name for resizeCells.\n\t */\n\tRESIZE_CELLS: 'resizeCells',\n\n\t/**\n\t * Variable: CELLS_RESIZED\n\t *\n\t * Specifies the event name for cellsResized.\n\t */\n\tCELLS_RESIZED: 'cellsResized',\n\n\t/**\n\t * Variable: TOGGLE_CELLS\n\t *\n\t * Specifies the event name for toggleCells.\n\t */\n\tTOGGLE_CELLS: 'toggleCells',\n\n\t/**\n\t * Variable: CELLS_TOGGLED\n\t *\n\t * Specifies the event name for cellsToggled.\n\t */\n\tCELLS_TOGGLED: 'cellsToggled',\n\n\t/**\n\t * Variable: ORDER_CELLS\n\t *\n\t * Specifies the event name for orderCells.\n\t */\n\tORDER_CELLS: 'orderCells',\n\n\t/**\n\t * Variable: CELLS_ORDERED\n\t *\n\t * Specifies the event name for cellsOrdered.\n\t */\n\tCELLS_ORDERED: 'cellsOrdered',\n\n\t/**\n\t * Variable: REMOVE_CELLS\n\t *\n\t * Specifies the event name for removeCells.\n\t */\n\tREMOVE_CELLS: 'removeCells',\n\n\t/**\n\t * Variable: CELLS_REMOVED\n\t *\n\t * Specifies the event name for cellsRemoved.\n\t */\n\tCELLS_REMOVED: 'cellsRemoved',\n\n\t/**\n\t * Variable: GROUP_CELLS\n\t *\n\t * Specifies the event name for groupCells.\n\t */\n\tGROUP_CELLS: 'groupCells',\n\n\t/**\n\t * Variable: UNGROUP_CELLS\n\t *\n\t * Specifies the event name for ungroupCells.\n\t */\n\tUNGROUP_CELLS: 'ungroupCells',\n\n\t/**\n\t * Variable: REMOVE_CELLS_FROM_PARENT\n\t *\n\t * Specifies the event name for removeCellsFromParent.\n\t */\n\tREMOVE_CELLS_FROM_PARENT: 'removeCellsFromParent',\n\n\t/**\n\t * Variable: FOLD_CELLS\n\t *\n\t * Specifies the event name for foldCells.\n\t */\n\tFOLD_CELLS: 'foldCells',\n\n\t/**\n\t * Variable: CELLS_FOLDED\n\t *\n\t * Specifies the event name for cellsFolded.\n\t */\n\tCELLS_FOLDED: 'cellsFolded',\n\n\t/**\n\t * Variable: ALIGN_CELLS\n\t *\n\t * Specifies the event name for alignCells.\n\t */\n\tALIGN_CELLS: 'alignCells',\n\n\t/**\n\t * Variable: LABEL_CHANGED\n\t *\n\t * Specifies the event name for labelChanged.\n\t */\n\tLABEL_CHANGED: 'labelChanged',\n\n\t/**\n\t * Variable: CONNECT_CELL\n\t *\n\t * Specifies the event name for connectCell.\n\t */\n\tCONNECT_CELL: 'connectCell',\n\n\t/**\n\t * Variable: CELL_CONNECTED\n\t *\n\t * Specifies the event name for cellConnected.\n\t */\n\tCELL_CONNECTED: 'cellConnected',\n\n\t/**\n\t * Variable: SPLIT_EDGE\n\t *\n\t * Specifies the event name for splitEdge.\n\t */\n\tSPLIT_EDGE: 'splitEdge',\n\n\t/**\n\t * Variable: FLIP_EDGE\n\t *\n\t * Specifies the event name for flipEdge.\n\t */\n\tFLIP_EDGE: 'flipEdge',\n\n\t/**\n\t * Variable: START_EDITING\n\t *\n\t * Specifies the event name for startEditing.\n\t */\n\tSTART_EDITING: 'startEditing',\n\n\t/**\n\t * Variable: EDITING_STARTED\n\t *\n\t * Specifies the event name for editingStarted.\n\t */\n\tEDITING_STARTED: 'editingStarted',\n\n\t/**\n\t * Variable: EDITING_STOPPED\n\t *\n\t * Specifies the event name for editingStopped.\n\t */\n\tEDITING_STOPPED: 'editingStopped',\n\n\t/**\n\t * Variable: ADD_OVERLAY\n\t *\n\t * Specifies the event name for addOverlay.\n\t */\n\tADD_OVERLAY: 'addOverlay',\n\n\t/**\n\t * Variable: REMOVE_OVERLAY\n\t *\n\t * Specifies the event name for removeOverlay.\n\t */\n\tREMOVE_OVERLAY: 'removeOverlay',\n\n\t/**\n\t * Variable: UPDATE_CELL_SIZE\n\t *\n\t * Specifies the event name for updateCellSize.\n\t */\n\tUPDATE_CELL_SIZE: 'updateCellSize',\n\n\t/**\n\t * Variable: ESCAPE\n\t *\n\t * Specifies the event name for escape.\n\t */\n\tESCAPE: 'escape',\n\n\t/**\n\t * Variable: DOUBLE_CLICK\n\t *\n\t * Specifies the event name for doubleClick.\n\t */\n\tDOUBLE_CLICK: 'doubleClick',\n\n\t/**\n\t * Variable: START\n\t *\n\t * Specifies the event name for start.\n\t */\n\tSTART: 'start',\n\n\t/**\n\t * Variable: RESET\n\t *\n\t * Specifies the event name for reset.\n\t */\n\tRESET: 'reset',\n\n\t/**\n\t * Variable: TOOLTIP_SHOWN\n\t * \n\t * Specified the event name for tooltip shown\n\t */\n\tTOOLTIP_SHOWN: 'tooltipShown',\n\n\t/**\n\t * Variable: PINCH_THRESHOLD\n\t *\n\t * Threshold for pinch gestures to fire a mouse wheel event.\n\t * Default value is 10.\n\t */\n\tPINCH_THRESHOLD: 10\n\n};\n\n__mxOutput.mxEvent = typeof mxEvent !== 'undefined' ? mxEvent : undefined;\n\n/**\n * Copyright (c) 2006-2020, JGraph Ltd\n * Copyright (c) 2006-2020, draw.io AG\n */\n/**\n * Class: mxXmlRequest\n * \n * XML HTTP request wrapper. See also: <mxUtils.get>, <mxUtils.post> and\n * <mxUtils.load>. This class provides a cross-browser abstraction for Ajax\n * requests.\n * \n * Encoding:\n * \n * For encoding parameter values, the built-in encodeURIComponent JavaScript\n * method must be used. For automatic encoding of post data in <mxEditor> the\n * <mxEditor.escapePostData> switch can be set to true (default). The encoding\n * will be carried out using the conte type of the page. That is, the page\n * containting the editor should contain a meta tag in the header, eg.\n * <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n * \n * Example:\n * \n * (code)\n * var onload = function(req)\n * {\n *   mxUtils.alert(req.getDocumentElement());\n * }\n * \n * var onerror = function(req)\n * {\n *   mxUtils.alert('Error');\n * }\n * new mxXmlRequest(url, 'key=value').send(onload, onerror);\n * (end)\n * \n * Sends an asynchronous POST request to the specified URL.\n * \n * Example:\n * \n * (code)\n * var req = new mxXmlRequest(url, 'key=value', 'POST', false);\n * req.send();\n * mxUtils.alert(req.getDocumentElement());\n * (end)\n * \n * Sends a synchronous POST request to the specified URL.\n * \n * Example:\n * \n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = encodeURIComponent(mxUtils.getXml(result));\n * new mxXmlRequest(url, 'xml='+xml).send();\n * (end)\n * \n * Sends an encoded graph model to the specified URL using xml as the\n * parameter name. The parameter can then be retrieved in C# as follows:\n * \n * (code)\n * string xml = HttpUtility.UrlDecode(context.Request.Params[\"xml\"]);\n * (end)\n * \n * Or in Java as follows:\n * \n * (code)\n * String xml = URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\");\n * (end)\n *\n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image.\n * \n * Constructor: mxXmlRequest\n * \n * Constructs an XML HTTP request.\n * \n * Parameters:\n * \n * url - Target URL of the request.\n * params - Form encoded parameters to send with a POST request.\n * method - String that specifies the request method. Possible values are\n * POST and GET. Default is POST.\n * async - Boolean specifying if an asynchronous request should be used.\n * Default is true.\n * username - String specifying the username to be used for the request.\n * password - String specifying the password to be used for the request.\n */\nfunction mxXmlRequest(url, params, method, async, username, password)\n{\n\tthis.url = url;\n\tthis.params = params;\n\tthis.method = method || 'POST';\n\tthis.async = (async != null) ? async : true;\n\tthis.username = username;\n\tthis.password = password;\n};\n\n/**\n * Variable: url\n * \n * Holds the target URL of the request.\n */\nmxXmlRequest.prototype.url = null;\n\n/**\n * Variable: params\n * \n * Holds the form encoded data for the POST request.\n */\nmxXmlRequest.prototype.params = null;\n\n/**\n * Variable: method\n * \n * Specifies the request method. Possible values are POST and GET. Default\n * is POST.\n */\nmxXmlRequest.prototype.method = null;\n\n/**\n * Variable: async\n * \n * Boolean indicating if the request is asynchronous.\n */\nmxXmlRequest.prototype.async = null;\n\n/**\n * Variable: binary\n * \n * Boolean indicating if the request is binary. This option is ignored in IE.\n * In all other browsers the requested mime type is set to\n * text/plain; charset=x-user-defined. Default is false.\n */\nmxXmlRequest.prototype.binary = false;\n\n/**\n * Variable: withCredentials\n * \n * Specifies if withCredentials should be used in HTML5-compliant browsers. Default is\n * false.\n */\nmxXmlRequest.prototype.withCredentials = false;\n\n/**\n * Variable: username\n * \n * Specifies the username to be used for authentication.\n */\nmxXmlRequest.prototype.username = null;\n\n/**\n * Variable: password\n * \n * Specifies the password to be used for authentication.\n */\nmxXmlRequest.prototype.password = null;\n\n/**\n * Variable: request\n * \n * Holds the inner, browser-specific request object.\n */\nmxXmlRequest.prototype.request = null;\n\n/**\n * Variable: decodeSimulateValues\n * \n * Specifies if request values should be decoded as URIs before setting the\n * textarea value in <simulate>. Defaults to false for backwards compatibility,\n * to avoid another decode on the server this should be set to true.\n */\nmxXmlRequest.prototype.decodeSimulateValues = false;\n\n/**\n * Function: isBinary\n * \n * Returns <binary>.\n */\nmxXmlRequest.prototype.isBinary = function()\n{\n\treturn this.binary;\n};\n\n/**\n * Function: setBinary\n * \n * Sets <binary>.\n */\nmxXmlRequest.prototype.setBinary = function(value)\n{\n\tthis.binary = value;\n};\n\n/**\n * Function: getText\n * \n * Returns the response as a string.\n */\nmxXmlRequest.prototype.getText = function()\n{\n\treturn this.request.responseText;\n};\n\n/**\n * Function: isReady\n * \n * Returns true if the response is ready.\n */\nmxXmlRequest.prototype.isReady = function()\n{\n\treturn this.request.readyState == 4;\n};\n\n/**\n * Function: getDocumentElement\n * \n * Returns the document element of the response XML document.\n */\nmxXmlRequest.prototype.getDocumentElement = function()\n{\n\tvar doc = this.getXml();\n\t\n\tif (doc != null)\n\t{\n\t\treturn doc.documentElement;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getXml\n * \n * Returns the response as an XML document. Use <getDocumentElement> to get\n * the document element of the XML document.\n */\nmxXmlRequest.prototype.getXml = function()\n{\n\tvar xml = this.request.responseXML;\n\t\n\t// Handles missing response headers in IE, the first condition handles\n\t// the case where responseXML is there, but using its nodes leads to\n\t// type errors in the mxCellCodec when putting the nodes into a new\n\t// document. This happens in IE9 standards mode and with XML user\n\t// objects only, as they are used directly as values in cells.\n\tif (document.documentMode >= 9 || xml == null || xml.documentElement == null)\n\t{\n\t\txml = mxUtils.parseXml(this.request.responseText);\n\t}\n\t\n\treturn xml;\n};\n\n/**\n * Function: getStatus\n * \n * Returns the status as a number, eg. 404 for \"Not found\" or 200 for \"OK\".\n * Note: The NS_ERROR_NOT_AVAILABLE for invalid responses cannot be cought.\n */\nmxXmlRequest.prototype.getStatus = function()\n{\n\treturn (this.request != null) ? this.request.status : null;\n};\n\n/**\n * Function: create\n * \n * Creates and returns the inner <request> object.\n */\nmxXmlRequest.prototype.create = function()\n{\n\tif (window.XMLHttpRequest)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\tvar req = new XMLHttpRequest();\n\t\t\t\n\t\t\t// TODO: Check for overrideMimeType required here?\n\t\t\tif (this.isBinary() && req.overrideMimeType)\n\t\t\t{\n\t\t\t\treq.overrideMimeType('text/plain; charset=x-user-defined');\n\t\t\t}\n\n\t\t\treturn req;\n\t\t};\n\t}\n\telse if (typeof(ActiveXObject) != 'undefined')\n\t{\n\t\treturn function()\n\t\t{\n\t\t\t// TODO: Implement binary option\n\t\t\treturn new ActiveXObject('Microsoft.XMLHTTP');\n\t\t};\n\t}\n}();\n\n/**\n * Function: send\n * \n * Send the <request> to the target URL using the specified functions to\n * process the response asychronously.\n * \n * Note: Due to technical limitations, onerror is currently ignored.\n * \n * Parameters:\n * \n * onload - Function to be invoked if a successful response was received.\n * onerror - Function to be called on any error. Unused in this implementation, intended for overriden function.\n * timeout - Optional timeout in ms before calling ontimeout.\n * ontimeout - Optional function to execute on timeout.\n */\nmxXmlRequest.prototype.send = function(onload, onerror, timeout, ontimeout)\n{\n\tthis.request = this.create();\n\t\n\tif (this.request != null)\n\t{\n\t\tif (onload != null)\n\t\t{\n\t\t\tthis.request.onreadystatechange = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tif (this.isReady())\n\t\t\t\t{\n\t\t\t\t\tonload(this);\n\t\t\t\t\tthis.request.onreadystatechange = null;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.request.open(this.method, this.url, this.async,\n\t\t\tthis.username, this.password);\n\t\tthis.setRequestHeaders(this.request, this.params);\n\t\t\n\t\tif (window.XMLHttpRequest && this.withCredentials)\n\t\t{\n\t\t\tthis.request.withCredentials = 'true';\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_QUIRKS && (document.documentMode == null || document.documentMode > 9) &&\n\t\t\twindow.XMLHttpRequest && timeout != null && ontimeout != null)\n\t\t{\n\t\t\tthis.request.timeout = timeout;\n\t\t\tthis.request.ontimeout = ontimeout;\n\t\t}\n\t\t\t\t\n\t\tthis.request.send(this.params);\n\t}\n};\n\n/**\n * Function: setRequestHeaders\n * \n * Sets the headers for the given request and parameters. This sets the\n * content-type to application/x-www-form-urlencoded if any params exist.\n * \n * Example:\n * \n * (code)\n * request.setRequestHeaders = function(request, params)\n * {\n *   if (params != null)\n *   {\n *     request.setRequestHeader('Content-Type',\n *             'multipart/form-data');\n *     request.setRequestHeader('Content-Length',\n *             params.length);\n *   }\n * };\n * (end)\n * \n * Use the code above before calling <send> if you require a\n * multipart/form-data request.   \n */\nmxXmlRequest.prototype.setRequestHeaders = function(request, params)\n{\n\tif (params != null)\n\t{\n\t\trequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\t}\n};\n\n/**\n * Function: simulate\n * \n * Creates and posts a request to the given target URL using a dynamically\n * created form inside the given document.\n * \n * Parameters:\n * \n * docs - Document that contains the form element.\n * target - Target to send the form result to.\n */\nmxXmlRequest.prototype.simulate = function(doc, target)\n{\n\tdoc = doc || document;\n\tvar old = null;\n\n\tif (doc == document)\n\t{\n\t\told = window.onbeforeunload;\t\t\n\t\twindow.onbeforeunload = null;\n\t}\n\t\t\t\n\tvar form = doc.createElement('form');\n\tform.setAttribute('method', this.method);\n\tform.setAttribute('action', this.url);\n\n\tif (target != null)\n\t{\n\t\tform.setAttribute('target', target);\n\t}\n\n\tform.style.display = 'none';\n\tform.style.visibility = 'hidden';\n\t\n\tvar pars = (this.params.indexOf('&') > 0) ?\n\t\tthis.params.split('&') :\n\t\tthis.params.split();\n\n\t// Adds the parameters as textareas to the form\n\tfor (var i=0; i<pars.length; i++)\n\t{\n\t\tvar pos = pars[i].indexOf('=');\n\t\t\n\t\tif (pos > 0)\n\t\t{\n\t\t\tvar name = pars[i].substring(0, pos);\n\t\t\tvar value = pars[i].substring(pos+1);\n\t\t\t\n\t\t\tif (this.decodeSimulateValues)\n\t\t\t{\n\t\t\t\tvalue = decodeURIComponent(value);\n\t\t\t}\n\t\t\t\n\t\t\tvar textarea = doc.createElement('textarea');\n\t\t\ttextarea.setAttribute('wrap', 'off');\n\t\t\ttextarea.setAttribute('name', name);\n\t\t\tmxUtils.write(textarea, value);\n\t\t\tform.appendChild(textarea);\n\t\t}\n\t}\n\t\n\tdoc.body.appendChild(form);\n\tform.submit();\n\t\n\tif (form.parentNode != null)\n\t{\n\t\tform.parentNode.removeChild(form);\n\t}\n\n\tif (old != null)\n\t{\t\t\n\t\twindow.onbeforeunload = old;\n\t}\n};\n\n__mxOutput.mxXmlRequest = typeof mxXmlRequest !== 'undefined' ? mxXmlRequest : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxClipboard =\n{\n\t/**\n\t * Class: mxClipboard\n\t * \n\t * Singleton that implements a clipboard for graph cells.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxClipboard.copy(graph);\n\t * mxClipboard.paste(graph2);\n\t * (end)\n\t *\n\t * This copies the selection cells from the graph to the clipboard and\n\t * pastes them into graph2.\n\t * \n\t * For fine-grained control of the clipboard data the <mxGraph.canExportCell>\n\t * and <mxGraph.canImportCell> functions can be overridden.\n\t * \n\t * To restore previous parents for pasted cells, the implementation for\n\t * <copy> and <paste> can be changed as follows.\n\t * \n\t * (code)\n\t * mxClipboard.copy = function(graph, cells)\n\t * {\n\t *   cells = cells || graph.getSelectionCells();\n\t *   var result = graph.getExportableCells(cells);\n\t *   \n\t *   mxClipboard.parents = new Object();\n\t *   \n\t *   for (var i = 0; i < result.length; i++)\n\t *   {\n\t *     mxClipboard.parents[i] = graph.model.getParent(cells[i]);\n\t *   }\n\t *   \n\t *   mxClipboard.insertCount = 1;\n\t *   mxClipboard.setCells(graph.cloneCells(result));\n\t *   \n\t *   return result;\n\t * };\n\t * \n\t * mxClipboard.paste = function(graph)\n\t * {\n\t *   if (!mxClipboard.isEmpty())\n\t *   {\n\t *     var cells = graph.getImportableCells(mxClipboard.getCells());\n\t *     var delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t *     var parent = graph.getDefaultParent();\n\t *     \n\t *     graph.model.beginUpdate();\n\t *     try\n\t *     {\n\t *       for (var i = 0; i < cells.length; i++)\n\t *       {\n\t *         var tmp = (mxClipboard.parents != null && graph.model.contains(mxClipboard.parents[i])) ?\n\t *              mxClipboard.parents[i] : parent;\n\t *         cells[i] = graph.importCells([cells[i]], delta, delta, tmp)[0];\n\t *       }\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.model.endUpdate();\n\t *     }\n\t *     \n\t *     // Increments the counter and selects the inserted cells\n\t *     mxClipboard.insertCount++;\n\t *     graph.setSelectionCells(cells);\n\t *   }\n\t * };\n\t * (end)\n\t * \n\t * Variable: STEPSIZE\n\t * \n\t * Defines the step size to offset the cells after each paste operation.\n\t * Default is 10.\n\t */\n\tSTEPSIZE: 10,\n\n\t/**\n\t * Variable: insertCount\n\t * \n\t * Counts the number of times the clipboard data has been inserted.\n\t */\n\tinsertCount: 1,\n\n\t/**\n\t * Variable: cells\n\t * \n\t * Holds the array of <mxCells> currently in the clipboard.\n\t */\n\tcells: null,\n\n\t/**\n\t * Function: setCells\n\t * \n\t * Sets the cells in the clipboard. Fires a <mxEvent.CHANGE> event.\n\t */\n\tsetCells: function(cells)\n\t{\n\t\tmxClipboard.cells = cells;\n\t},\n\n\t/**\n\t * Function: getCells\n\t * \n\t * Returns  the cells in the clipboard.\n\t */\n\tgetCells: function()\n\t{\n\t\treturn mxClipboard.cells;\n\t},\n\t\n\t/**\n\t * Function: isEmpty\n\t * \n\t * Returns true if the clipboard currently has not data stored.\n\t */\n\tisEmpty: function()\n\t{\n\t\treturn mxClipboard.getCells() == null;\n\t},\n\t\n\t/**\n\t * Function: cut\n\t * \n\t * Cuts the given array of <mxCells> from the specified graph.\n\t * If cells is null then the selection cells of the graph will\n\t * be used. Returns the cells that have been cut from the graph.\n\t *\n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Optional array of <mxCells> to be cut.\n\t */\n\tcut: function(graph, cells)\n\t{\n\t\tcells = mxClipboard.copy(graph, cells);\n\t\tmxClipboard.insertCount = 0;\n\t\tmxClipboard.removeCells(graph, cells);\n\t\t\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: removeCells\n\t * \n\t * Hook to remove the given cells from the given graph after\n\t * a cut operation.\n\t *\n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Array of <mxCells> to be cut.\n\t */\n\tremoveCells: function(graph, cells)\n\t{\n\t\tgraph.removeCells(cells);\n\t},\n\n\t/**\n\t * Function: copy\n\t * \n\t * Copies the given array of <mxCells> from the specified\n\t * graph to <cells>. Returns the original array of cells that has\n\t * been cloned. Descendants of cells in the array are ignored.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be copied.\n\t * cells - Optional array of <mxCells> to be copied.\n\t */\n\tcopy: function(graph, cells)\n\t{\n\t\tcells = cells || graph.getSelectionCells();\n\t\tvar result = graph.getExportableCells(graph.model.getTopmostCells(cells));\n\t\tmxClipboard.insertCount = 1;\n\t\tmxClipboard.setCells(graph.cloneCells(result));\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: paste\n\t * \n\t * Pastes the <cells> into the specified graph restoring\n\t * the relation to <parents>, if possible. If the parents\n\t * are no longer in the graph or invisible then the\n\t * cells are added to the graph's default or into the\n\t * swimlane under the cell's new location if one exists.\n\t * The cells are added to the graph using <mxGraph.importCells>\n\t * and returned.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to paste the <cells> into.\n\t */\n\tpaste: function(graph)\n\t{\n\t\tvar cells = null;\n\t\t\n\t\tif (!mxClipboard.isEmpty())\n\t\t{\n\t\t\tcells = graph.getImportableCells(mxClipboard.getCells());\n\t\t\tvar delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t\t\tvar parent = graph.getDefaultParent();\n\t\t\tcells = graph.importCells(cells, delta, delta, parent);\n\t\t\t\n\t\t\t// Increments the counter and selects the inserted cells\n\t\t\tmxClipboard.insertCount++;\n\t\t\tgraph.setSelectionCells(cells);\n\t\t}\n\t\t\n\t\treturn cells;\n\t}\n\n};\n\n__mxOutput.mxClipboard = typeof mxClipboard !== 'undefined' ? mxClipboard : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxWindow\n * \n * Basic window inside a document.\n * \n * Examples:\n * \n * Creating a simple window.\n *\n * (code)\n * var tb = document.createElement('div');\n * var wnd = new mxWindow('Title', tb, 100, 100, 200, 200, true, true);\n * wnd.setVisible(true); \n * (end)\n *\n * Creating a window that contains an iframe. \n * \n * (code)\n * var frame = document.createElement('iframe');\n * frame.setAttribute('width', '192px');\n * frame.setAttribute('height', '172px');\n * frame.setAttribute('src', 'http://www.example.com/');\n * frame.style.backgroundColor = 'white';\n * \n * var w = document.body.clientWidth;\n * var h = (document.body.clientHeight || document.documentElement.clientHeight);\n * var wnd = new mxWindow('Title', frame, (w-200)/2, (h-200)/3, 200, 200);\n * wnd.setVisible(true);\n * (end)\n * \n * To limit the movement of a window, eg. to keep it from being moved beyond\n * the top, left corner the following method can be overridden (recommended):\n * \n * (code)\n * wnd.setLocation = function(x, y)\n * {\n *   x = Math.max(0, x);\n *   y = Math.max(0, y);\n *   mxWindow.prototype.setLocation.apply(this, arguments);\n * };\n * (end)\n * \n * Or the following event handler can be used:\n * \n * (code)\n * wnd.addListener(mxEvent.MOVE, function(e)\n * {\n *   wnd.setLocation(Math.max(0, wnd.getX()), Math.max(0, wnd.getY()));\n * });\n * (end)\n * \n * To keep a window inside the current window:\n * \n * (code)\n * mxEvent.addListener(window, 'resize', mxUtils.bind(this, function()\n * {\n *   var iw = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n *   var ih = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n *   \n *   var x = this.window.getX();\n *   var y = this.window.getY();\n *   \n *   if (x + this.window.table.clientWidth > iw)\n *   {\n *     x = Math.max(0, iw - this.window.table.clientWidth);\n *   }\n *   \n *   if (y + this.window.table.clientHeight > ih)\n *   {\n *     y = Math.max(0, ih - this.window.table.clientHeight);\n *   }\n *   \n *   if (this.window.getX() != x || this.window.getY() != y)\n *   {\n *     this.window.setLocation(x, y);\n *   }\n * }));\n * (end)\n *\n * Event: mxEvent.MOVE_START\n *\n * Fires before the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.MOVE\n *\n * Fires while the window is being moved. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.MOVE_END\n *\n * Fires after the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE_START\n *\n * Fires before the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE\n *\n * Fires while the window is being resized. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE_END\n *\n * Fires after the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.MAXIMIZE\n * \n * Fires after the window is maximized. The <code>event</code> property\n * contains the corresponding mouse event.\n * \n * Event: mxEvent.MINIMIZE\n * \n * Fires after the window is minimized. The <code>event</code> property\n * contains the corresponding mouse event.\n * \n * Event: mxEvent.NORMALIZE\n * \n * Fires after the window is normalized, that is, it returned from\n * maximized or minimized state. The <code>event</code> property contains the\n * corresponding mouse event.\n *  \n * Event: mxEvent.ACTIVATE\n * \n * Fires after a window is activated. The <code>previousWindow</code> property\n * contains the previous window. The event sender is the active window.\n * \n * Event: mxEvent.SHOW\n * \n * Fires after the window is shown. This event has no properties.\n * \n * Event: mxEvent.HIDE\n * \n * Fires after the window is hidden. This event has no properties.\n * \n * Event: mxEvent.CLOSE\n * \n * Fires before the window is closed. The <code>event</code> property contains\n * the corresponding mouse event.\n * \n * Event: mxEvent.DESTROY\n * \n * Fires before the window is destroyed. This event has no properties.\n * \n * Constructor: mxWindow\n * \n * Constructs a new window with the given dimension and title to display\n * the specified content. The window elements use the given style as a\n * prefix for the classnames of the respective window elements, namely,\n * the window title and window pane. The respective postfixes are appended\n * to the given stylename as follows:\n * \n *   style - Base style for the window.\n *   style+Title - Style for the window title.\n *   style+Pane - Style for the window pane.\n * \n * The default value for style is mxWindow, resulting in the following\n * classnames for the window elements: mxWindow, mxWindowTitle and\n * mxWindowPane.\n * \n * If replaceNode is given then the window replaces the given DOM node in\n * the document.\n * \n * Parameters:\n * \n * title - String that represents the title of the new window.\n * content - DOM node that is used as the window content.\n * x - X-coordinate of the window location.\n * y - Y-coordinate of the window location.\n * width - Width of the window.\n * height - Optional height of the window. Default is to match the height\n * of the content at the specified width.\n * minimizable - Optional boolean indicating if the window is minimizable.\n * Default is true.\n * movable - Optional boolean indicating if the window is movable. Default\n * is true.\n * replaceNode - Optional DOM node that the window should replace.\n * style - Optional base classname for the window elements. Default is\n * mxWindow.\n */\nfunction mxWindow(title, content, x, y, width, height, minimizable, movable, replaceNode, style)\n{\n\tif (content != null)\n\t{\n\t\tminimizable = (minimizable != null) ? minimizable : true;\n\t\tthis.content = content;\n\t\tthis.init(x, y, width, height, style);\n\t\t\n\t\tthis.installMaximizeHandler();\n\t\tthis.installMinimizeHandler();\n\t\tthis.installCloseHandler();\n\t\tthis.setMinimizable(minimizable);\n\t\tthis.setTitle(title);\n\t\t\n\t\tif (movable == null || movable)\n\t\t{\n\t\t\tthis.installMoveHandler();\n\t\t}\n\n\t\tif (replaceNode != null && replaceNode.parentNode != null)\n\t\t{\n\t\t\treplaceNode.parentNode.replaceChild(this.div, replaceNode);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.body.appendChild(this.div);\n\t\t}\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxWindow.prototype = new mxEventSource();\nmxWindow.prototype.constructor = mxWindow;\n\n/**\n * Variable: closeImage\n * \n * URL of the image to be used for the close icon in the titlebar.\n */\nmxWindow.prototype.closeImage = mxClient.imageBasePath + '/close.gif';\n\n/**\n * Variable: minimizeImage\n * \n * URL of the image to be used for the minimize icon in the titlebar.\n */\nmxWindow.prototype.minimizeImage = mxClient.imageBasePath + '/minimize.gif';\n\t\n/**\n * Variable: normalizeImage\n * \n * URL of the image to be used for the normalize icon in the titlebar.\n */\nmxWindow.prototype.normalizeImage = mxClient.imageBasePath + '/normalize.gif';\n\t\n/**\n * Variable: maximizeImage\n * \n * URL of the image to be used for the maximize icon in the titlebar.\n */\nmxWindow.prototype.maximizeImage = mxClient.imageBasePath + '/maximize.gif';\n\n/**\n * Variable: resizeImage\n * \n * URL of the image to be used for the resize icon.\n */\nmxWindow.prototype.resizeImage = mxClient.imageBasePath + '/resize.gif';\n\n/**\n * Variable: visible\n * \n * Boolean flag that represents the visible state of the window.\n */\nmxWindow.prototype.visible = false;\n\n/**\n * Variable: minimumSize\n * \n * <mxRectangle> that specifies the minimum width and height of the window.\n * Default is (50, 40).\n */\nmxWindow.prototype.minimumSize = new mxRectangle(0, 0, 50, 40);\n\n/**\n * Variable: destroyOnClose\n * \n * Specifies if the window should be destroyed when it is closed. If this\n * is false then the window is hidden using <setVisible>. Default is true.\n */\nmxWindow.prototype.destroyOnClose = true;\n\n/**\n * Variable: contentHeightCorrection\n * \n * Defines the correction factor for computing the height of the contentWrapper.\n * Default is 6 for IE 7/8 standards mode and 2 for all other browsers and modes.\n */\nmxWindow.prototype.contentHeightCorrection = (document.documentMode == 8 || document.documentMode == 7) ? 6 : 2;\n\n/**\n * Variable: title\n * \n * Reference to the DOM node (TD) that contains the title.\n */\nmxWindow.prototype.title = null;\n\n/**\n * Variable: content\n * \n * Reference to the DOM node that represents the window content.\n */\nmxWindow.prototype.content = null;\n\n/**\n * Function: init\n * \n * Initializes the DOM tree that represents the window.\n */\nmxWindow.prototype.init = function(x, y, width, height, style)\n{\n\tstyle = (style != null) ? style : 'mxWindow';\n\t\n\tthis.div = document.createElement('div');\n\tthis.div.className = style;\n\n\tthis.div.style.left = x + 'px';\n\tthis.div.style.top = y + 'px';\n\tthis.table = document.createElement('table');\n\tthis.table.className = style;\n\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tthis.div.style.touchAction = 'none';\n\t}\n\t\n\t// Workaround for table size problems in FF\n\tif (width != null)\n\t{\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tthis.div.style.width = width + 'px'; \n\t\t}\n\t\t\n\t\tthis.table.style.width = width + 'px';\n\t} \n\t\n\tif (height != null)\n\t{\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tthis.div.style.height = height + 'px';\n\t\t}\n\t\t\n\t\tthis.table.style.height = height + 'px';\n\t}\t\t\n\t\n\t// Creates title row\n\tvar tbody = document.createElement('tbody');\n\tvar tr = document.createElement('tr');\n\t\n\tthis.title = document.createElement('td');\n\tthis.title.className = style + 'Title';\n\t\n\tthis.buttons = document.createElement('div');\n\tthis.buttons.style.position = 'absolute';\n\tthis.buttons.style.display = 'inline-block';\n\tthis.buttons.style.right = '4px';\n\tthis.buttons.style.top = '5px';\n\tthis.title.appendChild(this.buttons);\n\t\n\ttr.appendChild(this.title);\n\ttbody.appendChild(tr);\n\t\n\t// Creates content row and table cell\n\ttr = document.createElement('tr');\n\tthis.td = document.createElement('td');\n\tthis.td.className = style + 'Pane';\n\t\n\tif (document.documentMode == 7)\n\t{\n\t\tthis.td.style.height = '100%';\n\t}\n\n\tthis.contentWrapper = document.createElement('div');\n\tthis.contentWrapper.className = style + 'Pane';\n\tthis.contentWrapper.style.width = '100%';\n\tthis.contentWrapper.appendChild(this.content);\n\n\t// Workaround for div around div restricts height\n\t// of inner div if outerdiv has hidden overflow\n\tif (mxClient.IS_QUIRKS || this.content.nodeName.toUpperCase() != 'DIV')\n\t{\n\t\tthis.contentWrapper.style.height = '100%';\n\t}\n\n\t// Puts all content into the DOM\n\tthis.td.appendChild(this.contentWrapper);\n\ttr.appendChild(this.td);\n\ttbody.appendChild(tr);\n\tthis.table.appendChild(tbody);\n\tthis.div.appendChild(this.table);\n\t\n\t// Puts the window on top of other windows when clicked\n\tvar activator = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t});\n\t\n\tmxEvent.addGestureListeners(this.title, activator);\n\tmxEvent.addGestureListeners(this.table, activator);\n\n\tthis.hide();\n};\n\n/**\n * Function: setTitle\n * \n * Sets the window title to the given string. HTML markup inside the title\n * will be escaped.\n */\nmxWindow.prototype.setTitle = function(title)\n{\n\t// Removes all text content nodes (normally just one)\n\tvar child = this.title.firstChild;\n\t\n\twhile (child != null)\n\t{\n\t\tvar next = child.nextSibling;\n\t\t\n\t\tif (child.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t{\n\t\t\tchild.parentNode.removeChild(child);\n\t\t}\n\t\t\n\t\tchild = next;\n\t}\n\t\n\tmxUtils.write(this.title, title || '');\n\tthis.title.appendChild(this.buttons);\n};\n\n/**\n * Function: setScrollable\n * \n * Sets if the window contents should be scrollable.\n */\nmxWindow.prototype.setScrollable = function(scrollable)\n{\n\t// Workaround for hang in Presto 2.5.22 (Opera 10.5)\n\tif (navigator.userAgent == null ||\n\t\tnavigator.userAgent.indexOf('Presto/2.5') < 0)\n\t{\n\t\tif (scrollable)\n\t\t{\n\t\t\tthis.contentWrapper.style.overflow = 'auto';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.contentWrapper.style.overflow = 'hidden';\n\t\t}\n\t}\n};\n\n/**\n * Function: activate\n * \n * Puts the window on top of all other windows.\n */\nmxWindow.prototype.activate = function()\n{\n\tif (mxWindow.activeWindow != this)\n\t{\n\t\tvar style = mxUtils.getCurrentStyle(this.getElement());\n\t\tvar index = (style != null) ? style.zIndex : 3;\n\n\t\tif (mxWindow.activeWindow)\n\t\t{\n\t\t\tvar elt = mxWindow.activeWindow.getElement();\n\t\t\t\n\t\t\tif (elt != null && elt.style != null)\n\t\t\t{\n\t\t\t\telt.style.zIndex = index;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar previousWindow = mxWindow.activeWindow;\n\t\tthis.getElement().style.zIndex = parseInt(index) + 1;\n\t\tmxWindow.activeWindow = this;\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ACTIVATE, 'previousWindow', previousWindow));\n\t}\n};\n\n/**\n * Function: getElement\n * \n * Returuns the outermost DOM node that makes up the window.\n */\nmxWindow.prototype.getElement = function()\n{\n\treturn this.div;\n};\n\n/**\n * Function: fit\n * \n * Makes sure the window is inside the client area of the window.\n */\nmxWindow.prototype.fit = function()\n{\n\tmxUtils.fit(this.div);\n};\n\n/**\n * Function: isResizable\n * \n * Returns true if the window is resizable.\n */\nmxWindow.prototype.isResizable = function()\n{\n\tif (this.resize != null)\n\t{\n\t\treturn this.resize.style.display != 'none';\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: setResizable\n * \n * Sets if the window should be resizable. To avoid interference with some\n * built-in features of IE10 and later, the use of the following code is\n * recommended if there are resizable <mxWindow>s in the page:\n * \n * (code)\n * if (mxClient.IS_POINTER)\n * {\n *   document.body.style.msTouchAction = 'none';\n * }\n * (end)\n */\nmxWindow.prototype.setResizable = function(resizable)\n{\n\tif (resizable)\n\t{\n\t\tif (this.resize == null)\n\t\t{\n\t\t\tthis.resize = document.createElement('img');\n\t\t\tthis.resize.style.position = 'absolute';\n\t\t\tthis.resize.style.bottom = '2px';\n\t\t\tthis.resize.style.right = '2px';\n\n\t\t\tthis.resize.setAttribute('src', this.resizeImage);\n\t\t\tthis.resize.style.cursor = 'nw-resize';\n\t\t\t\n\t\t\tvar startX = null;\n\t\t\tvar startY = null;\n\t\t\tvar width = null;\n\t\t\tvar height = null;\n\t\t\t\n\t\t\tvar start = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\t// LATER: pointerdown starting on border of resize does start\n\t\t\t\t// the drag operation but does not fire consecutive events via\n\t\t\t\t// one of the listeners below (does pan instead).\n\t\t\t\t// Workaround: document.body.style.msTouchAction = 'none'\n\t\t\t\tthis.activate();\n\t\t\t\tstartX = mxEvent.getClientX(evt);\n\t\t\t\tstartY = mxEvent.getClientY(evt);\n\t\t\t\twidth = this.div.offsetWidth;\n\t\t\t\theight = this.div.offsetHeight;\n\t\t\t\t\n\t\t\t\tmxEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_START, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\n\t\t\t// Adds a temporary pair of listeners to intercept\n\t\t\t// the gesture event in the document\n\t\t\tvar dragHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (startX != null && startY != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = mxEvent.getClientX(evt) - startX;\n\t\t\t\t\tvar dy = mxEvent.getClientY(evt) - startY;\n\t\n\t\t\t\t\tthis.setSize(width + dx, height + dy);\n\t\n\t\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE, 'event', evt));\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tvar dropHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (startX != null && startY != null)\n\t\t\t\t{\n\t\t\t\t\tstartX = null;\n\t\t\t\t\tstartY = null;\n\t\t\t\t\tmxEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_END, 'event', evt));\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addGestureListeners(this.resize, start, dragHandler, dropHandler);\n\t\t\tthis.div.appendChild(this.resize);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tthis.resize.style.display = 'inline';\n\t\t}\n\t}\n\telse if (this.resize != null)\n\t{\n\t\tthis.resize.style.display = 'none';\n\t}\n};\n\t\n/**\n * Function: setSize\n * \n * Sets the size of the window.\n */\nmxWindow.prototype.setSize = function(width, height)\n{\n\twidth = Math.max(this.minimumSize.width, width);\n\theight = Math.max(this.minimumSize.height, height);\n\n\t// Workaround for table size problems in FF\n\tif (!mxClient.IS_QUIRKS)\n\t{\n\t\tthis.div.style.width =  width + 'px';\n\t\tthis.div.style.height = height + 'px';\n\t}\n\t\n\tthis.table.style.width =  width + 'px';\n\tthis.table.style.height = height + 'px';\n\n\tif (!mxClient.IS_QUIRKS)\n\t{\n\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t}\n};\n\t\n/**\n * Function: setMinimizable\n * \n * Sets if the window is minimizable.\n */\nmxWindow.prototype.setMinimizable = function(minimizable)\n{\n\tthis.minimize.style.display = (minimizable) ? '' : 'none';\n};\n\n/**\n * Function: getMinimumSize\n * \n * Returns an <mxRectangle> that specifies the size for the minimized window.\n * A width or height of 0 means keep the existing width or height. This\n * implementation returns the height of the window title and keeps the width.\n */\nmxWindow.prototype.getMinimumSize = function()\n{\n\treturn new mxRectangle(0, 0, 0, this.title.offsetHeight);\n};\n\n/**\n * Function: installMinimizeHandler\n * \n * Installs the event listeners required for minimizing the window.\n */\nmxWindow.prototype.installMinimizeHandler = function()\n{\n\tthis.minimize = document.createElement('img');\n\t\n\tthis.minimize.setAttribute('src', this.minimizeImage);\n\tthis.minimize.setAttribute('title', 'Minimize');\n\tthis.minimize.style.cursor = 'pointer';\n\tthis.minimize.style.marginLeft = '2px';\n\tthis.minimize.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.minimize);\n\t\n\tvar minimized = false;\n\tvar maxDisplay = null;\n\tvar height = null;\n\n\tvar funct = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t\t\n\t\tif (!minimized)\n\t\t{\n\t\t\tminimized = true;\n\t\t\t\n\t\t\tthis.minimize.setAttribute('src', this.normalizeImage);\n\t\t\tthis.minimize.setAttribute('title', 'Normalize');\n\t\t\tthis.contentWrapper.style.display = 'none';\n\t\t\tmaxDisplay = this.maximize.style.display;\n\t\t\t\n\t\t\tthis.maximize.style.display = 'none';\n\t\t\theight = this.table.style.height;\n\t\t\t\n\t\t\tvar minSize = this.getMinimumSize();\n\t\t\t\n\t\t\tif (minSize.height > 0)\n\t\t\t{\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.height = minSize.height + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.height = minSize.height + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (minSize.width > 0)\n\t\t\t{\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.width = minSize.width + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.width = minSize.width + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (this.resize != null)\n\t\t\t{\n\t\t\t\tthis.resize.style.visibility = 'hidden';\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MINIMIZE, 'event', evt));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tminimized = false;\n\t\t\t\n\t\t\tthis.minimize.setAttribute('src', this.minimizeImage);\n\t\t\tthis.minimize.setAttribute('title', 'Minimize');\n\t\t\tthis.contentWrapper.style.display = ''; // default\n\t\t\tthis.maximize.style.display = maxDisplay;\n\t\t\t\n\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.div.style.height = height;\n\t\t\t}\n\t\t\t\n\t\t\tthis.table.style.height = height;\n\n\t\t\tif (this.resize != null)\n\t\t\t{\n\t\t\t\tthis.resize.style.visibility = '';\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.NORMALIZE, 'event', evt));\n\t\t}\n\t\t\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tmxEvent.addGestureListeners(this.minimize, funct);\n};\n\t\n/**\n * Function: setMaximizable\n * \n * Sets if the window is maximizable.\n */\nmxWindow.prototype.setMaximizable = function(maximizable)\n{\n\tthis.maximize.style.display = (maximizable) ? '' : 'none';\n};\n\n/**\n * Function: installMaximizeHandler\n * \n * Installs the event listeners required for maximizing the window.\n */\nmxWindow.prototype.installMaximizeHandler = function()\n{\n\tthis.maximize = document.createElement('img');\n\t\n\tthis.maximize.setAttribute('src', this.maximizeImage);\n\tthis.maximize.setAttribute('title', 'Maximize');\n\tthis.maximize.style.cursor = 'default';\n\tthis.maximize.style.marginLeft = '2px';\n\tthis.maximize.style.cursor = 'pointer';\n\tthis.maximize.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.maximize);\n\t\n\tvar maximized = false;\n\tvar x = null;\n\tvar y = null;\n\tvar height = null;\n\tvar width = null;\n\tvar minDisplay = null;\n\n\tvar funct = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t\t\n\t\tif (this.maximize.style.display != 'none')\n\t\t{\n\t\t\tif (!maximized)\n\t\t\t{\n\t\t\t\tmaximized = true;\n\t\t\t\t\n\t\t\t\tthis.maximize.setAttribute('src', this.normalizeImage);\n\t\t\t\tthis.maximize.setAttribute('title', 'Normalize');\n\t\t\t\tthis.contentWrapper.style.display = '';\n\t\t\t\tminDisplay = this.minimize.style.display;\n\t\t\t\tthis.minimize.style.display = 'none';\n\t\t\t\t\n\t\t\t\t// Saves window state\n\t\t\t\tx = parseInt(this.div.style.left);\n\t\t\t\ty = parseInt(this.div.style.top);\n\t\t\t\theight = this.table.style.height;\n\t\t\t\twidth = this.table.style.width;\n\n\t\t\t\tthis.div.style.left = '0px';\n\t\t\t\tthis.div.style.top = '0px';\n\t\t\t\tvar docHeight = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight || 0);\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.width = (document.body.clientWidth - 2) + 'px';\n\t\t\t\t\tthis.div.style.height = (docHeight - 2) + 'px';\n\t\t\t\t}\n\n\t\t\t\tthis.table.style.width = (document.body.clientWidth - 2) + 'px';\n\t\t\t\tthis.table.style.height = (docHeight - 2) + 'px';\n\t\t\t\t\n\t\t\t\tif (this.resize != null)\n\t\t\t\t{\n\t\t\t\t\tthis.resize.style.visibility = 'hidden';\n\t\t\t\t}\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\t\n\t\t\t\t\tif (style.overflow == 'auto' || this.resize != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MAXIMIZE, 'event', evt));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmaximized = false;\n\t\t\t\t\n\t\t\t\tthis.maximize.setAttribute('src', this.maximizeImage);\n\t\t\t\tthis.maximize.setAttribute('title', 'Maximize');\n\t\t\t\tthis.contentWrapper.style.display = '';\n\t\t\t\tthis.minimize.style.display = minDisplay;\n\n\t\t\t\t// Restores window state\n\t\t\t\tthis.div.style.left = x+'px';\n\t\t\t\tthis.div.style.top = y+'px';\n\t\t\t\t\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.height = height;\n\t\t\t\t\tthis.div.style.width = width;\n\n\t\t\t\t\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\t\n\t\t\t\t\tif (style.overflow == 'auto' || this.resize != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.height = height;\n\t\t\t\tthis.table.style.width = width;\n\n\t\t\t\tif (this.resize != null)\n\t\t\t\t{\n\t\t\t\t\tthis.resize.style.visibility = '';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.NORMALIZE, 'event', evt));\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n\t\n\tmxEvent.addGestureListeners(this.maximize, funct);\n\tmxEvent.addListener(this.title, 'dblclick', funct);\n};\n\t\n/**\n * Function: installMoveHandler\n * \n * Installs the event listeners required for moving the window.\n */\nmxWindow.prototype.installMoveHandler = function()\n{\n\tthis.title.style.cursor = 'move';\n\t\n\tmxEvent.addGestureListeners(this.title,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tvar startX = mxEvent.getClientX(evt);\n\t\t\tvar startY = mxEvent.getClientY(evt);\n\t\t\tvar x = this.getX();\n\t\t\tvar y = this.getY();\n\t\t\t\t\t\t\n\t\t\t// Adds a temporary pair of listeners to intercept\n\t\t\t// the gesture event in the document\n\t\t\tvar dragHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar dx = mxEvent.getClientX(evt) - startX;\n\t\t\t\tvar dy = mxEvent.getClientY(evt) - startY;\n\t\t\t\tthis.setLocation(x + dx, y + dy);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\t\n\t\t\tvar dropHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tmxEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_END, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_START, 'event', evt));\n\t\t\tmxEvent.consume(evt);\n\t\t}));\n\t\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tthis.title.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: setLocation\n * \n * Sets the upper, left corner of the window.\n */\n mxWindow.prototype.setLocation = function(x, y)\n {\n\tthis.div.style.left = x + 'px';\n\tthis.div.style.top = y + 'px';\n };\n\n/**\n * Function: getX\n *\n * Returns the current position on the x-axis.\n */\nmxWindow.prototype.getX = function()\n{\n\treturn parseInt(this.div.style.left);\n};\n\n/**\n * Function: getY\n *\n * Returns the current position on the y-axis.\n */\nmxWindow.prototype.getY = function()\n{\n\treturn parseInt(this.div.style.top);\n};\n\n/**\n * Function: installCloseHandler\n *\n * Adds the <closeImage> as a new image node in <closeImg> and installs the\n * <close> event.\n */\nmxWindow.prototype.installCloseHandler = function()\n{\n\tthis.closeImg = document.createElement('img');\n\t\n\tthis.closeImg.setAttribute('src', this.closeImage);\n\tthis.closeImg.setAttribute('title', 'Close');\n\tthis.closeImg.style.marginLeft = '2px';\n\tthis.closeImg.style.cursor = 'pointer';\n\tthis.closeImg.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.closeImg);\n\n\tmxEvent.addGestureListeners(this.closeImg,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CLOSE, 'event', evt));\n\t\t\t\n\t\t\tif (this.destroyOnClose)\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.setVisible(false);\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(evt);\n\t\t}));\n};\n\n/**\n * Function: setImage\n * \n * Sets the image associated with the window.\n * \n * Parameters:\n * \n * image - URL of the image to be used.\n */\nmxWindow.prototype.setImage = function(image)\n{\n\tthis.image = document.createElement('img');\n\tthis.image.setAttribute('src', image);\n\tthis.image.setAttribute('align', 'left');\n\tthis.image.style.marginRight = '4px';\n\tthis.image.style.marginLeft = '0px';\n\tthis.image.style.marginTop = '-2px';\n\t\n\tthis.title.insertBefore(this.image, this.title.firstChild);\n};\n\n/**\n * Function: setClosable\n * \n * Sets the image associated with the window.\n * \n * Parameters:\n * \n * closable - Boolean specifying if the window should be closable.\n */\nmxWindow.prototype.setClosable = function(closable)\n{\n\tthis.closeImg.style.display = (closable) ? '' : 'none';\n};\n\n/**\n * Function: isVisible\n * \n * Returns true if the window is visible.\n */\nmxWindow.prototype.isVisible = function()\n{\n\tif (this.div != null)\n\t{\n\t\treturn this.div.style.display != 'none';\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: setVisible\n *\n * Shows or hides the window depending on the given flag.\n * \n * Parameters:\n * \n * visible - Boolean indicating if the window should be made visible.\n */\nmxWindow.prototype.setVisible = function(visible)\n{\n\tif (this.div != null && this.isVisible() != visible)\n\t{\n\t\tif (visible)\n\t\t{\n\t\t\tthis.show();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.hide();\n\t\t}\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the window.\n */\nmxWindow.prototype.show = function()\n{\n\tthis.div.style.display = '';\n\tthis.activate();\n\t\n\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\n\tif (!mxClient.IS_QUIRKS && (style.overflow == 'auto' || this.resize != null) &&\n\t\tthis.contentWrapper.style.display != 'none')\n\t{\n\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SHOW));\n};\n\n/**\n * Function: hide\n *\n * Hides the window.\n */\nmxWindow.prototype.hide = function()\n{\n\tthis.div.style.display = 'none';\n\tthis.fireEvent(new mxEventObject(mxEvent.HIDE));\n};\n\n/**\n * Function: destroy\n *\n * Destroys the window and removes all associated resources. Fires a\n * <destroy> event prior to destroying the window.\n */\nmxWindow.prototype.destroy = function()\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.DESTROY));\n\t\n\tif (this.div != null)\n\t{\n\t\tmxEvent.release(this.div);\n\t\tthis.div.parentNode.removeChild(this.div);\n\t\tthis.div = null;\n\t}\n\t\n\tthis.title = null;\n\tthis.content = null;\n\tthis.contentWrapper = null;\n};\n\n__mxOutput.mxWindow = typeof mxWindow !== 'undefined' ? mxWindow : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxForm\n * \n * A simple class for creating HTML forms.\n * \n * Constructor: mxForm\n * \n * Creates a HTML table using the specified classname.\n */\nfunction mxForm(className)\n{\n\tthis.table = document.createElement('table');\n\tthis.table.className = className;\n\tthis.body = document.createElement('tbody');\n\t\n\tthis.table.appendChild(this.body);\n};\n\n/**\n * Variable: table\n * \n * Holds the DOM node that represents the table.\n */\nmxForm.prototype.table = null;\n\n/**\n * Variable: body\n * \n * Holds the DOM node that represents the tbody (table body). New rows\n * can be added to this object using DOM API.\n */\nmxForm.prototype.body = false;\n\n/**\n * Function: getTable\n * \n * Returns the table that contains this form.\n */\nmxForm.prototype.getTable = function()\n{\n\treturn this.table;\n};\n\n/**\n * Function: addButtons\n * \n * Helper method to add an OK and Cancel button using the respective\n * functions.\n */\nmxForm.prototype.addButtons = function(okFunct, cancelFunct)\n{\n\tvar tr = document.createElement('tr');\n\tvar td = document.createElement('td');\n\ttr.appendChild(td);\n\ttd = document.createElement('td');\n\n\t// Adds the ok button\n\tvar button = document.createElement('button');\n\tmxUtils.write(button, mxResources.get('ok') || 'OK');\n\ttd.appendChild(button);\n\n\tmxEvent.addListener(button, 'click', function()\n\t{\n\t\tokFunct();\n\t});\n\t\n\t// Adds the cancel button\n\tbutton = document.createElement('button');\n\tmxUtils.write(button, mxResources.get('cancel') || 'Cancel');\n\ttd.appendChild(button);\n\t\n\tmxEvent.addListener(button, 'click', function()\n\t{\n\t\tcancelFunct();\n\t});\n\t\n\ttr.appendChild(td);\n\tthis.body.appendChild(tr);\n};\n\n/**\n * Function: addText\n * \n * Adds an input for the given name, type and value and returns it.\n */\nmxForm.prototype.addText = function(name, value, type)\n{\n\tvar input = document.createElement('input');\n\t\n\tinput.setAttribute('type', type || 'text');\n\tinput.value = value;\n\t\n\treturn this.addField(name, input);\n};\n\n/**\n * Function: addCheckbox\n * \n * Adds a checkbox for the given name and value and returns the textfield.\n */\nmxForm.prototype.addCheckbox = function(name, value)\n{\n\tvar input = document.createElement('input');\n\t\n\tinput.setAttribute('type', 'checkbox');\n\tthis.addField(name, input);\n\n\t// IE can only change the checked value if the input is inside the DOM\n\tif (value)\n\t{\n\t\tinput.checked = true;\n\t}\n\n\treturn input;\n};\n\n/**\n * Function: addTextarea\n * \n * Adds a textarea for the given name and value and returns the textarea.\n */\nmxForm.prototype.addTextarea = function(name, value, rows)\n{\n\tvar input = document.createElement('textarea');\n\t\n\tif (mxClient.IS_NS)\n\t{\n\t\trows--;\n\t}\n\t\n\tinput.setAttribute('rows', rows || 2);\n\tinput.value = value;\n\t\n\treturn this.addField(name, input);\n};\n\n/**\n * Function: addCombo\n * \n * Adds a combo for the given name and returns the combo.\n */\nmxForm.prototype.addCombo = function(name, isMultiSelect, size)\n{\n\tvar select = document.createElement('select');\n\t\n\tif (size != null)\n\t{\n\t\tselect.setAttribute('size', size);\n\t}\n\t\n\tif (isMultiSelect)\n\t{\n\t\tselect.setAttribute('multiple', 'true');\n\t}\n\t\n\treturn this.addField(name, select);\n};\n\n/**\n * Function: addOption\n * \n * Adds an option for the given label to the specified combo.\n */\nmxForm.prototype.addOption = function(combo, label, value, isSelected)\n{\n\tvar option = document.createElement('option');\n\t\n\tmxUtils.writeln(option, label);\n\toption.setAttribute('value', value);\n\t\n\tif (isSelected)\n\t{\n\t\toption.setAttribute('selected', isSelected);\n\t}\n\t\n\tcombo.appendChild(option);\n};\n\n/**\n * Function: addField\n * \n * Adds a new row with the name and the input field in two columns and\n * returns the given input.\n */\nmxForm.prototype.addField = function(name, input)\n{\n\tvar tr = document.createElement('tr');\n\tvar td = document.createElement('td');\n\tmxUtils.write(td, name);\n\ttr.appendChild(td);\n\t\n\ttd = document.createElement('td');\n\ttd.appendChild(input);\n\ttr.appendChild(td);\n\tthis.body.appendChild(tr);\n\t\n\treturn input;\n};\n\n__mxOutput.mxForm = typeof mxForm !== 'undefined' ? mxForm : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImage\n *\n * Encapsulates the URL, width and height of an image.\n * \n * Constructor: mxImage\n * \n * Constructs a new image.\n */\nfunction mxImage(src, width, height)\n{\n\tthis.src = src;\n\tthis.width = width;\n\tthis.height = height;\n};\n\n/**\n * Variable: src\n *\n * String that specifies the URL of the image.\n */\nmxImage.prototype.src = null;\n\n/**\n * Variable: width\n *\n * Integer that specifies the width of the image.\n */\nmxImage.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Integer that specifies the height of the image.\n */\nmxImage.prototype.height = null;\n\n__mxOutput.mxImage = typeof mxImage !== 'undefined' ? mxImage : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDivResizer\n * \n * Maintains the size of a div element in Internet Explorer. This is a\n * workaround for the right and bottom style being ignored in IE.\n * \n * If you need a div to cover the scrollwidth and -height of a document,\n * then you can use this class as follows:\n * \n * (code)\n * var resizer = new mxDivResizer(background);\n * resizer.getDocumentHeight = function()\n * {\n *   return document.body.scrollHeight;\n * }\n * resizer.getDocumentWidth = function()\n * {\n *   return document.body.scrollWidth;\n * }\n * resizer.resize();\n * (end)\n * \n * Constructor: mxDivResizer\n * \n * Constructs an object that maintains the size of a div\n * element when the window is being resized. This is only\n * required for Internet Explorer as it ignores the respective\n * stylesheet information for DIV elements.\n * \n * Parameters:\n * \n * div - Reference to the DOM node whose size should be maintained.\n * container - Optional Container that contains the div. Default is the\n * window.\n */\nfunction mxDivResizer(div, container)\n{\n\tif (div.nodeName.toLowerCase() == 'div')\n\t{\n\t\tif (container == null)\n\t\t{\n\t\t\tcontainer = window;\n\t\t}\n\n\t\tthis.div = div;\n\t\tvar style = mxUtils.getCurrentStyle(div);\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tthis.resizeWidth = style.width == 'auto';\n\t\t\tthis.resizeHeight = style.height == 'auto';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(container, 'resize',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (!this.handlingResize)\n\t\t\t\t{\n\t\t\t\t\tthis.handlingResize = true;\n\t\t\t\t\tthis.resize();\n\t\t\t\t\tthis.handlingResize = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tthis.resize();\n\t}\n};\n\n/**\n * Function: resizeWidth\n * \n * Boolean specifying if the width should be updated.\n */\nmxDivResizer.prototype.resizeWidth = true;\n\n/**\n * Function: resizeHeight\n * \n * Boolean specifying if the height should be updated.\n */\nmxDivResizer.prototype.resizeHeight = true;\n\n/**\n * Function: handlingResize\n * \n * Boolean specifying if the width should be updated.\n */\nmxDivResizer.prototype.handlingResize = false;\n\n/**\n * Function: resize\n * \n * Updates the style of the DIV after the window has been resized.\n */\nmxDivResizer.prototype.resize = function()\n{\n\tvar w = this.getDocumentWidth();\n\tvar h = this.getDocumentHeight();\n\n\tvar l = parseInt(this.div.style.left);\n\tvar r = parseInt(this.div.style.right);\n\tvar t = parseInt(this.div.style.top);\n\tvar b = parseInt(this.div.style.bottom);\n\t\n\tif (this.resizeWidth &&\n\t\t!isNaN(l) &&\n\t\t!isNaN(r) &&\n\t\tl >= 0 &&\n\t\tr >= 0 &&\n\t\tw - r - l > 0)\n\t{\n\t\tthis.div.style.width = (w - r - l)+'px';\n\t}\n\t\n\tif (this.resizeHeight &&\n\t\t!isNaN(t) &&\n\t\t!isNaN(b) &&\n\t\tt >= 0 &&\n\t\tb >= 0 &&\n\t\th - t - b > 0)\n\t{\n\t\tthis.div.style.height = (h - t - b)+'px';\n\t}\n};\n\n/**\n * Function: getDocumentWidth\n * \n * Hook for subclassers to return the width of the document (without\n * scrollbars).\n */\nmxDivResizer.prototype.getDocumentWidth = function()\n{\n\treturn document.body.clientWidth;\n};\n\n/**\n * Function: getDocumentHeight\n * \n * Hook for subclassers to return the height of the document (without\n * scrollbars).\n */\nmxDivResizer.prototype.getDocumentHeight = function()\n{\n\treturn document.body.clientHeight;\n};\n\n__mxOutput.mxDivResizer = typeof mxDivResizer !== 'undefined' ? mxDivResizer : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDragSource\n * \n * Wrapper to create a drag source from a DOM element so that the element can\n * be dragged over a graph and dropped into the graph as a new cell.\n * \n * Problem is that in the dropHandler the current preview location is not\n * available, so the preview and the dropHandler must match.\n * \n * Constructor: mxDragSource\n * \n * Constructs a new drag source for the given element.\n */\nfunction mxDragSource(element, dropHandler)\n{\n\tthis.element = element;\n\tthis.dropHandler = dropHandler;\n\t\n\t// Handles a drag gesture on the element\n\tmxEvent.addGestureListeners(element, mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseDown(evt);\n\t}));\n\t\n\t// Prevents native drag and drop\n\tmxEvent.addListener(element, 'dragstart', function(evt)\n\t{\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tthis.eventConsumer = function(sender, evt)\n\t{\n\t\tvar evtName = evt.getProperty('eventName');\n\t\tvar me = evt.getProperty('event');\n\t\t\n\t\tif (evtName != mxEvent.MOUSE_DOWN)\n\t\t{\n\t\t\tme.consume();\n\t\t}\n\t};\n};\n\n/**\n * Variable: element\n *\n * Reference to the DOM node which was made draggable.\n */\nmxDragSource.prototype.element = null;\n\n/**\n * Variable: dropHandler\n *\n * Holds the DOM node that is used to represent the drag preview. If this is\n * null then the source element will be cloned and used for the drag preview.\n */\nmxDragSource.prototype.dropHandler = null;\n\n/**\n * Variable: dragOffset\n *\n * <mxPoint> that specifies the offset of the <dragElement>. Default is null.\n */\nmxDragSource.prototype.dragOffset = null;\n\n/**\n * Variable: dragElement\n *\n * Holds the DOM node that is used to represent the drag preview. If this is\n * null then the source element will be cloned and used for the drag preview.\n */\nmxDragSource.prototype.dragElement = null;\n\n/**\n * Variable: previewElement\n *\n * Optional <mxRectangle> that specifies the unscaled size of the preview.\n */\nmxDragSource.prototype.previewElement = null;\n\n/**\n * Variable: previewOffset\n *\n * Optional <mxPoint> that specifies the offset of the preview in pixels.\n */\nmxDragSource.prototype.previewOffset = null;\n\n/**\n * Variable: enabled\n *\n * Specifies if this drag source is enabled. Default is true.\n */\nmxDragSource.prototype.enabled = true;\n\n/**\n * Variable: currentGraph\n *\n * Reference to the <mxGraph> that is the current drop target.\n */\nmxDragSource.prototype.currentGraph = null;\n\n/**\n * Variable: currentDropTarget\n *\n * Holds the current drop target under the mouse.\n */\nmxDragSource.prototype.currentDropTarget = null;\n\n/**\n * Variable: currentPoint\n *\n * Holds the current drop location.\n */\nmxDragSource.prototype.currentPoint = null;\n\n/**\n * Variable: currentGuide\n *\n * Holds an <mxGuide> for the <currentGraph> if <dragPreview> is not null.\n */\nmxDragSource.prototype.currentGuide = null;\n\n/**\n * Variable: currentGuide\n *\n * Holds an <mxGuide> for the <currentGraph> if <dragPreview> is not null.\n */\nmxDragSource.prototype.currentHighlight = null;\n\n/**\n * Variable: autoscroll\n *\n * Specifies if the graph should scroll automatically. Default is true.\n */\nmxDragSource.prototype.autoscroll = true;\n\n/**\n * Variable: guidesEnabled\n *\n * Specifies if <mxGuide> should be enabled. Default is true.\n */\nmxDragSource.prototype.guidesEnabled = true;\n\n/**\n * Variable: gridEnabled\n *\n * Specifies if the grid should be allowed. Default is true.\n */\nmxDragSource.prototype.gridEnabled = true;\n\n/**\n * Variable: highlightDropTargets\n *\n * Specifies if drop targets should be highlighted. Default is true.\n */\nmxDragSource.prototype.highlightDropTargets = true;\n\n/**\n * Variable: dragElementZIndex\n * \n * ZIndex for the drag element. Default is 100.\n */\nmxDragSource.prototype.dragElementZIndex = 100;\n\n/**\n * Variable: dragElementOpacity\n * \n * Opacity of the drag element in %. Default is 70.\n */\nmxDragSource.prototype.dragElementOpacity = 70;\n\n/**\n * Variable: checkEventSource\n * \n * Whether the event source should be checked in <graphContainerEvent>. Default\n * is true.\n */\nmxDragSource.prototype.checkEventSource = true;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxDragSource.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxDragSource.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isGuidesEnabled\n * \n * Returns <guidesEnabled>.\n */\nmxDragSource.prototype.isGuidesEnabled = function()\n{\n\treturn this.guidesEnabled;\n};\n\n/**\n * Function: setGuidesEnabled\n * \n * Sets <guidesEnabled>.\n */\nmxDragSource.prototype.setGuidesEnabled = function(value)\n{\n\tthis.guidesEnabled = value;\n};\n\n/**\n * Function: isGridEnabled\n * \n * Returns <gridEnabled>.\n */\nmxDragSource.prototype.isGridEnabled = function()\n{\n\treturn this.gridEnabled;\n};\n\n/**\n * Function: setGridEnabled\n * \n * Sets <gridEnabled>.\n */\nmxDragSource.prototype.setGridEnabled = function(value)\n{\n\tthis.gridEnabled = value;\n};\n\n/**\n * Function: getGraphForEvent\n * \n * Returns the graph for the given mouse event. This implementation returns\n * null.\n */\nmxDragSource.prototype.getGraphForEvent = function(evt)\n{\n\treturn null;\n};\n\n/**\n * Function: getDropTarget\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n */\nmxDragSource.prototype.getDropTarget = function(graph, x, y, evt)\n{\n\treturn graph.getCellAt(x, y);\n};\n\n/**\n * Function: createDragElement\n * \n * Creates and returns a clone of the <dragElementPrototype> or the <element>\n * if the former is not defined.\n */\nmxDragSource.prototype.createDragElement = function(evt)\n{\n\treturn this.element.cloneNode(true);\n};\n\n/**\n * Function: createPreviewElement\n * \n * Creates and returns an element which can be used as a preview in the given\n * graph.\n */\nmxDragSource.prototype.createPreviewElement = function(graph)\n{\n\treturn null;\n};\n\n/**\n * Function: isActive\n * \n * Returns true if this drag source is active.\n */\nmxDragSource.prototype.isActive = function()\n{\n\treturn this.mouseMoveHandler != null;\n};\n\n/**\n * Function: reset\n * \n * Stops and removes everything and restores the state of the object.\n */\nmxDragSource.prototype.reset = function()\n{\n\tif (this.currentGraph != null)\n\t{\n\t\tthis.dragExit(this.currentGraph);\n\t\tthis.currentGraph = null;\n\t}\n\t\n\tthis.removeDragElement();\n\tthis.removeListeners();\n\tthis.stopDrag();\n};\n\n/**\n * Function: mouseDown\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n * \n * To ignore popup menu events for a drag source, this function can be\n * overridden as follows.\n * \n * (code)\n * var mouseDown = dragSource.mouseDown;\n * \n * dragSource.mouseDown = function(evt)\n * {\n *   if (!mxEvent.isPopupTrigger(evt))\n *   {\n *     mouseDown.apply(this, arguments);\n *   }\n * };\n * (end)\n */\nmxDragSource.prototype.mouseDown = function(evt)\n{\n\tif (this.enabled && !mxEvent.isConsumed(evt) && this.mouseMoveHandler == null)\n\t{\n\t\tthis.startDrag(evt);\n\t\tthis.mouseMoveHandler = mxUtils.bind(this, this.mouseMove);\n\t\tthis.mouseUpHandler = mxUtils.bind(this, this.mouseUp);\t\t\n\t\tmxEvent.addGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\t\n\t\tif (mxClient.IS_TOUCH && !mxEvent.isMouseEvent(evt))\n\t\t{\n\t\t\tthis.eventSource = mxEvent.getSource(evt);\n\t\t\tmxEvent.addGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\t}\n\t}\n};\n\n/**\n * Function: startDrag\n * \n * Creates the <dragElement> using <createDragElement>.\n */\nmxDragSource.prototype.startDrag = function(evt)\n{\n\tthis.dragElement = this.createDragElement(evt);\n\tthis.dragElement.style.position = 'absolute';\n\tthis.dragElement.style.zIndex = this.dragElementZIndex;\n\tmxUtils.setOpacity(this.dragElement, this.dragElementOpacity);\n\n\tif (this.checkEventSource && mxClient.IS_SVG)\n\t{\n\t\tthis.dragElement.style.pointerEvents = 'none';\n\t}\n};\n\n/**\n * Function: stopDrag\n * \n * Invokes <removeDragElement>.\n */\nmxDragSource.prototype.stopDrag = function()\n{\n\t// LATER: This used to have a mouse event. If that is still needed we need to add another\n\t// final call to the DnD protocol to add a cleanup step in the case of escape press, which\n\t// is not associated with a mouse event and which currently calles this method.\n\tthis.removeDragElement();\n};\n\n/**\n * Function: removeDragElement\n * \n * Removes and destroys the <dragElement>.\n */\nmxDragSource.prototype.removeDragElement = function()\n{\n\tif (this.dragElement != null)\n\t{\n\t\tif (this.dragElement.parentNode != null)\n\t\t{\n\t\t\tthis.dragElement.parentNode.removeChild(this.dragElement);\n\t\t}\n\t\t\n\t\tthis.dragElement = null;\n\t}\n};\n\n/**\n * Function: getElementForEvent\n * \n * Returns the topmost element under the given event.\n */\nmxDragSource.prototype.getElementForEvent = function(evt)\n{\n\treturn ((mxEvent.isTouchEvent(evt) || mxEvent.isPenEvent(evt)) ?\n\t\t\tdocument.elementFromPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt)) :\n\t\t\t\tmxEvent.getSource(evt));\n};\n\n/**\n * Function: graphContainsEvent\n * \n * Returns true if the given graph contains the given event.\n */\nmxDragSource.prototype.graphContainsEvent = function(graph, evt)\n{\n\tvar x = mxEvent.getClientX(evt);\n\tvar y = mxEvent.getClientY(evt);\n\tvar offset = mxUtils.getOffset(graph.container);\n\tvar origin = mxUtils.getScrollOrigin();\n\tvar elt = this.getElementForEvent(evt);\n\t\n\tif (this.checkEventSource)\n\t{\n\t\twhile (elt != null && elt != graph.container)\n\t\t{\n\t\t\telt = elt.parentNode;\n\t\t}\n\t}\n\n\t// Checks if event is inside the bounds of the graph container\n\treturn elt != null && x >= offset.x - origin.x && y >= offset.y - origin.y &&\n\t\tx <= offset.x - origin.x + graph.container.offsetWidth &&\n\t\ty <= offset.y - origin.y + graph.container.offsetHeight;\n};\n\n/**\n * Function: mouseMove\n * \n * Gets the graph for the given event using <getGraphForEvent>, updates the\n * <currentGraph>, calling <dragEnter> and <dragExit> on the new and old graph,\n * respectively, and invokes <dragOver> if <currentGraph> is not null.\n */\nmxDragSource.prototype.mouseMove = function(evt)\n{\n\tvar graph = this.getGraphForEvent(evt);\n\t\n\t// Checks if event is inside the bounds of the graph container\n\tif (graph != null && !this.graphContainsEvent(graph, evt))\n\t{\n\t\tgraph = null;\n\t}\n\n\tif (graph != this.currentGraph)\n\t{\n\t\tif (this.currentGraph != null)\n\t\t{\n\t\t\tthis.dragExit(this.currentGraph, evt);\n\t\t}\n\t\t\n\t\tthis.currentGraph = graph;\n\t\t\n\t\tif (this.currentGraph != null)\n\t\t{\n\t\t\tthis.dragEnter(this.currentGraph, evt);\n\t\t}\n\t}\n\t\n\tif (this.currentGraph != null)\n\t{\n\t\tthis.dragOver(this.currentGraph, evt);\n\t}\n\n\tif (this.dragElement != null && (this.previewElement == null || this.previewElement.style.visibility != 'visible'))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\t\t\n\t\tif (this.dragElement.parentNode == null)\n\t\t{\n\t\t\tdocument.body.appendChild(this.dragElement);\n\t\t}\n\n\t\tthis.dragElement.style.visibility = 'visible';\n\t\t\n\t\tif (this.dragOffset != null)\n\t\t{\n\t\t\tx += this.dragOffset.x;\n\t\t\ty += this.dragOffset.y;\n\t\t}\n\t\t\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(document);\n\t\t\n\t\tthis.dragElement.style.left = (x + offset.x) + 'px';\n\t\tthis.dragElement.style.top = (y + offset.y) + 'px';\n\t}\n\telse if (this.dragElement != null)\n\t{\n\t\tthis.dragElement.style.visibility = 'hidden';\n\t}\n\t\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: mouseUp\n * \n * Processes the mouse up event and invokes <drop>, <dragExit> and <stopDrag>\n * as required.\n */\nmxDragSource.prototype.mouseUp = function(evt)\n{\n\tif (this.currentGraph != null)\n\t{\n\t\tif (this.currentPoint != null && (this.previewElement == null ||\n\t\t\tthis.previewElement.style.visibility != 'hidden'))\n\t\t{\n\t\t\tvar scale = this.currentGraph.view.scale;\n\t\t\tvar tr = this.currentGraph.view.translate;\n\t\t\tvar x = this.currentPoint.x / scale - tr.x;\n\t\t\tvar y = this.currentPoint.y / scale - tr.y;\n\t\t\t\n\t\t\tthis.drop(this.currentGraph, evt, this.currentDropTarget, x, y);\n\t\t}\n\t\t\n\t\tthis.dragExit(this.currentGraph);\n\t\tthis.currentGraph = null;\n\t}\n\n\tthis.stopDrag();\n\tthis.removeListeners();\n\t\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: removeListeners\n * \n * Actives the given graph as a drop target.\n */\nmxDragSource.prototype.removeListeners = function()\n{\n\tif (this.eventSource != null)\n\t{\n\t\tmxEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\tthis.eventSource = null;\n\t}\n\t\n\tmxEvent.removeGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n\tthis.mouseMoveHandler = null;\n\tthis.mouseUpHandler = null;\n};\n\n/**\n * Function: dragEnter\n * \n * Actives the given graph as a drop target.\n */\nmxDragSource.prototype.dragEnter = function(graph, evt)\n{\n\tgraph.isMouseDown = true;\n\tgraph.isMouseTrigger = mxEvent.isMouseEvent(evt);\n\tthis.previewElement = this.createPreviewElement(graph);\n\t\n\tif (this.previewElement != null && this.checkEventSource && mxClient.IS_SVG)\n\t{\n\t\tthis.previewElement.style.pointerEvents = 'none';\n\t}\n\t\n\t// Guide is only needed if preview element is used\n\tif (this.isGuidesEnabled() && this.previewElement != null)\n\t{\n\t\tthis.currentGuide = new mxGuide(graph, graph.graphHandler.getGuideStates());\n\t}\n\t\n\tif (this.highlightDropTargets)\n\t{\n\t\tthis.currentHighlight = new mxCellHighlight(graph, mxConstants.DROP_TARGET_COLOR);\n\t}\n\t\n\t// Consumes all events in the current graph before they are fired\n\tgraph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.eventConsumer);\n};\n\n/**\n * Function: dragExit\n * \n * Deactivates the given graph as a drop target.\n */\nmxDragSource.prototype.dragExit = function(graph, evt)\n{\n\tthis.currentDropTarget = null;\n\tthis.currentPoint = null;\n\tgraph.isMouseDown = false;\n\t\n\t// Consumes all events in the current graph before they are fired\n\tgraph.removeListener(this.eventConsumer);\n\t\n\tif (this.previewElement != null)\n\t{\n\t\tif (this.previewElement.parentNode != null)\n\t\t{\n\t\t\tthis.previewElement.parentNode.removeChild(this.previewElement);\n\t\t}\n\t\t\n\t\tthis.previewElement = null;\n\t}\n\t\n\tif (this.currentGuide != null)\n\t{\n\t\tthis.currentGuide.destroy();\n\t\tthis.currentGuide = null;\n\t}\n\t\n\tif (this.currentHighlight != null)\n\t{\n\t\tthis.currentHighlight.destroy();\n\t\tthis.currentHighlight = null;\n\t}\n};\n\n/**\n * Function: dragOver\n * \n * Implements autoscroll, updates the <currentPoint>, highlights any drop\n * targets and updates the preview.\n */\nmxDragSource.prototype.dragOver = function(graph, evt)\n{\n\tvar offset = mxUtils.getOffset(graph.container);\n\tvar origin = mxUtils.getScrollOrigin(graph.container);\n\tvar x = mxEvent.getClientX(evt) - offset.x + origin.x - graph.panDx;\n\tvar y = mxEvent.getClientY(evt) - offset.y + origin.y - graph.panDy;\n\n\tif (graph.autoScroll && (this.autoscroll == null || this.autoscroll))\n\t{\n\t\tgraph.scrollPointToVisible(x, y, graph.autoExtend);\n\t}\n\n\t// Highlights the drop target under the mouse\n\tif (this.currentHighlight != null && graph.isDropEnabled())\n\t{\n\t\tthis.currentDropTarget = this.getDropTarget(graph, x, y, evt);\n\t\tvar state = graph.getView().getState(this.currentDropTarget);\n\t\tthis.currentHighlight.highlight(state);\n\t}\n\n\t// Updates the location of the preview\n\tif (this.previewElement != null)\n\t{\n\t\tif (this.previewElement.parentNode == null)\n\t\t{\n\t\t\tgraph.container.appendChild(this.previewElement);\n\t\t\t\n\t\t\tthis.previewElement.style.zIndex = '3';\n\t\t\tthis.previewElement.style.position = 'absolute';\n\t\t}\n\t\t\n\t\tvar gridEnabled = this.isGridEnabled() && graph.isGridEnabledEvent(evt);\n\t\tvar hideGuide = true;\n\n\t\t// Grid and guides\n\t\tif (this.currentGuide != null && this.currentGuide.isEnabledForEvent(evt))\n\t\t{\n\t\t\t// LATER: HTML preview appears smaller than SVG preview\n\t\t\tvar w = parseInt(this.previewElement.style.width);\n\t\t\tvar h = parseInt(this.previewElement.style.height);\n\t\t\tvar bounds = new mxRectangle(0, 0, w, h);\n\t\t\tvar delta = new mxPoint(x, y);\n\t\t\tdelta = this.currentGuide.move(bounds, delta, gridEnabled, true);\n\t\t\thideGuide = false;\n\t\t\tx = delta.x;\n\t\t\ty = delta.y;\n\t\t}\n\t\telse if (gridEnabled)\n\t\t{\n\t\t\tvar scale = graph.view.scale;\n\t\t\tvar tr = graph.view.translate;\n\t\t\tvar off = graph.gridSize / 2;\n\t\t\tx = (graph.snap(x / scale - tr.x - off) + tr.x) * scale;\n\t\t\ty = (graph.snap(y / scale - tr.y - off) + tr.y) * scale;\n\t\t}\n\t\t\n\t\tif (this.currentGuide != null && hideGuide)\n\t\t{\n\t\t\tthis.currentGuide.hide();\n\t\t}\n\t\t\n\t\tif (this.previewOffset != null)\n\t\t{\n\t\t\tx += this.previewOffset.x;\n\t\t\ty += this.previewOffset.y;\n\t\t}\n\n\t\tthis.previewElement.style.left = Math.round(x) + 'px';\n\t\tthis.previewElement.style.top = Math.round(y) + 'px';\n\t\tthis.previewElement.style.visibility = 'visible';\n\t}\n\t\n\tthis.currentPoint = new mxPoint(x, y);\n};\n\n/**\n * Function: drop\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n */\nmxDragSource.prototype.drop = function(graph, evt, dropTarget, x, y)\n{\n\tthis.dropHandler.apply(this, arguments);\n\t\n\t// Had to move this to after the insert because it will\n\t// affect the scrollbars of the window in IE to try and\n\t// make the complete container visible.\n\t// LATER: Should be made optional.\n\tif (graph.container.style.visibility != 'hidden')\n\t{\n\t\tgraph.container.focus();\n\t}\n};\n\n__mxOutput.mxDragSource = typeof mxDragSource !== 'undefined' ? mxDragSource : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxToolbar\n * \n * Creates a toolbar inside a given DOM node. The toolbar may contain icons,\n * buttons and combo boxes.\n * \n * Event: mxEvent.SELECT\n * \n * Fires when an item was selected in the toolbar. The <code>function</code>\n * property contains the function that was selected in <selectMode>.\n * \n * Constructor: mxToolbar\n * \n * Constructs a toolbar in the specified container.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nfunction mxToolbar(container)\n{\n\tthis.container = container;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxToolbar.prototype = new mxEventSource();\nmxToolbar.prototype.constructor = mxToolbar;\n\n/**\n * Variable: container\n * \n * Reference to the DOM nodes that contains the toolbar.\n */\nmxToolbar.prototype.container = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxToolbar.prototype.enabled = true;\n\n/**\n * Variable: noReset\n * \n * Specifies if <resetMode> requires a forced flag of true for resetting\n * the current mode in the toolbar. Default is false. This is set to true\n * if the toolbar item is double clicked to avoid a reset after a single\n * use of the item.\n */\nmxToolbar.prototype.noReset = false;\n\n/**\n * Variable: updateDefaultMode\n * \n * Boolean indicating if the default mode should be the last selected\n * switch mode or the first inserted switch mode. Default is true, that\n * is the last selected switch mode is the default mode. The default mode\n * is the mode to be selected after a reset of the toolbar. If this is\n * false, then the default mode is the first inserted mode item regardless\n * of what was last selected. Otherwise, the selected item after a reset is\n * the previously selected item.\n */\nmxToolbar.prototype.updateDefaultMode = true;\n\n/**\n * Function: addItem\n * \n * Adds the given function as an image with the specified title and icon\n * and returns the new image node.\n * \n * Parameters:\n * \n * title - Optional string that is used as the tooltip.\n * icon - Optional URL of the image to be used. If no URL is given, then a\n * button is created.\n * funct - Function to execute on a mouse click.\n * pressedIcon - Optional URL of the pressed image. Default is a gray\n * background.\n * style - Optional style classname. Default is mxToolbarItem.\n * factoryMethod - Optional factory method for popup menu, eg.\n * function(menu, evt, cell) { menu.addItem('Hello, World!'); }\n */\nmxToolbar.prototype.addItem = function(title, icon, funct, pressedIcon, style, factoryMethod)\n{\n\tvar img = document.createElement((icon != null) ? 'img' : 'button');\n\tvar initialClassName = style || ((factoryMethod != null) ?\n\t\t\t'mxToolbarMode' : 'mxToolbarItem');\n\timg.className = initialClassName;\n\timg.setAttribute('src', icon);\n\t\n\tif (title != null)\n\t{\n\t\tif (icon != null)\n\t\t{\n\t\t\timg.setAttribute('title', title);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.write(img, title);\n\t\t}\n\t}\n\t\n\tthis.container.appendChild(img);\n\n\t// Invokes the function on a click on the toolbar item\n\tif (funct != null)\n\t{\n\t\tmxEvent.addListener(img, 'click', funct);\n\t\t\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(img, 'touchend', funct);\n\t\t}\n\t}\n\n\tvar mouseHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (pressedIcon != null)\n\t\t{\n\t\t\timg.setAttribute('src', icon);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.style.backgroundColor = '';\n\t\t}\n\t});\n\n\t// Highlights the toolbar item with a gray background\n\t// while it is being clicked with the mouse\n\tmxEvent.addGestureListeners(img, mxUtils.bind(this, function(evt)\n\t{\n\t\tif (pressedIcon != null)\n\t\t{\n\t\t\timg.setAttribute('src', pressedIcon);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.style.backgroundColor = 'gray';\n\t\t}\n\t\t\n\t\t// Popup Menu\n\t\tif (factoryMethod != null)\n\t\t{\n\t\t\tif (this.menu == null)\n\t\t\t{\n\t\t\t\tthis.menu = new mxPopupMenu();\n\t\t\t\tthis.menu.init();\n\t\t\t}\n\t\t\t\n\t\t\tvar last = this.currentImg;\n\t\t\t\n\t\t\tif (this.menu.isMenuShowing())\n\t\t\t{\n\t\t\t\tthis.menu.hideMenu();\n\t\t\t}\n\t\t\t\n\t\t\tif (last != img)\n\t\t\t{\n\t\t\t\t// Redirects factory method to local factory method\n\t\t\t\tthis.currentImg = img;\n\t\t\t\tthis.menu.factoryMethod = factoryMethod;\n\t\t\t\t\n\t\t\t\tvar point = new mxPoint(\n\t\t\t\t\timg.offsetLeft,\n\t\t\t\t\timg.offsetTop + img.offsetHeight);\n\t\t\t\tthis.menu.popup(point.x, point.y, null, evt);\n\n\t\t\t\t// Sets and overrides to restore classname\n\t\t\t\tif (this.menu.isMenuShowing())\n\t\t\t\t{\n\t\t\t\t\timg.className = initialClassName + 'Selected';\n\t\t\t\t\t\n\t\t\t\t\tthis.menu.hideMenu = function()\n\t\t\t\t\t{\n\t\t\t\t\t\tmxPopupMenu.prototype.hideMenu.apply(this);\n\t\t\t\t\t\timg.className = initialClassName;\n\t\t\t\t\t\tthis.currentImg = null;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}), null, mouseHandler);\n\n\tmxEvent.addListener(img, 'mouseout', mouseHandler);\n\t\n\treturn img;\n};\n\n/**\n * Function: addCombo\n * \n * Adds and returns a new SELECT element using the given style. The element\n * is placed inside a DIV with the mxToolbarComboContainer style classname.\n * \n * Parameters:\n * \n * style - Optional style classname. Default is mxToolbarCombo.\n */\nmxToolbar.prototype.addCombo = function(style)\n{\n\tvar div = document.createElement('div');\n\tdiv.style.display = 'inline';\n\tdiv.className = 'mxToolbarComboContainer';\n\t\n\tvar select = document.createElement('select');\n\tselect.className = style || 'mxToolbarCombo';\n\tdiv.appendChild(select);\n\t\n\tthis.container.appendChild(div);\n\t\n\treturn select;\n};\n\n/**\n * Function: addActionCombo\n * \n * Adds and returns a new SELECT element using the given title as the\n * default element. The selection is reset to this element after each\n * change.\n * \n * Parameters:\n * \n * title - String that specifies the title of the default element.\n * style - Optional style classname. Default is mxToolbarCombo.\n */\nmxToolbar.prototype.addActionCombo = function(title, style)\n{\n\tvar select = document.createElement('select');\n\tselect.className = style || 'mxToolbarCombo';\n\tthis.addOption(select, title, null);\n\t\n\tmxEvent.addListener(select, 'change', function(evt)\n\t{\n\t\tvar value = select.options[select.selectedIndex];\n\t\tselect.selectedIndex = 0;\n\t\t\n\t\tif (value.funct != null)\n\t\t{\n\t\t\tvalue.funct(evt);\n\t\t}\n\t});\n\t\n\tthis.container.appendChild(select);\n\t\n\treturn select;\n};\n\n/**\n * Function: addOption\n * \n * Adds and returns a new OPTION element inside the given SELECT element.\n * If the given value is a function then it is stored in the option's funct\n * field.\n * \n * Parameters:\n * \n * combo - SELECT element that will contain the new entry.\n * title - String that specifies the title of the option.\n * value - Specifies the value associated with this option.\n */\nmxToolbar.prototype.addOption = function(combo, title, value)\n{\n\tvar option = document.createElement('option');\n\tmxUtils.writeln(option, title);\n\t\n\tif (typeof(value) == 'function')\n\t{\n\t\toption.funct = value;\n\t}\n\telse\n\t{\n\t\toption.setAttribute('value', value);\n\t}\n\t\n\tcombo.appendChild(option);\n\t\n\treturn option;\n};\n\n/**\n * Function: addSwitchMode\n * \n * Adds a new selectable item to the toolbar. Only one switch mode item may\n * be selected at a time. The currently selected item is the default item\n * after a reset of the toolbar.\n */\nmxToolbar.prototype.addSwitchMode = function(title, icon, funct, pressedIcon, style)\n{\n\tvar img = document.createElement('img');\n\timg.initialClassName = style || 'mxToolbarMode';\n\timg.className = img.initialClassName;\n\timg.setAttribute('src', icon);\n\timg.altIcon = pressedIcon;\n\t\n\tif (title != null)\n\t{\n\t\timg.setAttribute('title', title);\n\t}\n\t\n\tmxEvent.addListener(img, 'click', mxUtils.bind(this, function(evt)\n\t{\n\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName;\n\t\t}\n\t\t\n\t\tif (this.updateDefaultMode)\n\t\t{\n\t\t\tthis.defaultMode = img;\n\t\t}\n\t\t\n\t\tthis.selectedMode = img;\n\t\t\n\t\tvar tmp = img.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\timg.altIcon = img.getAttribute('src');\n\t\t\timg.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.className = img.initialClassName+'Selected';\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SELECT));\n\t\tfunct();\n\t}));\n\t\n\tthis.container.appendChild(img);\n\t\n\tif (this.defaultMode == null)\n\t{\n\t\tthis.defaultMode = img;\n\t\t\n\t\t// Function should fire only once so\n\t\t// do not pass it with the select event\n\t\tthis.selectMode(img);\n\t\tfunct();\n\t}\n\t\n\treturn img;\n};\n\n/**\n * Function: addMode\n * \n * Adds a new item to the toolbar. The selection is typically reset after\n * the item has been consumed, for example by adding a new vertex to the\n * graph. The reset is not carried out if the item is double clicked.\n * \n * The function argument uses the following signature: funct(evt, cell) where\n * evt is the native mouse event and cell is the cell under the mouse.\n */\nmxToolbar.prototype.addMode = function(title, icon, funct, pressedIcon, style, toggle)\n{\n\ttoggle = (toggle != null) ? toggle : true;\n\tvar img = document.createElement((icon != null) ? 'img' : 'button');\n\t\n\timg.initialClassName = style || 'mxToolbarMode';\n\timg.className = img.initialClassName;\n\timg.setAttribute('src', icon);\n\timg.altIcon = pressedIcon;\n\n\tif (title != null)\n\t{\n\t\timg.setAttribute('title', title);\n\t}\n\t\n\tif (this.enabled && toggle)\n\t{\n\t\tmxEvent.addListener(img, 'click', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.selectMode(img, funct);\n\t\t\tthis.noReset = false;\n\t\t}));\n\t\t\n\t\tmxEvent.addListener(img, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.selectMode(img, funct);\n\t\t\tthis.noReset = true;\n\t\t}));\n\t\t\n\t\tif (this.defaultMode == null)\n\t\t{\n\t\t\tthis.defaultMode = img;\n\t\t\tthis.defaultFunction = funct;\n\t\t\tthis.selectMode(img, funct);\n\t\t}\n\t}\n\n\tthis.container.appendChild(img);\t\t\t\t\t\n\n\treturn img;\n};\n\n/**\n * Function: selectMode\n * \n * Resets the state of the previously selected mode and displays the given\n * DOM node as selected. This function fires a select event with the given\n * function as a parameter.\n */\nmxToolbar.prototype.selectMode = function(domNode, funct)\n{\n\tif (this.selectedMode != domNode)\n\t{\n\t\tif (this.selectedMode != null)\n\t\t{\n\t\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.selectedMode = domNode;\n\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName+'Selected';\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SELECT, \"function\", funct));\n\t}\n};\n\n/**\n * Function: resetMode\n * \n * Selects the default mode and resets the state of the previously selected\n * mode.\n */\nmxToolbar.prototype.resetMode = function(forced)\n{\n\tif ((forced || !this.noReset) && this.selectedMode != this.defaultMode)\n\t{\n\t\t// The last selected switch mode will be activated\n\t\t// so the function was already executed and is\n\t\t// no longer required here\n\t\tthis.selectMode(this.defaultMode, this.defaultFunction);\n\t}\n};\n\n/**\n * Function: addSeparator\n * \n * Adds the specifies image as a separator.\n * \n * Parameters:\n * \n * icon - URL of the separator icon.\n */\nmxToolbar.prototype.addSeparator = function(icon)\n{\n\treturn this.addItem(null, icon, null);\n};\n\n/**\n * Function: addBreak\n * \n * Adds a break to the container.\n */\nmxToolbar.prototype.addBreak = function()\n{\n\tmxUtils.br(this.container);\n};\n\n/**\n * Function: addLine\n * \n * Adds a horizontal line to the container.\n */\nmxToolbar.prototype.addLine = function()\n{\n\tvar hr = document.createElement('hr');\n\t\n\thr.style.marginRight = '6px';\n\thr.setAttribute('size', '1');\n\t\n\tthis.container.appendChild(hr);\n};\n\n/**\n * Function: destroy\n * \n * Removes the toolbar and all its associated resources.\n */\nmxToolbar.prototype.destroy = function ()\n{\n\tmxEvent.release(this.container);\n\tthis.container = null;\n\tthis.defaultMode = null;\n\tthis.defaultFunction = null;\n\tthis.selectedMode = null;\n\t\n\tif (this.menu != null)\n\t{\n\t\tthis.menu.destroy();\n\t}\n};\n\n__mxOutput.mxToolbar = typeof mxToolbar !== 'undefined' ? mxToolbar : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxUndoableEdit\n * \n * Implements a composite undoable edit. Here is an example for a custom change\n * which gets executed via the model:\n * \n * (code)\n * function CustomChange(model, name)\n * {\n *   this.model = model;\n *   this.name = name;\n *   this.previous = name;\n * };\n * \n * CustomChange.prototype.execute = function()\n * {\n *   var tmp = this.model.name;\n *   this.model.name = this.previous;\n *   this.previous = tmp;\n * };\n * \n * var name = prompt('Enter name');\n * graph.model.execute(new CustomChange(graph.model, name));\n * (end)\n * \n * Event: mxEvent.EXECUTED\n * \n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n * \n * Event: mxEvent.START_EDIT\n * \n * Fires before a set of changes will be executed in <undo> or <redo>.\n * This event contains no properties.\n * \n * Event: mxEvent.END_EDIT\n *\n * Fires after a set of changeswas executed in <undo> or <redo>.\n * This event contains no properties.\n * \n * Constructor: mxUndoableEdit\n * \n * Constructs a new undoable edit for the given source.\n */\nfunction mxUndoableEdit(source, significant)\n{\n\tthis.source = source;\n\tthis.changes = [];\n\tthis.significant = (significant != null) ? significant : true;\n};\n\n/**\n * Variable: source\n * \n * Specifies the source of the edit.\n */\nmxUndoableEdit.prototype.source = null;\n\n/**\n * Variable: changes\n * \n * Array that contains the changes that make up this edit. The changes are\n * expected to either have an undo and redo function, or an execute\n * function. Default is an empty array.\n */\nmxUndoableEdit.prototype.changes = null;\n\n/**\n * Variable: significant\n * \n * Specifies if the undoable change is significant.\n * Default is true.\n */\nmxUndoableEdit.prototype.significant = null;\n\n/**\n * Variable: undone\n * \n * Specifies if this edit has been undone. Default is false.\n */\nmxUndoableEdit.prototype.undone = false;\n\n/**\n * Variable: redone\n * \n * Specifies if this edit has been redone. Default is false.\n */\nmxUndoableEdit.prototype.redone = false;\n\n/**\n * Function: isEmpty\n * \n * Returns true if the this edit contains no changes.\n */\nmxUndoableEdit.prototype.isEmpty = function()\n{\n\treturn this.changes.length == 0;\n};\n\n/**\n * Function: isSignificant\n * \n * Returns <significant>.\n */\nmxUndoableEdit.prototype.isSignificant = function()\n{\n\treturn this.significant;\n};\n\n/**\n * Function: add\n * \n * Adds the specified change to this edit. The change is an object that is\n * expected to either have an undo and redo, or an execute function.\n */\nmxUndoableEdit.prototype.add = function(change)\n{\n\tthis.changes.push(change);\n};\n\n/**\n * Function: notify\n * \n * Hook to notify any listeners of the changes after an <undo> or <redo>\n * has been carried out. This implementation is empty.\n */\nmxUndoableEdit.prototype.notify = function() { };\n\n/**\n * Function: die\n * \n * Hook to free resources after the edit has been removed from the command\n * history. This implementation is empty.\n */\nmxUndoableEdit.prototype.die = function() { };\n\n/**\n * Function: undo\n * \n * Undoes all changes in this edit.\n */\nmxUndoableEdit.prototype.undo = function()\n{\n\tif (!this.undone)\n\t{\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t\tvar count = this.changes.length;\n\t\t\n\t\tfor (var i = count - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar change = this.changes[i];\n\t\t\t\n\t\t\tif (change.execute != null)\n\t\t\t{\n\t\t\t\tchange.execute();\n\t\t\t}\n\t\t\telse if (change.undo != null)\n\t\t\t{\n\t\t\t\tchange.undo();\n\t\t\t}\n\t\t\t\n\t\t\t// New global executed event\n\t\t\tthis.source.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\t\t}\n\t\t\n\t\tthis.undone = true;\n\t\tthis.redone = false;\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tthis.notify();\n};\n\n/**\n * Function: redo\n * \n * Redoes all changes in this edit.\n */\nmxUndoableEdit.prototype.redo = function()\n{\n\tif (!this.redone)\n\t{\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t\tvar count = this.changes.length;\n\t\t\n\t\tfor (var i = 0; i < count; i++)\n\t\t{\n\t\t\tvar change = this.changes[i];\n\t\t\t\n\t\t\tif (change.execute != null)\n\t\t\t{\n\t\t\t\tchange.execute();\n\t\t\t}\n\t\t\telse if (change.redo != null)\n\t\t\t{\n\t\t\t\tchange.redo();\n\t\t\t}\n\t\t\t\n\t\t\t// New global executed event\n\t\t\tthis.source.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\t\t}\n\t\t\n\t\tthis.undone = false;\n\t\tthis.redone = true;\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tthis.notify();\n};\n\n__mxOutput.mxUndoableEdit = typeof mxUndoableEdit !== 'undefined' ? mxUndoableEdit : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxUndoManager\n *\n * Implements a command history. When changing the graph model, an\n * <mxUndoableChange> object is created at the start of the transaction (when\n * model.beginUpdate is called). All atomic changes are then added to this\n * object until the last model.endUpdate call, at which point the\n * <mxUndoableEdit> is dispatched in an event, and added to the history inside\n * <mxUndoManager>. This is done by an event listener in\n * <mxEditor.installUndoHandler>.\n * \n * Each atomic change of the model is represented by an object (eg.\n * <mxRootChange>, <mxChildChange>, <mxTerminalChange> etc) which contains the\n * complete undo information. The <mxUndoManager> also listens to the\n * <mxGraphView> and stores it's changes to the current root as insignificant\n * undoable changes, so that drilling (step into, step up) is undone.\n * \n * This means when you execute an atomic change on the model, then change the\n * current root on the view and click undo, the change of the root will be\n * undone together with the change of the model so that the display represents\n * the state at which the model was changed. However, these changes are not\n * transmitted for sharing as they do not represent a state change.\n *\n * Example:\n * \n * When adding an undo manager to a graph, make sure to add it\n * to the model and the view as well to maintain a consistent\n * display across multiple undo/redo steps.\n *\n * (code)\n * var undoManager = new mxUndoManager();\n * var listener = function(sender, evt)\n * {\n *   undoManager.undoableEditHappened(evt.getProperty('edit'));\n * };\n * graph.getModel().addListener(mxEvent.UNDO, listener);\n * graph.getView().addListener(mxEvent.UNDO, listener);\n * (end)\n * \n * The code creates a function that informs the undoManager\n * of an undoable edit and binds it to the undo event of\n * <mxGraphModel> and <mxGraphView> using\n * <mxEventSource.addListener>.\n * \n * Event: mxEvent.CLEAR\n * \n * Fires after <clear> was invoked. This event has no properties.\n * \n * Event: mxEvent.UNDO\n * \n * Fires afer a significant edit was undone in <undo>. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was undone.\n * \n * Event: mxEvent.REDO\n * \n * Fires afer a significant edit was redone in <redo>. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was redone.\n * \n * Event: mxEvent.ADD\n * \n * Fires after an undoable edit was added to the history. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was added.\n * \n * Constructor: mxUndoManager\n *\n * Constructs a new undo manager with the given history size. If no history\n * size is given, then a default size of 100 steps is used.\n */\nfunction mxUndoManager(size)\n{\n\tthis.size = (size != null) ? size : 100;\n\tthis.clear();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUndoManager.prototype = new mxEventSource();\nmxUndoManager.prototype.constructor = mxUndoManager;\n\n/**\n * Variable: size\n * \n * Maximum command history size. 0 means unlimited history. Default is\n * 100.\n */\nmxUndoManager.prototype.size = null;\n\n/**\n * Variable: history\n * \n * Array that contains the steps of the command history.\n */\nmxUndoManager.prototype.history = null;\n\n/**\n * Variable: indexOfNextAdd\n * \n * Index of the element to be added next.\n */\nmxUndoManager.prototype.indexOfNextAdd = 0;\n\n/**\n * Function: isEmpty\n * \n * Returns true if the history is empty.\n */\nmxUndoManager.prototype.isEmpty = function()\n{\n\treturn this.history.length == 0;\n};\n\n/**\n * Function: clear\n * \n * Clears the command history.\n */\nmxUndoManager.prototype.clear = function()\n{\n\tthis.history = [];\n\tthis.indexOfNextAdd = 0;\n\tthis.fireEvent(new mxEventObject(mxEvent.CLEAR));\n};\n\n/**\n * Function: canUndo\n * \n * Returns true if an undo is possible.\n */\nmxUndoManager.prototype.canUndo = function()\n{\n\treturn this.indexOfNextAdd > 0;\n};\n\n/**\n * Function: undo\n * \n * Undoes the last change.\n */\nmxUndoManager.prototype.undo = function()\n{\n    while (this.indexOfNextAdd > 0)\n    {\n        var edit = this.history[--this.indexOfNextAdd];\n        edit.undo();\n\n\t\tif (edit.isSignificant())\n        {\n        \tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n            break;\n        }\n    }\n};\n\n/**\n * Function: canRedo\n * \n * Returns true if a redo is possible.\n */\nmxUndoManager.prototype.canRedo = function()\n{\n\treturn this.indexOfNextAdd < this.history.length;\n};\n\n/**\n * Function: redo\n * \n * Redoes the last change.\n */\nmxUndoManager.prototype.redo = function()\n{\n    var n = this.history.length;\n    \n    while (this.indexOfNextAdd < n)\n    {\n        var edit =  this.history[this.indexOfNextAdd++];\n        edit.redo();\n        \n        if (edit.isSignificant())\n        {\n        \tthis.fireEvent(new mxEventObject(mxEvent.REDO, 'edit', edit));\n            break;\n        }\n    }\n};\n\n/**\n * Function: undoableEditHappened\n * \n * Method to be called to add new undoable edits to the <history>.\n */\nmxUndoManager.prototype.undoableEditHappened = function(undoableEdit)\n{\n\tthis.trim();\n\t\n\tif (this.size > 0 &&\n\t\tthis.size == this.history.length)\n\t{\n\t\tthis.history.shift();\n\t}\n\t\n\tthis.history.push(undoableEdit);\n\tthis.indexOfNextAdd = this.history.length;\n\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'edit', undoableEdit));\n};\n\n/**\n * Function: trim\n * \n * Removes all pending steps after <indexOfNextAdd> from the history,\n * invoking die on each edit. This is called from <undoableEditHappened>.\n */\nmxUndoManager.prototype.trim = function()\n{\n\tif (this.history.length > this.indexOfNextAdd)\n\t{\n\t\tvar edits = this.history.splice(this.indexOfNextAdd,\n\t\t\tthis.history.length - this.indexOfNextAdd);\n\t\t\t\n\t\tfor (var i = 0; i < edits.length; i++)\n\t\t{\n\t\t\tedits[i].die();\n\t\t}\n\t}\n};\n\n__mxOutput.mxUndoManager = typeof mxUndoManager !== 'undefined' ? mxUndoManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxUrlConverter\n * \n * Converts relative and absolute URLs to absolute URLs with protocol and domain.\n */\nvar mxUrlConverter = function()\n{\n\t// Empty constructor\n};\n\n/**\n * Variable: enabled\n * \n * Specifies if the converter is enabled. Default is true.\n */\nmxUrlConverter.prototype.enabled = true;\n\n/**\n * Variable: baseUrl\n * \n * Specifies the base URL to be used as a prefix for relative URLs.\n */\nmxUrlConverter.prototype.baseUrl = null;\n\n/**\n * Variable: baseDomain\n * \n * Specifies the base domain to be used as a prefix for absolute URLs.\n */\nmxUrlConverter.prototype.baseDomain = null;\n\n/**\n * Function: updateBaseUrl\n * \n * Private helper function to update the base URL.\n */\nmxUrlConverter.prototype.updateBaseUrl = function()\n{\n\tthis.baseDomain = location.protocol + '//' + location.host;\n\tthis.baseUrl = this.baseDomain + location.pathname;\n\tvar tmp = this.baseUrl.lastIndexOf('/');\n\t\n\t// Strips filename etc\n\tif (tmp > 0)\n\t{\n\t\tthis.baseUrl = this.baseUrl.substring(0, tmp + 1);\n\t}\n};\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxUrlConverter.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxUrlConverter.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getBaseUrl\n * \n * Returns <baseUrl>.\n */\nmxUrlConverter.prototype.getBaseUrl = function()\n{\n\treturn this.baseUrl;\n};\n\n/**\n * Function: setBaseUrl\n * \n * Sets <baseUrl>.\n */\nmxUrlConverter.prototype.setBaseUrl = function(value)\n{\n\tthis.baseUrl = value;\n};\n\n/**\n * Function: getBaseDomain\n * \n * Returns <baseDomain>.\n */\nmxUrlConverter.prototype.getBaseDomain = function()\n{\n\treturn this.baseDomain;\n};\n\n/**\n * Function: setBaseDomain\n * \n * Sets <baseDomain>.\n */\nmxUrlConverter.prototype.setBaseDomain = function(value)\n{\n\tthis.baseDomain = value;\n};\n\n/**\n * Function: isRelativeUrl\n * \n * Returns true if the given URL is relative.\n */\nmxUrlConverter.prototype.isRelativeUrl = function(url)\n{\n\treturn url != null && url.substring(0, 2) != '//' && url.substring(0, 7) != 'http://' &&\n\t\turl.substring(0, 8) != 'https://' && url.substring(0, 10) != 'data:image' &&\n\t\turl.substring(0, 7) != 'file://' && url.substring(0,14) != 'vscode-file://'; // {{SQL CARBON EDIT}} Adding a rule for vscode-file// protocol. \n};\n\n/**\n * Function: convert\n * \n * Converts the given URL to an absolute URL with protol and domain.\n * Relative URLs are first converted to absolute URLs.\n */\nmxUrlConverter.prototype.convert = function(url)\n{\n\tif (this.isEnabled() && this.isRelativeUrl(url))\n\t{\n\t\tif (this.getBaseUrl() == null)\n\t\t{\n\t\t\tthis.updateBaseUrl();\n\t\t}\n\t\t\n\t\tif (url.charAt(0) == '/')\n\t\t{\n\t\t\turl = this.getBaseDomain() + url;\n\t\t}\n\t\telse\n\t\t{\n\t\t\turl = this.getBaseUrl() + url;\n\t\t}\n\t}\n\t\n\treturn url;\n};\n\n__mxOutput.mxUrlConverter = typeof mxUrlConverter !== 'undefined' ? mxUrlConverter : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningManager\n *\n * Implements a handler for panning.\n */\nfunction mxPanningManager(graph)\n{\n\tthis.thread = null;\n\tthis.active = false;\n\tthis.tdx = 0;\n\tthis.tdy = 0;\n\tthis.t0x = 0;\n\tthis.t0y = 0;\n\tthis.dx = 0;\n\tthis.dy = 0;\n\tthis.scrollbars = false;\n\tthis.scrollLeft = 0;\n\tthis.scrollTop = 0;\n\t\n\tthis.mouseListener =\n\t{\n\t    mouseDown: function(sender, me) { },\n\t    mouseMove: function(sender, me) { },\n\t    mouseUp: mxUtils.bind(this, function(sender, me)\n\t    {\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.stop();\n\t    \t}\n\t    })\n\t};\n\t\n\tgraph.addMouseListener(this.mouseListener);\n\t\n\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t{\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.stop();\n\t    \t}\n\t});\n\t\n\t// Stops scrolling on every mouseup anywhere in the document\n\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\t\n\tvar createThread = mxUtils.bind(this, function()\n\t{\n\t    \tthis.scrollbars = mxUtils.hasScrollbars(graph.container);\n\t    \tthis.scrollLeft = graph.container.scrollLeft;\n\t    \tthis.scrollTop = graph.container.scrollTop;\n\t\n\t    \treturn window.setInterval(mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.tdx -= this.dx;\n\t\t\tthis.tdy -= this.dy;\n\n\t\t\tif (this.scrollbars)\n\t\t\t{\n\t\t\t\tvar left = -graph.container.scrollLeft - Math.ceil(this.dx);\n\t\t\t\tvar top = -graph.container.scrollTop - Math.ceil(this.dy);\n\t\t\t\tgraph.panGraph(left, top);\n\t\t\t\tgraph.panDx = this.scrollLeft - graph.container.scrollLeft;\n\t\t\t\tgraph.panDy = this.scrollTop - graph.container.scrollTop;\n\t\t\t\tgraph.fireEvent(new mxEventObject(mxEvent.PAN));\n\t\t\t\t// TODO: Implement graph.autoExtend\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgraph.panGraph(this.getDx(), this.getDy());\n\t\t\t}\n\t\t}), this.delay);\n\t});\n\t\n\tthis.isActive = function()\n\t{\n\t\treturn active;\n\t};\n\t\n\tthis.getDx = function()\n\t{\n\t\treturn Math.round(this.tdx);\n\t};\n\t\n\tthis.getDy = function()\n\t{\n\t\treturn Math.round(this.tdy);\n\t};\n\t\n\tthis.start = function()\n\t{\n\t\tthis.t0x = graph.view.translate.x;\n\t\tthis.t0y = graph.view.translate.y;\n\t\tthis.active = true;\n\t};\n\t\n\tthis.panTo = function(x, y, w, h)\n\t{\n\t\tif (!this.active)\n\t\t{\n\t\t\tthis.start();\n\t\t}\n\t\t\n    \tthis.scrollLeft = graph.container.scrollLeft;\n    \tthis.scrollTop = graph.container.scrollTop;\n\t\t\n\t\tw = (w != null) ? w : 0;\n\t\th = (h != null) ? h : 0;\n\t\t\n\t\tvar c = graph.container;\n\t\tthis.dx = x + w - c.scrollLeft - c.clientWidth;\n\t\t\n\t\tif (this.dx < 0 && Math.abs(this.dx) < this.border)\n\t\t{\n\t\t\tthis.dx = this.border + this.dx;\n\t\t}\n\t\telse if (this.handleMouseOut)\n\t\t{\n\t\t\tthis.dx = Math.max(this.dx, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dx = 0;\n\t\t}\n\t\t\n\t\tif (this.dx == 0)\n\t\t{\n\t\t\tthis.dx = x - c.scrollLeft;\n\t\t\t\n\t\t\tif (this.dx > 0 && this.dx < this.border)\n\t\t\t{\n\t\t\t\tthis.dx = this.dx - this.border;\n\t\t\t}\n\t\t\telse if (this.handleMouseOut)\n\t\t\t{\n\t\t\t\tthis.dx = Math.min(0, this.dx);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dx = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.dy = y + h - c.scrollTop - c.clientHeight;\n\n\t\tif (this.dy < 0 && Math.abs(this.dy) < this.border)\n\t\t{\n\t\t\tthis.dy = this.border + this.dy;\n\t\t}\n\t\telse if (this.handleMouseOut)\n\t\t{\n\t\t\tthis.dy = Math.max(this.dy, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dy = 0;\n\t\t}\n\t\t\n\t\tif (this.dy == 0)\n\t\t{\n\t\t\tthis.dy = y - c.scrollTop;\n\t\t\t\n\t\t\tif (this.dy > 0 && this.dy < this.border)\n\t\t\t{\n\t\t\t\tthis.dy = this.dy - this.border;\n\t\t\t}\n\t\t\telse if (this.handleMouseOut)\n\t\t\t{\n\t\t\t\tthis.dy = Math.min(0, this.dy);\n\t\t\t} \n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dy = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.dx != 0 || this.dy != 0)\n\t\t{\n\t\t\tthis.dx *= this.damper;\n\t\t\tthis.dy *= this.damper;\n\t\t\t\n\t\t\tif (this.thread == null)\n\t\t\t{\n\t\t\t\tthis.thread = createThread();\n\t\t\t}\n\t\t}\n\t\telse if (this.thread != null)\n\t\t{\n\t\t\twindow.clearInterval(this.thread);\n\t\t\tthis.thread = null;\n\t\t}\n\t};\n\t\n\tthis.stop = function()\n\t{\n\t\tif (this.active)\n\t\t{\n\t\t\tthis.active = false;\n\t\t\n\t\t\tif (this.thread != null)\n\t    \t{\n\t\t\t\twindow.clearInterval(this.thread);\n\t\t\t\tthis.thread = null;\n\t    \t}\n\t\t\t\n\t\t\tthis.tdx = 0;\n\t\t\tthis.tdy = 0;\n\t\t\t\n\t\t\tif (!this.scrollbars)\n\t\t\t{\n\t\t\t\tvar px = graph.panDx;\n\t\t\t\tvar py = graph.panDy;\n\t\t    \t\n\t\t    \tif (px != 0 || py != 0)\n\t\t    \t{\n\t\t    \t\tgraph.panGraph(0, 0);\n\t\t\t    \tgraph.view.setTranslate(this.t0x + px / graph.view.scale, this.t0y + py / graph.view.scale);\n\t\t    \t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgraph.panDx = 0;\n\t\t\t\tgraph.panDy = 0;\n\t\t\t\tgraph.fireEvent(new mxEventObject(mxEvent.PAN));\n\t\t\t}\n\t\t}\n\t};\n\t\n\tthis.destroy = function()\n\t{\n\t\tgraph.removeMouseListener(this.mouseListener);\n\t\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n\t};\n};\n\n/**\n * Variable: damper\n * \n * Damper value for the panning. Default is 1/6.\n */\nmxPanningManager.prototype.damper = 1/6;\n\n/**\n * Variable: delay\n * \n * Delay in milliseconds for the panning. Default is 10.\n */\nmxPanningManager.prototype.delay = 10;\n\n/**\n * Variable: handleMouseOut\n * \n * Specifies if mouse events outside of the component should be handled. Default is true. \n */\nmxPanningManager.prototype.handleMouseOut = true;\n\n/**\n * Variable: border\n * \n * Border to handle automatic panning inside the component. Default is 0 (disabled).\n */\nmxPanningManager.prototype.border = 0;\n\n__mxOutput.mxPanningManager = typeof mxPanningManager !== 'undefined' ? mxPanningManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPopupMenu\n * \n * Basic popup menu. To add a vertical scrollbar to a given submenu, the\n * following code can be used.\n * \n * (code)\n * var mxPopupMenuShowMenu = mxPopupMenu.prototype.showMenu;\n * mxPopupMenu.prototype.showMenu = function()\n * {\n *   mxPopupMenuShowMenu.apply(this, arguments);\n *   \n *   this.div.style.overflowY = 'auto';\n *   this.div.style.overflowX = 'hidden';\n *   this.div.style.maxHeight = '160px';\n * };\n * (end)\n * \n * Constructor: mxPopupMenu\n * \n * Constructs a popupmenu.\n * \n * Event: mxEvent.SHOW\n *\n * Fires after the menu has been shown in <popup>.\n */\nfunction mxPopupMenu(factoryMethod)\n{\n\tthis.factoryMethod = factoryMethod;\n\t\n\tif (factoryMethod != null)\n\t{\n\t\tthis.init();\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPopupMenu.prototype = new mxEventSource();\nmxPopupMenu.prototype.constructor = mxPopupMenu;\n\n/**\n * Variable: submenuImage\n * \n * URL of the image to be used for the submenu icon.\n */\nmxPopupMenu.prototype.submenuImage = mxClient.imageBasePath + '/submenu.gif';\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the popupmenu and its shadow. Default is 10006.\n */\nmxPopupMenu.prototype.zIndex = 10006;\n\n/**\n * Variable: factoryMethod\n * \n * Function that is used to create the popup menu. The function takes the\n * current panning handler, the <mxCell> under the mouse and the mouse\n * event that triggered the call as arguments.\n */\nmxPopupMenu.prototype.factoryMethod = null;\n\n/**\n * Variable: useLeftButtonForPopup\n * \n * Specifies if popupmenus should be activated by clicking the left mouse\n * button. Default is false.\n */\nmxPopupMenu.prototype.useLeftButtonForPopup = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxPopupMenu.prototype.enabled = true;\n\n/**\n * Variable: itemCount\n * \n * Contains the number of times <addItem> has been called for a new menu.\n */\nmxPopupMenu.prototype.itemCount = 0;\n\n/**\n * Variable: autoExpand\n * \n * Specifies if submenus should be expanded on mouseover. Default is false.\n */\nmxPopupMenu.prototype.autoExpand = false;\n\n/**\n * Variable: smartSeparators\n * \n * Specifies if separators should only be added if a menu item follows them.\n * Default is false.\n */\nmxPopupMenu.prototype.smartSeparators = false;\n\n/**\n * Variable: labels\n * \n * Specifies if any labels should be visible. Default is true.\n */\nmxPopupMenu.prototype.labels = true;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxPopupMenu.prototype.init = function()\n{\n\t// Adds the inner table\n\tthis.table = document.createElement('table');\n\tthis.table.className = 'mxPopupMenu';\n\t\n\tthis.tbody = document.createElement('tbody');\n\tthis.table.appendChild(this.tbody);\n\n\t// Adds the outer div\n\tthis.div = document.createElement('div');\n\tthis.div.className = 'mxPopupMenu';\n\tthis.div.style.display = 'inline';\n\tthis.div.style.zIndex = this.zIndex;\n\tthis.div.appendChild(this.table);\n\n\t// Disables the context menu on the outer div\n\tmxEvent.disableContextMenu(this.div);\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxPopupMenu.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n */\nmxPopupMenu.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isPopupTrigger\n * \n * Returns true if the given event is a popupmenu trigger for the optional\n * given cell.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the mouse event.\n */\nmxPopupMenu.prototype.isPopupTrigger = function(me)\n{\n\treturn me.isPopupTrigger() || (this.useLeftButtonForPopup && mxEvent.isLeftMouseButton(me.getEvent()));\n};\n\n/**\n * Function: addItem\n * \n * Adds the given item to the given parent item. If no parent item is specified\n * then the item is added to the top-level menu. The return value may be used\n * as the parent argument, ie. as a submenu item. The return value is the table\n * row that represents the item.\n * \n * Paramters:\n * \n * title - String that represents the title of the menu item.\n * image - Optional URL for the image icon.\n * funct - Function associated that takes a mouseup or touchend event.\n * parent - Optional item returned by <addItem>.\n * iconCls - Optional string that represents the CSS class for the image icon.\n * IconsCls is ignored if image is given.\n * enabled - Optional boolean indicating if the item is enabled. Default is true.\n * active - Optional boolean indicating if the menu should implement any event handling.\n * Default is true.\n * noHover - Optional boolean to disable hover state.\n */\nmxPopupMenu.prototype.addItem = function(title, image, funct, parent, iconCls, enabled, active, noHover)\n{\n\tparent = parent || this;\n\tthis.itemCount++;\n\t\n\t// Smart separators only added if element contains items\n\tif (parent.willAddSeparator)\n\t{\n\t\tif (parent.containsItems)\n\t\t{\n\t\t\tthis.addSeparator(parent, true);\n\t\t}\n\n\t\tparent.willAddSeparator = false;\n\t}\n\n\tparent.containsItems = true;\n\tvar tr = document.createElement('tr');\n\ttr.className = 'mxPopupMenuItem';\n\tvar col1 = document.createElement('td');\n\tcol1.className = 'mxPopupMenuIcon';\n\n\t// Adds the given image into the first column\n\tif (image != null)\n\t{\n\t\tvar img = document.createElement('img');\n\t\timg.src = image;\n\t\tcol1.appendChild(img);\n\t}\n\telse if (iconCls != null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.className = iconCls;\n\t\tcol1.appendChild(div);\n\t}\n\t\n\ttr.appendChild(col1);\n\t\n\tif (this.labels)\n\t{\n\t\tvar col2 = document.createElement('td');\n\t\tcol2.className = 'mxPopupMenuItem' +\n\t\t\t((enabled != null && !enabled) ? ' mxDisabled' : '');\n\t\t\n\t\tmxUtils.write(col2, title);\n\t\tcol2.align = 'left';\n\t\ttr.appendChild(col2);\n\t\n\t\tvar col3 = document.createElement('td');\n\t\tcol3.className = 'mxPopupMenuItem' +\n\t\t\t((enabled != null && !enabled) ? ' mxDisabled' : '');\n\t\tcol3.style.paddingRight = '6px';\n\t\tcol3.style.textAlign = 'right';\n\t\t\n\t\ttr.appendChild(col3);\n\t\t\n\t\tif (parent.div == null)\n\t\t{\n\t\t\tthis.createSubmenu(parent);\n\t\t}\n\t}\n\t\n\tparent.tbody.appendChild(tr);\n\n\tif (active != false && enabled != false)\n\t{\n\t\tvar currentSelection = null;\n\t\t\n\t\tmxEvent.addGestureListeners(tr,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tthis.eventReceiver = tr;\n\t\t\t\t\n\t\t\t\tif (parent.activeRow != tr && parent.activeRow != parent)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != null && parent.activeRow.div.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideSubmenu(parent);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (tr.div != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showSubmenu(parent, tr);\n\t\t\t\t\t\tparent.activeRow = tr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Workaround for lost current selection in page because of focus in IE\n\t\t\t\tif (document.selection != null && (mxClient.IS_QUIRKS || document.documentMode == 8))\n\t\t\t\t{\n\t\t\t\t\tcurrentSelection = document.selection.createRange();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (parent.activeRow != tr && parent.activeRow != parent)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != null && parent.activeRow.div.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideSubmenu(parent);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.autoExpand && tr.div != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showSubmenu(parent, tr);\n\t\t\t\t\t\tparent.activeRow = tr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\t// Sets hover style because TR in IE doesn't have hover\n\t\t\t\tif (!noHover)\n\t\t\t\t{\n\t\t\t\t\ttr.className = 'mxPopupMenuItemHover';\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\t// EventReceiver avoids clicks on a submenu item\n\t\t\t\t// which has just been shown in the mousedown\n\t\t\t\tif (this.eventReceiver == tr)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != tr)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideMenu();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for lost current selection in page because of focus in IE\n\t\t\t\t\tif (currentSelection != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Workaround for \"unspecified error\" in IE8 standards\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentSelection.select();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// ignore\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentSelection = null;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (funct != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfunct(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.eventReceiver = null;\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t})\n\t\t);\n\t\n\t\t// Resets hover style because TR in IE doesn't have hover\n\t\tif (!noHover)\n\t\t{\n\t\t\tmxEvent.addListener(tr, 'mouseout',\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\ttr.className = 'mxPopupMenuItem';\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n\t\n\treturn tr;\n};\n\n/**\n * Adds a checkmark to the given menuitem.\n */\nmxPopupMenu.prototype.addCheckmark = function(item, img)\n{\n\tvar td = item.firstChild.nextSibling;\n\ttd.style.backgroundImage = 'url(\\'' + img + '\\')';\n\ttd.style.backgroundRepeat = 'no-repeat';\n\ttd.style.backgroundPosition = '2px 50%';\n};\n\n/**\n * Function: createSubmenu\n * \n * Creates the nodes required to add submenu items inside the given parent\n * item. This is called in <addItem> if a parent item is used for the first\n * time. This adds various DOM nodes and a <submenuImage> to the parent.\n * \n * Parameters:\n * \n * parent - An item returned by <addItem>.\n */\nmxPopupMenu.prototype.createSubmenu = function(parent)\n{\n\tparent.table = document.createElement('table');\n\tparent.table.className = 'mxPopupMenu';\n\n\tparent.tbody = document.createElement('tbody');\n\tparent.table.appendChild(parent.tbody);\n\n\tparent.div = document.createElement('div');\n\tparent.div.className = 'mxPopupMenu';\n\n\tparent.div.style.position = 'absolute';\n\tparent.div.style.display = 'inline';\n\tparent.div.style.zIndex = this.zIndex;\n\t\n\tparent.div.appendChild(parent.table);\n\t\n\tvar img = document.createElement('img');\n\timg.setAttribute('src', this.submenuImage);\n\t\n\t// Last column of the submenu item in the parent menu\n\ttd = parent.firstChild.nextSibling.nextSibling;\n\ttd.appendChild(img);\n};\n\n/**\n * Function: showSubmenu\n * \n * Shows the submenu inside the given parent row.\n */\nmxPopupMenu.prototype.showSubmenu = function(parent, row)\n{\n\tif (row.div != null)\n\t{\n\t\trow.div.style.left = (parent.div.offsetLeft +\n\t\t\trow.offsetLeft+row.offsetWidth - 1) + 'px';\n\t\trow.div.style.top = (parent.div.offsetTop+row.offsetTop) + 'px';\n\t\tdocument.body.appendChild(row.div);\n\t\t\n\t\t// Moves the submenu to the left side if there is no space\n\t\tvar left = parseInt(row.div.offsetLeft);\n\t\tvar width = parseInt(row.div.offsetWidth);\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(document);\n\t\t\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\t\n\t\tvar right = offset.x + (b.clientWidth || d.clientWidth);\n\t\t\n\t\tif (left + width > right)\n\t\t{\n\t\t\trow.div.style.left = Math.max(0, (parent.div.offsetLeft - width + ((mxClient.IS_IE) ? 6 : -6))) + 'px';\n\t\t}\n\t\t\n\t\tmxUtils.fit(row.div);\n\t}\n};\n\n/**\n * Function: addSeparator\n * \n * Adds a horizontal separator in the given parent item or the top-level menu\n * if no parent is specified.\n * \n * Parameters:\n * \n * parent - Optional item returned by <addItem>.\n * force - Optional boolean to ignore <smartSeparators>. Default is false.\n */\nmxPopupMenu.prototype.addSeparator = function(parent, force)\n{\n\tparent = parent || this;\n\t\n\tif (this.smartSeparators && !force)\n\t{\n\t\tparent.willAddSeparator = true;\n\t}\n\telse if (parent.tbody != null)\n\t{\n\t\tparent.willAddSeparator = false;\n\t\tvar tr = document.createElement('tr');\n\t\t\n\t\tvar col1 = document.createElement('td');\n\t\tcol1.className = 'mxPopupMenuIcon';\n\t\tcol1.style.padding = '0 0 0 0px';\n\t\t\n\t\ttr.appendChild(col1);\n\t\t\n\t\tvar col2 = document.createElement('td');\n\t\tcol2.style.padding = '0 0 0 0px';\n\t\tcol2.setAttribute('colSpan', '2');\n\t\n\t\tvar hr = document.createElement('hr');\n\t\thr.setAttribute('size', '1');\n\t\tcol2.appendChild(hr);\n\t\t\n\t\ttr.appendChild(col2);\n\t\t\n\t\tparent.tbody.appendChild(tr);\n\t}\n};\n\n/**\n * Function: popup\n * \n * Shows the popup menu for the given event and cell.\n * \n * Example:\n * \n * (code)\n * graph.panningHandler.popup = function(x, y, cell, evt)\n * {\n *   mxUtils.alert('Hello, World!');\n * }\n * (end)\n */\nmxPopupMenu.prototype.popup = function(x, y, cell, evt)\n{\n\tif (this.div != null && this.tbody != null && this.factoryMethod != null)\n\t{\n\t\tthis.div.style.left = x + 'px';\n\t\tthis.div.style.top = y + 'px';\n\t\t\n\t\t// Removes all child nodes from the existing menu\n\t\twhile (this.tbody.firstChild != null)\n\t\t{\n\t\t\tmxEvent.release(this.tbody.firstChild);\n\t\t\tthis.tbody.removeChild(this.tbody.firstChild);\n\t\t}\n\t\t\n\t\tthis.itemCount = 0;\n\t\tthis.factoryMethod(this, cell, evt);\n\t\t\n\t\tif (this.itemCount > 0)\n\t\t{\n\t\t\tthis.showMenu();\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.SHOW));\n\t\t}\n\t}\n};\n\n/**\n * Function: isMenuShowing\n * \n * Returns true if the menu is showing.\n */\nmxPopupMenu.prototype.isMenuShowing = function()\n{\n\treturn this.div != null && this.div.parentNode == document.body;\n};\n\n/**\n * Function: showMenu\n * \n * Shows the menu.\n */\nmxPopupMenu.prototype.showMenu = function()\n{\n\t// Disables filter-based shadow in IE9 standards mode\n\tif (document.documentMode >= 9)\n\t{\n\t\tthis.div.style.filter = 'none';\n\t}\n\t\n\t// Fits the div inside the viewport\n\tdocument.body.appendChild(this.div);\n\tmxUtils.fit(this.div);\n};\n\n/**\n * Function: hideMenu\n * \n * Removes the menu and all submenus.\n */\nmxPopupMenu.prototype.hideMenu = function()\n{\n\tif (this.div != null)\n\t{\n\t\tif (this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.hideSubmenu(this);\n\t\tthis.containsItems = false;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.HIDE));\n\t}\n};\n\n/**\n * Function: hideSubmenu\n * \n * Removes all submenus inside the given parent.\n * \n * Parameters:\n * \n * parent - An item returned by <addItem>.\n */\nmxPopupMenu.prototype.hideSubmenu = function(parent)\n{\n\tif (parent.activeRow != null)\n\t{\n\t\tthis.hideSubmenu(parent.activeRow);\n\t\t\n\t\tif (parent.activeRow.div.parentNode != null)\n\t\t{\n\t\t\tparent.activeRow.div.parentNode.removeChild(parent.activeRow.div);\n\t\t}\n\t\t\n\t\tparent.activeRow = null;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPopupMenu.prototype.destroy = function()\n{\n\tif (this.div != null)\n\t{\n\t\tmxEvent.release(this.div);\n\t\t\n\t\tif (this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.div = null;\n\t}\n};\n\n__mxOutput.mxPopupMenu = typeof mxPopupMenu !== 'undefined' ? mxPopupMenu : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAutoSaveManager\n * \n * Manager for automatically saving diagrams. The <save> hook must be\n * implemented.\n * \n * Example:\n * \n * (code)\n * var mgr = new mxAutoSaveManager(editor.graph);\n * mgr.save = function()\n * {\n *   mxLog.show();\n *   mxLog.debug('save');\n * };\n * (end)\n * \n * Constructor: mxAutoSaveManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxAutoSaveManager(graph)\n{\n\t// Notifies the manager of a change\n\tthis.changeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t\t}\n\t});\n\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAutoSaveManager.prototype = new mxEventSource();\nmxAutoSaveManager.prototype.constructor = mxAutoSaveManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxAutoSaveManager.prototype.graph = null;\n\n/**\n * Variable: autoSaveDelay\n * \n * Minimum amount of seconds between two consecutive autosaves. Eg. a\n * value of 1 (s) means the graph is not stored more than once per second.\n * Default is 10.\n */\nmxAutoSaveManager.prototype.autoSaveDelay = 10;\n\n/**\n * Variable: autoSaveThrottle\n * \n * Minimum amount of seconds between two consecutive autosaves triggered by\n * more than <autoSaveThreshhold> changes within a timespan of less than\n * <autoSaveDelay> seconds. Eg. a value of 1 (s) means the graph is not\n * stored more than once per second even if there are more than\n * <autoSaveThreshold> changes within that timespan. Default is 2.\n */\nmxAutoSaveManager.prototype.autoSaveThrottle = 2;\n\n/**\n * Variable: autoSaveThreshold\n * \n * Minimum amount of ignored changes before an autosave. Eg. a value of 2\n * means after 2 change of the graph model the autosave will trigger if the\n * condition below is true. Default is 5.\n */\nmxAutoSaveManager.prototype.autoSaveThreshold = 5;\n\n/**\n * Variable: ignoredChanges\n * \n * Counter for ignored changes in autosave.\n */\nmxAutoSaveManager.prototype.ignoredChanges = 0;\n\n/**\n * Variable: lastSnapshot\n * \n * Used for autosaving. See <autosave>.\n */\nmxAutoSaveManager.prototype.lastSnapshot = 0;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxAutoSaveManager.prototype.enabled = true;\n\n/**\n * Variable: changeHandler\n * \n * Holds the function that handles graph model changes.\n */\nmxAutoSaveManager.prototype.changeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxAutoSaveManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxAutoSaveManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the layouts operate on.\n */\nmxAutoSaveManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\t}\n};\n\n/**\n * Function: save\n * \n * Empty hook that is called if the graph should be saved.\n */\nmxAutoSaveManager.prototype.save = function()\n{\n\t// empty\n};\n\n/**\n * Function: graphModelChanged\n * \n * Invoked when the graph model has changed.\n */\nmxAutoSaveManager.prototype.graphModelChanged = function(changes)\n{\n\tvar now = new Date().getTime();\n\tvar dt = (now - this.lastSnapshot) / 1000;\n\t\n\tif (dt > this.autoSaveDelay ||\n\t\t(this.ignoredChanges >= this.autoSaveThreshold &&\n\t\t dt > this.autoSaveThrottle))\n\t{\n\t\tthis.save();\n\t\tthis.reset();\n\t}\n\telse\n\t{\n\t\t// Increments the number of ignored changes\n\t\tthis.ignoredChanges++;\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets all counters.\n */\nmxAutoSaveManager.prototype.reset = function()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.ignoredChanges = 0;\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxAutoSaveManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxAutoSaveManager = typeof mxAutoSaveManager !== 'undefined' ? mxAutoSaveManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxAnimation\n * \n * Implements a basic animation in JavaScript.\n * \n * Constructor: mxAnimation\n * \n * Constructs an animation.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxAnimation(delay)\n{\n\tthis.delay = (delay != null) ? delay : 20;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAnimation.prototype = new mxEventSource();\nmxAnimation.prototype.constructor = mxAnimation;\n\n/**\n * Variable: delay\n * \n * Specifies the delay between the animation steps. Defaul is 30ms.\n */\nmxAnimation.prototype.delay = null;\n\n/**\n * Variable: thread\n * \n * Reference to the thread while the animation is running.\n */\nmxAnimation.prototype.thread = null;\n\n/**\n * Function: isRunning\n * \n * Returns true if the animation is running.\n */\nmxAnimation.prototype.isRunning = function()\n{\n\treturn this.thread != null;\n};\n\n/**\n * Function: startAnimation\n *\n * Starts the animation by repeatedly invoking updateAnimation.\n */\nmxAnimation.prototype.startAnimation = function()\n{\n\tif (this.thread == null)\n\t{\n\t\tthis.thread = window.setInterval(mxUtils.bind(this, this.updateAnimation), this.delay);\n\t}\n};\n\n/**\n * Function: updateAnimation\n *\n * Hook for subclassers to implement the animation. Invoke stopAnimation\n * when finished, startAnimation to resume. This is called whenever the\n * timer fires and fires an mxEvent.EXECUTE event with no properties.\n */\nmxAnimation.prototype.updateAnimation = function()\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTE));\n};\n\n/**\n * Function: stopAnimation\n *\n * Stops the animation by deleting the timer and fires an <mxEvent.DONE>.\n */\nmxAnimation.prototype.stopAnimation = function()\n{\n\tif (this.thread != null)\n\t{\n\t\twindow.clearInterval(this.thread);\n\t\tthis.thread = null;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.DONE));\n\t}\n};\n\n__mxOutput.mxAnimation = typeof mxAnimation !== 'undefined' ? mxAnimation : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxMorphing\n * \n * Implements animation for morphing cells. Here is an example of\n * using this class for animating the result of a layout algorithm:\n * \n * (code)\n * graph.getModel().beginUpdate();\n * try\n * {\n *   var circleLayout = new mxCircleLayout(graph);\n *   circleLayout.execute(graph.getDefaultParent());\n * }\n * finally\n * {\n *   var morph = new mxMorphing(graph);\n *   morph.addListener(mxEvent.DONE, function()\n *   {\n *     graph.getModel().endUpdate();\n *   });\n *   \n *   morph.startAnimation();\n * }\n * (end)\n * \n * Constructor: mxMorphing\n * \n * Constructs an animation.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * steps - Optional number of steps in the morphing animation. Default is 6.\n * ease - Optional easing constant for the animation. Default is 1.5.\n * delay - Optional delay between the animation steps. Passed to <mxAnimation>.\n */\nfunction mxMorphing(graph, steps, ease, delay)\n{\n\tmxAnimation.call(this, delay);\n\tthis.graph = graph;\n\tthis.steps = (steps != null) ? steps : 6;\n\tthis.ease = (ease != null) ? ease : 1.5;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxMorphing.prototype = new mxAnimation();\nmxMorphing.prototype.constructor = mxMorphing;\n\n/**\n * Variable: graph\n * \n * Specifies the delay between the animation steps. Defaul is 30ms.\n */\nmxMorphing.prototype.graph = null;\n\n/**\n * Variable: steps\n * \n * Specifies the maximum number of steps for the morphing.\n */\nmxMorphing.prototype.steps = null;\n\n/**\n * Variable: step\n * \n * Contains the current step.\n */\nmxMorphing.prototype.step = 0;\n\n/**\n * Variable: ease\n * \n * Ease-off for movement towards the given vector. Larger values are\n * slower and smoother. Default is 4.\n */\nmxMorphing.prototype.ease = null;\n\n/**\n * Variable: cells\n * \n * Optional array of cells to be animated. If this is not specified\n * then all cells are checked and animated if they have been moved\n * in the current transaction.\n */\nmxMorphing.prototype.cells = null;\n\n/**\n * Function: updateAnimation\n *\n * Animation step.\n */\nmxMorphing.prototype.updateAnimation = function()\n{\n\tmxAnimation.prototype.updateAnimation.apply(this, arguments);\n\tvar move = new mxCellStatePreview(this.graph);\n\n\tif (this.cells != null)\n\t{\n\t\t// Animates the given cells individually without recursion\n\t\tfor (var i = 0; i < this.cells.length; i++)\n\t\t{\n\t\t\tthis.animateCell(this.cells[i], move, false);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Animates all changed cells by using recursion to find\n\t\t// the changed cells but not for the animation itself\n\t\tthis.animateCell(this.graph.getModel().getRoot(), move, true);\n\t}\n\t\n\tthis.show(move);\n\t\n\tif (move.isEmpty() || this.step++ >= this.steps)\n\t{\n\t\tthis.stopAnimation();\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the changes in the given <mxCellStatePreview>.\n */\nmxMorphing.prototype.show = function(move)\n{\n\tmove.show();\n};\n\n/**\n * Function: animateCell\n *\n * Animates the given cell state using <mxCellStatePreview.moveState>.\n */\nmxMorphing.prototype.animateCell = function(cell, move, recurse)\n{\n\tvar state = this.graph.getView().getState(cell);\n\tvar delta = null;\n\n\tif (state != null)\n\t{\n\t\t// Moves the animated state from where it will be after the model\n\t\t// change by subtracting the given delta vector from that location\n\t\tdelta = this.getDelta(state);\n\n\t\tif (this.graph.getModel().isVertex(cell) && (delta.x != 0 || delta.y != 0))\n\t\t{\n\t\t\tvar translate = this.graph.view.getTranslate();\n\t\t\tvar scale = this.graph.view.getScale();\n\t\t\t\n\t\t\tdelta.x += translate.x * scale;\n\t\t\tdelta.y += translate.y * scale;\n\t\t\t\n\t\t\tmove.moveState(state, -delta.x / this.ease, -delta.y / this.ease);\n\t\t}\n\t}\n\t\n\tif (recurse && !this.stopRecursion(state, delta))\n\t{\n\t\tvar childCount = this.graph.getModel().getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.animateCell(this.graph.getModel().getChildAt(cell, i), move, recurse);\n\t\t}\n\t}\n};\n\n/**\n * Function: stopRecursion\n *\n * Returns true if the animation should not recursively find more\n * deltas for children if the given parent state has been animated.\n */\nmxMorphing.prototype.stopRecursion = function(state, delta)\n{\n\treturn delta != null && (delta.x != 0 || delta.y != 0);\n};\n\n/**\n * Function: getDelta\n *\n * Returns the vector between the current rendered state and the future\n * location of the state after the display will be updated.\n */\nmxMorphing.prototype.getDelta = function(state)\n{\n\tvar origin = this.getOriginForCell(state.cell);\n\tvar translate = this.graph.getView().getTranslate();\n\tvar scale = this.graph.getView().getScale();\n\tvar x = state.x / scale - translate.x;\n\tvar y = state.y / scale - translate.y;\n\n\treturn new mxPoint((origin.x - x) * scale, (origin.y - y) * scale);\n};\n\n/**\n * Function: getOriginForCell\n *\n * Returns the top, left corner of the given cell. TODO: Improve performance\n * by using caching inside this method as the result per cell never changes\n * during the lifecycle of this object.\n */\nmxMorphing.prototype.getOriginForCell = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\tvar geo = this.graph.getCellGeometry(cell);\n\t\tresult = this.getOriginForCell(parent);\n\t\t\n\t\t// TODO: Handle offsets\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (geo.relative)\n\t\t\t{\n\t\t\t\tvar pgeo = this.graph.getCellGeometry(parent);\n\t\t\t\t\n\t\t\t\tif (pgeo != null)\n\t\t\t\t{\n\t\t\t\t\tresult.x += geo.x * pgeo.width;\n\t\t\t\t\tresult.y += geo.y * pgeo.height;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.x += geo.x;\n\t\t\t\tresult.y += geo.y;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (result == null)\n\t{\n\t\tvar t = this.graph.view.getTranslate();\n\t\tresult = new mxPoint(-t.x, -t.y);\n\t}\n\t\n\treturn result;\n};\n\n__mxOutput.mxMorphing = typeof mxMorphing !== 'undefined' ? mxMorphing : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageBundle\n *\n * Maps from keys to base64 encoded images or file locations. All values must\n * be URLs or use the format data:image/format followed by a comma and the base64\n * encoded image data, eg. \"data:image/gif,XYZ\", where XYZ is the base64 encoded\n * image data.\n * \n * To add a new image bundle to an existing graph, the following code is used:\n * \n * (code)\n * var bundle = new mxImageBundle(alt);\n * bundle.putImage('myImage', 'data:image/gif,R0lGODlhEAAQAMIGAAAAAICAAICAgP' +\n *   '//AOzp2O3r2////////yH+FUNyZWF0ZWQgd2l0aCBUaGUgR0lNUAAh+QQBCgAHACwAAAAA' +\n *   'EAAQAAADTXi63AowynnAMDfjPUDlnAAJhmeBFxAEloliKltWmiYCQvfVr6lBPB1ggxN1hi' +\n *   'laSSASFQpIV5HJBDyHpqK2ejVRm2AAgZCdmCGO9CIBADs=', fallback);\n * bundle.putImage('mySvgImage', 'data:image/svg+xml,' + encodeURIComponent(\n *   '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\">' +\n *   '<linearGradient id=\"gradient\"><stop offset=\"10%\" stop-color=\"#F00\"/>' +\n *   '<stop offset=\"90%\" stop-color=\"#fcc\"/></linearGradient>' +\n *   '<rect fill=\"url(#gradient)\" width=\"100%\" height=\"100%\"/></svg>'), fallback);\n * graph.addImageBundle(bundle);\n * (end);\n * \n * Alt is an optional boolean (default is false) that specifies if the value\n * or the fallback should be returned in <getImage>.\n * \n * The image can then be referenced in any cell style using image=myImage.\n * If you are using mxOutline, you should use the same image bundles in the\n * graph that renders the outline.\n * \n * The keys for images are resolved in <mxGraph.postProcessCellStyle> and\n * turned into a data URI if the returned value has a short data URI format\n * as specified above.\n * \n * A typical value for the fallback is a MTHML link as defined in RFC 2557.\n * Note that this format requires a file to be dynamically created on the\n * server-side, or the page that contains the graph to be modified to contain\n * the resources, this can be done by adding a comment that contains the\n * resource in the HEAD section of the page after the title tag.\n * \n * This type of fallback mechanism should be used in IE6 and IE7. IE8 does\n * support data URIs, but the maximum size is limited to 32 KB, which means\n * all data URIs should be limited to 32 KB.\n */\nfunction mxImageBundle(alt)\n{\n\tthis.images = [];\n\tthis.alt = (alt != null) ? alt : false;\n};\n\n/**\n * Variable: images\n * \n * Maps from keys to images.\n */\nmxImageBundle.prototype.images = null;\n\n/**\n * Variable: alt\n * \n * Specifies if the fallback representation should be returned.\n */\nmxImageBundle.prototype.alt = null;\n\n/**\n * Function: putImage\n * \n * Adds the specified entry to the map. The entry is an object with a value and\n * fallback property as specified in the arguments.\n */\nmxImageBundle.prototype.putImage = function(key, value, fallback)\n{\n\tthis.images[key] = {value: value, fallback: fallback};\n};\n\n/**\n * Function: getImage\n * \n * Returns the value for the given key. This returns the value\n * or fallback, depending on <alt>. The fallback is returned if\n * <alt> is true, the value is returned otherwise.\n */\nmxImageBundle.prototype.getImage = function(key)\n{\n\tvar result = null;\n\t\n\tif (key != null)\n\t{\n\t\tvar img = this.images[key];\n\t\t\n\t\tif (img != null)\n\t\t{\n\t\t\tresult = (this.alt) ? img.fallback : img.value;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n__mxOutput.mxImageBundle = typeof mxImageBundle !== 'undefined' ? mxImageBundle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageExport\n * \n * Creates a new image export instance to be used with an export canvas. Here\n * is an example that uses this class to create an image via a backend using\n * <mxXmlExportCanvas>.\n * \n * (code)\n * var xmlDoc = mxUtils.createXmlDocument();\n * var root = xmlDoc.createElement('output');\n * xmlDoc.appendChild(root);\n * \n * var xmlCanvas = new mxXmlCanvas2D(root);\n * var imgExport = new mxImageExport();\n * imgExport.drawState(graph.getView().getState(graph.model.root), xmlCanvas);\n * \n * var bounds = graph.getGraphBounds();\n * var w = Math.ceil(bounds.x + bounds.width);\n * var h = Math.ceil(bounds.y + bounds.height);\n * \n * var xml = mxUtils.getXml(root);\n * new mxXmlRequest('export', 'format=png&w=' + w +\n * \t\t'&h=' + h + '&bg=#F9F7ED&xml=' + encodeURIComponent(xml))\n * \t\t.simulate(document, '_blank');\n * (end)\n * \n * Constructor: mxImageExport\n * \n * Constructs a new image export.\n */\nfunction mxImageExport() { };\n\n/**\n * Variable: includeOverlays\n * \n * Specifies if overlays should be included in the export. Default is false.\n */\nmxImageExport.prototype.includeOverlays = false;\n\n/**\n * Function: drawState\n * \n * Draws the given state and all its descendants to the given canvas.\n */\nmxImageExport.prototype.drawState = function(state, canvas)\n{\n\tif (state != null)\n\t{\n\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.drawCellState.apply(this, arguments);\n\t\t}));\n\t\t\t\t\n\t\t// Paints the overlays\n\t\tif (this.includeOverlays)\n\t\t{\n\t\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.drawOverlays.apply(this, arguments);\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Function: visitStatesRecursive\n * \n * Visits the given state and all its descendants to the given canvas recursively.\n */\nmxImageExport.prototype.visitStatesRecursive = function(state, canvas, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvisitor(state, canvas);\n\t\t\n\t\tvar graph = state.view.graph;\n\t\tvar childCount = graph.model.getChildCount(state.cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar childState = graph.view.getState(graph.model.getChildAt(state.cell, i));\n\t\t\tthis.visitStatesRecursive(childState, canvas, visitor);\n\t\t}\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n * \n * Returns the link for the given cell state and canvas. This returns null.\n */\nmxImageExport.prototype.getLinkForCellState = function(state, canvas)\n{\n\treturn null;\n};\n\n/**\n * Function: drawCellState\n * \n * Draws the given state to the given canvas.\n */\nmxImageExport.prototype.drawCellState = function(state, canvas)\n{\n\t// Experimental feature\n\tvar link = this.getLinkForCellState(state, canvas);\n\t\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(link);\n\t}\n\t\n\t// Paints the shape and text\n\tthis.drawShape(state, canvas);\n\tthis.drawText(state, canvas);\n\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(null);\n\t}\n};\n\n/**\n * Function: drawShape\n * \n * Draws the shape of the given state.\n */\nmxImageExport.prototype.drawShape = function(state, canvas)\n{\n\tif (state.shape instanceof mxShape && state.shape.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\t\n\t\tstate.shape.beforePaint(canvas);\n\t\tstate.shape.paint(canvas);\n\t\tstate.shape.afterPaint(canvas);\n\t\t\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawText\n * \n * Draws the text of the given state.\n */\nmxImageExport.prototype.drawText = function(state, canvas)\n{\n\tif (state.text != null && state.text.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\t\n\t\tstate.text.beforePaint(canvas);\n\t\tstate.text.paint(canvas);\n\t\tstate.text.afterPaint(canvas);\n\t\t\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawOverlays\n * \n * Draws the overlays for the given state. This is called if <includeOverlays>\n * is true.\n */\nmxImageExport.prototype.drawOverlays = function(state, canvas)\n{\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tif (shape instanceof mxShape)\n\t\t\t{\n\t\t\t\tshape.paint(canvas);\n\t\t\t}\n\t\t});\n\t}\n};\n\n\n__mxOutput.mxImageExport = typeof mxImageExport !== 'undefined' ? mxImageExport : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAbstractCanvas2D\n *\n * Base class for all canvases. A description of the public API is available in <mxXmlCanvas2D>.\n * All color values of <mxConstants.NONE> will be converted to null in the state.\n * \n * Constructor: mxAbstractCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxAbstractCanvas2D()\n{\n\t/**\n\t * Variable: converter\n\t * \n\t * Holds the <mxUrlConverter> to convert image URLs.\n\t */\n\tthis.converter = this.createUrlConverter();\n\t\n\tthis.reset();\n};\n\n/**\n * Variable: state\n * \n * Holds the current state.\n */\nmxAbstractCanvas2D.prototype.state = null;\n\n/**\n * Variable: states\n * \n * Stack of states.\n */\nmxAbstractCanvas2D.prototype.states = null;\n\n/**\n * Variable: path\n * \n * Holds the current path as an array.\n */\nmxAbstractCanvas2D.prototype.path = null;\n\n/**\n * Variable: rotateHtml\n * \n * Switch for rotation of HTML. Default is false.\n */\nmxAbstractCanvas2D.prototype.rotateHtml = true;\n\n/**\n * Variable: lastX\n * \n * Holds the last x coordinate.\n */\nmxAbstractCanvas2D.prototype.lastX = 0;\n\n/**\n * Variable: lastY\n * \n * Holds the last y coordinate.\n */\nmxAbstractCanvas2D.prototype.lastY = 0;\n\n/**\n * Variable: moveOp\n * \n * Contains the string used for moving in paths. Default is 'M'.\n */\nmxAbstractCanvas2D.prototype.moveOp = 'M';\n\n/**\n * Variable: lineOp\n * \n * Contains the string used for moving in paths. Default is 'L'.\n */\nmxAbstractCanvas2D.prototype.lineOp = 'L';\n\n/**\n * Variable: quadOp\n * \n * Contains the string used for quadratic paths. Default is 'Q'.\n */\nmxAbstractCanvas2D.prototype.quadOp = 'Q';\n\n/**\n * Variable: curveOp\n * \n * Contains the string used for bezier curves. Default is 'C'.\n */\nmxAbstractCanvas2D.prototype.curveOp = 'C';\n\n/**\n * Variable: closeOp\n * \n * Holds the operator for closing curves. Default is 'Z'.\n */\nmxAbstractCanvas2D.prototype.closeOp = 'Z';\n\n/**\n * Variable: pointerEvents\n * \n * Boolean value that specifies if events should be handled. Default is false.\n */\nmxAbstractCanvas2D.prototype.pointerEvents = false;\n\n/**\n * Function: createUrlConverter\n * \n * Create a new <mxUrlConverter> and returns it.\n */\nmxAbstractCanvas2D.prototype.createUrlConverter = function()\n{\n\treturn new mxUrlConverter();\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this canvas.\n */\nmxAbstractCanvas2D.prototype.reset = function()\n{\n\tthis.state = this.createState();\n\tthis.states = [];\n};\n\n/**\n * Function: createState\n * \n * Creates the state of the this canvas.\n */\nmxAbstractCanvas2D.prototype.createState = function()\n{\n\treturn {\n\t\tdx: 0,\n\t\tdy: 0,\n\t\tscale: 1,\n\t\talpha: 1,\n\t\tfillAlpha: 1,\n\t\tstrokeAlpha: 1,\n\t\tfillColor: null,\n\t\tgradientFillAlpha: 1,\n\t\tgradientColor: null,\n\t\tgradientAlpha: 1,\n\t\tgradientDirection: null,\n\t\tstrokeColor: null,\n\t\tstrokeWidth: 1,\n\t\tdashed: false,\n\t\tdashPattern: '3 3',\n\t\tfixDash: false,\n\t\tlineCap: 'flat',\n\t\tlineJoin: 'miter',\n\t\tmiterLimit: 10,\n\t\tfontColor: '#000000',\n\t\tfontBackgroundColor: null,\n\t\tfontBorderColor: null,\n\t\tfontSize: mxConstants.DEFAULT_FONTSIZE,\n\t\tfontFamily: mxConstants.DEFAULT_FONTFAMILY,\n\t\tfontStyle: 0,\n\t\tshadow: false,\n\t\tshadowColor: mxConstants.SHADOWCOLOR,\n\t\tshadowAlpha: mxConstants.SHADOW_OPACITY,\n\t\tshadowDx: mxConstants.SHADOW_OFFSET_X,\n\t\tshadowDy: mxConstants.SHADOW_OFFSET_Y,\n\t\trotation: 0,\n\t\trotationCx: 0,\n\t\trotationCy: 0\n\t};\n};\n\n/**\n * Function: format\n * \n * Rounds all numbers to integers.\n */\nmxAbstractCanvas2D.prototype.format = function(value)\n{\n\treturn Math.round(parseFloat(value));\n};\n\n/**\n * Function: addOp\n * \n * Adds the given operation to the path.\n */\nmxAbstractCanvas2D.prototype.addOp = function()\n{\n\tif (this.path != null)\n\t{\n\t\tthis.path.push(arguments[0]);\n\t\t\n\t\tif (arguments.length > 2)\n\t\t{\n\t\t\tvar s = this.state;\n\n\t\t\tfor (var i = 2; i < arguments.length; i += 2)\n\t\t\t{\n\t\t\t\tthis.lastX = arguments[i - 1];\n\t\t\t\tthis.lastY = arguments[i];\n\t\t\t\t\n\t\t\t\tthis.path.push(this.format((this.lastX + s.dx) * s.scale));\n\t\t\t\tthis.path.push(this.format((this.lastY + s.dy) * s.scale));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: rotatePoint\n * \n * Rotates the given point and returns the result as an <mxPoint>.\n */\nmxAbstractCanvas2D.prototype.rotatePoint = function(x, y, theta, cx, cy)\n{\n\tvar rad = theta * (Math.PI / 180);\n\t\n\treturn mxUtils.getRotatedPoint(new mxPoint(x, y), Math.cos(rad),\n\t\tMath.sin(rad), new mxPoint(cx, cy));\n};\n\n/**\n * Function: save\n * \n * Saves the current state.\n */\nmxAbstractCanvas2D.prototype.save = function()\n{\n\tthis.states.push(this.state);\n\tthis.state = mxUtils.clone(this.state);\n};\n\n/**\n * Function: restore\n * \n * Restores the current state.\n */\nmxAbstractCanvas2D.prototype.restore = function()\n{\n\tif (this.states.length > 0)\n\t{\n\t\tthis.state = this.states.pop();\n\t}\n};\n\n/**\n * Function: setLink\n * \n * Sets the current link. Hook for subclassers.\n */\nmxAbstractCanvas2D.prototype.setLink = function(link)\n{\n\t// nop\n};\n\n/**\n * Function: scale\n * \n * Scales the current state.\n */\nmxAbstractCanvas2D.prototype.scale = function(value)\n{\n\tthis.state.scale *= value;\n\tthis.state.strokeWidth *= value;\n};\n\n/**\n * Function: translate\n * \n * Translates the current state.\n */\nmxAbstractCanvas2D.prototype.translate = function(dx, dy)\n{\n\tthis.state.dx += dx;\n\tthis.state.dy += dy;\n};\n\n/**\n * Function: rotate\n * \n * Rotates the current state.\n */\nmxAbstractCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\t// nop\n};\n\n/**\n * Function: setAlpha\n * \n * Sets the current alpha.\n */\nmxAbstractCanvas2D.prototype.setAlpha = function(value)\n{\n\tthis.state.alpha = value;\n};\n\n/**\n * Function: setFillAlpha\n * \n * Sets the current solid fill alpha.\n */\nmxAbstractCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tthis.state.fillAlpha = value;\n};\n\n/**\n * Function: setStrokeAlpha\n * \n * Sets the current stroke alpha.\n */\nmxAbstractCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tthis.state.strokeAlpha = value;\n};\n\n/**\n * Function: setFillColor\n * \n * Sets the current fill color.\n */\nmxAbstractCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fillColor = value;\n\tthis.state.gradientColor = null;\n};\n\n/**\n * Function: setGradient\n * \n * Sets the current gradient.\n */\nmxAbstractCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tvar s = this.state;\n\ts.fillColor = color1;\n\ts.gradientFillAlpha = (alpha1 != null) ? alpha1 : 1;\n\ts.gradientColor = color2;\n\ts.gradientAlpha = (alpha2 != null) ? alpha2 : 1;\n\ts.gradientDirection = direction;\n};\n\n/**\n * Function: setStrokeColor\n * \n * Sets the current stroke color.\n */\nmxAbstractCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.strokeColor = value;\n};\n\n/**\n * Function: setStrokeWidth\n * \n * Sets the current stroke width.\n */\nmxAbstractCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tthis.state.strokeWidth = value;\n};\n\n/**\n * Function: setDashed\n * \n * Enables or disables dashed lines.\n */\nmxAbstractCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tthis.state.dashed = value;\n\tthis.state.fixDash = fixDash;\n};\n\n/**\n * Function: setDashPattern\n * \n * Sets the current dash pattern.\n */\nmxAbstractCanvas2D.prototype.setDashPattern = function(value)\n{\n\tthis.state.dashPattern = value;\n};\n\n/**\n * Function: setLineCap\n * \n * Sets the current line cap.\n */\nmxAbstractCanvas2D.prototype.setLineCap = function(value)\n{\n\tthis.state.lineCap = value;\n};\n\n/**\n * Function: setLineJoin\n * \n * Sets the current line join.\n */\nmxAbstractCanvas2D.prototype.setLineJoin = function(value)\n{\n\tthis.state.lineJoin = value;\n};\n\n/**\n * Function: setMiterLimit\n * \n * Sets the current miter limit.\n */\nmxAbstractCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tthis.state.miterLimit = value;\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontColor = value;\n};\n\n/**\n * Function: setFontBackgroundColor\n * \n * Sets the current font background color.\n */\nmxAbstractCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontBackgroundColor = value;\n};\n\n/**\n * Function: setFontBorderColor\n * \n * Sets the current font border color.\n */\nmxAbstractCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontBorderColor = value;\n};\n\n/**\n * Function: setFontSize\n * \n * Sets the current font size.\n */\nmxAbstractCanvas2D.prototype.setFontSize = function(value)\n{\n\tthis.state.fontSize = parseFloat(value);\n};\n\n/**\n * Function: setFontFamily\n * \n * Sets the current font family.\n */\nmxAbstractCanvas2D.prototype.setFontFamily = function(value)\n{\n\tthis.state.fontFamily = value;\n};\n\n/**\n * Function: setFontStyle\n * \n * Sets the current font style.\n */\nmxAbstractCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (value == null)\n\t{\n\t\tvalue = 0;\n\t}\n\t\n\tthis.state.fontStyle = value;\n};\n\n/**\n * Function: setShadow\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadow = function(enabled)\n{\n\tthis.state.shadow = enabled;\n};\n\n/**\n * Function: setShadowColor\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.shadowColor = value;\n};\n\n/**\n * Function: setShadowAlpha\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tthis.state.shadowAlpha = value;\n};\n\n/**\n * Function: setShadowOffset\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tthis.state.shadowDx = dx;\n\tthis.state.shadowDy = dy;\n};\n\n/**\n * Function: begin\n * \n * Starts a new path.\n */\nmxAbstractCanvas2D.prototype.begin = function()\n{\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n\tthis.path = [];\n};\n\n/**\n * Function: moveTo\n * \n *  Moves the current path the given coordinates.\n */\nmxAbstractCanvas2D.prototype.moveTo = function(x, y)\n{\n\tthis.addOp(this.moveOp, x, y);\n};\n\n/**\n * Function: lineTo\n * \n * Draws a line to the given coordinates. Uses moveTo with the op argument.\n */\nmxAbstractCanvas2D.prototype.lineTo = function(x, y)\n{\n\tthis.addOp(this.lineOp, x, y);\n};\n\n/**\n * Function: quadTo\n * \n * Adds a quadratic curve to the current path.\n */\nmxAbstractCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tthis.addOp(this.quadOp, x1, y1, x2, y2);\n};\n\n/**\n * Function: curveTo\n * \n * Adds a bezier curve to the current path.\n */\nmxAbstractCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tthis.addOp(this.curveOp, x1, y1, x2, y2, x3, y3);\n};\n\n/**\n * Function: arcTo\n * \n * Adds the given arc to the current path. This is a synthetic operation that\n * is broken down into curves.\n */\nmxAbstractCanvas2D.prototype.arcTo = function(rx, ry, angle, largeArcFlag, sweepFlag, x, y)\n{\n\tvar curves = mxUtils.arcToCurves(this.lastX, this.lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y);\n\t\n\tif (curves != null)\n\t{\n\t\tfor (var i = 0; i < curves.length; i += 6) \n\t\t{\n\t\t\tthis.curveTo(curves[i], curves[i + 1], curves[i + 2],\n\t\t\t\tcurves[i + 3], curves[i + 4], curves[i + 5]);\n\t\t}\n\t}\n};\n\n/**\n * Function: close\n * \n * Closes the current path.\n */\nmxAbstractCanvas2D.prototype.close = function(x1, y1, x2, y2, x3, y3)\n{\n\tthis.addOp(this.closeOp);\n};\n\n/**\n * Function: end\n * \n * Empty implementation for backwards compatibility. This will be removed.\n */\nmxAbstractCanvas2D.prototype.end = function() { };\n\n__mxOutput.mxAbstractCanvas2D = typeof mxAbstractCanvas2D !== 'undefined' ? mxAbstractCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxXmlCanvas2D\n *\n * Base class for all canvases. The following methods make up the public\n * interface of the canvas 2D for all painting in mxGraph:\n * \n * - <save>, <restore>\n * - <scale>, <translate>, <rotate>\n * - <setAlpha>, <setFillAlpha>, <setStrokeAlpha>, <setFillColor>, <setGradient>,\n *   <setStrokeColor>, <setStrokeWidth>, <setDashed>, <setDashPattern>, <setLineCap>, \n *   <setLineJoin>, <setMiterLimit>\n * - <setFontColor>, <setFontBackgroundColor>, <setFontBorderColor>, <setFontSize>,\n *   <setFontFamily>, <setFontStyle>\n * - <setShadow>, <setShadowColor>, <setShadowAlpha>, <setShadowOffset>\n * - <rect>, <roundrect>, <ellipse>, <image>, <text>\n * - <begin>, <moveTo>, <lineTo>, <quadTo>, <curveTo>\n * - <stroke>, <fill>, <fillAndStroke>\n * \n * <mxAbstractCanvas2D.arcTo> is an additional method for drawing paths. This is\n * a synthetic method, meaning that it is turned into a sequence of curves by\n * default. Subclassers may add native support for arcs.\n * \n * Constructor: mxXmlCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxXmlCanvas2D(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t// Writes default settings;\n\tthis.writeDefaults();\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxXmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabled. Default is true.\n */\nmxXmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: compressed\n * \n * Specifies if the output should be compressed by removing redundant calls.\n * Default is true.\n */\nmxXmlCanvas2D.prototype.compressed = true;\n\n/**\n * Function: writeDefaults\n * \n * Writes the rendering defaults to <root>:\n */\nmxXmlCanvas2D.prototype.writeDefaults = function()\n{\n\tvar elem;\n\t\n\t// Writes font defaults\n\telem = this.createElement('fontfamily');\n\telem.setAttribute('family', mxConstants.DEFAULT_FONTFAMILY);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('fontsize');\n\telem.setAttribute('size', mxConstants.DEFAULT_FONTSIZE);\n\tthis.root.appendChild(elem);\n\t\n\t// Writes shadow defaults\n\telem = this.createElement('shadowcolor');\n\telem.setAttribute('color', mxConstants.SHADOWCOLOR);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', mxConstants.SHADOW_OPACITY);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', mxConstants.SHADOW_OFFSET_X);\n\telem.setAttribute('dy', mxConstants.SHADOW_OFFSET_Y);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: format\n * \n * Returns a formatted number with 2 decimal places.\n */\nmxXmlCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: createElement\n * \n * Creates the given element using the owner document of <root>.\n */\nmxXmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn this.root.ownerDocument.createElement(name);\n};\n\n/**\n * Function: save\n * \n * Saves the drawing state.\n */\nmxXmlCanvas2D.prototype.save = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.save.apply(this, arguments);\n\t}\n\t\n\tthis.root.appendChild(this.createElement('save'));\n};\n\n/**\n * Function: restore\n * \n * Restores the drawing state.\n */\nmxXmlCanvas2D.prototype.restore = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.restore.apply(this, arguments);\n\t}\n\t\n\tthis.root.appendChild(this.createElement('restore'));\n};\n\n/**\n * Function: scale\n * \n * Scales the output.\n * \n * Parameters:\n * \n * scale - Number that represents the scale where 1 is equal to 100%.\n */\nmxXmlCanvas2D.prototype.scale = function(value)\n{\n        var elem = this.createElement('scale');\n        elem.setAttribute('scale', value);\n        this.root.appendChild(elem);\n};\n\n/**\n * Function: translate\n * \n * Translates the output.\n * \n * Parameters:\n * \n * dx - Number that specifies the horizontal translation.\n * dy - Number that specifies the vertical translation.\n */\nmxXmlCanvas2D.prototype.translate = function(dx, dy)\n{\n\tvar elem = this.createElement('translate');\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: rotate\n * \n * Rotates and/or flips the output around a given center. (Note: Due to\n * limitations in VML, the rotation cannot be concatenated.)\n * \n * Parameters:\n * \n * theta - Number that represents the angle of the rotation (in degrees).\n * flipH - Boolean indicating if the output should be flipped horizontally.\n * flipV - Boolean indicating if the output should be flipped vertically.\n * cx - Number that represents the x-coordinate of the rotation center.\n * cy - Number that represents the y-coordinate of the rotation center.\n */\nmxXmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tvar elem = this.createElement('rotate');\n\t\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\telem.setAttribute('theta', this.format(theta));\n\t\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\t\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\t\telem.setAttribute('cx', this.format(cx));\n\t\telem.setAttribute('cy', this.format(cy));\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setAlpha\n * \n * Sets the current alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.alpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('alpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillAlpha\n * \n * Sets the current fill alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new fill alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setFillAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('fillalpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeAlpha\n * \n * Sets the current stroke alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new stroke alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokealpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillColor\n * \n * Sets the current fill color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setFillColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('fillcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setGradient\n * \n * Sets the gradient. Note that the coordinates may be ignored by some implementations.\n * \n * Parameters:\n * \n * color1 - Hexadecimal representation of the start color.\n * color2 - Hexadecimal representation of the end color.\n * x - X-coordinate of the gradient region.\n * y - y-coordinate of the gradient region.\n * w - Width of the gradient region.\n * h - Height of the gradient region.\n * direction - One of <mxConstants.DIRECTION_NORTH>, <mxConstants.DIRECTION_EAST>,\n * <mxConstants.DIRECTION_SOUTH> or <mxConstants.DIRECTION_WEST>.\n * alpha1 - Optional alpha of the start color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n * alpha2 - Optional alpha of the end color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tif (color1 != null && color2 != null)\n\t{\n\t\tmxAbstractCanvas2D.prototype.setGradient.apply(this, arguments);\n\t\t\n\t\tvar elem = this.createElement('gradient');\n\t\telem.setAttribute('c1', color1);\n\t\telem.setAttribute('c2', color2);\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\t\n\t\t// Default direction is south\n\t\tif (direction != null)\n\t\t{\n\t\t\telem.setAttribute('direction', direction);\n\t\t}\n\t\t\n\t\tif (alpha1 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha1', alpha1);\n\t\t}\n\t\t\n\t\tif (alpha2 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha2', alpha2);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setStrokeColor\n * \n * Sets the current stroke color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokecolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeWidth\n * \n * Sets the current stroke width.\n * \n * Parameters:\n * \n * value - Numeric representation of the stroke width.\n */\nmxXmlCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeWidth == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeWidth.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokewidth');\n\telem.setAttribute('width', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashed\n * \n * Enables or disables dashed lines.\n * \n * Parameters:\n * \n * value - Boolean that specifies if dashed lines should be enabled.\n * value - Boolean that specifies if the stroke width should be ignored\n * for the dash pattern. Default is false.\n */\nmxXmlCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashed == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setDashed.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('dashed');\n\telem.setAttribute('dashed', (value) ? '1' : '0');\n\t\n\tif (fixDash != null)\n\t{\n\t\telem.setAttribute('fixDash', (fixDash) ? '1' : '0');\n\t}\n\t\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashPattern\n * \n * Sets the current dash pattern. Default is '3 3'.\n * \n * Parameters:\n * \n * value - String that represents the dash pattern, which is a sequence of\n * numbers defining the length of the dashes and the length of the spaces\n * between the dashes. The lengths are relative to the line width - a length\n * of 1 is equals to the line width.\n */\nmxXmlCanvas2D.prototype.setDashPattern = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashPattern == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setDashPattern.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('dashpattern');\n\telem.setAttribute('pattern', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineCap\n * \n * Sets the line cap. Default is 'flat' which corresponds to 'butt' in SVG.\n * \n * Parameters:\n * \n * value - String that represents the line cap. Possible values are flat, round\n * and square.\n */\nmxXmlCanvas2D.prototype.setLineCap = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineCap == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setLineCap.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('linecap');\n\telem.setAttribute('cap', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineJoin\n * \n * Sets the line join. Default is 'miter'.\n * \n * Parameters:\n * \n * value - String that represents the line join. Possible values are miter,\n * round and bevel.\n */\nmxXmlCanvas2D.prototype.setLineJoin = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineJoin == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setLineJoin.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('linejoin');\n\telem.setAttribute('join', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setMiterLimit\n * \n * Sets the miter limit. Default is 10.\n * \n * Parameters:\n * \n * value - Number that represents the miter limit.\n */\nmxXmlCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.miterLimit == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setMiterLimit.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('miterlimit');\n\telem.setAttribute('limit', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color. Default is '#000000'.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontColor.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBackgroundColor\n * \n * Sets the current font background color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBackgroundColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontBackgroundColor.apply(this, arguments);\n\t\t}\n\n\t\tvar elem = this.createElement('fontbackgroundcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBorderColor\n * \n * Sets the current font border color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBorderColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontBorderColor.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontbordercolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontSize\n * \n * Sets the current font size. Default is <mxConstants.DEFAULT_FONTSIZE>.\n * \n * Parameters:\n * \n * value - Numeric representation of the font size.\n */\nmxXmlCanvas2D.prototype.setFontSize = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontSize == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontSize.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontsize');\n\t\telem.setAttribute('size', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontFamily\n * \n * Sets the current font family. Default is <mxConstants.DEFAULT_FONTFAMILY>.\n * \n * Parameters:\n * \n * value - String representation of the font family. This handles the same\n * values as the CSS font-family property.\n */\nmxXmlCanvas2D.prototype.setFontFamily = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontFamily == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontFamily.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontfamily');\n\t\telem.setAttribute('family', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontStyle\n * \n * Sets the current font style.\n * \n * Parameters:\n * \n * value - Numeric representation of the font family. This is the sum of the\n * font styles from <mxConstants>.\n */\nmxXmlCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontStyle == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontStyle.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontstyle');\n\t\telem.setAttribute('style', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setShadow\n * \n * Enables or disables shadows.\n * \n * Parameters:\n * \n * value - Boolean that specifies if shadows should be enabled.\n */\nmxXmlCanvas2D.prototype.setShadow = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadow == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadow.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadow');\n\telem.setAttribute('enabled', (value) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowColor\n * \n * Sets the current shadow color. Default is <mxConstants.SHADOWCOLOR>.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.state.shadowColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowAlpha\n * \n * Sets the current shadows alpha. Default is <mxConstants.SHADOW_OPACITY>.\n * \n * Parameters:\n * \n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', value);\n\tthis.root.appendChild(elem);\n\t\n};\n\n/**\n * Function: setShadowOffset\n * \n * Sets the current shadow offset.\n * \n * Parameters:\n * \n * dx - Number that represents the horizontal offset of the shadow.\n * dy - Number that represents the vertical offset of the shadow.\n */\nmxXmlCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowDx == dx && this.state.shadowDy == dy)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowOffset.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', dx);\n\telem.setAttribute('dy', dy);\n\tthis.root.appendChild(elem);\n\t\n};\n\n/**\n * Function: rect\n * \n * Puts a rectangle into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n */\nmxXmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar elem = this.createElement('rect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: roundrect\n * \n * Puts a rounded rectangle into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n * dx - Number that represents the horizontal rounding.\n * dy - Number that represents the vertical rounding.\n */\nmxXmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tvar elem = this.createElement('roundrect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: ellipse\n * \n * Puts an ellipse into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the ellipse.\n * y - Number that represents the y-coordinate of the ellipse.\n * w - Number that represents the width of the ellipse.\n * h - Number that represents the height of the ellipse.\n */\nmxXmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar elem = this.createElement('ellipse');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: image\n * \n * Paints an image.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the image.\n * y - Number that represents the y-coordinate of the image.\n * w - Number that represents the width of the image.\n * h - Number that represents the height of the image.\n * src - String that specifies the URL of the image.\n * aspect - Boolean indicating if the aspect of the image should be preserved.\n * flipH - Boolean indicating if the image should be flipped horizontally.\n * flipV - Boolean indicating if the image should be flipped vertically.\n */\nmxXmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\t\n\t// LATER: Add option for embedding images as base64.\n\tvar elem = this.createElement('image');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('src', src);\n\telem.setAttribute('aspect', (aspect) ? '1' : '0');\n\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: begin\n * \n * Starts a new path and puts it into the drawing buffer.\n */\nmxXmlCanvas2D.prototype.begin = function()\n{\n\tthis.root.appendChild(this.createElement('begin'));\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n};\n\n/**\n * Function: moveTo\n * \n * Moves the current path the given point.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the point.\n * y - Number that represents the y-coordinate of the point.\n */\nmxXmlCanvas2D.prototype.moveTo = function(x, y)\n{\n\tvar elem = this.createElement('move');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: lineTo\n * \n * Draws a line to the given coordinates.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the endpoint.\n * y - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.lineTo = function(x, y)\n{\n\tvar elem = this.createElement('line');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: quadTo\n * \n * Adds a quadratic curve to the current path.\n * \n * Parameters:\n * \n * x1 - Number that represents the x-coordinate of the control point.\n * y1 - Number that represents the y-coordinate of the control point.\n * x2 - Number that represents the x-coordinate of the endpoint.\n * y2 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar elem = this.createElement('quad');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x2;\n\tthis.lastY = y2;\n};\n\n/**\n * Function: curveTo\n * \n * Adds a bezier curve to the current path.\n * \n * Parameters:\n * \n * x1 - Number that represents the x-coordinate of the first control point.\n * y1 - Number that represents the y-coordinate of the first control point.\n * x2 - Number that represents the x-coordinate of the second control point.\n * y2 - Number that represents the y-coordinate of the second control point.\n * x3 - Number that represents the x-coordinate of the endpoint.\n * y3 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tvar elem = this.createElement('curve');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\telem.setAttribute('x3', this.format(x3));\n\telem.setAttribute('y3', this.format(y3));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x3;\n\tthis.lastY = y3;\n};\n\n/**\n * Function: close\n * \n * Closes the current path.\n */\nmxXmlCanvas2D.prototype.close = function()\n{\n\tthis.root.appendChild(this.createElement('close'));\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup. Background and border color as well\n * as clipping is not available in plain text labels for VML. HTML labels\n * are not available as part of shapes with no foreignObject support in SVG\n * (eg. IE9, IE10).\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the text.\n * y - Number that represents the y-coordinate of the text.\n * w - Number that represents the available width for the text or 0 for automatic width.\n * h - Number that represents the available height for the text or 0 for automatic height.\n * str - String that specifies the text to be painted.\n * align - String that represents the horizontal alignment.\n * valign - String that represents the vertical alignment.\n * wrap - Boolean that specifies if word-wrapping is enabled. Requires w > 0.\n * format - Empty string for plain text or 'html' for HTML markup.\n * overflow - Specifies the overflow behaviour of the label. Requires w > 0 and/or h > 0.\n * clip - Boolean that specifies if the label should be clipped. Requires w > 0 and/or h > 0.\n * rotation - Number that specifies the angle of the rotation around the anchor point of the text.\n * dir - Optional string that specifies the text direction. Possible values are rtl and lrt.\n */\nmxXmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tif (mxUtils.isNode(str))\n\t\t{\n\t\t\tstr = mxUtils.getOuterHtml(str);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('text');\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\telem.setAttribute('str', str);\n\t\t\n\t\tif (align != null)\n\t\t{\n\t\t\telem.setAttribute('align', align);\n\t\t}\n\t\t\n\t\tif (valign != null)\n\t\t{\n\t\t\telem.setAttribute('valign', valign);\n\t\t}\n\t\t\n\t\telem.setAttribute('wrap', (wrap) ? '1' : '0');\n\t\t\n\t\tif (format == null)\n\t\t{\n\t\t\tformat = '';\n\t\t}\n\t\t\n\t\telem.setAttribute('format', format);\n\t\t\n\t\tif (overflow != null)\n\t\t{\n\t\t\telem.setAttribute('overflow', overflow);\n\t\t}\n\t\t\n\t\tif (clip != null)\n\t\t{\n\t\t\telem.setAttribute('clip', (clip) ? '1' : '0');\n\t\t}\n\t\t\n\t\tif (rotation != null)\n\t\t{\n\t\t\telem.setAttribute('rotation', rotation);\n\t\t}\n\t\t\n\t\tif (dir != null)\n\t\t{\n\t\t\telem.setAttribute('dir', dir);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.stroke = function()\n{\n\tthis.root.appendChild(this.createElement('stroke'));\n};\n\n/**\n * Function: fill\n * \n * Fills the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.fill = function()\n{\n\tthis.root.appendChild(this.createElement('fill'));\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills the current drawing buffer and its outline.\n */\nmxXmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.root.appendChild(this.createElement('fillstroke'));\n};\n\n__mxOutput.mxXmlCanvas2D = typeof mxXmlCanvas2D !== 'undefined' ? mxXmlCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSvgCanvas2D\n *\n * Extends <mxAbstractCanvas2D> to implement a canvas for SVG. This canvas writes all\n * calls as SVG output to the given SVG root node.\n * \n * (code)\n * var svgDoc = mxUtils.createXmlDocument();\n * var root = (svgDoc.createElementNS != null) ?\n * \t\tsvgDoc.createElementNS(mxConstants.NS_SVG, 'svg') : svgDoc.createElement('svg');\n * \n * if (svgDoc.createElementNS == null)\n * {\n *   root.setAttribute('xmlns', mxConstants.NS_SVG);\n *   root.setAttribute('xmlns:xlink', mxConstants.NS_XLINK);\n * }\n * else\n * {\n *   root.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xlink', mxConstants.NS_XLINK);\n * }\n * \n * var bounds = graph.getGraphBounds();\n * root.setAttribute('width', (bounds.x + bounds.width + 4) + 'px');\n * root.setAttribute('height', (bounds.y + bounds.height + 4) + 'px');\n * root.setAttribute('version', '1.1');\n * \n * svgDoc.appendChild(root);\n * \n * var svgCanvas = new mxSvgCanvas2D(root);\n * (end)\n * \n * A description of the public API is available in <mxXmlCanvas2D>.\n * \n * To disable anti-aliasing in the output, use the following code.\n * \n * (code)\n * graph.view.canvas.ownerSVGElement.setAttribute('shape-rendering', 'crispEdges');\n * (end)\n * \n * Or set the respective attribute in the SVG element directly.\n * \n * Constructor: mxSvgCanvas2D\n *\n * Constructs a new SVG canvas.\n * \n * Parameters:\n * \n * root - SVG container for the output.\n * styleEnabled - Optional boolean that specifies if a style section should be\n * added. The style section sets the default font-size, font-family and\n * stroke-miterlimit globally. Default is false.\n */\nfunction mxSvgCanvas2D(root, styleEnabled)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t/**\n\t * Variable: gradients\n\t * \n\t * Local cache of gradients for quick lookups.\n\t */\n\tthis.gradients = [];\n\n\t/**\n\t * Variable: defs\n\t * \n\t * Reference to the defs section of the SVG document. Only for export.\n\t */\n\tthis.defs = null;\n\t\n\t/**\n\t * Variable: styleEnabled\n\t * \n\t * Stores the value of styleEnabled passed to the constructor.\n\t */\n\tthis.styleEnabled = (styleEnabled != null) ? styleEnabled : false;\n\t\n\tvar svg = null;\n\t\n\t// Adds optional defs section for export\n\tif (root.ownerDocument != document)\n\t{\n\t\tvar node = root;\n\n\t\t// Finds owner SVG element in XML DOM\n\t\twhile (node != null && node.nodeName != 'svg')\n\t\t{\n\t\t\tnode = node.parentNode;\n\t\t}\n\t\t\n\t\tsvg = node;\n\t}\n\n\tif (svg != null)\n\t{\n\t\t// Tries to get existing defs section\n\t\tvar tmp = svg.getElementsByTagName('defs');\n\t\t\n\t\tif (tmp.length > 0)\n\t\t{\n\t\t\tthis.defs = svg.getElementsByTagName('defs')[0];\n\t\t}\n\t\t\n\t\t// Adds defs section if none exists\n\t\tif (this.defs == null)\n\t\t{\n\t\t\tthis.defs = this.createElement('defs');\n\t\t\t\n\t\t\tif (svg.firstChild != null)\n\t\t\t{\n\t\t\t\tsvg.insertBefore(this.defs, svg.firstChild);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsvg.appendChild(this.defs);\n\t\t\t}\n\t\t}\n\n\t\t// Adds stylesheet\n\t\tif (this.styleEnabled)\n\t\t{\n\t\t\tthis.defs.appendChild(this.createStyle());\n\t\t}\n\t}\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxSvgCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Capability check for DOM parser and checks if base tag is used.\n */\n(function()\n{\n\tmxSvgCanvas2D.prototype.useDomParser = !mxClient.IS_IE && typeof DOMParser === 'function' && typeof XMLSerializer === 'function';\n\t\n\tif (mxSvgCanvas2D.prototype.useDomParser)\n\t{\n\t\t// Checks using a generic test text if the parsing actually works. This is a workaround\n\t\t// for older browsers where the capability check returns true but the parsing fails.\n\t\ttry\n\t\t{\n\t\t\tvar doc = new DOMParser().parseFromString('test text', 'text/html');\n\t\t\tmxSvgCanvas2D.prototype.useDomParser = doc != null;\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxSvgCanvas2D.prototype.useDomParser = false;\n\t\t}\n\t}\n\t\n\t// Activates workaround for gradient ID resolution if base tag is used.\n\tmxSvgCanvas2D.prototype.useAbsoluteIds = !mxClient.IS_CHROMEAPP && !mxClient.IS_IE && !mxClient.IS_IE11 &&\n\t\t!mxClient.IS_EDGE && document.getElementsByTagName('base').length > 0;\n})();\n\n/**\n * Variable: path\n * \n * Holds the current DOM node.\n */\nmxSvgCanvas2D.prototype.node = null;\n\n/**\n * Variable: matchHtmlAlignment\n * \n * Specifies if plain text output should match the vertical HTML alignment.\n * Defaul is true.\n */\nmxSvgCanvas2D.prototype.matchHtmlAlignment = true;\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabled. Default is true.\n */\nmxSvgCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: foEnabled\n * \n * Specifies if use of foreignObject for HTML markup is allowed. Default is true.\n */\nmxSvgCanvas2D.prototype.foEnabled = true;\n\n/**\n * Variable: foAltText\n * \n * Specifies the fallback text for unsupported foreignObjects in exported\n * documents. Default is '[Object]'. If this is set to null then no fallback\n * text is added to the exported document.\n */\nmxSvgCanvas2D.prototype.foAltText = '[Object]';\n\n/**\n * Variable: foOffset\n * \n * Offset to be used for foreignObjects.\n */\nmxSvgCanvas2D.prototype.foOffset = 0;\n\n/**\n * Variable: textOffset\n * \n * Offset to be used for text elements.\n */\nmxSvgCanvas2D.prototype.textOffset = 0;\n\n/**\n * Variable: imageOffset\n * \n * Offset to be used for image elements.\n */\nmxSvgCanvas2D.prototype.imageOffset = 0;\n\n/**\n * Variable: strokeTolerance\n * \n * Adds transparent paths for strokes.\n */\nmxSvgCanvas2D.prototype.strokeTolerance = 0;\n\n/**\n * Variable: minStrokeWidth\n * \n * Minimum stroke width for output.\n */\nmxSvgCanvas2D.prototype.minStrokeWidth = 1;\n\n/**\n * Variable: refCount\n * \n * Local counter for references in SVG export.\n */\nmxSvgCanvas2D.prototype.refCount = 0;\n\n/**\n * Variable: lineHeightCorrection\n * \n * Correction factor for <mxConstants.LINE_HEIGHT> in HTML output. Default is 1.\n */\nmxSvgCanvas2D.prototype.lineHeightCorrection = 1;\n\n/**\n * Variable: pointerEventsValue\n * \n * Default value for active pointer events. Default is all.\n */\nmxSvgCanvas2D.prototype.pointerEventsValue = 'all';\n\n/**\n * Variable: fontMetricsPadding\n * \n * Padding to be added for text that is not wrapped to account for differences\n * in font metrics on different platforms in pixels. Default is 10.\n */\nmxSvgCanvas2D.prototype.fontMetricsPadding = 10;\n\n/**\n * Variable: cacheOffsetSize\n * \n * Specifies if offsetWidth and offsetHeight should be cached. Default is true.\n * This is used to speed up repaint of text in <updateText>.\n */\nmxSvgCanvas2D.prototype.cacheOffsetSize = true;\n\n/**\n * Function: format\n * \n * Rounds all numbers to 2 decimal points.\n */\nmxSvgCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: getBaseUrl\n * \n * Returns the URL of the page without the hash part. This needs to use href to\n * include any search part with no params (ie question mark alone). This is a\n * workaround for the fact that window.location.search is empty if there is\n * no search string behind the question mark.\n */\nmxSvgCanvas2D.prototype.getBaseUrl = function()\n{\n\tvar href = window.location.href;\n\tvar hash = href.lastIndexOf('#');\n\t\n\tif (hash > 0)\n\t{\n\t\thref = href.substring(0, hash);\n\t}\n\t\n\treturn href;\n};\n\n/**\n * Function: reset\n * \n * Returns any offsets for rendering pixels.\n */\nmxSvgCanvas2D.prototype.reset = function()\n{\n\tmxAbstractCanvas2D.prototype.reset.apply(this, arguments);\n\tthis.gradients = [];\n};\n\n/**\n * Function: createStyle\n * \n * Creates the optional style section.\n */\nmxSvgCanvas2D.prototype.createStyle = function(x)\n{\n\tvar style = this.createElement('style');\n\tstyle.setAttribute('type', 'text/css');\n\tmxUtils.write(style, 'svg{font-family:' + mxConstants.DEFAULT_FONTFAMILY +\n\t\t\t';font-size:' + mxConstants.DEFAULT_FONTSIZE +\n\t\t\t';fill:none;stroke-miterlimit:10}');\n\t\n\treturn style;\n};\n\n/**\n * Function: createElement\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createElement = function(tagName, namespace)\n{\n\tif (this.root.ownerDocument.createElementNS != null)\n\t{\n\t\treturn this.root.ownerDocument.createElementNS(namespace || mxConstants.NS_SVG, tagName);\n\t}\n\telse\n\t{\n\t\tvar elt = this.root.ownerDocument.createElement(tagName);\n\t\t\n\t\tif (namespace != null)\n\t\t{\n\t\t\telt.setAttribute('xmlns', namespace);\n\t\t}\n\t\t\n\t\treturn elt;\n\t}\n};\n\n/**\n * Function: getAlternateText\n * \n * Returns the alternate text string for the given foreignObject.\n */\nmxSvgCanvas2D.prototype.getAlternateText = function(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation)\n{\n\treturn (str != null) ? this.foAltText : null;\n};\n\n/**\n * Function: getAlternateContent\n * \n * Returns the alternate content for the given foreignObject.\n */\nmxSvgCanvas2D.prototype.createAlternateContent = function(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation)\n{\n\tvar text = this.getAlternateText(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation);\n\tvar s = this.state;\n\n\tif (text != null && s.fontSize > 0)\n\t{\n\t\tvar dy = (valign == mxConstants.ALIGN_TOP) ? 1 :\n\t\t\t(valign == mxConstants.ALIGN_BOTTOM) ? 0 : 0.3;\n\t\tvar anchor = (align == mxConstants.ALIGN_RIGHT) ? 'end' :\n\t\t\t(align == mxConstants.ALIGN_LEFT) ? 'start' :\n\t\t\t'middle';\n\t\n\t\tvar alt = this.createElement('text');\n\t\talt.setAttribute('x', Math.round(x + s.dx));\n\t\talt.setAttribute('y', Math.round(y + s.dy + dy * s.fontSize));\n\t\talt.setAttribute('fill', s.fontColor || 'black');\n\t\talt.setAttribute('font-family', s.fontFamily);\n\t\talt.setAttribute('font-size', Math.round(s.fontSize) + 'px');\n\n\t\t// Text-anchor start is default in SVG\n\t\tif (anchor != 'start')\n\t\t{\n\t\t\talt.setAttribute('text-anchor', anchor);\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t{\n\t\t\talt.setAttribute('font-weight', 'bold');\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t{\n\t\t\talt.setAttribute('font-style', 'italic');\n\t\t}\n\t\t\n\t\tvar txtDecor = [];\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t{\n\t\t\ttxtDecor.push('underline');\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t\t{\n\t\t\ttxtDecor.push('line-through');\n\t\t}\n\t\t\n\t\tif (txtDecor.length > 0)\n\t\t{\n\t\t\talt.setAttribute('text-decoration', txtDecor.join(' '));\n\t\t}\n\t\t\n\t\tmxUtils.write(alt, text);\n\t\t\n\t\treturn alt;\n\t}\n\telse\n\t{\n\t\treturn null;\n\t}\n};\n\n/**\n * Function: createGradientId\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createGradientId = function(start, end, alpha1, alpha2, direction)\n{\n\t// Removes illegal characters from gradient ID\n\tif (start.charAt(0) == '#')\n\t{\n\t\tstart = start.substring(1);\n\t}\n\t\n\tif (end.charAt(0) == '#')\n\t{\n\t\tend = end.substring(1);\n\t}\n\t\n\t// Workaround for gradient IDs not working in Safari 5 / Chrome 6\n\t// if they contain uppercase characters\n\tstart = start.toLowerCase() + '-' + alpha1;\n\tend = end.toLowerCase() + '-' + alpha2;\n\n\t// Wrong gradient directions possible?\n\tvar dir = null;\n\t\n\tif (direction == null || direction == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tdir = 's';\n\t}\n\telse if (direction == mxConstants.DIRECTION_EAST)\n\t{\n\t\tdir = 'e';\n\t}\n\telse\n\t{\n\t\tvar tmp = start;\n\t\tstart = end;\n\t\tend = tmp;\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tdir = 's';\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tdir = 'e';\n\t\t}\n\t}\n\t\n\treturn 'mx-gradient-' + start + '-' + end + '-' + dir;\n};\n\n/**\n * Function: getSvgGradient\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.getSvgGradient = function(start, end, alpha1, alpha2, direction)\n{\n\tvar id = this.createGradientId(start, end, alpha1, alpha2, direction);\n\tvar gradient = this.gradients[id];\n\t\n\tif (gradient == null)\n\t{\n\t\tvar svg = this.root.ownerSVGElement;\n\n\t\tvar counter = 0;\n\t\tvar tmpId = id + '-' + counter;\n\n\t\tif (svg != null)\n\t\t{\n\t\t\tgradient = svg.ownerDocument.getElementById(tmpId);\n\t\t\t\n\t\t\twhile (gradient != null && gradient.ownerSVGElement != svg)\n\t\t\t{\n\t\t\t\ttmpId = id + '-' + counter++;\n\t\t\t\tgradient = svg.ownerDocument.getElementById(tmpId);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Uses shorter IDs for export\n\t\t\ttmpId = 'id' + (++this.refCount);\n\t\t}\n\t\t\n\t\tif (gradient == null)\n\t\t{\n\t\t\tgradient = this.createSvgGradient(start, end, alpha1, alpha2, direction);\n\t\t\tgradient.setAttribute('id', tmpId);\n\t\t\t\n\t\t\tif (this.defs != null)\n\t\t\t{\n\t\t\t\tthis.defs.appendChild(gradient);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsvg.appendChild(gradient);\n\t\t\t}\n\t\t}\n\n\t\tthis.gradients[id] = gradient;\n\t}\n\n\treturn gradient.getAttribute('id');\n};\n\n/**\n * Function: createSvgGradient\n * \n * Creates the given SVG gradient.\n */\nmxSvgCanvas2D.prototype.createSvgGradient = function(start, end, alpha1, alpha2, direction)\n{\n\tvar gradient = this.createElement('linearGradient');\n\tgradient.setAttribute('x1', '0%');\n\tgradient.setAttribute('y1', '0%');\n\tgradient.setAttribute('x2', '0%');\n\tgradient.setAttribute('y2', '0%');\n\t\n\tif (direction == null || direction == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tgradient.setAttribute('y2', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_EAST)\n\t{\n\t\tgradient.setAttribute('x2', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_NORTH)\n\t{\n\t\tgradient.setAttribute('y1', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_WEST)\n\t{\n\t\tgradient.setAttribute('x1', '100%');\n\t}\n\t\n\tvar op = (alpha1 < 1) ? ';stop-opacity:' + alpha1 : '';\n\t\n\tvar stop = this.createElement('stop');\n\tstop.setAttribute('offset', '0%');\n\tstop.setAttribute('style', 'stop-color:' + start + op);\n\tgradient.appendChild(stop);\n\t\n\top = (alpha2 < 1) ? ';stop-opacity:' + alpha2 : '';\n\t\n\tstop = this.createElement('stop');\n\tstop.setAttribute('offset', '100%');\n\tstop.setAttribute('style', 'stop-color:' + end + op);\n\tgradient.appendChild(stop);\n\t\n\treturn gradient;\n};\n\n/**\n * Function: addNode\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.addNode = function(filled, stroked)\n{\n\tvar node = this.node;\n\tvar s = this.state;\n\n\tif (node != null)\n\t{\n\t\tif (node.nodeName == 'path')\n\t\t{\n\t\t\t// Checks if the path is not empty\n\t\t\tif (this.path != null && this.path.length > 0)\n\t\t\t{\n\t\t\t\tnode.setAttribute('d', this.path.join(' '));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (filled && s.fillColor != null)\n\t\t{\n\t\t\tthis.updateFill();\n\t\t}\n\t\telse if (!this.styleEnabled)\n\t\t{\n\t\t\t// Workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=814952\n\t\t\tif (node.nodeName == 'ellipse' && mxClient.IS_FF)\n\t\t\t{\n\t\t\t\tnode.setAttribute('fill', 'transparent');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode.setAttribute('fill', 'none');\n\t\t\t}\n\t\t\t\n\t\t\t// Sets the actual filled state for stroke tolerance\n\t\t\tfilled = false;\n\t\t}\n\t\t\n\t\tif (stroked && s.strokeColor != null)\n\t\t{\n\t\t\tthis.updateStroke();\n\t\t}\n\t\telse if (!this.styleEnabled)\n\t\t{\n\t\t\tnode.setAttribute('stroke', 'none');\n\t\t}\n\t\t\n\t\tif (s.transform != null && s.transform.length > 0)\n\t\t{\n\t\t\tnode.setAttribute('transform', s.transform);\n\t\t}\n\t\t\n\t\tif (s.shadow)\n\t\t{\n\t\t\tthis.root.appendChild(this.createShadow(node));\n\t\t}\n\t\n\t\t// Adds stroke tolerance\n\t\tif (this.strokeTolerance > 0 && !filled)\n\t\t{\n\t\t\tthis.root.appendChild(this.createTolerance(node));\n\t\t}\n\n\t\t// Adds pointer events\n\t\tif (this.pointerEvents)\n\t\t{\n\t\t\tnode.setAttribute('pointer-events', this.pointerEventsValue);\n\t\t}\n\t\t// Enables clicks for nodes inside a link element\n\t\telse if (!this.pointerEvents && this.originalRoot == null)\n\t\t{\n\t\t\tnode.setAttribute('pointer-events', 'none');\n\t\t}\n\t\t\n\t\t// Removes invisible nodes from output if they don't handle events\n\t\tif ((node.nodeName != 'rect' && node.nodeName != 'path' && node.nodeName != 'ellipse') ||\n\t\t\t(node.getAttribute('fill') != 'none' && node.getAttribute('fill') != 'transparent') ||\n\t\t\tnode.getAttribute('stroke') != 'none' || node.getAttribute('pointer-events') != 'none')\n\t\t{\n\t\t\t// LATER: Update existing DOM for performance\t\t\n\t\t\tthis.root.appendChild(node);\n\t\t}\n\t\t\n\t\tthis.node = null;\n\t}\n};\n\n/**\n * Function: updateFill\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateFill = function()\n{\n\tvar s = this.state;\n\t\n\tif (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tthis.node.setAttribute('fill-opacity', s.alpha * s.fillAlpha);\n\t}\n\t\n\tif (s.fillColor != null)\n\t{\n\t\tif (s.gradientColor != null)\n\t\t{\n\t\t\tvar id = this.getSvgGradient(String(s.fillColor), String(s.gradientColor),\n\t\t\t\ts.gradientFillAlpha, s.gradientAlpha, s.gradientDirection);\n\t\t\t\n\t\t\tif (this.root.ownerDocument == document && this.useAbsoluteIds)\n\t\t\t{\n\t\t\t\t// Workaround for no fill with base tag in page (escape brackets)\n\t\t\t\tvar base = this.getBaseUrl().replace(/([\\(\\)])/g, '\\\\$1');\n\t\t\t\tthis.node.setAttribute('fill', 'url(' + base + '#' + id + ')');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.node.setAttribute('fill', 'url(#' + id + ')');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.node.setAttribute('fill', String(s.fillColor).toLowerCase());\n\t\t}\n\t}\n};\n\n/**\n * Function: getCurrentStrokeWidth\n * \n * Returns the current stroke width (>= 1), ie. max(1, this.format(this.state.strokeWidth * this.state.scale)).\n */\nmxSvgCanvas2D.prototype.getCurrentStrokeWidth = function()\n{\n\treturn Math.max(this.minStrokeWidth, Math.max(0.01, this.format(this.state.strokeWidth * this.state.scale)));\n};\n\n/**\n * Function: updateStroke\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateStroke = function()\n{\n\tvar s = this.state;\n\n\tthis.node.setAttribute('stroke', String(s.strokeColor).toLowerCase());\n\t\n\tif (s.alpha < 1 || s.strokeAlpha < 1)\n\t{\n\t\tthis.node.setAttribute('stroke-opacity', s.alpha * s.strokeAlpha);\n\t}\n\t\n\tvar sw = this.getCurrentStrokeWidth();\n\t\n\tif (sw != 1)\n\t{\n\t\tthis.node.setAttribute('stroke-width', sw);\n\t}\n\t\n\tif (this.node.nodeName == 'path')\n\t{\n\t\tthis.updateStrokeAttributes();\n\t}\n\t\n\tif (s.dashed)\n\t{\n\t\tthis.node.setAttribute('stroke-dasharray', this.createDashPattern(\n\t\t\t((s.fixDash) ? 1 : s.strokeWidth) * s.scale));\n\t}\n};\n\n/**\n * Function: updateStrokeAttributes\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateStrokeAttributes = function()\n{\n\tvar s = this.state;\n\t\n\t// Linejoin miter is default in SVG\n\tif (s.lineJoin != null && s.lineJoin != 'miter')\n\t{\n\t\tthis.node.setAttribute('stroke-linejoin', s.lineJoin);\n\t}\n\t\n\tif (s.lineCap != null)\n\t{\n\t\t// flat is called butt in SVG\n\t\tvar value = s.lineCap;\n\t\t\n\t\tif (value == 'flat')\n\t\t{\n\t\t\tvalue = 'butt';\n\t\t}\n\t\t\n\t\t// Linecap butt is default in SVG\n\t\tif (value != 'butt')\n\t\t{\n\t\t\tthis.node.setAttribute('stroke-linecap', value);\n\t\t}\n\t}\n\t\n\t// Miterlimit 10 is default in our document\n\tif (s.miterLimit != null && (!this.styleEnabled || s.miterLimit != 10))\n\t{\n\t\tthis.node.setAttribute('stroke-miterlimit', s.miterLimit);\n\t}\n};\n\n/**\n * Function: createDashPattern\n * \n * Creates the SVG dash pattern for the given state.\n */\nmxSvgCanvas2D.prototype.createDashPattern = function(scale)\n{\n\tvar pat = [];\n\t\n\tif (typeof(this.state.dashPattern) === 'string')\n\t{\n\t\tvar dash = this.state.dashPattern.split(' ');\n\t\t\n\t\tif (dash.length > 0)\n\t\t{\n\t\t\tfor (var i = 0; i < dash.length; i++)\n\t\t\t{\n\t\t\t\tpat[i] = Number(dash[i]) * scale;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn pat.join(' ');\n};\n\n/**\n * Function: createTolerance\n * \n * Creates a hit detection tolerance shape for the given node.\n */\nmxSvgCanvas2D.prototype.createTolerance = function(node)\n{\n\tvar tol = node.cloneNode(true);\n\tvar sw = parseFloat(tol.getAttribute('stroke-width') || 1) + this.strokeTolerance;\n\ttol.setAttribute('pointer-events', 'stroke');\n\ttol.setAttribute('visibility', 'hidden');\n\ttol.removeAttribute('stroke-dasharray');\n\ttol.setAttribute('stroke-width', sw);\n\ttol.setAttribute('fill', 'none');\n\t\n\t// Workaround for Opera ignoring the visiblity attribute above while\n\t// other browsers need a stroke color to perform the hit-detection but\n\t// do not ignore the visibility attribute. Side-effect is that Opera's\n\t// hit detection for horizontal/vertical edges seems to ignore the tol.\n\ttol.setAttribute('stroke', (mxClient.IS_OT) ? 'none' : 'white');\n\t\n\treturn tol;\n};\n\n/**\n * Function: createShadow\n * \n * Creates a shadow for the given node.\n */\nmxSvgCanvas2D.prototype.createShadow = function(node)\n{\n\tvar shadow = node.cloneNode(true);\n\tvar s = this.state;\n\n\t// Firefox uses transparent for no fill in ellipses\n\tif (shadow.getAttribute('fill') != 'none' && (!mxClient.IS_FF || shadow.getAttribute('fill') != 'transparent'))\n\t{\n\t\tshadow.setAttribute('fill', s.shadowColor);\n\t}\n\t\n\tif (shadow.getAttribute('stroke') != 'none')\n\t{\n\t\tshadow.setAttribute('stroke', s.shadowColor);\n\t}\n\n\tshadow.setAttribute('transform', 'translate(' + this.format(s.shadowDx * s.scale) +\n\t\t',' + this.format(s.shadowDy * s.scale) + ')' + (s.transform || ''));\n\tshadow.setAttribute('opacity', s.shadowAlpha);\n\t\n\treturn shadow;\n};\n\n/**\n * Function: setLink\n * \n * Experimental implementation for hyperlinks.\n */\nmxSvgCanvas2D.prototype.setLink = function(link)\n{\n\tif (link == null)\n\t{\n\t\tthis.root = this.originalRoot;\n\t}\n\telse\n\t{\n\t\tthis.originalRoot = this.root;\n\t\t\n\t\tvar node = this.createElement('a');\n\t\t\n\t\t// Workaround for implicit namespace handling in HTML5 export, IE adds NS1 namespace so use code below\n\t\t// in all IE versions except quirks mode. KNOWN: Adds xlink namespace to each image tag in output.\n\t\tif (node.setAttributeNS == null || (this.root.ownerDocument != document && document.documentMode == null))\n\t\t{\n\t\t\tnode.setAttribute('xlink:href', link);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.setAttributeNS(mxConstants.NS_XLINK, 'xlink:href', link);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(node);\n\t\tthis.root = node;\n\t}\n};\n\n/**\n * Function: rotate\n * \n * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n */\nmxSvgCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\tvar s = this.state;\n\t\tcx += s.dx;\n\t\tcy += s.dy;\n\t\n\t\tcx *= s.scale;\n\t\tcy *= s.scale;\n\n\t\ts.transform = s.transform || '';\n\t\t\n\t\t// This implementation uses custom scale/translate and built-in rotation\n\t\t// Rotation state is part of the AffineTransform in state.transform\n\t\tif (flipH && flipV)\n\t\t{\n\t\t\ttheta += 180;\n\t\t}\n\t\telse if (flipH != flipV)\n\t\t{\n\t\t\tvar tx = (flipH) ? cx : 0;\n\t\t\tvar sx = (flipH) ? -1 : 1;\n\t\n\t\t\tvar ty = (flipV) ? cy : 0;\n\t\t\tvar sy = (flipV) ? -1 : 1;\n\n\t\t\ts.transform += 'translate(' + this.format(tx) + ',' + this.format(ty) + ')' +\n\t\t\t\t'scale(' + this.format(sx) + ',' + this.format(sy) + ')' +\n\t\t\t\t'translate(' + this.format(-tx) + ',' + this.format(-ty) + ')';\n\t\t}\n\t\t\n\t\tif (flipH ? !flipV : flipV)\n\t\t{\n\t\t\ttheta *= -1;\n\t\t}\n\t\t\n\t\tif (theta != 0)\n\t\t{\n\t\t\ts.transform += 'rotate(' + this.format(theta) + ',' + this.format(cx) + ',' + this.format(cy) + ')';\n\t\t}\n\t\t\n\t\ts.rotation = s.rotation + theta;\n\t\ts.rotationCx = cx;\n\t\ts.rotationCy = cy;\n\t}\n};\n\n/**\n * Function: begin\n * \n * Extends superclass to create path.\n */\nmxSvgCanvas2D.prototype.begin = function()\n{\n\tmxAbstractCanvas2D.prototype.begin.apply(this, arguments);\n\tthis.node = this.createElement('path');\n};\n\n/**\n * Function: rect\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createElement('rect');\n\tn.setAttribute('x', this.format((x + s.dx) * s.scale));\n\tn.setAttribute('y', this.format((y + s.dy) * s.scale));\n\tn.setAttribute('width', this.format(w * s.scale));\n\tn.setAttribute('height', this.format(h * s.scale));\n\t\n\tthis.node = n;\n};\n\n/**\n * Function: roundrect\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tthis.rect(x, y, w, h);\n\t\n\tif (dx > 0)\n\t{\n\t\tthis.node.setAttribute('rx', this.format(dx * this.state.scale));\n\t}\n\t\n\tif (dy > 0)\n\t{\n\t\tthis.node.setAttribute('ry', this.format(dy * this.state.scale));\n\t}\n};\n\n/**\n * Function: ellipse\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createElement('ellipse');\n\t// No rounding for consistent output with 1.x\n\tn.setAttribute('cx', this.format((x + w / 2 + s.dx) * s.scale));\n\tn.setAttribute('cy', this.format((y + h / 2 + s.dy) * s.scale));\n\tn.setAttribute('rx', w / 2 * s.scale);\n\tn.setAttribute('ry', h / 2 * s.scale);\n\tthis.node = n;\n};\n\n/**\n * Function: image\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\t\n\t// LATER: Add option for embedding images as base64.\n\taspect = (aspect != null) ? aspect : true;\n\tflipH = (flipH != null) ? flipH : false;\n\tflipV = (flipV != null) ? flipV : false;\n\t\n\tvar s = this.state;\n\tx += s.dx;\n\ty += s.dy;\n\t\n\tvar node = this.createElement('image');\n\tnode.setAttribute('x', this.format(x * s.scale) + this.imageOffset);\n\tnode.setAttribute('y', this.format(y * s.scale) + this.imageOffset);\n\tnode.setAttribute('width', this.format(w * s.scale));\n\tnode.setAttribute('height', this.format(h * s.scale));\n\t\n\t// Workaround for missing namespace support\n\tif (node.setAttributeNS == null)\n\t{\n\t\tnode.setAttribute('xlink:href', src);\n\t}\n\telse\n\t{\n\t\tnode.setAttributeNS(mxConstants.NS_XLINK, 'xlink:href', src);\n\t}\n\t\n\tif (!aspect)\n\t{\n\t\tnode.setAttribute('preserveAspectRatio', 'none');\n\t}\n\n\tif (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tnode.setAttribute('opacity', s.alpha * s.fillAlpha);\n\t}\n\t\n\tvar tr = this.state.transform || '';\n\t\n\tif (flipH || flipV)\n\t{\n\t\tvar sx = 1;\n\t\tvar sy = 1;\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\tif (flipH)\n\t\t{\n\t\t\tsx = -1;\n\t\t\tdx = -w - 2 * x;\n\t\t}\n\t\t\n\t\tif (flipV)\n\t\t{\n\t\t\tsy = -1;\n\t\t\tdy = -h - 2 * y;\n\t\t}\n\t\t\n\t\t// Adds image tansformation to existing transform\n\t\ttr += 'scale(' + sx + ',' + sy + ')translate(' + (dx * s.scale) + ',' + (dy * s.scale) + ')';\n\t}\n\n\tif (tr.length > 0)\n\t{\n\t\tnode.setAttribute('transform', tr);\n\t}\n\t\n\tif (!this.pointerEvents)\n\t{\n\t\tnode.setAttribute('pointer-events', 'none');\n\t}\n\t\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: convertHtml\n * \n * Converts the given HTML string to XHTML.\n */\nmxSvgCanvas2D.prototype.convertHtml = function(val)\n{\n\tif (this.useDomParser)\n\t{\n\t\tvar doc = new DOMParser().parseFromString(val, 'text/html');\n\n\t\tif (doc != null)\n\t\t{\n\t\t\tval = new XMLSerializer().serializeToString(doc.body);\n\t\t\t\n\t\t\t// Extracts body content from DOM\n\t\t\tif (val.substring(0, 5) == '<body')\n\t\t\t{\n\t\t\t\tval = val.substring(val.indexOf('>', 5) + 1);\n\t\t\t}\n\t\t\t\n\t\t\tif (val.substring(val.length - 7, val.length) == '</body>')\n\t\t\t{\n\t\t\t\tval = val.substring(0, val.length - 7);\n\t\t\t}\n\t\t}\n\t}\n\telse if (document.implementation != null && document.implementation.createDocument != null)\n\t{\n\t\tvar xd = document.implementation.createDocument('http://www.w3.org/1999/xhtml', 'html', null);\n\t\tvar xb = xd.createElement('body');\n\t\txd.documentElement.appendChild(xb);\n\t\t\n\t\tvar div = document.createElement('div');\n\t\tdiv.innerHTML = val;\n\t\tvar child = div.firstChild;\n\t\t\n\t\twhile (child != null)\n\t\t{\n\t\t\tvar next = child.nextSibling;\n\t\t\txb.appendChild(xd.adoptNode(child));\n\t\t\tchild = next;\n\t\t}\n\t\t\n\t\treturn xb.innerHTML;\n\t}\n\telse\n\t{\n\t\tvar ta = document.createElement('textarea');\n\t\t\n\t\t// Handles special HTML entities < and > and double escaping\n\t\t// and converts unclosed br, hr and img tags to XHTML\n\t\t// LATER: Convert all unclosed tags\n\t\tta.innerHTML = val.replace(/&amp;/g, '&amp;amp;').\n\t\t\treplace(/&#60;/g, '&amp;lt;').replace(/&#62;/g, '&amp;gt;').\n\t\t\treplace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;').\n\t\t\treplace(/</g, '&lt;').replace(/>/g, '&gt;');\n\t\tval = ta.value.replace(/&/g, '&amp;').replace(/&amp;lt;/g, '&lt;').\n\t\t\treplace(/&amp;gt;/g, '&gt;').replace(/&amp;amp;/g, '&amp;').\n\t\t\treplace(/<br>/g, '<br />').replace(/<hr>/g, '<hr />').\n\t\t\treplace(/(<img[^>]+)>/gm, \"$1 />\");\n\t}\n\t\n\treturn val;\n};\n\n/**\n * Function: createDiv\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createDiv = function(str)\n{\n\tvar val = str;\n\t\n\tif (!mxUtils.isNode(val))\n\t{\n\t\tval = '<div><div>' + this.convertHtml(val) + '</div></div>';\n\t}\n\n\t// IE uses this code for export as it cannot render foreignObjects\n\tif (!mxClient.IS_IE && !mxClient.IS_IE11 && document.createElementNS)\n\t{\n\t\tvar div = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n\t\t\n\t\tif (mxUtils.isNode(val))\n\t\t{\n\t\t\tvar div2 = document.createElement('div');\n\t\t\tvar div3 = div2.cloneNode(false);\n\t\t\t\n\t\t\t// Creates a copy for export\n\t\t\tif (this.root.ownerDocument != document)\n\t\t\t{\n\t\t\t\tdiv2.appendChild(val.cloneNode(true));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv2.appendChild(val);\n\t\t\t}\n\t\t\t\n\t\t\tdiv3.appendChild(div2);\n\t\t\tdiv.appendChild(div3);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.innerHTML = val;\n\t\t}\n\t\t\n\t\treturn div;\n\t}\n\telse\n\t{\n\t\tif (mxUtils.isNode(val))\n\t\t{\n\t\t\tval = '<div><div>' + mxUtils.getXml(val) + '</div></div>';\n\t\t}\n\t\t\n\t\tval = '<div xmlns=\"http://www.w3.org/1999/xhtml\">' + val + '</div>';\n\n\t\t// NOTE: FF 3.6 crashes if content CSS contains \"height:100%\"\n\t\treturn  mxUtils.parseXml(val).documentElement;\n\t}\n};\n\n/**\n * Updates existing DOM nodes for text rendering. LATER: Merge common parts with text function below.\n */\nmxSvgCanvas2D.prototype.updateText = function(x, y, w, h, align, valign, wrap, overflow, clip, rotation, node)\n{\n\tif (node != null && node.firstChild != null && node.firstChild.firstChild != null)\n\t{\n\t\tthis.updateTextNodes(x, y, w, h, align, valign, wrap, overflow, clip, rotation, node.firstChild);\n\t}\n};\n\n/**\n * Function: addForeignObject\n * \n * Creates a foreignObject for the given string and adds it to the given root.\n */\nmxSvgCanvas2D.prototype.addForeignObject = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir, div, root)\n{\n\tvar group = this.createElement('g');\n\tvar fo = this.createElement('foreignObject');\n\t\n\t// Workarounds for print clipping and static position in Safari\n\tfo.setAttribute('style', 'overflow: visible; text-align: left;');\n\tfo.setAttribute('pointer-events', 'none');\n\t\n\t// Import needed for older versions of IE\n\tif (div.ownerDocument != document)\n\t{\n\t\tdiv = mxUtils.importNodeImplementation(fo.ownerDocument, div, true);\n\t}\n\n\tfo.appendChild(div);\n\tgroup.appendChild(fo);\n\n\tthis.updateTextNodes(x, y, w, h, align, valign, wrap, overflow, clip, rotation, group);\n\t\n\t// Alternate content if foreignObject not supported\n\tif (this.root.ownerDocument != document)\n\t{\n\t\tvar alt = this.createAlternateContent(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation);\n\t\t\n\t\tif (alt != null)\n\t\t{\n\t\t\tfo.setAttribute('requiredFeatures', 'http://www.w3.org/TR/SVG11/feature#Extensibility');\n\t\t\tvar sw = this.createElement('switch');\n\t\t\tsw.appendChild(fo);\n\t\t\tsw.appendChild(alt);\n\t\t\tgroup.appendChild(sw);\n\t\t}\n\t}\n\t\n\troot.appendChild(group);\n};\n\n/**\n * Updates existing DOM nodes for text rendering.\n */\nmxSvgCanvas2D.prototype.updateTextNodes = function(x, y, w, h, align, valign, wrap, overflow, clip, rotation, g)\n{\n\tvar s = this.state.scale;\n\n\tmxSvgCanvas2D.createCss(w + 2, h, align, valign, wrap, overflow, clip,\n\t\t(this.state.fontBackgroundColor != null) ? this.state.fontBackgroundColor : null,\n\t\t(this.state.fontBorderColor != null) ? this.state.fontBorderColor : null,\n\t\t'display: flex; align-items: unsafe ' +\n\t\t((valign == mxConstants.ALIGN_TOP) ? 'flex-start' :\n\t\t((valign == mxConstants.ALIGN_BOTTOM) ? 'flex-end' : 'center'))  + '; ' +\n\t\t'justify-content: unsafe ' + ((align == mxConstants.ALIGN_LEFT) ? 'flex-start' :\n\t\t((align == mxConstants.ALIGN_RIGHT) ? 'flex-end' : 'center'))  + '; ',\n\t\tthis.getTextCss(), s, mxUtils.bind(this, function(dx, dy, flex, item, block)\n\t{\n\t\tx += this.state.dx;\n\t\ty += this.state.dy;\n\n\t\tvar fo = g.firstChild;\n\t\tvar div = fo.firstChild;\n\t\tvar box = div.firstChild;\n\t\tvar text = box.firstChild;\n\t\tvar r = ((this.rotateHtml) ? this.state.rotation : 0) + ((rotation != null) ? rotation : 0);\n\t\tvar t = ((this.foOffset != 0) ? 'translate(' + this.foOffset + ' ' + this.foOffset + ')' : '') +\n\t\t\t((s != 1) ? 'scale(' + s + ')' : '');\n\t\t\n\t\ttext.setAttribute('style', block);\n\t\tbox.setAttribute('style', item);\n\t\t\n\t\t// Workaround for clipping in Webkit with scrolling and zoom\n\t\tfo.setAttribute('width', Math.ceil(1 / Math.min(1, s) * 100) + '%');\n\t\tfo.setAttribute('height', Math.ceil(1 / Math.min(1, s) * 100) + '%');\n\t\tvar yp = Math.round(y + dy);\n\t\t\n\t\t// Allows for negative values which are causing problems with\n\t\t// transformed content where the top edge of the foreignObject\n\t\t// limits the text box being moved further up in the diagram.\n\t\t// KNOWN: Possible clipping problems with zoom and scrolling\n\t\t// but this is normally not used with scrollbars as the\n\t\t// coordinates are always positive with scrollbars.\n\t\t// Margin-top is ignored in Safari and no negative values allowed\n\t\t// for padding.\n\t\tif (yp < 0)\n\t\t{\n\t\t\tfo.setAttribute('y', yp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfo.removeAttribute('y');\n\t\t\tflex += 'padding-top: ' + yp + 'px; ';\n\t\t}\n\t\t\n\t\tdiv.setAttribute('style', flex + 'margin-left: ' + Math.round(x + dx) + 'px;');\n\t\tt += ((r != 0) ? ('rotate(' + r + ' ' + x + ' ' + y + ')') : '');\n\n\t\t// Output allows for reflow but Safari cannot use absolute position,\n\t\t// transforms or opacity. https://bugs.webkit.org/show_bug.cgi?id=23113\n\t\tif (t != '')\n\t\t{\t\n\t\t\tg.setAttribute('transform', t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tg.removeAttribute('transform');\n\t\t}\n\t\t\n\t\tif (this.state.alpha != 1)\n\t\t{\n\t\t\tg.setAttribute('opacity', this.state.alpha);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tg.removeAttribute('opacity');\n\t\t}\n\t}));\n};\n\n/**\n * Updates existing DOM nodes for text rendering.\n */\nmxSvgCanvas2D.createCss = function(w, h, align, valign, wrap, overflow, clip, bg, border, flex, block, s, callback)\n{\n\tvar item = 'box-sizing: border-box; font-size: 0; text-align: ' + ((align == mxConstants.ALIGN_LEFT) ? 'left' :\n\t\t((align == mxConstants.ALIGN_RIGHT) ? 'right' : 'center')) + '; ';\n\tvar pt = mxUtils.getAlignmentAsPoint(align, valign);\n\tvar ofl = 'overflow: hidden; ';\n\tvar fw = 'width: 1px; ';\n\tvar fh = 'height: 1px; ';\n\tvar dx = pt.x * w;\n\tvar dy = pt.y * h;\n\t\n\tif (clip)\n\t{\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\titem += 'max-height: ' + Math.round(h) + 'px; ';\n\t\tdy = 0;\n\t}\n\telse if (overflow == 'fill')\n\t{\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\tfh = 'height: ' + Math.round(h) + 'px; ';\n\t\tblock += 'width: 100%; height: 100%; ';\n\t\titem += fw + fh;\n\t}\n\telse if (overflow == 'width')\n\t{\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\tblock += 'width: 100%; ';\n\t\titem += fw;\n\t\tdy = 0;\n\t\t\n\t\tif (h > 0)\n\t\t{\n\t\t\titem += 'max-height: ' + Math.round(h) + 'px; ';\n\t\t}\n\t}\n\telse\n\t{\n\t\tofl = '';\n\t\tdy = 0;\n\t}\n\t\n\tvar bgc = '';\n\t\n\tif (bg != null)\n\t{\n\t\tbgc += 'background-color: ' + bg + '; ';\n\t}\n\t\n\tif (border != null)\n\t{\n\t\tbgc += 'border: 1px solid ' + border + '; ';\n\t}\n\t\n\tif (ofl == '' || clip)\n\t{\n\t\tblock += bgc;\n\t}\n\telse\n\t{\n\t\titem += bgc;\n\t}\n\n\tif (wrap && w > 0)\n\t{\n\t\tblock += 'white-space: normal; word-wrap: ' + mxConstants.WORD_WRAP + '; ';\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\t\n\t\tif (ofl != '' && overflow != 'fill')\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\tblock += 'white-space: nowrap; ';\n\t\t\n\t\tif (ofl == '')\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t}\n\t\n\tcallback(dx, dy, flex + fw + fh, item + ofl, block, ofl);\n};\n\n/**\n * Function: getTextCss\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.getTextCss = function()\n{\n\tvar s = this.state;\n\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (s.fontSize * mxConstants.LINE_HEIGHT) + 'px' :\n\t\t(mxConstants.LINE_HEIGHT * this.lineHeightCorrection);\n\tvar css = 'display: inline-block; font-size: ' + s.fontSize + 'px; ' +\n\t\t'font-family: ' + s.fontFamily + '; color: ' + s.fontColor + '; line-height: ' + lh +\n\t\t'; pointer-events: ' + ((this.pointerEvents) ? this.pointerEventsValue : 'none') + '; ';\n\t\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tcss += 'font-weight: bold; ';\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tcss += 'font-style: italic; ';\n\t}\n\n\tvar deco = [];\n\t\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tdeco.push('underline');\n\t}\n\t\n\tif ((s.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\tdeco.push('line-through');\n\t}\n\t\n\tif (deco.length > 0)\n\t{\n\t\tcss += 'text-decoration: ' + deco.join(' ') + '; ';\n\t}\n\n\treturn css;\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for plain\n * text and html for HTML markup. Note that HTML markup is only supported if\n * foreignObject is supported and <foEnabled> is true. (This means IE9 and later\n * does currently not support HTML text as part of shapes.)\n */\nmxSvgCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\trotation = (rotation != null) ? rotation : 0;\n\n\t\tif (this.foEnabled && format == 'html')\n\t\t{\n\t\t\tvar div = this.createDiv(str);\n\t\t\t\n\t\t\t// Ignores invalid XHTML labels\n\t\t\tif (div != null)\n\t\t\t{\n\t\t\t\tif (dir != null)\n\t\t\t\t{\n\t\t\t\t\tdiv.setAttribute('dir', dir);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.addForeignObject(x, y, w, h, str, align, valign, wrap,\n\t\t\t\t\tformat, overflow, clip, rotation, dir, div, this.root);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.plainText(x + this.state.dx, y + this.state.dy, w, h, str,\n\t\t\t\talign, valign, wrap, overflow, clip, rotation, dir);\n\t\t}\n\t}\n};\n\n/**\n * Function: createClip\n * \n * Creates a clip for the given coordinates.\n */\nmxSvgCanvas2D.prototype.createClip = function(x, y, w, h)\n{\n\tx = Math.round(x);\n\ty = Math.round(y);\n\tw = Math.round(w);\n\th = Math.round(h);\n\t\n\tvar id = 'mx-clip-' + x + '-' + y + '-' + w + '-' + h;\n\n\tvar counter = 0;\n\tvar tmp = id + '-' + counter;\n\t\n\t// Resolves ID conflicts\n\twhile (document.getElementById(tmp) != null)\n\t{\n\t\ttmp = id + '-' + (++counter);\n\t}\n\t\n\tclip = this.createElement('clipPath');\n\tclip.setAttribute('id', tmp);\n\t\n\tvar rect = this.createElement('rect');\n\trect.setAttribute('x', x);\n\trect.setAttribute('y', y);\n\trect.setAttribute('width', w);\n\trect.setAttribute('height', h);\n\t\t\n\tclip.appendChild(rect);\n\t\n\treturn clip;\n};\n\n/**\n * Function: plainText\n * \n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup.\n */\nmxSvgCanvas2D.prototype.plainText = function(x, y, w, h, str, align, valign, wrap, overflow, clip, rotation, dir)\n{\n\trotation = (rotation != null) ? rotation : 0;\n\tvar s = this.state;\n\tvar size = s.fontSize;\n\tvar node = this.createElement('g');\n\tvar tr = s.transform || '';\n\tthis.updateFont(node);\n\t\t\t\t\n\t// Ignores pointer events\n\tif (!this.pointerEvents && this.originalRoot == null)\n\t{\n\t\tnode.setAttribute('pointer-events', 'none');\n\t}\n\t\t\n\t// Non-rotated text\n\tif (rotation != 0)\n\t{\n\t\ttr += 'rotate(' + rotation  + ',' + this.format(x * s.scale) + ',' + this.format(y * s.scale) + ')';\n\t}\n\t\n\tif (dir != null)\n\t{\n\t\tnode.setAttribute('direction', dir);\n\t}\n\n\tif (clip && w > 0 && h > 0)\n\t{\n\t\tvar cx = x;\n\t\tvar cy = y;\n\t\t\n\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tcx -= w / 2;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tcx -= w;\n\t\t}\n\t\t\n\t\tif (overflow != 'fill')\n\t\t{\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\tcy -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tcy -= h;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// LATER: Remove spacing from clip rectangle\n\t\tvar c = this.createClip(cx * s.scale - 2, cy * s.scale - 2, w * s.scale + 4, h * s.scale + 4);\n\t\t\n\t\tif (this.defs != null)\n\t\t{\n\t\t\tthis.defs.appendChild(c);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Makes sure clip is removed with referencing node\n\t\t\tthis.root.appendChild(c);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_CHROMEAPP && !mxClient.IS_IE && !mxClient.IS_IE11 &&\n\t\t\t!mxClient.IS_EDGE && this.root.ownerDocument == document)\n\t\t{\n\t\t\t// Workaround for potential base tag\n\t\t\tvar base = this.getBaseUrl().replace(/([\\(\\)])/g, '\\\\$1');\n\t\t\tnode.setAttribute('clip-path', 'url(' + base + '#' + c.getAttribute('id') + ')');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.setAttribute('clip-path', 'url(#' + c.getAttribute('id') + ')');\n\t\t}\n\t}\n\n\t// Default is left\n\tvar anchor = (align == mxConstants.ALIGN_RIGHT) ? 'end' :\n\t\t\t\t\t(align == mxConstants.ALIGN_CENTER) ? 'middle' :\n\t\t\t\t\t'start';\n\n\t// Text-anchor start is default in SVG\n\tif (anchor != 'start')\n\t{\n\t\tnode.setAttribute('text-anchor', anchor);\n\t}\n\t\n\tif (!this.styleEnabled || size != mxConstants.DEFAULT_FONTSIZE)\n\t{\n\t\tnode.setAttribute('font-size', (size * s.scale) + 'px');\n\t}\n\t\n\tif (tr.length > 0)\n\t{\n\t\tnode.setAttribute('transform', tr);\n\t}\n\t\n\tif (s.alpha < 1)\n\t{\n\t\tnode.setAttribute('opacity', s.alpha);\n\t}\n\t\n\tvar lines = str.split('\\n');\n\tvar lh = Math.round(size * mxConstants.LINE_HEIGHT);\n\tvar textHeight = size + (lines.length - 1) * lh;\n\n\tvar cy = y + size - 1;\n\n\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t{\n\t\tif (overflow == 'fill')\n\t\t{\n\t\t\tcy -= h / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar dy = ((this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight) / 2;\n\t\t\tcy -= dy;\n\t\t}\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tif (overflow == 'fill')\n\t\t{\n\t\t\tcy -= h;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar dy = (this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight;\n\t\t\tcy -= dy + 1;\n\t\t}\n\t}\n\n\tfor (var i = 0; i < lines.length; i++)\n\t{\n\t\t// Workaround for bounding box of empty lines and spaces\n\t\tif (lines[i].length > 0 && mxUtils.trim(lines[i]).length > 0)\n\t\t{\n\t\t\tvar text = this.createElement('text');\n\t\t\t// LATER: Match horizontal HTML alignment\n\t\t\ttext.setAttribute('x', this.format(x * s.scale) + this.textOffset);\n\t\t\ttext.setAttribute('y', this.format(cy * s.scale) + this.textOffset);\n\t\n\t\t\tmxUtils.write(text, lines[i]);\n\t\t\tnode.appendChild(text);\n\t\t}\n\n\t\tcy += lh;\n\t}\n\n\tthis.root.appendChild(node);\n\tthis.addTextBackground(node, str, x, y, w, (overflow == 'fill') ? h : textHeight, align, valign, overflow);\n};\n\n/**\n * Function: updateFont\n * \n * Updates the text properties for the given node. (NOTE: For this to work in\n * IE, the given node must be a text or tspan element.)\n */\nmxSvgCanvas2D.prototype.updateFont = function(node)\n{\n\tvar s = this.state;\n\n\tnode.setAttribute('fill', s.fontColor);\n\t\n\tif (!this.styleEnabled || s.fontFamily != mxConstants.DEFAULT_FONTFAMILY)\n\t{\n\t\tnode.setAttribute('font-family', s.fontFamily);\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tnode.setAttribute('font-weight', 'bold');\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tnode.setAttribute('font-style', 'italic');\n\t}\n\t\n\tvar txtDecor = [];\n\t\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttxtDecor.push('underline');\n\t}\n\t\n\tif ((s.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\ttxtDecor.push('line-through');\n\t}\n\t\n\tif (txtDecor.length > 0)\n\t{\n\t\tnode.setAttribute('text-decoration', txtDecor.join(' '));\n\t}\n};\n\n/**\n * Function: addTextBackground\n * \n * Background color and border\n */\nmxSvgCanvas2D.prototype.addTextBackground = function(node, str, x, y, w, h, align, valign, overflow)\n{\n\tvar s = this.state;\n\n\tif (s.fontBackgroundColor != null || s.fontBorderColor != null)\n\t{\n\t\tvar bbox = null;\n\t\t\n\t\tif (overflow == 'fill' || overflow == 'width')\n\t\t{\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\ty -= h;\n\t\t\t}\n\t\t\t\n\t\t\tbbox = new mxRectangle((x + 1) * s.scale, y * s.scale, (w - 2) * s.scale, (h + 2) * s.scale);\n\t\t}\n\t\telse if (node.getBBox != null && this.root.ownerDocument == document)\n\t\t{\n\t\t\t// Uses getBBox only if inside document for correct size\n\t\t\ttry\n\t\t\t{\n\t\t\t\tbbox = node.getBBox();\n\t\t\t\tvar ie = mxClient.IS_IE && mxClient.IS_SVG;\n\t\t\t\tbbox = new mxRectangle(bbox.x, bbox.y + ((ie) ? 0 : 1), bbox.width, bbox.height + ((ie) ? 1 : 0));\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// Ignores NS_ERROR_FAILURE in FF if container display is none.\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (bbox == null || bbox.width == 0 || bbox.height == 0)\n\t\t{\n\t\t\t// Computes size if not in document or no getBBox available\n\t\t\tvar div = document.createElement('div');\n\n\t\t\t// Wrapping and clipping can be ignored here\n\t\t\tdiv.style.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (s.fontSize * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\t\t\tdiv.style.fontSize = s.fontSize + 'px';\n\t\t\tdiv.style.fontFamily = s.fontFamily;\n\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\tdiv.style.position = 'absolute';\n\t\t\tdiv.style.visibility = 'hidden';\n\t\t\tdiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\tdiv.style.zoom = '1';\n\t\t\t\n\t\t\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t\t{\n\t\t\t\tdiv.style.fontWeight = 'bold';\n\t\t\t}\n\n\t\t\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t\t{\n\t\t\t\tdiv.style.fontStyle = 'italic';\n\t\t\t}\n\t\t\t\n\t\t\tstr = mxUtils.htmlEntities(str, false);\n\t\t\tdiv.innerHTML = str.replace(/\\n/g, '<br/>');\n\t\t\t\n\t\t\tdocument.body.appendChild(div);\n\t\t\tvar w = div.offsetWidth;\n\t\t\tvar h = div.offsetHeight;\n\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\ty -= h;\n\t\t\t}\n\t\t\t\n\t\t\tbbox = new mxRectangle((x + 1) * s.scale, (y + 2) * s.scale, w * s.scale, (h + 1) * s.scale);\n\t\t}\n\t\t\n\t\tif (bbox != null)\n\t\t{\n\t\t\tvar n = this.createElement('rect');\n\t\t\tn.setAttribute('fill', s.fontBackgroundColor || 'none');\n\t\t\tn.setAttribute('stroke', s.fontBorderColor || 'none');\n\t\t\tn.setAttribute('x', Math.floor(bbox.x - 1));\n\t\t\tn.setAttribute('y', Math.floor(bbox.y - 1));\n\t\t\tn.setAttribute('width', Math.ceil(bbox.width + 2));\n\t\t\tn.setAttribute('height', Math.ceil(bbox.height));\n\n\t\t\tvar sw = (s.fontBorderColor != null) ? Math.max(1, this.format(s.scale)) : 0;\n\t\t\tn.setAttribute('stroke-width', sw);\n\t\t\t\n\t\t\t// Workaround for crisp rendering - only required if not exporting\n\t\t\tif (this.root.ownerDocument == document && mxUtils.mod(sw, 2) == 1)\n\t\t\t{\n\t\t\t\tn.setAttribute('transform', 'translate(0.5, 0.5)');\n\t\t\t}\n\t\t\t\n\t\t\tnode.insertBefore(n, node.firstChild);\n\t\t}\n\t}\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current path.\n */\nmxSvgCanvas2D.prototype.stroke = function()\n{\n\tthis.addNode(false, true);\n};\n\n/**\n * Function: fill\n * \n * Fills the current path.\n */\nmxSvgCanvas2D.prototype.fill = function()\n{\n\tthis.addNode(true, false);\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills and paints the outline of the current path.\n */\nmxSvgCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.addNode(true, true);\n};\n\n__mxOutput.mxSvgCanvas2D = typeof mxSvgCanvas2D !== 'undefined' ? mxSvgCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxVmlCanvas2D\n * \n * Implements a canvas to be used for rendering VML. Here is an example of implementing a\n * fallback for SVG images which are not supported in VML-based browsers.\n * \n * (code)\n * var mxVmlCanvas2DImage = mxVmlCanvas2D.prototype.image;\n * mxVmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n * {\n *   if (src.substring(src.length - 4, src.length) == '.svg')\n *   {\n *     src = 'http://www.jgraph.com/images/mxgraph.gif';\n *   }\n *   \n *   mxVmlCanvas2DImage.apply(this, arguments);\n * };\n * (end)\n * \n * To disable anti-aliasing in the output, use the following code.\n * \n * (code)\n * document.createStyleSheet().cssText = mxClient.VML_PREFIX + '\\\\:*{antialias:false;)}';\n * (end)\n * \n * A description of the public API is available in <mxXmlCanvas2D>. Note that\n * there is a known issue in VML where gradients are painted using the outer\n * bounding box of rotated shapes, not the actual bounds of the shape. See\n * also <text> for plain text label restrictions in shapes for VML.\n */\nvar mxVmlCanvas2D = function(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxVmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: path\n * \n * Holds the current DOM node.\n */\nmxVmlCanvas2D.prototype.node = null;\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabledetB. Default is true.\n */\nmxVmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: moveOp\n * \n * Contains the string used for moving in paths. Default is 'm'.\n */\nmxVmlCanvas2D.prototype.moveOp = 'm';\n\n/**\n * Variable: lineOp\n * \n * Contains the string used for moving in paths. Default is 'l'.\n */\nmxVmlCanvas2D.prototype.lineOp = 'l';\n\n/**\n * Variable: curveOp\n * \n * Contains the string used for bezier curves. Default is 'c'.\n */\nmxVmlCanvas2D.prototype.curveOp = 'c';\n\n/**\n * Variable: closeOp\n * \n * Holds the operator for closing curves. Default is 'x e'.\n */\nmxVmlCanvas2D.prototype.closeOp = 'x';\n\n/**\n * Variable: rotatedHtmlBackground\n * \n * Background color for rotated HTML. Default is ''. This can be set to eg.\n * white to improve rendering of rotated text in VML for IE9.\n */\nmxVmlCanvas2D.prototype.rotatedHtmlBackground = '';\n\n/**\n * Variable: vmlScale\n * \n * Specifies the scale used to draw VML shapes.\n */\nmxVmlCanvas2D.prototype.vmlScale = 1;\n\n/**\n * Function: createElement\n * \n * Creates the given element using the document.\n */\nmxVmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn document.createElement(name);\n};\n\n/**\n * Function: createVmlElement\n * \n * Creates a new element using <createElement> and prefixes the given name with\n * <mxClient.VML_PREFIX>.\n */\nmxVmlCanvas2D.prototype.createVmlElement = function(name)\n{\n\treturn this.createElement(mxClient.VML_PREFIX + ':' + name);\n};\n\n/**\n * Function: addNode\n * \n * Adds the current node to the <root>.\n */\nmxVmlCanvas2D.prototype.addNode = function(filled, stroked)\n{\n\tvar node = this.node;\n\tvar s = this.state;\n\t\n\tif (node != null)\n\t{\n\t\tif (node.nodeName == 'shape')\n\t\t{\n\t\t\t// Checks if the path is not empty\n\t\t\tif (this.path != null && this.path.length > 0)\n\t\t\t{\n\t\t\t\tnode.path = this.path.join(' ') + ' e';\n\t\t\t\tnode.style.width = this.root.style.width;\n\t\t\t\tnode.style.height = this.root.style.height;\n\t\t\t\tnode.coordsize = parseInt(node.style.width) + ' ' + parseInt(node.style.height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tnode.strokeweight = this.format(Math.max(1, s.strokeWidth * s.scale / this.vmlScale)) + 'px';\n\t\t\n\t\tif (s.shadow)\n\t\t{\n\t\t\tthis.root.appendChild(this.createShadow(node,\n\t\t\t\tfilled && s.fillColor != null,\n\t\t\t\tstroked && s.strokeColor != null));\n\t\t}\n\t\t\n\t\tif (stroked && s.strokeColor != null)\n\t\t{\n\t\t\tnode.stroked = 'true';\n\t\t\tnode.strokecolor = s.strokeColor;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.stroked = 'false';\n\t\t}\n\n\t\tnode.appendChild(this.createStroke());\n\n\t\tif (filled && s.fillColor != null)\n\t\t{\n\t\t\tnode.appendChild(this.createFill());\n\t\t}\n\t\telse if (this.pointerEvents && (node.nodeName != 'shape' ||\n\t\t\tthis.path[this.path.length - 1] == this.closeOp))\n\t\t{\n\t\t\tnode.appendChild(this.createTransparentFill());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.filled = 'false';\n\t\t}\n\n\t\t// LATER: Update existing DOM for performance\n\t\tthis.root.appendChild(node);\n\t}\n};\n\n/**\n * Function: createTransparentFill\n * \n * Creates a transparent fill.\n */\nmxVmlCanvas2D.prototype.createTransparentFill = function()\n{\n\tvar fill = this.createVmlElement('fill');\n\tfill.src = mxClient.imageBasePath + '/transparent.gif';\n\tfill.type = 'tile';\n\t\n\treturn fill;\n};\n\n/**\n * Function: createFill\n * \n * Creates a fill for the current state.\n */\nmxVmlCanvas2D.prototype.createFill = function()\n{\n\tvar s = this.state;\n\t\n\t// Gradients in foregrounds not supported because special gradients\n\t// with bounds must be created for each element in graphics-canvases\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = s.fillColor;\n\n\tif (s.gradientColor != null)\n\t{\n\t\tfill.type = 'gradient';\n\t\tfill.method = 'none';\n\t\tfill.color2 = s.gradientColor;\n\t\tvar angle = 180 - s.rotation;\n\t\t\n\t\tif (s.gradientDirection == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tangle -= 90 + ((this.root.style.flip == 'x') ? 180 : 0);\n\t\t}\n\t\telse if (s.gradientDirection == mxConstants.DIRECTION_EAST)\n\t\t{\n\t\t\tangle += 90 + ((this.root.style.flip == 'x') ? 180 : 0);\n\t\t}\n\t\telse if (s.gradientDirection == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tangle -= 180 + ((this.root.style.flip == 'y') ? -180 : 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t angle += ((this.root.style.flip == 'y') ? -180 : 0);\n\t\t}\n\t\t\n\t\tif (this.root.style.flip == 'x' || this.root.style.flip == 'y')\n\t\t{\n\t\t\tangle *= -1;\n\t\t}\n\n\t\t// LATER: Fix outer bounding box for rotated shapes used in VML.\n\t\tfill.angle = mxUtils.mod(angle, 360);\n\t\tfill.opacity = (s.alpha * s.gradientFillAlpha * 100) + '%';\n\t\tfill.setAttribute(mxClient.OFFICE_PREFIX + ':opacity2', (s.alpha * s.gradientAlpha * 100) + '%');\n\t}\n\telse if (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tfill.opacity = (s.alpha * s.fillAlpha * 100) + '%';\t\t\t\n\t}\n\t\n\treturn fill;\n};\n/**\n * Function: createStroke\n * \n * Creates a fill for the current state.\n */\nmxVmlCanvas2D.prototype.createStroke = function()\n{\n\tvar s = this.state;\n\tvar stroke = this.createVmlElement('stroke');\n\tstroke.endcap = s.lineCap || 'flat';\n\tstroke.joinstyle = s.lineJoin || 'miter';\n\tstroke.miterlimit = s.miterLimit || '10';\n\t\n\tif (s.alpha < 1 || s.strokeAlpha < 1)\n\t{\n\t\tstroke.opacity = (s.alpha * s.strokeAlpha * 100) + '%';\n\t}\n\t\n\tif (s.dashed)\n\t{\n\t\tstroke.dashstyle = this.getVmlDashStyle();\n\t}\n\t\n\treturn stroke;\n};\n\n/**\n * Function: getVmlDashPattern\n * \n * Returns a VML dash pattern for the current dashPattern.\n * See http://msdn.microsoft.com/en-us/library/bb264085(v=vs.85).aspx\n */\nmxVmlCanvas2D.prototype.getVmlDashStyle = function()\n{\n\tvar result = 'dash';\n\t\n\tif (typeof(this.state.dashPattern) === 'string')\n\t{\n\t\tvar tok = this.state.dashPattern.split(' ');\n\t\t\n\t\tif (tok.length > 0 && tok[0] == 1)\n\t\t{\n\t\t\tresult = '0 2';\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createShadow\n * \n * Creates a shadow for the given node.\n */\nmxVmlCanvas2D.prototype.createShadow = function(node, filled, stroked)\n{\n\tvar s = this.state;\n\tvar rad = -s.rotation * (Math.PI / 180);\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(rad);\n\n\tvar dx = s.shadowDx * s.scale;\n\tvar dy = s.shadowDy * s.scale;\n\n\tif (this.root.style.flip == 'x')\n\t{\n\t\tdx *= -1;\n\t}\n\telse if (this.root.style.flip == 'y')\n\t{\n\t\tdy *= -1;\n\t}\n\t\n\tvar shadow = node.cloneNode(true);\n\tshadow.style.marginLeft = Math.round(dx * cos - dy * sin) + 'px';\n\tshadow.style.marginTop = Math.round(dx * sin + dy * cos) + 'px';\n\n\t// Workaround for wrong cloning in IE8 standards mode\n\tif (document.documentMode == 8)\n\t{\n\t\tshadow.strokeweight = node.strokeweight;\n\t\t\n\t\tif (node.nodeName == 'shape')\n\t\t{\n\t\t\tshadow.path = this.path.join(' ') + ' e';\n\t\t\tshadow.style.width = this.root.style.width;\n\t\t\tshadow.style.height = this.root.style.height;\n\t\t\tshadow.coordsize = parseInt(node.style.width) + ' ' + parseInt(node.style.height);\n\t\t}\n\t}\n\t\n\tif (stroked)\n\t{\n\t\tshadow.strokecolor = s.shadowColor;\n\t\tshadow.appendChild(this.createShadowStroke());\n\t}\n\telse\n\t{\n\t\tshadow.stroked = 'false';\n\t}\n\t\n\tif (filled)\n\t{\n\t\tshadow.appendChild(this.createShadowFill());\n\t}\n\telse\n\t{\n\t\tshadow.filled = 'false';\n\t}\n\t\n\treturn shadow;\n};\n\n/**\n * Function: createShadowFill\n * \n * Creates the fill for the shadow.\n */\nmxVmlCanvas2D.prototype.createShadowFill = function()\n{\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = this.state.shadowColor;\n\tfill.opacity = (this.state.alpha * this.state.shadowAlpha * 100) + '%';\n\t\n\treturn fill;\n};\n\n/**\n * Function: createShadowStroke\n * \n * Creates the stroke for the shadow.\n */\nmxVmlCanvas2D.prototype.createShadowStroke = function()\n{\n\tvar stroke = this.createStroke();\n\tstroke.opacity = (this.state.alpha * this.state.shadowAlpha * 100) + '%';\n\t\n\treturn stroke;\n};\n\n/**\n * Function: rotate\n * \n * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n */\nmxVmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tif (flipH && flipV)\n\t{\n\t\ttheta += 180;\n\t}\n\telse if (flipH)\n\t{\n\t\tthis.root.style.flip = 'x';\n\t}\n\telse if (flipV)\n\t{\n\t\tthis.root.style.flip = 'y';\n\t}\n\n\tif (flipH ? !flipV : flipV)\n\t{\n\t\ttheta *= -1;\n\t}\n\n\tthis.root.style.rotation = theta;\n\tthis.state.rotation = this.state.rotation + theta;\n\tthis.state.rotationCx = cx;\n\tthis.state.rotationCy = cy;\n};\n\n/**\n * Function: begin\n * \n * Extends superclass to create path.\n */\nmxVmlCanvas2D.prototype.begin = function()\n{\n\tmxAbstractCanvas2D.prototype.begin.apply(this, arguments);\n\tthis.node = this.createVmlElement('shape');\n\tthis.node.style.position = 'absolute';\n};\n\n/**\n * Function: quadTo\n * \n * Replaces quadratic curve with bezier curve in VML.\n */\nmxVmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar s = this.state;\n\n\tvar cpx0 = (this.lastX + s.dx) * s.scale;\n\tvar cpy0 = (this.lastY + s.dy) * s.scale;\n\tvar qpx1 = (x1 + s.dx) * s.scale;\n\tvar qpy1 = (y1 + s.dy) * s.scale;\n\tvar cpx3 = (x2 + s.dx) * s.scale;\n\tvar cpy3 = (y2 + s.dy) * s.scale;\n\t\n\tvar cpx1 = cpx0 + 2/3 * (qpx1 - cpx0);\n\tvar cpy1 = cpy0 + 2/3 * (qpy1 - cpy0);\n\t\n\tvar cpx2 = cpx3 + 2/3 * (qpx1 - cpx3);\n\tvar cpy2 = cpy3 + 2/3 * (qpy1 - cpy3);\n\t\n\tthis.path.push('c ' + this.format(cpx1) + ' ' + this.format(cpy1) +\n\t\t\t' ' + this.format(cpx2) + ' ' + this.format(cpy2) +\n\t\t\t' ' + this.format(cpx3) + ' ' + this.format(cpy3));\n\tthis.lastX = (cpx3 / s.scale) - s.dx;\n\tthis.lastY = (cpy3 / s.scale) - s.dy;\n\t\n};\n\n/**\n * Function: createRect\n * \n * Sets the glass gradient.\n */\nmxVmlCanvas2D.prototype.createRect = function(nodeName, x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createVmlElement(nodeName);\n\tn.style.position = 'absolute';\n\tn.style.left = this.format((x + s.dx) * s.scale) + 'px';\n\tn.style.top = this.format((y + s.dy) * s.scale) + 'px';\n\tn.style.width = this.format(w * s.scale) + 'px';\n\tn.style.height = this.format(h * s.scale) + 'px';\n\t\n\treturn n;\n};\n\n/**\n * Function: rect\n * \n * Sets the current path to a rectangle.\n */\nmxVmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tthis.node = this.createRect('rect', x, y, w, h);\n};\n\n/**\n * Function: roundrect\n * \n * Sets the current path to a rounded rectangle.\n */\nmxVmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tthis.node = this.createRect('roundrect', x, y, w, h);\n\t// SetAttribute needed here for IE8\n\tthis.node.setAttribute('arcsize', Math.max(dx * 100 / w, dy * 100 / h) + '%');\n};\n\n/**\n * Function: ellipse\n * \n * Sets the current path to an ellipse.\n */\nmxVmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tthis.node = this.createRect('oval', x, y, w, h);\n};\n\n/**\n * Function: image\n * \n * Paints an image.\n */\nmxVmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tvar node = null;\n\t\n\tif (!aspect)\n\t{\n\t\tnode = this.createRect('image', x, y, w, h);\n\t\tnode.src = src;\n\t}\n\telse\n\t{\n\t\t// Uses fill with aspect to avoid asynchronous update of size\n\t\tnode = this.createRect('rect', x, y, w, h);\n\t\tnode.stroked = 'false';\n\t\t\n\t\t// Handles image aspect via fill\n\t\tvar fill = this.createVmlElement('fill');\n\t\tfill.aspect = (aspect) ? 'atmost' : 'ignore';\n\t\tfill.rotate = 'true';\n\t\tfill.type = 'frame';\n\t\tfill.src = src;\n\n\t\tnode.appendChild(fill);\n\t}\n\t\n\tif (flipH && flipV)\n\t{\n\t\tnode.style.rotation = '180';\n\t}\n\telse if (flipH)\n\t{\n\t\tnode.style.flip = 'x';\n\t}\n\telse if (flipV)\n\t{\n\t\tnode.style.flip = 'y';\n\t}\n\t\n\tif (this.state.alpha < 1 || this.state.fillAlpha < 1)\n\t{\n\t\t// KNOWN: Borders around transparent images in IE<9. Using fill.opacity\n\t\t// fixes this problem by adding a white background in all IE versions.\n\t\tnode.style.filter += 'alpha(opacity=' + (this.state.alpha * this.state.fillAlpha * 100) + ')';\n\t}\n\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: createText\n * \n * Creates the innermost element that contains the HTML text.\n */\nmxVmlCanvas2D.prototype.createDiv = function(str, align, valign, overflow)\n{\n\tvar div = this.createElement('div');\n\tvar state = this.state;\n\n\tvar css = '';\n\t\n\tif (state.fontBackgroundColor != null)\n\t{\n\t\tcss += 'background-color:' + mxUtils.htmlEntities(state.fontBackgroundColor) + ';';\n\t}\n\t\n\tif (state.fontBorderColor != null)\n\t{\n\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(state.fontBorderColor) + ';';\n\t}\n\t\n\tif (mxUtils.isNode(str))\n\t{\n\t\tdiv.appendChild(str);\n\t}\n\telse\n\t{\n\t\tif (overflow != 'fill' && overflow != 'width')\n\t\t{\n\t\t\tvar div2 = this.createElement('div');\n\t\t\tdiv2.style.cssText = css;\n\t\t\tdiv2.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\tdiv2.style.zoom = '1';\n\t\t\tdiv2.style.textDecoration = 'inherit';\n\t\t\tdiv2.innerHTML = str;\n\t\t\tdiv.appendChild(div2);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.style.cssText = css;\n\t\t\tdiv.innerHTML = str;\n\t\t}\n\t}\n\t\n\tvar style = div.style;\n\n\tstyle.fontSize = (state.fontSize / this.vmlScale) + 'px';\n\tstyle.fontFamily = state.fontFamily;\n\tstyle.color = state.fontColor;\n\tstyle.verticalAlign = 'top';\n\tstyle.textAlign = align || 'left';\n\tstyle.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (state.fontSize * mxConstants.LINE_HEIGHT / this.vmlScale) + 'px' : mxConstants.LINE_HEIGHT;\n\n\tif ((state.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle.fontWeight = 'bold';\n\t}\n\n\tif ((state.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle.fontStyle = 'italic';\n\t}\n\t\n\tif ((state.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tstyle.textDecoration = 'underline';\n\t}\n\t\n\treturn div;\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for plain\n * text and html for HTML markup. Clipping, text background and border are not\n * supported for plain text in VML.\n */\nmxVmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tvar s = this.state;\n\t\t\n\t\tif (format == 'html')\n\t\t{\n\t\t\tif (s.rotation != null)\n\t\t\t{\n\t\t\t\tvar pt = this.rotatePoint(x, y, s.rotation, s.rotationCx, s.rotationCy);\n\t\t\t\t\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tx += s.dx;\n\t\t\t\ty += s.dy;\n\t\t\t\t\n\t\t\t\t// Workaround for rendering offsets\n\t\t\t\tif (overflow != 'fill' && valign == mxConstants.ALIGN_TOP)\n\t\t\t\t{\n\t\t\t\t\ty -= 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx *= s.scale;\n\t\t\t\ty *= s.scale;\n\t\t\t}\n\n\t\t\t// Adds event transparency in IE8 standards without the transparent background\n\t\t\t// filter which cannot be used due to bugs in the zoomed bounding box (too slow)\n\t\t\t// FIXME: No event transparency if inside v:rect (ie part of shape)\n\t\t\t// KNOWN: Offset wrong for rotated text with word that are longer than the wrapping\n\t\t\t// width in IE8 because real width of text cannot be determined here.\n\t\t\t// This should be fixed in mxText.updateBoundingBox by calling before this and\n\t\t\t// passing the real width to this method if not clipped and wrapped.\n\t\t\tvar abs = (document.documentMode == 8 && !mxClient.IS_EM) ? this.createVmlElement('group') : this.createElement('div');\n\t\t\tabs.style.position = 'absolute';\n\t\t\tabs.style.display = 'inline';\n\t\t\tabs.style.left = this.format(x) + 'px';\n\t\t\tabs.style.top = this.format(y) + 'px';\n\t\t\tabs.style.zoom = s.scale;\n\n\t\t\tvar box = this.createElement('div');\n\t\t\tbox.style.position = 'relative';\n\t\t\tbox.style.display = 'inline';\n\t\t\t\n\t\t\tvar margin = mxUtils.getAlignmentAsPoint(align, valign);\n\t\t\tvar dx = margin.x;\n\t\t\tvar dy = margin.y;\n\n\t\t\tvar div = this.createDiv(str, align, valign, overflow);\n\t\t\tvar inner = this.createElement('div');\n\t\t\t\n\t\t\tif (dir != null)\n\t\t\t{\n\t\t\t\tdiv.setAttribute('dir', dir);\n\t\t\t}\n\n\t\t\tif (wrap && w > 0)\n\t\t\t{\n\t\t\t\tif (!clip)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.width = Math.round(w) + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdiv.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tdiv.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t\t\t// LATER: Check if other cases need to be handled\n\t\t\t\tif (div.style.wordWrap == 'break-word')\n\t\t\t\t{\n\t\t\t\t\tvar tmp = div;\n\t\t\t\t\t\n\t\t\t\t\tif (tmp.firstChild != null && tmp.firstChild.nodeName == 'DIV')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp.firstChild.style.width = '100%';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\t}\n\t\t\t\n\t\t\tvar rot = s.rotation + (rotation || 0);\n\t\t\t\n\t\t\tif (this.rotateHtml && rot != 0)\n\t\t\t{\n\t\t\t\tinner.style.display = 'inline';\n\t\t\t\tinner.style.zoom = '1';\n\t\t\t\tinner.appendChild(div);\n\n\t\t\t\t// Box not needed for rendering in IE8 standards\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM && this.root.nodeName != 'DIV')\n\t\t\t\t{\n\t\t\t\t\tbox.appendChild(inner);\n\t\t\t\t\tabs.appendChild(box);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tabs.appendChild(inner);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tbox.appendChild(div);\n\t\t\t\tabs.appendChild(box);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.style.display = 'inline';\n\t\t\t\tabs.appendChild(div);\n\t\t\t}\n\t\t\t\n\t\t\t// Inserts the node into the DOM\n\t\t\tif (this.root.nodeName != 'DIV')\n\t\t\t{\n\t\t\t\t// Rectangle to fix position in group\n\t\t\t\tvar rect = this.createVmlElement('rect');\n\t\t\t\trect.stroked = 'false';\n\t\t\t\trect.filled = 'false';\n\n\t\t\t\trect.appendChild(abs);\n\t\t\t\tthis.root.appendChild(rect);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.root.appendChild(abs);\n\t\t\t}\n\t\t\t\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = Math.round(w) + 'px';\n\t\t\t\t\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.maxHeight = Math.round(h) + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (overflow == 'fill')\n\t\t\t{\n\t\t\t\t// KNOWN: Affects horizontal alignment in quirks\n\t\t\t\t// but fill should only be used with align=left\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = (Math.max(0, w) + 1) + 'px';\n\t\t\t\tdiv.style.height = (Math.max(0, h) + 1) + 'px';\n\t\t\t}\n\t\t\telse if (overflow == 'width')\n\t\t\t{\n\t\t\t\t// KNOWN: Affects horizontal alignment in quirks\n\t\t\t\t// but fill should only be used with align=left\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = (Math.max(0, w) + 1) + 'px';\n\t\t\t\tdiv.style.maxHeight = (Math.max(0, h) + 1) + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (this.rotateHtml && rot != 0)\n\t\t\t{\n\t\t\t\tvar rad = rot * (Math.PI / 180);\n\t\t\t\t\n\t\t\t\t// Precalculate cos and sin for the rotation\n\t\t\t\tvar real_cos = parseFloat(parseFloat(Math.cos(rad)).toFixed(8));\n\t\t\t\tvar real_sin = parseFloat(parseFloat(Math.sin(-rad)).toFixed(8));\n\n\t\t\t\trad %= 2 * Math.PI;\n\t\t\t\tif (rad < 0) rad += 2 * Math.PI;\n\t\t\t\trad %= Math.PI;\n\t\t\t\tif (rad > Math.PI / 2) rad = Math.PI - rad;\n\t\t\t\t\n\t\t\t\tvar cos = Math.cos(rad);\n\t\t\t\tvar sin = Math.sin(rad);\n\n\t\t\t\t// Adds div to document to measure size\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.display = 'inline-block';\n\t\t\t\t\tinner.style.display = 'inline-block';\n\t\t\t\t\tbox.style.display = 'inline-block';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\tdiv.style.position = 'absolute';\n\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\n\t\t\t\tvar sizeDiv = div;\n\t\t\t\t\n\t\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar tmp = sizeDiv.offsetWidth + 3;\n\t\t\t\tvar oh = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tif (clip)\n\t\t\t\t{\n\t\t\t\t\tw = Math.min(w, tmp);\n\t\t\t\t\toh = Math.min(oh, h);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tw = tmp;\n\t\t\t\t}\n\n\t\t\t\t// Handles words that are longer than the given wrapping width\n\t\t\t\tif (wrap)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.width = w + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Simulates max-height in quirks\n\t\t\t\tif (mxClient.IS_QUIRKS && (clip || overflow == 'width') && oh > h)\n\t\t\t\t{\n\t\t\t\t\toh = h;\n\t\t\t\t\t\n\t\t\t\t\t// Quirks does not support maxHeight\n\t\t\t\t\tdiv.style.height = oh + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\th = oh;\n\n\t\t\t\tvar top_fix = (h - h * cos + w * -sin) / 2 - real_sin * w * (dx + 0.5) + real_cos * h * (dy + 0.5);\n\t\t\t\tvar left_fix = (w - w * cos + h * -sin) / 2 + real_cos * w * (dx + 0.5) + real_sin * h * (dy + 0.5);\n\n\t\t\t\tif (abs.nodeName == 'group' && this.root.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\t// Workaround for bug where group gets moved away if left and top are non-zero in IE8 standards\n\t\t\t\t\tvar pos = this.createElement('div');\n\t\t\t\t\tpos.style.display = 'inline-block';\n\t\t\t\t\tpos.style.position = 'absolute';\n\t\t\t\t\tpos.style.left = this.format(x + (left_fix - w / 2) * s.scale) + 'px';\n\t\t\t\t\tpos.style.top = this.format(y + (top_fix - h / 2) * s.scale) + 'px';\n\t\t\t\t\t\n\t\t\t\t\tabs.parentNode.appendChild(pos);\n\t\t\t\t\tpos.appendChild(abs);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar sc = (document.documentMode == 8 && !mxClient.IS_EM) ? 1 : s.scale;\n\t\t\t\t\t\n\t\t\t\t\tabs.style.left = this.format(x + (left_fix - w / 2) * sc) + 'px';\n\t\t\t\t\tabs.style.top = this.format(y + (top_fix - h / 2) * sc) + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// KNOWN: Rotated text rendering quality is bad for IE9 quirks\n\t\t\t\tinner.style.filter = \"progid:DXImageTransform.Microsoft.Matrix(M11=\"+real_cos+\", M12=\"+\n\t\t\t\t\treal_sin+\", M21=\"+(-real_sin)+\", M22=\"+real_cos+\", sizingMethod='auto expand')\";\n\t\t\t\tinner.style.backgroundColor = this.rotatedHtmlBackground;\n\t\t\t\t\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tinner.style.filter += 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\n\t\t\t\t// Restore parent node for DIV\n\t\t\t\tinner.appendChild(div);\n\t\t\t\tdiv.style.position = '';\n\t\t\t\tdiv.style.visibility = '';\n\t\t\t}\n\t\t\telse if (document.documentMode != 8 || mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tdiv.style.verticalAlign = 'top';\n\t\t\t\t\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tabs.style.filter = 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Adds div to document to measure size\n\t\t\t\tvar divParent = div.parentNode;\n\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\n\t\t\t\tw = div.offsetWidth;\n\t\t\t\tvar oh = div.offsetHeight;\n\t\t\t\t\n\t\t\t\t// Simulates max-height in quirks\n\t\t\t\tif (mxClient.IS_QUIRKS && clip && oh > h)\n\t\t\t\t{\n\t\t\t\t\toh = h;\n\t\t\t\t\t\n\t\t\t\t\t// Quirks does not support maxHeight\n\t\t\t\t\tdiv.style.height = oh + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\th = oh;\n\t\t\t\t\n\t\t\t\tdiv.style.visibility = '';\n\t\t\t\tdivParent.appendChild(div);\n\t\t\t\t\n\t\t\t\tabs.style.left = this.format(x + w * dx * this.state.scale) + 'px';\n\t\t\t\tabs.style.top = this.format(y + h * dy * this.state.scale) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.filter = 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Faster rendering in IE8 without offsetWidth/Height\n\t\t\t\tbox.style.left = (dx * 100) + '%';\n\t\t\t\tbox.style.top = (dy * 100) + '%';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.plainText(x, y, w, h, mxUtils.htmlEntities(str, false), align, valign, wrap, format, overflow, clip, rotation, dir);\n\t\t}\n\t}\n};\n\n/**\n * Function: plainText\n * \n * Paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.plainText = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\t// TextDirection is ignored since this code is not used (format is always HTML in the text function)\n\tvar s = this.state;\n\tx = (x + s.dx) * s.scale;\n\ty = (y + s.dy) * s.scale;\n\t\n\tvar node = this.createVmlElement('shape');\n\tnode.style.width = '1px';\n\tnode.style.height = '1px';\n\tnode.stroked = 'false';\n\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = s.fontColor;\n\tfill.opacity = (s.alpha * 100) + '%';\n\tnode.appendChild(fill);\n\t\n\tvar path = this.createVmlElement('path');\n\tpath.textpathok = 'true';\n\tpath.v = 'm ' + this.format(0) + ' ' + this.format(0) + ' l ' + this.format(1) + ' ' + this.format(0);\n\t\n\tnode.appendChild(path);\n\t\n\t// KNOWN: Font family and text decoration ignored\n\tvar tp = this.createVmlElement('textpath');\n\ttp.style.cssText = 'v-text-align:' + align;\n\ttp.style.align = align;\n\ttp.style.fontFamily = s.fontFamily;\n\ttp.string = str;\n\ttp.on = 'true';\n\t\n\t// Scale via fontsize instead of node.style.zoom for correct offsets in IE8\n\tvar size = s.fontSize * s.scale / this.vmlScale;\n\ttp.style.fontSize = size + 'px';\n\t\n\t// Bold\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\ttp.style.fontWeight = 'bold';\n\t}\n\t\n\t// Italic\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\ttp.style.fontStyle = 'italic';\n\t}\n\n\t// Underline\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttp.style.textDecoration = 'underline';\n\t}\n\n\tvar lines = str.split('\\n');\n\tvar textHeight = size + (lines.length - 1) * size * mxConstants.LINE_HEIGHT;\n\tvar dx = 0;\n\tvar dy = 0;\n\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tdy = - textHeight / 2;\n\t}\n\telse if (valign != mxConstants.ALIGN_MIDDLE) // top\n\t{\n\t\tdy = textHeight / 2;\n\t}\n\n\tif (rotation != null)\n\t{\n\t\tnode.style.rotation = rotation;\n\t\tvar rad = rotation * (Math.PI / 180);\n\t\tdx = Math.sin(rad) * dy;\n\t\tdy = Math.cos(rad) * dy;\n\t}\n\n\t// FIXME: Clipping is relative to bounding box\n\t/*if (clip)\n\t{\n\t\tnode.style.clip = 'rect(0px ' + this.format(w) + 'px ' + this.format(h) + 'px 0px)';\n\t}*/\n\t\n\tnode.appendChild(tp);\n\tnode.style.left = this.format(x - dx) + 'px';\n\tnode.style.top = this.format(y + dy) + 'px';\n\t\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.stroke = function()\n{\n\tthis.addNode(false, true);\n};\n\n/**\n * Function: fill\n * \n * Fills the current path.\n */\nmxVmlCanvas2D.prototype.fill = function()\n{\n\tthis.addNode(true, false);\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills and paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.addNode(true, true);\n};\n\n__mxOutput.mxVmlCanvas2D = typeof mxVmlCanvas2D !== 'undefined' ? mxVmlCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGuide\n *\n * Implements the alignment of selection cells to other cells in the graph.\n * \n * Constructor: mxGuide\n * \n * Constructs a new guide object.\n */\nfunction mxGuide(graph, states)\n{\n\tthis.graph = graph;\n\tthis.setStates(states);\n};\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph> instance.\n */\nmxGuide.prototype.graph = null;\n\n/**\n * Variable: states\n * \n * Contains the <mxCellStates> that are used for alignment.\n */\nmxGuide.prototype.states = null;\n\n/**\n * Variable: horizontal\n *\n * Specifies if horizontal guides are enabled. Default is true.\n */\nmxGuide.prototype.horizontal = true;\n\n/**\n * Variable: vertical\n *\n * Specifies if vertical guides are enabled. Default is true.\n */\nmxGuide.prototype.vertical = true;\n\n/**\n * Variable: guideX\n *\n * Holds the <mxShape> for the horizontal guide.\n */\nmxGuide.prototype.guideX = null;\n\n/**\n * Variable: guideY\n *\n * Holds the <mxShape> for the vertical guide.\n */\nmxGuide.prototype.guideY = null;\n\n/**\n * Variable: rounded\n *\n * Specifies if rounded coordinates should be used. Default is false.\n */\nmxGuide.prototype.rounded = false;\n\n/**\n * Variable: tolerance\n * \n * Default tolerance in px if grid is disabled. Default is 2.\n */\nmxGuide.prototype.tolerance = 2;\n\n/**\n * Function: setStates\n * \n * Sets the <mxCellStates> that should be used for alignment.\n */\nmxGuide.prototype.setStates = function(states)\n{\n\tthis.states = states;\n};\n\n/**\n * Function: isEnabledForEvent\n * \n * Returns true if the guide should be enabled for the given native event. This\n * implementation always returns true.\n */\nmxGuide.prototype.isEnabledForEvent = function(evt)\n{\n\treturn true;\n};\n\n/**\n * Function: getGuideTolerance\n * \n * Returns the tolerance for the guides. Default value is gridSize / 2.\n */\nmxGuide.prototype.getGuideTolerance = function(gridEnabled)\n{\n\treturn (gridEnabled && this.graph.gridEnabled) ? this.graph.gridSize / 2 : this.tolerance;\n};\n\n/**\n * Function: createGuideShape\n * \n * Returns the mxShape to be used for painting the respective guide. This\n * implementation returns a new, dashed and crisp <mxPolyline> using\n * <mxConstants.GUIDE_COLOR> and <mxConstants.GUIDE_STROKEWIDTH> as the format.\n * \n * Parameters:\n * \n * horizontal - Boolean that specifies which guide should be created.\n */\nmxGuide.prototype.createGuideShape = function(horizontal)\n{\n\tvar guide = new mxPolyline([], mxConstants.GUIDE_COLOR, mxConstants.GUIDE_STROKEWIDTH);\n\tguide.isDashed = true;\n\t\n\treturn guide;\n};\n\n/**\n * Function: isStateIgnored\n * \n * Returns true if the given state should be ignored.\n */\nmxGuide.prototype.isStateIgnored = function(state)\n{\n\treturn false;\n};\n\n/**\n * Function: move\n * \n * Moves the <bounds> by the given <mxPoint> and returnt the snapped point.\n */\nmxGuide.prototype.move = function(bounds, delta, gridEnabled, clone)\n{\n\tif (this.states != null && (this.horizontal || this.vertical) && bounds != null && delta != null)\n\t{\n\t\tvar scale = this.graph.getView().scale;\n\t\tvar tt = this.getGuideTolerance(gridEnabled) * scale;\n\t\tvar b = bounds.clone();\n\t\tb.x += delta.x;\n\t\tb.y += delta.y;\n\t\tvar overrideX = false;\n\t\tvar stateX = null;\n\t\tvar valueX = null;\n\t\tvar overrideY = false;\n\t\tvar stateY = null;\n\t\tvar valueY = null;\n\t\tvar ttX = tt;\n\t\tvar ttY = tt;\n\t\tvar left = b.x;\n\t\tvar right = b.x + b.width;\n\t\tvar center = b.getCenterX();\n\t\tvar top = b.y;\n\t\tvar bottom = b.y + b.height;\n\t\tvar middle = b.getCenterY();\n\t\n\t\t// Snaps the left, center and right to the given x-coordinate\n\t\tfunction snapX(x, state, centerAlign)\n\t\t{\n\t\t\tvar override = false;\n\t\t\t\n\t\t\tif (centerAlign && Math.abs(x - center) < ttX)\n\t\t\t{\n\t\t\t\tdelta.x = x - bounds.getCenterX();\n\t\t\t\tttX = Math.abs(x - center);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (!centerAlign)\n\t\t\t{\n\t\t\t\tif (Math.abs(x - left) < ttX)\n\t\t\t\t{\n\t\t\t\t\tdelta.x = x - bounds.x;\n\t\t\t\t\tttX = Math.abs(x - left);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(x - right) < ttX)\n\t\t\t\t{\n\t\t\t\t\tdelta.x = x - bounds.x - bounds.width;\n\t\t\t\t\tttX = Math.abs(x - right);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (override)\n\t\t\t{\n\t\t\t\tstateX = state;\n\t\t\t\tvalueX = x;\n\t\t\t\t\n\t\t\t\tif (this.guideX == null)\n\t\t\t\t{\n\t\t\t\t\tthis.guideX = this.createGuideShape(true);\n\t\t\t\t\t\n\t\t\t\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t\t\t\t// event-transparency on the background area of the rectangle since\n\t\t\t\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\t\t\t\tthis.guideX.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.guideX.pointerEvents = false;\n\t\t\t\t\tthis.guideX.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\toverrideX = overrideX || override;\n\t\t};\n\t\t\n\t\t// Snaps the top, middle or bottom to the given y-coordinate\n\t\tfunction snapY(y, state, centerAlign)\n\t\t{\n\t\t\tvar override = false;\n\t\t\t\n\t\t\tif (centerAlign && Math.abs(y - middle) < ttY)\n\t\t\t{\n\t\t\t\tdelta.y = y - bounds.getCenterY();\n\t\t\t\tttY = Math.abs(y -  middle);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (!centerAlign)\n\t\t\t{\n\t\t\t\tif (Math.abs(y - top) < ttY)\n\t\t\t\t{\n\t\t\t\t\tdelta.y = y - bounds.y;\n\t\t\t\t\tttY = Math.abs(y - top);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(y - bottom) < ttY)\n\t\t\t\t{\n\t\t\t\t\tdelta.y = y - bounds.y - bounds.height;\n\t\t\t\t\tttY = Math.abs(y - bottom);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (override)\n\t\t\t{\n\t\t\t\tstateY = state;\n\t\t\t\tvalueY = y;\n\t\t\t\t\n\t\t\t\tif (this.guideY == null)\n\t\t\t\t{\n\t\t\t\t\tthis.guideY = this.createGuideShape(false);\n\t\t\t\t\t\n\t\t\t\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t\t\t\t// event-transparency on the background area of the rectangle since\n\t\t\t\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\t\t\t\tthis.guideY.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.guideY.pointerEvents = false;\n\t\t\t\t\tthis.guideY.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\toverrideY = overrideY || override;\n\t\t};\n\t\t\n\t\tfor (var i = 0; i < this.states.length; i++)\n\t\t{\n\t\t\tvar state =  this.states[i];\n\t\t\t\n\t\t\tif (state != null && !this.isStateIgnored(state))\n\t\t\t{\n\t\t\t\t// Align x\n\t\t\t\tif (this.horizontal)\n\t\t\t\t{\n\t\t\t\t\tsnapX.call(this, state.getCenterX(), state, true);\n\t\t\t\t\tsnapX.call(this, state.x, state, false);\n\t\t\t\t\tsnapX.call(this, state.x + state.width, state, false);\n\t\t\t\t\t\n\t\t\t\t\t// Aligns left and right of shape to center of page\n\t\t\t\t\tif (state.cell == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tsnapX.call(this, state.getCenterX(), state, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Align y\n\t\t\t\tif (this.vertical)\n\t\t\t\t{\n\t\t\t\t\tsnapY.call(this, state.getCenterY(), state, true);\n\t\t\t\t\tsnapY.call(this, state.y, state, false);\n\t\t\t\t\tsnapY.call(this, state.y + state.height, state, false);\n\t\t\t\t\t\n\t\t\t\t\t// Aligns left and right of shape to center of page\n\t\t\t\t\tif (state.cell == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tsnapY.call(this, state.getCenterY(), state, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Moves cells to the raster if not aligned\n\t\tthis.graph.snapDelta(delta, bounds, !gridEnabled, overrideX, overrideY);\n\t\tdelta = this.getDelta(bounds, stateX, delta.x, stateY, delta.y)\n\t\t\n\t\t// Redraws the guides\n\t\tvar c = this.graph.container;\n\t\t\n\t\tif (!overrideX && this.guideX != null)\n\t\t{\n\t\t\tthis.guideX.node.style.visibility = 'hidden';\n\t\t}\n\t\telse if (this.guideX != null)\n\t\t{\n\t\t\tvar minY = null;\n        \tvar maxY = null;\n        \t\n\t\t\tif (stateX != null && bounds != null)\n\t\t\t{\n\t\t\t\tminY = Math.min(bounds.y + delta.y - this.graph.panDy, stateX.y);\n\t\t\t\tmaxY = Math.max(bounds.y + bounds.height + delta.y - this.graph.panDy, stateX.y + stateX.height);\n\t\t\t}\n\t\t\t\n\t\t\tif (minY != null && maxY != null)\n\t\t\t{\n\t\t\t\tthis.guideX.points = [new mxPoint(valueX, minY), new mxPoint(valueX, maxY)];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.guideX.points = [new mxPoint(valueX, -this.graph.panDy),\n\t\t\t\t\tnew mxPoint(valueX, c.scrollHeight - 3 - this.graph.panDy)];\n\t\t\t}\n\t\t\t\n\t\t\tthis.guideX.stroke = this.getGuideColor(stateX, true);\n\t\t\tthis.guideX.node.style.visibility = 'visible';\n\t\t\tthis.guideX.redraw();\n\t\t}\n\t\t\n\t\tif (!overrideY && this.guideY != null)\n\t\t{\n\t\t\tthis.guideY.node.style.visibility = 'hidden';\n\t\t}\n\t\telse if (this.guideY != null)\n\t\t{\n\t\t\tvar minX = null;\n        \tvar maxX = null;\n        \t\n\t\t\tif (stateY != null && bounds != null)\n\t\t\t{\n\t\t\t\tminX = Math.min(bounds.x + delta.x - this.graph.panDx, stateY.x);\n\t\t\t\tmaxX = Math.max(bounds.x + bounds.width + delta.x - this.graph.panDx, stateY.x + stateY.width);\n\t\t\t}\n\t\t\t\n\t\t\tif (minX != null && maxX != null)\n\t\t\t{\n\t\t\t\tthis.guideY.points = [new mxPoint(minX, valueY), new mxPoint(maxX, valueY)];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.guideY.points = [new mxPoint(-this.graph.panDx, valueY),\n\t\t\t\t\tnew mxPoint(c.scrollWidth - 3 - this.graph.panDx, valueY)];\n\t\t\t}\n\t\t\t\n\t\t\tthis.guideY.stroke = this.getGuideColor(stateY, false);\n\t\t\tthis.guideY.node.style.visibility = 'visible';\n\t\t\tthis.guideY.redraw();\n\t\t}\n\t}\n\t\n\treturn delta;\n};\n\n/**\n * Function: getDelta\n * \n * Rounds to pixels for virtual states (eg. page guides)\n */\nmxGuide.prototype.getDelta = function(bounds, stateX, dx, stateY, dy)\n{\n\tvar s = this.graph.view.scale;\n\t\n\tif (this.rounded || (stateX != null && stateX.cell == null))\n\t{\n\t\tdx = Math.round((bounds.x + dx) / s) * s - bounds.x;\n\t}\n\n\tif (this.rounded || (stateY != null && stateY.cell == null))\n\t{\n\t\tdy = Math.round((bounds.y + dy) / s) * s - bounds.y;\n\t}\n\t\n\treturn new mxPoint(dx, dy);\n};\n\n/**\n * Function: getGuideColor\n * \n * Returns the color for the given state.\n */\nmxGuide.prototype.getGuideColor = function(state, horizontal)\n{\n\treturn mxConstants.GUIDE_COLOR;\n};\n\n/**\n * Function: hide\n * \n * Hides all current guides.\n */\nmxGuide.prototype.hide = function()\n{\n\tthis.setVisible(false);\n};\n\n/**\n * Function: setVisible\n * \n * Shows or hides the current guides.\n */\nmxGuide.prototype.setVisible = function(visible)\n{\n\tif (this.guideX != null)\n\t{\n\t\tthis.guideX.node.style.visibility = (visible) ? 'visible' : 'hidden';\n\t}\n\t\n\tif (this.guideY != null)\n\t{\n\t\tthis.guideY.node.style.visibility = (visible) ? 'visible' : 'hidden';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys all resources that this object uses.\n */\nmxGuide.prototype.destroy = function()\n{\n\tif (this.guideX != null)\n\t{\n\t\tthis.guideX.destroy();\n\t\tthis.guideX = null;\n\t}\n\t\n\tif (this.guideY != null)\n\t{\n\t\tthis.guideY.destroy();\n\t\tthis.guideY = null;\n\t}\n};\n\n__mxOutput.mxGuide = typeof mxGuide !== 'undefined' ? mxGuide : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxShape\n *\n * Base class for all shapes. A shape in mxGraph is a\n * separate implementation for SVG, VML and HTML. Which\n * implementation to use is controlled by the <dialect>\n * property which is assigned from within the <mxCellRenderer>\n * when the shape is created. The dialect must be assigned\n * for a shape, and it does normally depend on the browser and\n * the confiuration of the graph (see <mxGraph> rendering hint).\n *\n * For each supported shape in SVG and VML, a corresponding\n * shape exists in mxGraph, namely for text, image, rectangle,\n * rhombus, ellipse and polyline. The other shapes are a\n * combination of these shapes (eg. label and swimlane)\n * or they consist of one or more (filled) path objects\n * (eg. actor and cylinder). The HTML implementation is\n * optional but may be required for a HTML-only view of\n * the graph.\n *\n * Custom Shapes:\n *\n * To extend from this class, the basic code looks as follows.\n * In the special case where the custom shape consists only of\n * one filled region or one filled region and an additional stroke\n * the <mxActor> and <mxCylinder> should be subclassed,\n * respectively.\n *\n * (code)\n * function CustomShape() { }\n * \n * CustomShape.prototype = new mxShape();\n * CustomShape.prototype.constructor = CustomShape; \n * (end)\n *\n * To register a custom shape in an existing graph instance,\n * one must register the shape under a new name in the graph's\n * cell renderer as follows:\n *\n * (code)\n * mxCellRenderer.registerShape('customShape', CustomShape);\n * (end)\n *\n * The second argument is the name of the constructor.\n *\n * In order to use the shape you can refer to the given name above\n * in a stylesheet. For example, to change the shape for the default\n * vertex style, the following code is used:\n *\n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = 'customShape';\n * (end)\n * \n * Constructor: mxShape\n *\n * Constructs a new shape.\n */\nfunction mxShape(stencil)\n{\n\tthis.stencil = stencil;\n\tthis.initStyles();\n};\n\n/**\n * Variable: dialect\n *\n * Holds the dialect in which the shape is to be painted.\n * This can be one of the DIALECT constants in <mxConstants>.\n */\nmxShape.prototype.dialect = null;\n\n/**\n * Variable: scale\n *\n * Holds the scale in which the shape is being painted.\n */\nmxShape.prototype.scale = 1;\n\n/**\n * Variable: antiAlias\n * \n * Rendering hint for configuring the canvas.\n */\nmxShape.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n * \n * Minimum stroke width for SVG output.\n */\nmxShape.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: bounds\n *\n * Holds the <mxRectangle> that specifies the bounds of this shape.\n */\nmxShape.prototype.bounds = null;\n\n/**\n * Variable: points\n *\n * Holds the array of <mxPoints> that specify the points of this shape.\n */\nmxShape.prototype.points = null;\n\n/**\n * Variable: node\n *\n * Holds the outermost DOM node that represents this shape.\n */\nmxShape.prototype.node = null;\n \n/**\n * Variable: state\n * \n * Optional reference to the corresponding <mxCellState>.\n */\nmxShape.prototype.state = null;\n\n/**\n * Variable: style\n *\n * Optional reference to the style of the corresponding <mxCellState>.\n */\nmxShape.prototype.style = null;\n\n/**\n * Variable: boundingBox\n *\n * Contains the bounding box of the shape, that is, the smallest rectangle\n * that includes all pixels of the shape.\n */\nmxShape.prototype.boundingBox = null;\n\n/**\n * Variable: stencil\n *\n * Holds the <mxStencil> that defines the shape.\n */\nmxShape.prototype.stencil = null;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Event-tolerance for SVG strokes (in px). Default is 8. This is only passed\n * to the canvas in <createSvgCanvas> if <pointerEvents> is true.\n */\nmxShape.prototype.svgStrokeTolerance = 8;\n\n/**\n * Variable: pointerEvents\n * \n * Specifies if pointer events should be handled. Default is true.\n */\nmxShape.prototype.pointerEvents = true;\n\n/**\n * Variable: svgPointerEvents\n * \n * Specifies if pointer events should be handled. Default is true.\n */\nmxShape.prototype.svgPointerEvents = 'all';\n\n/**\n * Variable: shapePointerEvents\n * \n * Specifies if pointer events outside of shape should be handled. Default\n * is false.\n */\nmxShape.prototype.shapePointerEvents = false;\n\n/**\n * Variable: stencilPointerEvents\n * \n * Specifies if pointer events outside of stencils should be handled. Default\n * is false. Set this to true for backwards compatibility with the 1.x branch.\n */\nmxShape.prototype.stencilPointerEvents = false;\n\n/**\n * Variable: vmlScale\n * \n * Scale for improving the precision of VML rendering. Default is 1.\n */\nmxShape.prototype.vmlScale = 1;\n\n/**\n * Variable: outline\n * \n * Specifies if the shape should be drawn as an outline. This disables all\n * fill colors and can be used to disable other drawing states that should\n * not be painted for outlines. Default is false. This should be set before\n * calling <apply>.\n */\nmxShape.prototype.outline = false;\n\n/**\n * Variable: visible\n * \n * Specifies if the shape is visible. Default is true.\n */\nmxShape.prototype.visible = true;\n\n/**\n * Variable: useSvgBoundingBox\n * \n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxShape.prototype.useSvgBoundingBox = false;\n\n/**\n * Function: init\n *\n * Initializes the shape by creaing the DOM node using <create>\n * and adding it into the given container.\n *\n * Parameters:\n *\n * container - DOM node that will contain the shape.\n */\nmxShape.prototype.init = function(container)\n{\n\tif (this.node == null)\n\t{\n\t\tthis.node = this.create(container);\n\t\t\n\t\tif (container != null)\n\t\t{\n\t\t\tcontainer.appendChild(this.node);\n\t\t}\n\t}\n};\n\n/**\n * Function: initStyles\n *\n * Sets the styles to their default values.\n */\nmxShape.prototype.initStyles = function(container)\n{\n\tthis.strokewidth = 1;\n\tthis.rotation = 0;\n\tthis.opacity = 100;\n\tthis.fillOpacity = 100;\n\tthis.strokeOpacity = 100;\n\tthis.flipH = false;\n\tthis.flipV = false;\n};\n\n/**\n * Function: isParseVml\n * \n * Specifies if any VML should be added via insertAdjacentHtml to the DOM. This\n * is only needed in IE8 and only if the shape contains VML markup. This method\n * returns true.\n */\nmxShape.prototype.isParseVml = function()\n{\n\treturn true;\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation always\n * returns false.\n */\nmxShape.prototype.isHtmlAllowed = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getSvgScreenOffset\n * \n * Returns 0, or 0.5 if <strokewidth> % 2 == 1.\n */\nmxShape.prototype.getSvgScreenOffset = function()\n{\n\tvar sw = this.stencil && this.stencil.strokewidth != 'inherit' ? Number(this.stencil.strokewidth) : this.strokewidth;\n\t\n\treturn (mxUtils.mod(Math.max(1, Math.round(sw * this.scale)), 2) == 1) ? 0.5 : 0;\n};\n\n/**\n * Function: create\n *\n * Creates and returns the DOM node(s) for the shape in\n * the given container. This implementation invokes\n * <createSvg>, <createHtml> or <createVml> depending\n * on the <dialect> and style settings.\n *\n * Parameters:\n *\n * container - DOM node that will contain the shape.\n */\nmxShape.prototype.create = function(container)\n{\n\tvar node = null;\n\t\n\tif (container != null && container.ownerSVGElement != null)\n\t{\n\t\tnode = this.createSvg(container);\n\t}\n\telse if (document.documentMode == 8 || !mxClient.IS_VML ||\n\t\t(this.dialect != mxConstants.DIALECT_VML && this.isHtmlAllowed()))\n\t{\n\t\tnode = this.createHtml(container);\n\t}\n\telse\n\t{\n\t\tnode = this.createVml(container);\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: createSvg\n *\n * Creates and returns the SVG node(s) to represent this shape.\n */\nmxShape.prototype.createSvg = function()\n{\n\treturn document.createElementNS(mxConstants.NS_SVG, 'g');\n};\n\n/**\n * Function: createVml\n *\n * Creates and returns the VML node to represent this shape.\n */\nmxShape.prototype.createVml = function()\n{\n\tvar node = document.createElement(mxClient.VML_PREFIX + ':group');\n\tnode.style.position = 'absolute';\n\t\n\treturn node;\n};\n\n/**\n * Function: createHtml\n *\n * Creates and returns the HTML DOM node(s) to represent\n * this shape. This implementation falls back to <createVml>\n * so that the HTML creation is optional.\n */\nmxShape.prototype.createHtml = function()\n{\n\tvar node = document.createElement('div');\n\tnode.style.position = 'absolute';\n\t\n\treturn node;\n};\n\n/**\n * Function: reconfigure\n *\n * Reconfigures this shape. This will update the colors etc in\n * addition to the bounds or points.\n */\nmxShape.prototype.reconfigure = function()\n{\n\tthis.redraw();\n};\n\n/**\n * Function: redraw\n *\n * Creates and returns the SVG node(s) to represent this shape.\n */\nmxShape.prototype.redraw = function()\n{\n\tthis.updateBoundsFromPoints();\n\t\n\tif (this.visible && this.checkBounds())\n\t{\t\n\t\tif(this.node?.style){\n\t\t\tthis.node.style.display = '';\n\t\t}\n\n\t\tthis.clear();\n\t\t\n\t\tif (this.node?.nodeName == 'DIV' && (this.isHtmlAllowed() || !mxClient.IS_VML))\n\t\t{\n\t\t\tthis.redrawHtmlShape();\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\tthis.redrawShape();\n\t\t}\n\n\t\tthis.updateBoundingBox();\n\t}\n\telse\n\t{\n\t\tthis.node.style.display = 'none';\n\t\tthis.boundingBox = null;\n\t}\n};\n\n/**\n * Function: clear\n * \n * Removes all child nodes and resets all CSS.\n */\nmxShape.prototype.clear = function()\n{\n\tif (this.node?.ownerSVGElement != null)\n\t{\n\t\twhile (this.node.lastChild != null)\n\t\t{\n\t\t\tthis.node.removeChild(this.node.lastChild);\n\t\t}\n\t}\n\telse\n\t{\n\t\tif(this.node){\n\t\t\tthis.node.style.cssText = 'position:absolute;' + ((this.cursor != null) ?\n\t\t\t('cursor:' + this.cursor + ';') : '');\n\t\tthis.node.innerHTML = '';\n\t\t}\n\n\t}\n};\n\n/**\n * Function: updateBoundsFromPoints\n * \n * Updates the bounds based on the points.\n */\nmxShape.prototype.updateBoundsFromPoints = function()\n{\n\tvar pts = this.points;\n\t\n\tif (pts != null && pts.length > 0 && pts[0] != null)\n\t{\n\t\tthis.bounds = new mxRectangle(Number(pts[0].x), Number(pts[0].y), 1, 1);\n\t\t\n\t\tfor (var i = 1; i < this.points.length; i++)\n\t\t{\n\t\t\tif (pts[i] != null)\n\t\t\t{\n\t\t\t\tthis.bounds.add(new mxRectangle(Number(pts[i].x), Number(pts[i].y), 1, 1));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the <mxRectangle> for the label bounds of this shape, based on the\n * given scaled and translated bounds of the shape. This method should not\n * change the rectangle in-place. This implementation returns the given rect.\n */\nmxShape.prototype.getLabelBounds = function(rect)\n{\n\tvar d = mxUtils.getValue(this.style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\tvar bounds = rect;\n\t\n\t// Normalizes argument for getLabelMargins hook\n\tif (d != mxConstants.DIRECTION_SOUTH && d != mxConstants.DIRECTION_NORTH &&\n\t\tthis.state != null && this.state.text != null &&\n\t\tthis.state.text.isPaintBoundsInverted())\n\t{\n\t\tbounds = bounds.clone();\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\t\t\n\tvar m = this.getLabelMargins(bounds);\n\t\n\tif (m != null)\n\t{\n\t\tvar flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, false) == '1';\n\t\tvar flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, false) == '1';\n\t\t\n\t\t// Handles special case for vertical labels\n\t\tif (this.state != null && this.state.text != null &&\n\t\t\tthis.state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = m.x;\n\t\t\tm.x = m.height;\n\t\t\tm.height = m.width;\n\t\t\tm.width = m.y;\n\t\t\tm.y = tmp;\n\n\t\t\ttmp = flipH;\n\t\t\tflipH = flipV;\n\t\t\tflipV = tmp;\n\t\t}\n\t\t\n\t\treturn mxUtils.getDirectedBounds(rect, m, this.style, flipH, flipV);\n\t}\n\t\n\treturn rect;\n};\n\n/**\n * Function: getLabelMargins\n * \n * Returns the scaled top, left, bottom and right margin to be used for\n * computing the label bounds as an <mxRectangle>, where the bottom and right\n * margin are defined in the width and height of the rectangle, respectively.\n */\nmxShape.prototype.getLabelMargins= function(rect)\n{\n\treturn null;\n};\n\n/**\n * Function: checkBounds\n * \n * Returns true if the bounds are not null and all of its variables are numeric.\n */\nmxShape.prototype.checkBounds = function()\n{\n\treturn (!isNaN(this.scale) && isFinite(this.scale) && this.scale > 0 &&\n\t\t\tthis.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&\n\t\t\t!isNaN(this.bounds.width) && !isNaN(this.bounds.height) &&\n\t\t\tthis.bounds.width > 0 && this.bounds.height > 0);\n};\n\n/**\n * Function: createVmlGroup\n *\n * Returns the temporary element used for rendering in IE8 standards mode.\n */\nmxShape.prototype.createVmlGroup = function()\n{\n\tvar node = document.createElement(mxClient.VML_PREFIX + ':group');\n\tnode.style.position = 'absolute';\n\tnode.style.width = this.node.style.width;\n\tnode.style.height = this.node.style.height;\n\t\n\treturn node;\n};\n\n/**\n * Function: redrawShape\n *\n * Updates the SVG or VML shape.\n */\nmxShape.prototype.redrawShape = function()\n{\n\tvar canvas = this.createCanvas();\n\t\n\tif (canvas != null)\n\t{\n\t\t// Specifies if events should be handled\n\t\tcanvas.pointerEvents = this.pointerEvents;\n\t\n\t\tthis.beforePaint(canvas);\n\t\tthis.paint(canvas);\n\t\tthis.afterPaint(canvas);\n\t\n\t\tif (this.node != canvas.root)\n\t\t{\n\t\t\t// Forces parsing in IE8 standards mode - slow! avoid\n\t\t\tthis.node.insertAdjacentHTML('beforeend', canvas.root.outerHTML);\n\t\t}\n\t\n\t\tif (this.node.nodeName == 'DIV' && document.documentMode == 8)\n\t\t{\n\t\t\t// Makes DIV transparent to events for IE8 in IE8 standards\n\t\t\t// mode (Note: Does not work for IE9 in IE8 standards mode\n\t\t\t// and not for IE11 in enterprise mode)\n\t\t\tthis.node.style.filter = '';\n\t\t\t\n\t\t\t// Adds event transparency in IE8 standards\n\t\t\tmxUtils.addTransparentBackgroundFilter(this.node);\n\t\t}\n\t\t\n\t\tthis.destroyCanvas(canvas);\n\t}\n};\n\n/**\n * Function: createCanvas\n * \n * Creates a new canvas for drawing this shape. May return null.\n */\nmxShape.prototype.createCanvas = function()\n{\n\tvar canvas = null;\n\t\n\t// LATER: Check if reusing existing DOM nodes improves performance\n\tif (this.node?.ownerSVGElement != null)\n\t{\n\t\tcanvas = this.createSvgCanvas();\n\t}\n\telse if (mxClient.IS_VML)\n\t{\n\t\tthis.updateVmlContainer();\n\t\tcanvas = this.createVmlCanvas();\n\t}\n\t\n\tif (canvas != null && this.outline)\n\t{\n\t\tcanvas.setStrokeWidth(this.strokewidth);\n\t\tcanvas.setStrokeColor(this.stroke);\n\t\t\n\t\tif (this.isDashed != null)\n\t\t{\n\t\t\tcanvas.setDashed(this.isDashed);\n\t\t}\n\t\t\n\t\tcanvas.setStrokeWidth = function() {};\n\t\tcanvas.setStrokeColor = function() {};\n\t\tcanvas.setFillColor = function() {};\n\t\tcanvas.setGradient = function() {};\n\t\tcanvas.setDashed = function() {};\n\t\tcanvas.text = function() {};\n\t}\n\n\treturn canvas;\n};\n\n/**\n * Function: createSvgCanvas\n * \n * Creates and returns an <mxSvgCanvas2D> for rendering this shape.\n */\nmxShape.prototype.createSvgCanvas = function()\n{\n\tvar canvas = new mxSvgCanvas2D(this.node, false);\n\tcanvas.strokeTolerance = (this.pointerEvents) ? this.svgStrokeTolerance : 0;\n\tcanvas.pointerEventsValue = this.svgPointerEvents;\n\tvar off = this.getSvgScreenOffset();\n\n\tif (off != 0)\n\t{\n\t\tthis.node.setAttribute('transform', 'translate(' + off + ',' + off + ')');\n\t}\n\telse\n\t{\n\t\tthis.node.removeAttribute('transform');\n\t}\n\n\tcanvas.minStrokeWidth = this.minSvgStrokeWidth;\n\t\n\tif (!this.antiAlias)\n\t{\n\t\t// Rounds all numbers in the SVG output to integers\n\t\tcanvas.format = function(value)\n\t\t{\n\t\t\treturn Math.round(parseFloat(value));\n\t\t};\n\t}\n\t\n\treturn canvas;\n};\n\n/**\n * Function: createVmlCanvas\n * \n * Creates and returns an <mxVmlCanvas2D> for rendering this shape.\n */\nmxShape.prototype.createVmlCanvas = function()\n{\n\t// Workaround for VML rendering bug in IE8 standards mode\n\tvar node = (document.documentMode == 8 && this.isParseVml()) ? this.createVmlGroup() : this.node;\n\tvar canvas = new mxVmlCanvas2D(node, false);\n\t\n\tif (node.tagUrn != '')\n\t{\n\t\tvar w = Math.max(1, Math.round(this.bounds.width));\n\t\tvar h = Math.max(1, Math.round(this.bounds.height));\n\t\tnode.coordsize = (w * this.vmlScale) + ',' + (h * this.vmlScale);\n\t\tcanvas.scale(this.vmlScale);\n\t\tcanvas.vmlScale = this.vmlScale;\n\t}\n\n\t// Painting relative to top, left shape corner\n\tvar s = this.scale;\n\tcanvas.translate(-Math.round(this.bounds.x / s), -Math.round(this.bounds.y / s));\n\t\n\treturn canvas;\n};\n\n/**\n * Function: updateVmlContainer\n * \n * Updates the bounds of the VML container.\n */\nmxShape.prototype.updateVmlContainer = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tvar w = Math.max(1, Math.round(this.bounds.width));\n\tvar h = Math.max(1, Math.round(this.bounds.height));\n\tthis.node.style.width = w + 'px';\n\tthis.node.style.height = h + 'px';\n\tthis.node.style.overflow = 'visible';\n};\n\n/**\n * Function: redrawHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.redrawHtmlShape = function()\n{\n\t// LATER: Refactor methods\n\tthis.updateHtmlBounds(this.node);\n\tthis.updateHtmlFilters(this.node);\n\tthis.updateHtmlColors(this.node);\n};\n\n/**\n * Function: updateHtmlFilters\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlFilters = function(node)\n{\n\tvar f = '';\n\t\n\tif (this.opacity < 100)\n\t{\n\t\tf += 'alpha(opacity=' + (this.opacity) + ')';\n\t}\n\t\n\tif (this.isShadow)\n\t{\n\t\t// FIXME: Cannot implement shadow transparency with filter\n\t\tf += 'progid:DXImageTransform.Microsoft.dropShadow (' +\n\t\t\t'OffX=\\'' + Math.round(mxConstants.SHADOW_OFFSET_X * this.scale) + '\\', ' +\n\t\t\t'OffY=\\'' + Math.round(mxConstants.SHADOW_OFFSET_Y * this.scale) + '\\', ' +\n\t\t\t'Color=\\'' + mxConstants.VML_SHADOWCOLOR + '\\')';\n\t}\n\t\n\tif (this.fill != null && this.fill != mxConstants.NONE && this.gradient && this.gradient != mxConstants.NONE)\n\t{\n\t\tvar start = this.fill;\n\t\tvar end = this.gradient;\n\t\tvar type = '0';\n\t\t\n\t\tvar lookup = {east:0,south:1,west:2,north:3};\n\t\tvar dir = (this.direction != null) ? lookup[this.direction] : 0;\n\t\t\n\t\tif (this.gradientDirection != null)\n\t\t{\n\t\t\tdir = mxUtils.mod(dir + lookup[this.gradientDirection] - 1, 4);\n\t\t}\n\n\t\tif (dir == 1)\n\t\t{\n\t\t\ttype = '1';\n\t\t\tvar tmp = start;\n\t\t\tstart = end;\n\t\t\tend = tmp;\n\t\t}\n\t\telse if (dir == 2)\n\t\t{\n\t\t\tvar tmp = start;\n\t\t\tstart = end;\n\t\t\tend = tmp;\n\t\t}\n\t\telse if (dir == 3)\n\t\t{\n\t\t\ttype = '1';\n\t\t}\n\t\t\n\t\tf += 'progid:DXImageTransform.Microsoft.gradient(' +\n\t\t\t'startColorStr=\\'' + start + '\\', endColorStr=\\'' + end +\n\t\t\t'\\', gradientType=\\'' + type + '\\')';\n\t}\n\n\tnode.style.filter = f;\n};\n\n/**\n * Function: updateHtmlColors\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlColors = function(node)\n{\n\tvar color = this.stroke;\n\t\n\tif (color != null && color != mxConstants.NONE)\n\t{\n\t\tnode.style.borderColor = color;\n\n\t\tif (this.isDashed)\n\t\t{\n\t\t\tnode.style.borderStyle = 'dashed';\n\t\t}\n\t\telse if (this.strokewidth > 0)\n\t\t{\n\t\t\tnode.style.borderStyle = 'solid';\n\t\t}\n\n\t\tnode.style.borderWidth = Math.max(1, Math.ceil(this.strokewidth * this.scale)) + 'px';\n\t}\n\telse\n\t{\n\t\tnode.style.borderWidth = '0px';\n\t}\n\n\tcolor = (this.outline) ? null : this.fill;\n\t\n\tif (color != null && color != mxConstants.NONE)\n\t{\n\t\tnode.style.backgroundColor = color;\n\t\tnode.style.backgroundImage = 'none';\n\t}\n\telse if (this.pointerEvents)\n\t{\n\t\t node.style.backgroundColor = 'transparent';\n\t}\n\telse if (document.documentMode == 8)\n\t{\n\t\tmxUtils.addTransparentBackgroundFilter(node);\n\t}\n\telse\n\t{\n\t\tthis.setTransparentBackgroundImage(node);\n\t}\n};\n\n/**\n * Function: updateHtmlBounds\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlBounds = function(node)\n{\n\tvar sw = (document.documentMode >= 9) ? 0 : Math.ceil(this.strokewidth * this.scale);\n\tnode.style.borderWidth = Math.max(1, sw) + 'px';\n\tnode.style.overflow = 'hidden';\n\t\n\tnode.style.left = Math.round(this.bounds.x - sw / 2) + 'px';\n\tnode.style.top = Math.round(this.bounds.y - sw / 2) + 'px';\n\n\tif (document.compatMode == 'CSS1Compat')\n\t{\n\t\tsw = -sw;\n\t}\n\t\n\tnode.style.width = Math.round(Math.max(0, this.bounds.width + sw)) + 'px';\n\tnode.style.height = Math.round(Math.max(0, this.bounds.height + sw)) + 'px';\n};\n\n/**\n * Function: destroyCanvas\n * \n * Destroys the given canvas which was used for drawing. This implementation\n * increments the reference counts on all shared gradients used in the canvas.\n */\nmxShape.prototype.destroyCanvas = function(canvas)\n{\n\t// Manages reference counts\n\tif (canvas instanceof mxSvgCanvas2D)\n\t{\n\t\t// Increments ref counts\n\t\tfor (var key in canvas.gradients)\n\t\t{\n\t\t\tvar gradient = canvas.gradients[key];\n\t\t\t\n\t\t\tif (gradient != null)\n\t\t\t{\n\t\t\t\tgradient.mxRefCount = (gradient.mxRefCount || 0) + 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.releaseSvgGradients(this.oldGradients);\n\t\tthis.oldGradients = canvas.gradients;\n\t}\n};\n\n/**\n * Function: beforePaint\n * \n * Invoked before paint is called.\n */\nmxShape.prototype.beforePaint = function(c) { }\n\n/**\n * Function: afterPaint\n * \n * Invokes after paint was called.\n */\nmxShape.prototype.afterPaint = function(c) { }\n\n/**\n * Function: paint\n * \n * Generic rendering code.\n */\nmxShape.prototype.paint = function(c)\n{\n\tvar strokeDrawn = false;\n\t\n\tif (c != null && this.outline)\n\t{\n\t\tvar stroke = c.stroke;\n\t\t\n\t\tc.stroke = function()\n\t\t{\n\t\t\tstrokeDrawn = true;\n\t\t\tstroke.apply(this, arguments);\n\t\t};\n\n\t\tvar fillAndStroke = c.fillAndStroke;\n\t\t\n\t\tc.fillAndStroke = function()\n\t\t{\n\t\t\tstrokeDrawn = true;\n\t\t\tfillAndStroke.apply(this, arguments);\n\t\t};\n\t}\n\n\t// Scale is passed-through to canvas\n\tvar s = this.scale;\n\tvar x = this.bounds.x / s;\n\tvar y = this.bounds.y / s;\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\tif (this.isPaintBoundsInverted())\n\t{\n\t\tvar t = (w - h) / 2;\n\t\tx += t;\n\t\ty -= t;\n\t\tvar tmp = w;\n\t\tw = h;\n\t\th = tmp;\n\t}\n\t\n\tthis.updateTransform(c, x, y, w, h);\n\tthis.configureCanvas(c, x, y, w, h);\n\n\t// Adds background rectangle to capture events\n\tvar bg = null;\n\t\n\tif ((this.stencil == null && this.points == null && this.shapePointerEvents) ||\n\t\t(this.stencil != null && this.stencilPointerEvents))\n\t{\n\t\tvar bb = this.createBoundingBox();\n\t\t\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tbg = this.createTransparentSvgRectangle(bb.x, bb.y, bb.width, bb.height);\n\t\t\tthis.node.appendChild(bg);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar rect = c.createRect('rect', bb.x / s, bb.y / s, bb.width / s, bb.height / s);\n\t\t\trect.appendChild(c.createTransparentFill());\n\t\t\trect.stroked = 'false';\n\t\t\tc.root.appendChild(rect);\n\t\t}\n\t}\n\n\tif (this.stencil != null)\n\t{\n\t\tthis.stencil.drawShape(c, this, x, y, w, h);\n\t}\n\telse\n\t{\n\t\t// Stencils have separate strokewidth\n\t\tc.setStrokeWidth(this.strokewidth);\n\t\t\n\t\tif (this.points != null)\n\t\t{\n\t\t\t// Paints edge shape\n\t\t\tvar pts = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t\t{\n\t\t\t\tif (this.points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tpts.push(new mxPoint(this.points[i].x / s, this.points[i].y / s));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.paintEdgeShape(c, pts);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Paints vertex shape\n\t\t\tthis.paintVertexShape(c, x, y, w, h);\n\t\t}\n\t}\n\t\n\tif (bg != null && c.state != null && c.state.transform != null)\n\t{\n\t\tbg.setAttribute('transform', c.state.transform);\n\t}\n\t\n\t// Draws highlight rectangle if no stroke was used\n\tif (c != null && this.outline && !strokeDrawn)\n\t{\n\t\tc.rect(x, y, w, h);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: configureCanvas\n * \n * Sets the state of the canvas for drawing the shape.\n */\nmxShape.prototype.configureCanvas = function(c, x, y, w, h)\n{\n\tvar dash = null;\n\t\n\tif (this.style != null)\n\t{\n\t\tdash = this.style['dashPattern'];\t\t\n\t}\n\n\tc.setAlpha(this.opacity / 100);\n\tc.setFillAlpha(this.fillOpacity / 100);\n\tc.setStrokeAlpha(this.strokeOpacity / 100);\n\n\t// Sets alpha, colors and gradients\n\tif (this.isShadow != null)\n\t{\n\t\tc.setShadow(this.isShadow);\n\t}\n\t\n\t// Dash pattern\n\tif (this.isDashed != null)\n\t{\n\t\tc.setDashed(this.isDashed, (this.style != null) ?\n\t\t\tmxUtils.getValue(this.style, mxConstants.STYLE_FIX_DASH, false) == 1 : false);\n\t}\n\n\tif (dash != null)\n\t{\n\t\tc.setDashPattern(dash);\n\t}\n\n\tif (this.fill != null && this.fill != mxConstants.NONE && this.gradient && this.gradient != mxConstants.NONE)\n\t{\n\t\tvar b = this.getGradientBounds(c, x, y, w, h);\n\t\tc.setGradient(this.fill, this.gradient, b.x, b.y, b.width, b.height, this.gradientDirection);\n\t}\n\telse\n\t{\n\t\tc.setFillColor(this.fill);\n\t}\n\n\tc.setStrokeColor(this.stroke);\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxShape.prototype.getGradientBounds = function(c, x, y, w, h)\n{\n\treturn new mxRectangle(x, y, w, h);\n};\n\n/**\n * Function: updateTransform\n * \n * Sets the scale and rotation on the given canvas.\n */\nmxShape.prototype.updateTransform = function(c, x, y, w, h)\n{\n\t// NOTE: Currently, scale is implemented in state and canvas. This will\n\t// move to canvas in a later version, so that the states are unscaled\n\t// and untranslated and do not need an update after zooming or panning.\n\tc.scale(this.scale);\n\tc.rotate(this.getShapeRotation(), this.flipH, this.flipV, x + w / 2, y + h / 2);\n};\n\n/**\n * Function: paintVertexShape\n * \n * Paints the vertex shape.\n */\nmxShape.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tthis.paintBackground(c, x, y, w, h);\n\t\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tthis.paintForeground(c, x, y, w, h);\n\t}\n};\n\n/**\n * Function: paintBackground\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintBackground = function(c, x, y, w, h) { };\n\n/**\n * Function: paintForeground\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintForeground = function(c, x, y, w, h) { };\n\n/**\n * Function: paintEdgeShape\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintEdgeShape = function(c, pts) { };\n\n/**\n * Function: getArcSize\n * \n * Returns the arc size for the given dimension.\n */\nmxShape.prototype.getArcSize = function(w, h)\n{\n\tvar r = 0;\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t{\n\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t}\n\telse\n\t{\n\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\tr = Math.min(w * f, h * f);\n\t}\n\t\n\treturn r;\n};\n\n/**\n * Function: paintGlassEffect\n * \n * Paints the glass gradient effect.\n */\nmxShape.prototype.paintGlassEffect = function(c, x, y, w, h, arc)\n{\n\tvar sw = Math.ceil(this.strokewidth / 2);\n\tvar size = 0.4;\n\t\n\tc.setGradient('#ffffff', '#ffffff', x, y, w, h * 0.6, 'south', 0.9, 0.1);\n\tc.begin();\n\tarc += 2 * sw;\n\t\t\n\tif (this.isRounded)\n\t{\n\t\tc.moveTo(x - sw + arc, y - sw);\n\t\tc.quadTo(x - sw, y - sw, x - sw, y - sw + arc);\n\t\tc.lineTo(x - sw, y + h * size);\n\t\tc.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n\t\tc.lineTo(x + w + sw, y - sw + arc);\n\t\tc.quadTo(x + w + sw, y - sw, x + w + sw - arc, y - sw);\n\t}\n\telse\n\t{\n\t\tc.moveTo(x - sw, y - sw);\n\t\tc.lineTo(x - sw, y + h * size);\n\t\tc.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n\t\tc.lineTo(x + w + sw, y - sw);\n\t}\n\t\n\tc.close();\n\tc.fill();\n};\n\n/**\n * Function: addPoints\n * \n * Paints the given points with rounded corners.\n */\nmxShape.prototype.addPoints = function(c, pts, rounded, arcSize, close, exclude, initialMove)\n{\n\tif (pts != null && pts.length > 0)\n\t{\n\t\tinitialMove = (initialMove != null) ? initialMove : true;\n\t\tvar pe = pts[pts.length - 1];\n\t\t\n\t\t// Adds virtual waypoint in the center between start and end point\n\t\tif (close && rounded)\n\t\t{\n\t\t\tpts = pts.slice();\n\t\t\tvar p0 = pts[0];\n\t\t\tvar wp = new mxPoint(pe.x + (p0.x - pe.x) / 2, pe.y + (p0.y - pe.y) / 2);\n\t\t\tpts.splice(0, 0, wp);\n\t\t}\n\t\n\t\tvar pt = pts[0];\n\t\tvar i = 1;\n\t\n\t\t// Draws the line segments\n\t\tif (initialMove)\n\t\t{\n\t\t\tc.moveTo(pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.lineTo(pt.x, pt.y);\n\t\t}\n\t\t\n\t\twhile (i < ((close) ? pts.length : pts.length - 1))\n\t\t{\n\t\t\tvar tmp = pts[mxUtils.mod(i, pts.length)];\n\t\t\tvar dx = pt.x - tmp.x;\n\t\t\tvar dy = pt.y - tmp.y;\n\t\n\t\t\tif (rounded && (dx != 0 || dy != 0) && (exclude == null || mxUtils.indexOf(exclude, i - 1) < 0))\n\t\t\t{\n\t\t\t\t// Draws a line from the last point to the current\n\t\t\t\t// point with a spacing of size off the current point\n\t\t\t\t// into direction of the last point\n\t\t\t\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tvar nx1 = dx * Math.min(arcSize, dist / 2) / dist;\n\t\t\t\tvar ny1 = dy * Math.min(arcSize, dist / 2) / dist;\n\t\n\t\t\t\tvar x1 = tmp.x + nx1;\n\t\t\t\tvar y1 = tmp.y + ny1;\n\t\t\t\tc.lineTo(x1, y1);\n\t\n\t\t\t\t// Draws a curve from the last point to the current\n\t\t\t\t// point with a spacing of size off the current point\n\t\t\t\t// into direction of the next point\n\t\t\t\tvar next = pts[mxUtils.mod(i + 1, pts.length)];\n\t\t\t\t\n\t\t\t\t// Uses next non-overlapping point\n\t\t\t\twhile (i < pts.length - 2 && Math.round(next.x - tmp.x) == 0 && Math.round(next.y - tmp.y) == 0)\n\t\t\t\t{\n\t\t\t\t\tnext = pts[mxUtils.mod(i + 2, pts.length)];\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdx = next.x - tmp.x;\n\t\t\t\tdy = next.y - tmp.y;\n\t\n\t\t\t\tdist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n\t\t\t\tvar nx2 = dx * Math.min(arcSize, dist / 2) / dist;\n\t\t\t\tvar ny2 = dy * Math.min(arcSize, dist / 2) / dist;\n\t\n\t\t\t\tvar x2 = tmp.x + nx2;\n\t\t\t\tvar y2 = tmp.y + ny2;\n\t\n\t\t\t\tc.quadTo(tmp.x, tmp.y, x2, y2);\n\t\t\t\ttmp = new mxPoint(x2, y2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.lineTo(tmp.x, tmp.y);\n\t\t\t}\n\t\n\t\t\tpt = tmp;\n\t\t\ti++;\n\t\t}\n\t\n\t\tif (close)\n\t\t{\n\t\t\tc.close();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.lineTo(pe.x, pe.y);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetStyles\n * \n * Resets all styles.\n */\nmxShape.prototype.resetStyles = function()\n{\n\tthis.initStyles();\n\n\tthis.spacing = 0;\n\t\n\tdelete this.fill;\n\tdelete this.gradient;\n\tdelete this.gradientDirection;\n\tdelete this.stroke;\n\tdelete this.startSize;\n\tdelete this.endSize;\n\tdelete this.startArrow;\n\tdelete this.endArrow;\n\tdelete this.direction;\n\tdelete this.isShadow;\n\tdelete this.isDashed;\n\tdelete this.isRounded;\n\tdelete this.glass;\n};\n\n/**\n * Function: apply\n * \n * Applies the style of the given <mxCellState> to the shape. This\n * implementation assigns the following styles to local fields:\n * \n * - <mxConstants.STYLE_FILLCOLOR> => fill\n * - <mxConstants.STYLE_GRADIENTCOLOR> => gradient\n * - <mxConstants.STYLE_GRADIENT_DIRECTION> => gradientDirection\n * - <mxConstants.STYLE_OPACITY> => opacity\n * - <mxConstants.STYLE_FILL_OPACITY> => fillOpacity\n * - <mxConstants.STYLE_STROKE_OPACITY> => strokeOpacity\n * - <mxConstants.STYLE_STROKECOLOR> => stroke\n * - <mxConstants.STYLE_STROKEWIDTH> => strokewidth\n * - <mxConstants.STYLE_SHADOW> => isShadow\n * - <mxConstants.STYLE_DASHED> => isDashed\n * - <mxConstants.STYLE_SPACING> => spacing\n * - <mxConstants.STYLE_STARTSIZE> => startSize\n * - <mxConstants.STYLE_ENDSIZE> => endSize\n * - <mxConstants.STYLE_ROUNDED> => isRounded\n * - <mxConstants.STYLE_STARTARROW> => startArrow\n * - <mxConstants.STYLE_ENDARROW> => endArrow\n * - <mxConstants.STYLE_ROTATION> => rotation\n * - <mxConstants.STYLE_DIRECTION> => direction\n * - <mxConstants.STYLE_GLASS> => glass\n *\n * This keeps a reference to the <style>. If you need to keep a reference to\n * the cell, you can override this method and store a local reference to\n * state.cell or the <mxCellState> itself. If <outline> should be true, make\n * sure to set it before calling this method.\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxShape.prototype.apply = function(state)\n{\n\tthis.state = state;\n\tthis.style = state.style;\n\n\tif (this.style != null)\n\t{\n\t\tthis.fill = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, this.fill);\n\t\tthis.gradient = mxUtils.getValue(this.style, mxConstants.STYLE_GRADIENTCOLOR, this.gradient);\n\t\tthis.gradientDirection = mxUtils.getValue(this.style, mxConstants.STYLE_GRADIENT_DIRECTION, this.gradientDirection);\n\t\tthis.opacity = mxUtils.getValue(this.style, mxConstants.STYLE_OPACITY, this.opacity);\n\t\tthis.fillOpacity = mxUtils.getValue(this.style, mxConstants.STYLE_FILL_OPACITY, this.fillOpacity);\n\t\tthis.strokeOpacity = mxUtils.getValue(this.style, mxConstants.STYLE_STROKE_OPACITY, this.strokeOpacity);\n\t\tthis.stroke = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, this.stroke);\n\t\tthis.strokewidth = mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth);\n\t\tthis.spacing = mxUtils.getValue(this.style, mxConstants.STYLE_SPACING, this.spacing);\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, this.startSize);\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, this.endSize);\n\t\tthis.startArrow = mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, this.startArrow);\n\t\tthis.endArrow = mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, this.endArrow);\n\t\tthis.rotation = mxUtils.getValue(this.style, mxConstants.STYLE_ROTATION, this.rotation);\n\t\tthis.direction = mxUtils.getValue(this.style, mxConstants.STYLE_DIRECTION, this.direction);\n\t\tthis.flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\tthis.flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\t\n\t\t// Legacy support for stencilFlipH/V\n\t\tif (this.stencil != null)\n\t\t{\n\t\t\tthis.flipH = mxUtils.getValue(this.style, 'stencilFlipH', 0) == 1 || this.flipH;\n\t\t\tthis.flipV = mxUtils.getValue(this.style, 'stencilFlipV', 0) == 1 || this.flipV;\n\t\t}\n\t\t\n\t\tif (this.direction == mxConstants.DIRECTION_NORTH || this.direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tvar tmp = this.flipH;\n\t\t\tthis.flipH = this.flipV;\n\t\t\tthis.flipV = tmp;\n\t\t}\n\n\t\tthis.isShadow = mxUtils.getValue(this.style, mxConstants.STYLE_SHADOW, this.isShadow) == 1;\n\t\tthis.isDashed = mxUtils.getValue(this.style, mxConstants.STYLE_DASHED, this.isDashed) == 1;\n\t\tthis.isRounded = mxUtils.getValue(this.style, mxConstants.STYLE_ROUNDED, this.isRounded) == 1;\n\t\tthis.glass = mxUtils.getValue(this.style, mxConstants.STYLE_GLASS, this.glass) == 1;\n\t\t\n\t\tif (this.fill == mxConstants.NONE)\n\t\t{\n\t\t\tthis.fill = null;\n\t\t}\n\n\t\tif (this.gradient == mxConstants.NONE)\n\t\t{\n\t\t\tthis.gradient = null;\n\t\t}\n\n\t\tif (this.stroke == mxConstants.NONE)\n\t\t{\n\t\t\tthis.stroke = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n * \n * Sets the cursor on the given shape.\n *\n * Parameters:\n *\n * cursor - The cursor to be used.\n */\nmxShape.prototype.setCursor = function(cursor)\n{\n\tif (cursor == null)\n\t{\n\t\tcursor = '';\n\t}\n\t\n\tthis.cursor = cursor;\n\n\tif (this.node != null)\n\t{\n\t\tthis.node.style.cursor = cursor;\n\t}\n};\n\n/**\n * Function: getCursor\n * \n * Returns the current cursor.\n */\nmxShape.prototype.getCursor = function()\n{\n\treturn this.cursor;\n};\n\n/**\n * Function: isRoundable\n * \n * Hook for subclassers.\n */\nmxShape.prototype.isRoundable = function()\n{\n\treturn false;\n};\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using <createBoundingBox> and\n * <augmentBoundingBox> and stores the result in <boundingBox>.\n */\nmxShape.prototype.updateBoundingBox = function()\n{\n\t// Tries to get bounding box from SVG subsystem\n\t// LATER: Use getBoundingClientRect for fallback in VML\n\tif (this.useSvgBoundingBox && this.node != null && this.node.ownerSVGElement != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar b = this.node.getBBox();\n\t\n\t\t\tif (b.width > 0 && b.height > 0)\n\t\t\t{\n\t\t\t\tthis.boundingBox = new mxRectangle(b.x, b.y, b.width, b.height);\n\t\t\t\t\n\t\t\t\t// Adds strokeWidth\n\t\t\t\tthis.boundingBox.grow(this.strokewidth * this.scale / 2);\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tcatch(e)\n\t\t{\n\t\t\t// fallback to code below\n\t\t}\n\t}\n\n\tif (this.bounds != null)\n\t{\n\t\tvar bbox = this.createBoundingBox();\n\t\t\n\t\tif (bbox != null)\n\t\t{\n\t\t\tthis.augmentBoundingBox(bbox);\n\t\t\tvar rot = this.getShapeRotation();\n\t\t\t\n\t\t\tif (rot != 0)\n\t\t\t{\n\t\t\t\tbbox = mxUtils.getBoundingBox(bbox, rot);\n\t\t\t}\n\t\t}\n\n\t\tthis.boundingBox = bbox;\n\t}\n};\n\n/**\n * Function: createBoundingBox\n *\n * Returns a new rectangle that represents the bounding box of the bare shape\n * with no shadows or strokewidths.\n */\nmxShape.prototype.createBoundingBox = function()\n{\n\tvar bb = this.bounds.clone();\n\n\tif ((this.stencil != null && (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\tthis.direction == mxConstants.DIRECTION_SOUTH)) || this.isPaintBoundsInverted())\n\t{\n\t\tbb.rotate90();\n\t}\n\t\n\treturn bb;\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the strokewidth and shadow offsets.\n */\nmxShape.prototype.augmentBoundingBox = function(bbox)\n{\n\tif (this.isShadow)\n\t{\n\t\tbbox.width += Math.ceil(mxConstants.SHADOW_OFFSET_X * this.scale);\n\t\tbbox.height += Math.ceil(mxConstants.SHADOW_OFFSET_Y * this.scale);\n\t}\n\t\n\t// Adds strokeWidth\n\tbbox.grow(this.strokewidth * this.scale / 2);\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Returns true if the bounds should be inverted.\n */\nmxShape.prototype.isPaintBoundsInverted = function()\n{\n\t// Stencil implements inversion via aspect\n\treturn this.stencil == null && (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_SOUTH);\n};\n\n/**\n * Function: getRotation\n * \n * Returns the rotation from the style.\n */\nmxShape.prototype.getRotation = function()\n{\n\treturn (this.rotation != null) ? this.rotation : 0;\n};\n\n/**\n * Function: getTextRotation\n * \n * Returns the rotation for the text label.\n */\nmxShape.prototype.getTextRotation = function()\n{\n\tvar rot = this.getRotation();\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, 1) != 1)\n\t{\n\t\trot += mxText.prototype.verticalTextRotation;\n\t}\n\t\n\treturn rot;\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns the actual rotation of the shape.\n */\nmxShape.prototype.getShapeRotation = function()\n{\n\tvar rot = this.getRotation();\n\t\n\tif (this.direction != null)\n\t{\n\t\tif (this.direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\trot += 270;\n\t\t}\n\t\telse if (this.direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\trot += 180;\n\t\t}\n\t\telse if (this.direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\trot += 90;\n\t\t}\n\t}\n\t\n\treturn rot;\n};\n\n/**\n * Function: createTransparentSvgRectangle\n * \n * Adds a transparent rectangle that catches all events.\n */\nmxShape.prototype.createTransparentSvgRectangle = function(x, y, w, h)\n{\n\tvar rect = document.createElementNS(mxConstants.NS_SVG, 'rect');\n\trect.setAttribute('x', x);\n\trect.setAttribute('y', y);\n\trect.setAttribute('width', w);\n\trect.setAttribute('height', h);\n\trect.setAttribute('fill', 'none');\n\trect.setAttribute('stroke', 'none');\n\trect.setAttribute('pointer-events', 'all');\n\t\n\treturn rect;\n};\n\n/**\n * Function: setTransparentBackgroundImage\n * \n * Sets a transparent background CSS style to catch all events.\n * \n * Paints the line shape.\n */\nmxShape.prototype.setTransparentBackgroundImage = function(node)\n{\n\tnode.style.backgroundImage = 'url(\\'' + mxClient.imageBasePath + '/transparent.gif\\')';\n};\n\n/**\n * Function: releaseSvgGradients\n * \n * Paints the line shape.\n */\nmxShape.prototype.releaseSvgGradients = function(grads)\n{\n\tif (grads != null)\n\t{\n\t\tfor (var key in grads)\n\t\t{\n\t\t\tvar gradient = grads[key];\n\t\t\t\n\t\t\tif (gradient != null)\n\t\t\t{\n\t\t\t\tgradient.mxRefCount = (gradient.mxRefCount || 0) - 1;\n\t\t\t\t\n\t\t\t\tif (gradient.mxRefCount == 0 && gradient.parentNode != null)\n\t\t\t\t{\n\t\t\t\t\tgradient.parentNode.removeChild(gradient);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the shape by removing it from the DOM and releasing the DOM\n * node associated with the shape using <mxEvent.release>.\n */\nmxShape.prototype.destroy = function()\n{\n\tif (this.node != null)\n\t{\n\t\tmxEvent.release(this.node);\n\t\t\n\t\tif (this.node.parentNode != null)\n\t\t{\n\t\t\tthis.node.parentNode.removeChild(this.node);\n\t\t}\n\t\t\n\t\tthis.node = null;\n\t}\n\t\n\t// Decrements refCount and removes unused\n\tthis.releaseSvgGradients(this.oldGradients);\n\tthis.oldGradients = null;\n};\n\n__mxOutput.mxShape = typeof mxShape !== 'undefined' ? mxShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStencil\n *\n * Implements a generic shape which is based on a XML node as a description.\n * \n * shape:\n * \n * The outer element is *shape*, that has attributes:\n * \n * - \"name\", string, required. The stencil name that uniquely identifies the shape.\n * - \"w\" and \"h\" are optional decimal view bounds. This defines your co-ordinate\n * system for the graphics operations in the shape. The default is 100,100.\n * - \"aspect\", optional string. Either \"variable\", the default, or \"fixed\". Fixed\n * means always render the shape with the aspect ratio defined by the ratio w/h.\n * Variable causes the ratio to match that of the geometry of the current vertex.\n * - \"strokewidth\", optional string. Either an integer or the string \"inherit\".\n * \"inherit\" indicates that the strokeWidth of the cell is only changed on scaling,\n * not on resizing. Default is \"1\".\n * If numeric values are used, the strokeWidth of the cell is changed on both\n * scaling and resizing and the value defines the multiple that is applied to\n * the width.\n * \n * connections:\n * \n * If you want to define specific fixed connection points on the shape use the\n * *connections* element. Each *constraint* element within connections defines\n * a fixed connection point on the shape. Constraints have attributes:\n * \n * - \"perimeter\", required. 1 or 0. 0 sets the connection point where specified\n * by x,y. 1 Causes the position of the connection point to be extrapolated from\n * the center of the shape, through x,y to the point of intersection with the\n * perimeter of the shape.\n * - \"x\" and \"y\" are the position of the fixed point relative to the bounds of\n * the shape. They can be automatically adjusted if perimeter=1. So, (0,0) is top\n * left, (0.5,0.5) the center, (1,0.5) the center of the right hand edge of the\n * bounds, etc. Values may be less than 0 or greater than 1 to be positioned\n * outside of the shape.\n * - \"name\", optional string. A unique identifier for the port on the shape.\n * \n * background and foreground:\n * \n * The path of the graphics drawing is split into two elements, *foreground* and\n * *background*. The split is to define which part any shadow applied to the shape\n * is derived from (the background). This, generally, means the background is the\n * line tracing of the outside of the shape, but not always.\n * \n * Any stroke, fill or fillstroke of a background must be the first element of the\n * foreground element, they must not be used within *background*. If the background\n * is empty, this is not required.\n * \n * Because the background cannot have any fill or stroke, it can contain only one\n * *path*, *rect*, *roundrect* or *ellipse* element (or none). It can also not\n * include *image*, *text* or *include-shape*.\n * \n * Note that the state, styling and drawing in mxGraph stencils is very close in\n * design to that of HTML 5 canvas. Tutorials on this subject, if you're not\n * familiar with the topic, will give a good high-level introduction to the\n * concepts used.\n * \n * State:\n * \n * Rendering within the foreground and background elements has the concept of\n * state. There are two types of operations other than state save/load, styling\n * and drawing. The styling operations change the current state, so you can save\n * the current state with <save/> and pull the last saved state from the state\n * stack using <restore/>.\n * \n * Styling:\n * \n * The elements that change colors within the current state all take a hash\n * prefixed hex color code (\"#FFEA80\").\n * \n * - *strokecolor*, this sets the color that drawing paths will be rendered in\n * when a stroke or fillstroke command is issued.\n * - *fillcolor*, this sets the color that the inside of closed paths will be\n * rendered in when a fill or fillstroke command is issued.\n * - *fontcolor*, this sets the color that fonts are rendered in when text is drawn.\n * \n * *alpha* defines the degree of transparency used between 1.0 for fully opaque\n * and 0.0 for fully transparent.\n * \n * *fillalpha* defines the degree of fill transparency used between 1.0 for fully\n * opaque and 0.0 for fully transparent.\n * \n * *strokealpha* defines the degree of stroke transparency used between 1.0 for\n * fully opaque and 0.0 for fully transparent.\n * \n * *strokewidth* defines the integer thickness of drawing elements rendered by\n * stroking. Use fixed=\"1\" to apply the value as-is, without scaling.\n * \n * *dashed* is \"1\" for dashing enabled and \"0\" for disabled.\n * \n * When *dashed* is enabled the current dash pattern, defined by *dashpattern*,\n * is used on strokes. dashpattern is a sequence of space separated \"on, off\"\n * lengths that define what distance to paint the stroke for, then what distance\n * to paint nothing for, repeat... The default is \"3 3\". You could define a more\n * complex pattern with \"5 3 2 6\", for example. Generally, it makes sense to have\n * an even number of elements in the dashpattern, but that's not required.\n * \n * *linejoin*, *linecap* and *miterlimit* are best explained by the Mozilla page\n * on Canvas styling (about halfway down). The values are all the same except we\n * use \"flat\" for linecap, instead of Canvas' \"butt\".\n * \n * For font styling there are.\n * \n * - *fontsize*, an integer,\n * - *fontstyle*, an ORed bit pattern of bold (1), italic (2) and underline (4),\n * i.e bold underline is \"5\".\n * - *fontfamily*, is a string defining the typeface to be used.\n * \n * Drawing:\n * \n * Most drawing is contained within a *path* element. Again, the graphic\n * primitives are very similar to that of HTML 5 canvas.\n * \n * - *move* to attributes required decimals (x,y).\n * - *line* to attributes required decimals (x,y).\n * - *quad* to required decimals (x2,y2) via control point required decimals\n * (x1,y1).\n * - *curve* to required decimals (x3,y3), via control points required decimals\n * (x1,y1) and (x2,y2).\n * - *arc*, this doesn't follow the HTML Canvas signatures, instead it's a copy\n * of the SVG arc command. The SVG specification documentation gives the best\n * description of its behaviors. The attributes are named identically, they are\n * decimals and all required.\n * - *close* ends the current subpath and causes an automatic straight line to\n * be drawn from the current point to the initial point of the current subpath.\n * \n * Complex drawing:\n * \n * In addition to the graphics primitive operations there are non-primitive\n * operations. These provide an easy method to draw some basic shapes.\n * \n * - *rect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals\n * - *roundrect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals. Also\n * \"arcsize\" an optional decimal attribute defining how large, the corner curves\n * are.\n * - *ellipse*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals.\n * \n * Note that these 3 shapes and all paths must be followed by either a fill,\n * stroke, or fillstroke.\n * \n * Text:\n * \n * *text* elements have the following attributes.\n * \n * - \"str\", the text string to display, required.\n * - \"x\" and \"y\", the decimal location (x,y) of the text element, required.\n * - \"align\", the horizontal alignment of the text element, either \"left\",\n * \"center\" or \"right\". Optional, default is \"left\".\n * - \"valign\", the vertical alignment of the text element, either \"top\", \"middle\"\n * or \"bottom\". Optional, default is \"top\".\n * - \"localized\", 0 or 1, if 1 then the \"str\" actually contains a key to use to\n * fetch the value out of mxResources. Optional, default is\n * <mxStencil.defaultLocalized>.\n * - \"vertical\", 0 or 1, if 1 the label is rendered vertically (rotated by 90\n * degrees). Optional, default is 0.\n * - \"rotation\", angle in degrees (0 to 360). The angle to rotate the text by.\n * Optional, default is 0.\n * - \"align-shape\", 0 or 1, if 0 ignore the rotation of the shape when setting\n * the text rotation. Optional, default is 1.\n * \n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the text element (ignored if the str attribute is not null).\n * \n * Images:\n * \n * *image* elements can either be external URLs, or data URIs, where supported\n * (not in IE 7-). Attributes are:\n * \n * - \"src\", required string. Either a data URI or URL.\n * - \"x\", \"y\", required decimals. The (x,y) position of the image.\n * - \"w\", \"h\", required decimals. The width and height of the image.\n * - \"flipH\" and \"flipV\", optional 0 or 1. Whether to flip the image along the\n * horizontal/vertical axis. Default is 0 for both.\n * \n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the image source (ignored if the src attribute is not null).\n * \n * Sub-shapes:\n * \n * *include-shape* allow stencils to be rendered within the current stencil by\n * referencing the sub-stencil by name. Attributes are:\n * \n * - \"name\", required string. The unique shape name of the stencil.\n * - \"x\", \"y\", \"w\", \"h\", required decimals. The (x,y) position of the sub-shape\n * and its width and height.\n * \n * Constructor: mxStencil\n * \n * Constructs a new generic shape by setting <desc> to the given XML node and\n * invoking <parseDescription> and <parseConstraints>.\n * \n * Parameters:\n * \n * desc - XML node that contains the stencil description.\n */\nfunction mxStencil(desc)\n{\n\tthis.desc = desc;\n\tthis.parseDescription();\n\tthis.parseConstraints();\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxStencil, mxShape);\n\n/**\n * Variable: defaultLocalized\n * \n * Static global variable that specifies the default value for the localized\n * attribute of the text element. Default is false.\n */\nmxStencil.defaultLocalized = false;\n\n/**\n * Function: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content and images. Default is false. Set this to true\n * if stencils can not contain user input.\n */\nmxStencil.allowEval = false;\n\n/**\n * Variable: desc\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.desc = null;\n\n/**\n * Variable: constraints\n * \n * Holds an array of <mxConnectionConstraints> as defined in the shape.\n */\nmxStencil.prototype.constraints = null;\n\n/**\n * Variable: aspect\n *\n * Holds the aspect of the shape. Default is 'auto'.\n */\nmxStencil.prototype.aspect = null;\n\n/**\n * Variable: w0\n *\n * Holds the width of the shape. Default is 100.\n */\nmxStencil.prototype.w0 = null;\n\n/**\n * Variable: h0\n *\n * Holds the height of the shape. Default is 100.\n */\nmxStencil.prototype.h0 = null;\n\n/**\n * Variable: bgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.bgNode = null;\n\n/**\n * Variable: fgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.fgNode = null;\n\n/**\n * Variable: strokewidth\n *\n * Holds the strokewidth direction from the description.\n */\nmxStencil.prototype.strokewidth = null;\n\n/**\n * Function: parseDescription\n *\n * Reads <w0>, <h0>, <aspect>, <bgNodes> and <fgNodes> from <desc>.\n */\nmxStencil.prototype.parseDescription = function()\n{\n\t// LATER: Preprocess nodes for faster painting\n\tthis.fgNode = this.desc.getElementsByTagName('foreground')[0];\n\tthis.bgNode = this.desc.getElementsByTagName('background')[0];\n\tthis.w0 = Number(this.desc.getAttribute('w') || 100);\n\tthis.h0 = Number(this.desc.getAttribute('h') || 100);\n\t\n\t// Possible values for aspect are: variable and fixed where\n\t// variable means fill the available space and fixed means\n\t// use w0 and h0 to compute the aspect.\n\tvar aspect = this.desc.getAttribute('aspect');\n\tthis.aspect = (aspect != null) ? aspect : 'variable';\n\t\n\t// Possible values for strokewidth are all numbers and \"inherit\"\n\t// where the inherit means take the value from the style (ie. the\n\t// user-defined stroke-width). Note that the strokewidth is scaled\n\t// by the minimum scaling that is used to draw the shape (sx, sy).\n\tvar sw = this.desc.getAttribute('strokewidth');\n\tthis.strokewidth = (sw != null) ? sw : '1';\n};\n\n/**\n * Function: parseConstraints\n *\n * Reads the constraints from <desc> into <constraints> using\n * <parseConstraint>.\n */\nmxStencil.prototype.parseConstraints = function()\n{\n\tvar conns = this.desc.getElementsByTagName('connections')[0];\n\t\n\tif (conns != null)\n\t{\n\t\tvar tmp = mxUtils.getChildNodes(conns);\n\t\t\n\t\tif (tmp != null && tmp.length > 0)\n\t\t{\n\t\t\tthis.constraints = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t{\n\t\t\t\tthis.constraints.push(this.parseConstraint(tmp[i]));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: parseConstraint\n *\n * Parses the given XML node and returns its <mxConnectionConstraint>.\n */\nmxStencil.prototype.parseConstraint = function(node)\n{\n\tvar x = Number(node.getAttribute('x'));\n\tvar y = Number(node.getAttribute('y'));\n\tvar perimeter = node.getAttribute('perimeter') == '1';\n\tvar name = node.getAttribute('name');\n\t\n\treturn new mxConnectionConstraint(new mxPoint(x, y), perimeter, name);\n};\n\n/**\n * Function: evaluateTextAttribute\n * \n * Gets the given attribute as a text. The return value from <evaluateAttribute>\n * is used as a key to <mxResources.get> if the localized attribute in the text\n * node is 1 or if <defaultLocalized> is true.\n */\nmxStencil.prototype.evaluateTextAttribute = function(node, attribute, shape)\n{\n\tvar result = this.evaluateAttribute(node, attribute, shape);\n\tvar loc = node.getAttribute('localized');\n\t\n\tif ((mxStencil.defaultLocalized && loc == null) || loc == '1')\n\t{\n\t\tresult = mxResources.get(result);\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: evaluateAttribute\n *\n * Gets the attribute for the given name from the given node. If the attribute\n * does not exist then the text content of the node is evaluated and if it is\n * a function it is invoked with <shape> as the only argument and the return\n * value is used as the attribute value to be returned.\n */\nmxStencil.prototype.evaluateAttribute = function(node, attribute, shape)\n{\n\tvar result = node.getAttribute(attribute);\n\t\n\tif (result == null)\n\t{\n\t\tvar text = mxUtils.getTextContent(node);\n\t\t\n\t\tif (text != null && mxStencil.allowEval)\n\t\t{\n\t\t\tvar funct = mxUtils.eval(text);\n\t\t\t\n\t\t\tif (typeof(funct) == 'function')\n\t\t\t{\n\t\t\t\tresult = funct(shape);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: drawShape\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawShape = function(canvas, shape, x, y, w, h)\n{\n\tvar stack = canvas.states.slice();\n\t\n\t// TODO: Internal structure (array of special structs?), relative and absolute\n\t// coordinates (eg. note shape, process vs star, actor etc.), text rendering\n\t// and non-proportional scaling, how to implement pluggable edge shapes\n\t// (start, segment, end blocks), pluggable markers, how to implement\n\t// swimlanes (title area) with this API, add icon, horizontal/vertical\n\t// label, indicator for all shapes, rotation\n\tvar direction = mxUtils.getValue(shape.style, mxConstants.STYLE_DIRECTION, null);\n\tvar aspect = this.computeAspect(shape.style, x, y, w, h, direction);\n\tvar minScale = Math.min(aspect.width, aspect.height);\n\tvar sw = (this.strokewidth == 'inherit') ?\n\t\t\tNumber(mxUtils.getNumber(shape.style, mxConstants.STYLE_STROKEWIDTH, 1)) :\n\t\t\tNumber(this.strokewidth) * minScale;\n\tcanvas.setStrokeWidth(sw);\n\n\t// Draws a transparent rectangle for catching events\n\tif (shape.style != null && mxUtils.getValue(shape.style, mxConstants.STYLE_POINTER_EVENTS, '0') == '1')\n\t{\n\t\tcanvas.setStrokeColor(mxConstants.NONE);\n\t\tcanvas.rect(x, y, w, h);\n\t\tcanvas.stroke();\n\t\tcanvas.setStrokeColor(shape.stroke);\n\t}\n\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.bgNode, aspect, false, true);\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.fgNode, aspect, true,\n\t\t!shape.outline || shape.style == null || mxUtils.getValue(\n\t\tshape.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0);\n\t\n\t// Restores stack for unequal count of save/restore calls\n\tif (canvas.states.length != stack.length)\n\t{\n\t\tcanvas.states = stack;\n\t}\n};\n\n/**\n * Function: drawChildren\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawChildren = function(canvas, shape, x, y, w, h, node, aspect, disableShadow, paint)\n{\n\tif (node != null && w > 0 && h > 0)\n\t{\n\t\tvar tmp = node.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t{\n\t\t\t\tthis.drawNode(canvas, shape, tmp, aspect, disableShadow, paint);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t}\n};\n\n/**\n * Function: computeAspect\n *\n * Returns a rectangle that contains the offset in x and y and the horizontal\n * and vertical scale in width and height used to draw this shape inside the\n * given <mxRectangle>.\n * \n * Parameters:\n * \n * shape - <mxShape> to be drawn.\n * bounds - <mxRectangle> that should contain the stencil.\n * direction - Optional direction of the shape to be darwn.\n */\nmxStencil.prototype.computeAspect = function(shape, x, y, w, h, direction)\n{\n\tvar x0 = x;\n\tvar y0 = y;\n\tvar sx = w / this.w0;\n\tvar sy = h / this.h0;\n\t\n\tvar inverse = (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH);\n\n\tif (inverse)\n\t{\n\t\tsy = w / this.h0;\n\t\tsx = h / this.w0;\n\t\t\n\t\tvar delta = (w - h) / 2;\n\n\t\tx0 += delta;\n\t\ty0 -= delta;\n\t}\n\n\tif (this.aspect == 'fixed')\n\t{\n\t\tsy = Math.min(sx, sy);\n\t\tsx = sy;\n\t\t\n\t\t// Centers the shape inside the available space\n\t\tif (inverse)\n\t\t{\n\t\t\tx0 += (h - this.w0 * sx) / 2;\n\t\t\ty0 += (w - this.h0 * sy) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx0 += (w - this.w0 * sx) / 2;\n\t\t\ty0 += (h - this.h0 * sy) / 2;\n\t\t}\n\t}\n\n\treturn new mxRectangle(x0, y0, sx, sy);\n};\n\n/**\n * Function: drawNode\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawNode = function(canvas, shape, node, aspect, disableShadow, paint)\n{\n\tvar name = node.nodeName;\n\tvar x0 = aspect.x;\n\tvar y0 = aspect.y;\n\tvar sx = aspect.width;\n\tvar sy = aspect.height;\n\tvar minScale = Math.min(sx, sy);\n\t\n\tif (name == 'save')\n\t{\n\t\tcanvas.save();\n\t}\n\telse if (name == 'restore')\n\t{\n\t\tcanvas.restore();\n\t}\n\telse if (paint)\n\t{\n\t\tif (name == 'path')\n\t\t{\n\t\t\tcanvas.begin();\n\t\t\t\n\t\t\tvar parseRegularly = true;\n\t\t\t\n\t\t\tif (node.getAttribute('rounded') == '1')\n\t\t\t{\n\t\t\t\tparseRegularly = false;\n\t\t\t\t\n\t\t\t\tvar arcSize = Number(node.getAttribute('arcSize'));\n\t\t\t\tvar pointCount = 0;\n\t\t\t\tvar segs = [];\n\t\t\t\t\n\t\t\t\t// Renders the elements inside the given path\n\t\t\t\tvar childNode = node.firstChild;\n\t\t\t\t\n\t\t\t\twhile (childNode != null)\n\t\t\t\t{\n\t\t\t\t\tif (childNode.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar childName = childNode.nodeName;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (childName == 'move' || childName == 'line')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (childName == 'move' || segs.length == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsegs.push([]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsegs[segs.length - 1].push(new mxPoint(x0 + Number(childNode.getAttribute('x')) * sx,\n\t\t\t\t\t\t\t\ty0 + Number(childNode.getAttribute('y')) * sy));\n\t\t\t\t\t\t\tpointCount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//We only support move and line for rounded corners\n\t\t\t\t\t\t\tparseRegularly = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tchildNode = childNode.nextSibling;\n\t\t\t\t}\n\n\t\t\t\tif (!parseRegularly && pointCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < segs.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar close = false, ps = segs[i][0], pe = segs[i][segs[i].length - 1];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (ps.x == pe.x && ps.y == pe.y) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsegs[i].pop();\n\t\t\t\t\t\t\tclose = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.addPoints(canvas, segs[i], true, arcSize, close);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparseRegularly = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (parseRegularly)\n\t\t\t{\n\t\t\t\t// Renders the elements inside the given path\n\t\t\t\tvar childNode = node.firstChild;\n\t\t\t\t\n\t\t\t\twhile (childNode != null)\n\t\t\t\t{\n\t\t\t\t\tif (childNode.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.drawNode(canvas, shape, childNode, aspect, disableShadow, paint);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tchildNode = childNode.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (name == 'close')\n\t\t{\n\t\t\tcanvas.close();\n\t\t}\n\t\telse if (name == 'move')\n\t\t{\n\t\t\tcanvas.moveTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'line')\n\t\t{\n\t\t\tcanvas.lineTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'quad')\n\t\t{\n\t\t\tcanvas.quadTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy);\n\t\t}\n\t\telse if (name == 'curve')\n\t\t{\n\t\t\tcanvas.curveTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x3')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y3')) * sy);\n\t\t}\n\t\telse if (name == 'arc')\n\t\t{\n\t\t\tcanvas.arcTo(Number(node.getAttribute('rx')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('ry')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('x-axis-rotation')),\n\t\t\t\t\tNumber(node.getAttribute('large-arc-flag')),\n\t\t\t\t\tNumber(node.getAttribute('sweep-flag')),\n\t\t\t\t\tx0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'rect')\n\t\t{\n\t\t\tcanvas.rect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'roundrect')\n\t\t{\n\t\t\tvar arcsize = Number(node.getAttribute('arcsize'));\n\t\n\t\t\tif (arcsize == 0)\n\t\t\t{\n\t\t\t\tarcsize = mxConstants.RECTANGLE_ROUNDING_FACTOR * 100;\n\t\t\t}\n\t\t\t\n\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\tvar factor = Number(arcsize) / 100;\n\t\t\tvar r = Math.min(w * factor, h * factor);\n\t\t\t\n\t\t\tcanvas.roundrect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tw, h, r, r);\n\t\t}\n\t\telse if (name == 'ellipse')\n\t\t{\n\t\t\tcanvas.ellipse(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'image')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar src = this.evaluateAttribute(node, 'src', shape);\n\t\t\t\t\n\t\t\t\tcanvas.image(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy,\n\t\t\t\t\tsrc, false, node.getAttribute('flipH') == '1',\n\t\t\t\t\tnode.getAttribute('flipV') == '1');\n\t\t\t}\n\t\t}\n\t\telse if (name == 'text')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar str = this.evaluateTextAttribute(node, 'str', shape);\n\t\t\t\tvar rotation = node.getAttribute('vertical') == '1' ? -90 : 0;\n\t\t\t\t\n\t\t\t\tif (node.getAttribute('align-shape') == '0')\n\t\t\t\t{\n\t\t\t\t\tvar dr = shape.rotation;\n\t\t\n\t\t\t\t\t// Depends on flipping\n\t\t\t\t\tvar flipH = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPV, 0) == 1;\n\t\t\t\t\t\n\t\t\t\t\tif (flipH && flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t\telse if (flipH || flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation += dr;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\trotation -= node.getAttribute('rotation');\n\t\t\n\t\t\t\tcanvas.text(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\t\t0, 0, str, node.getAttribute('align') || 'left',\n\t\t\t\t\t\tnode.getAttribute('valign') || 'top', false, '',\n\t\t\t\t\t\tnull, false, rotation);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'include-shape')\n\t\t{\n\t\t\tvar stencil = mxStencilRegistry.getStencil(node.getAttribute('name'));\n\t\t\t\n\t\t\tif (stencil != null)\n\t\t\t{\n\t\t\t\tvar x = x0 + Number(node.getAttribute('x')) * sx;\n\t\t\t\tvar y = y0 + Number(node.getAttribute('y')) * sy;\n\t\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\t\t\n\t\t\t\tstencil.drawShape(canvas, shape, x, y, w, h);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'fillstroke')\n\t\t{\n\t\t\tcanvas.fillAndStroke();\n\t\t}\n\t\telse if (name == 'fill')\n\t\t{\n\t\t\tcanvas.fill();\n\t\t}\n\t\telse if (name == 'stroke')\n\t\t{\n\t\t\tcanvas.stroke();\n\t\t}\n\t\telse if (name == 'strokewidth')\n\t\t{\n\t\t\tvar s = (node.getAttribute('fixed') == '1') ? 1 : minScale;\n\t\t\tcanvas.setStrokeWidth(Number(node.getAttribute('width')) * s);\n\t\t}\n\t\telse if (name == 'dashed')\n\t\t{\n\t\t\tcanvas.setDashed(node.getAttribute('dashed') == '1');\n\t\t}\n\t\telse if (name == 'dashpattern')\n\t\t{\n\t\t\tvar value = node.getAttribute('pattern');\n\t\t\t\n\t\t\tif (value != null)\n\t\t\t{\n\t\t\t\tvar tmp = value.split(' ');\n\t\t\t\tvar pat = [];\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (tmp[i].length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tpat.push(Number(tmp[i]) * minScale);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue = pat.join(' ');\n\t\t\t\tcanvas.setDashPattern(value);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'strokecolor')\n\t\t{\n\t\t\tcanvas.setStrokeColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'linecap')\n\t\t{\n\t\t\tcanvas.setLineCap(node.getAttribute('cap'));\n\t\t}\n\t\telse if (name == 'linejoin')\n\t\t{\n\t\t\tcanvas.setLineJoin(node.getAttribute('join'));\n\t\t}\n\t\telse if (name == 'miterlimit')\n\t\t{\n\t\t\tcanvas.setMiterLimit(Number(node.getAttribute('limit')));\n\t\t}\n\t\telse if (name == 'fillcolor')\n\t\t{\n\t\t\tcanvas.setFillColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'alpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'fillalpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'strokealpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'fontcolor')\n\t\t{\n\t\t\tcanvas.setFontColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'fontstyle')\n\t\t{\n\t\t\tcanvas.setFontStyle(node.getAttribute('style'));\n\t\t}\n\t\telse if (name == 'fontfamily')\n\t\t{\n\t\t\tcanvas.setFontFamily(node.getAttribute('family'));\n\t\t}\n\t\telse if (name == 'fontsize')\n\t\t{\n\t\t\tcanvas.setFontSize(Number(node.getAttribute('size')) * minScale);\n\t\t}\n\t\t\n\t\tif (disableShadow && (name == 'fillstroke' || name == 'fill' || name == 'stroke'))\n\t\t{\n\t\t\tdisableShadow = false;\n\t\t\tcanvas.setShadow(false);\n\t\t}\n\t}\n};\n\n__mxOutput.mxStencil = typeof mxStencil !== 'undefined' ? mxStencil : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n * \n * Code to add stencils.\n * \n * (code)\n * var req = mxUtils.load('test/stencils.xml');\n * var root = req.getDocumentElement();\n * var shape = root.firstChild;\n * \n * while (shape != null)\n * {\n * \t if (shape.nodeType == mxConstants.NODETYPE_ELEMENT)\n *   {\n *     mxStencilRegistry.addStencil(shape.getAttribute('name'), new mxStencil(shape));\n *   }\n *   \n *   shape = shape.nextSibling;\n * }\n * (end)\n */\nvar mxStencilRegistry =\n{\n\t/**\n\t * Class: mxStencilRegistry\n\t * \n\t * A singleton class that provides a registry for stencils and the methods\n\t * for painting those stencils onto a canvas or into a DOM.\n\t */\n\tstencils: {},\n\t\n\t/**\n\t * Function: addStencil\n\t * \n\t * Adds the given <mxStencil>.\n\t */\n\taddStencil: function(name, stencil)\n\t{\n\t\tmxStencilRegistry.stencils[name] = stencil;\n\t},\n\t\n\t/**\n\t * Function: getStencil\n\t * \n\t * Returns the <mxStencil> for the given name.\n\t */\n\tgetStencil: function(name)\n\t{\n\t\treturn mxStencilRegistry.stencils[name];\n\t}\n\n};\n\n__mxOutput.mxStencilRegistry = typeof mxStencilRegistry !== 'undefined' ? mxStencilRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxMarker =\n{\n\t/**\n\t * Class: mxMarker\n\t * \n\t * A static class that implements all markers for VML and SVG using a\n\t * registry. NOTE: The signatures in this class will change.\n\t * \n\t * Variable: markers\n\t * \n\t * Maps from markers names to functions to paint the markers.\n\t */\n\tmarkers: [],\n\t\n\t/**\n\t * Function: addMarker\n\t * \n\t * Adds a factory method that updates a given endpoint and returns a\n\t * function to paint the marker onto the given canvas.\n\t */\n\taddMarker: function(type, funct)\n\t{\n\t\tmxMarker.markers[type] = funct;\n\t},\n\t\n\t/**\n\t * Function: createMarker\n\t * \n\t * Returns a function to paint the given marker.\n\t */\n\tcreateMarker: function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar funct = mxMarker.markers[type];\n\t\t\n\t\treturn (funct != null) ? funct(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) : null;\n\t}\n\n};\n\n/**\n * Adds the classic and block marker factory method.\n */\n(function()\n{\n\tfunction createArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\t\t\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\t\t\t\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\t\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\t\t\t\n\t\t\tvar f = (type != mxConstants.ARROW_CLASSIC && type != mxConstants.ARROW_CLASSIC_THIN) ? 1 : 3 / 4;\n\t\t\tpe.x += -unitX * f - endOffsetX;\n\t\t\tpe.y += -unitY * f - endOffsetY;\n\t\t\t\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\n\t\t\t\tif (type == mxConstants.ARROW_CLASSIC || type == mxConstants.ARROW_CLASSIC_THIN)\n\t\t\t\t{\n\t\t\t\t\tcanvas.lineTo(pt.x - unitX * 3 / 4, pt.y - unitY * 3 / 4);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.close();\n\t\n\t\t\t\tif (filled)\n\t\t\t\t{\n\t\t\t\t\tcanvas.fillAndStroke();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.stroke();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\t\n\tmxMarker.addMarker('classic', createArrow(2));\n\tmxMarker.addMarker('classicThin', createArrow(3));\n\tmxMarker.addMarker('block', createArrow(2));\n\tmxMarker.addMarker('blockThin', createArrow(3));\n\t\n\tfunction createOpenArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\t\t\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\t\t\t\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\t\t\t\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\t\t\t\n\t\t\tpe.x += -endOffsetX * 2;\n\t\t\tpe.y += -endOffsetY * 2;\n\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\tcanvas.lineTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.stroke();\n\t\t\t};\n\t\t}\n\t};\n\t\n\tmxMarker.addMarker('open', createOpenArrow(2));\n\tmxMarker.addMarker('openThin', createOpenArrow(3));\n\t\n\tmxMarker.addMarker('oval', function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar a = size / 2;\n\t\t\n\t\tvar pt = pe.clone();\n\t\tpe.x -= unitX * a;\n\t\tpe.y -= unitY * a;\n\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.ellipse(pt.x - a, pt.y - a, size, size);\n\t\t\t\t\t\t\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t});\n\n\tfunction diamond(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t// 45 degrees, 1/sin(45) = 1.4142 / 2 = 0.7071 ( / 2 allows for\n\t\t// only half the strokewidth is processed ). Or 0.9862 for thin diamond.\n\t\t// Note these values and the tk variable below are dependent, update\n\t\t// both together (saves trig hard coding it).\n\t\tvar swFactor = (type == mxConstants.ARROW_DIAMOND) ?  0.7071 : 0.9862;\n\t\tvar endOffsetX = unitX * sw * swFactor;\n\t\tvar endOffsetY = unitY * sw * swFactor;\n\t\t\n\t\tunitX = unitX * (size + sw);\n\t\tunitY = unitY * (size + sw);\n\t\t\n\t\tvar pt = pe.clone();\n\t\tpt.x -= endOffsetX;\n\t\tpt.y -= endOffsetY;\n\t\t\n\t\tpe.x += -unitX - endOffsetX;\n\t\tpe.y += -unitY - endOffsetY;\n\t\t\n\t\t// thickness factor for diamond\n\t\tvar tk = ((type == mxConstants.ARROW_DIAMOND) ?  2 : 3.4);\n\t\t\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.begin();\n\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 - unitY / tk, pt.y + unitX / tk - unitY / 2);\n\t\t\tcanvas.lineTo(pt.x - unitX, pt.y - unitY);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 + unitY / tk, pt.y - unitY / 2 - unitX / tk);\n\t\t\tcanvas.close();\n\t\t\t\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t};\n\n\tmxMarker.addMarker('diamond', diamond);\n\tmxMarker.addMarker('diamondThin', diamond);\n})();\n\n__mxOutput.mxMarker = typeof mxMarker !== 'undefined' ? mxMarker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxActor\n *\n * Extends <mxShape> to implement an actor shape. If a custom shape with one\n * filled area is needed, then this shape's <redrawPath> should be overridden.\n * \n * Example:\n * \n * (code)\n * function SampleShape() { }\n * \n * SampleShape.prototype = new mxActor();\n * SampleShape.prototype.constructor = vsAseShape;\n * \n * mxCellRenderer.registerShape('sample', SampleShape);\n * SampleShape.prototype.redrawPath = function(path, x, y, w, h)\n * {\n *   path.moveTo(0, 0);\n *   path.lineTo(w, h);\n *   // ...\n *   path.close();\n * }\n * (end)\n * \n * This shape is registered under <mxConstants.SHAPE_ACTOR> in\n * <mxCellRenderer>.\n * \n * Constructor: mxActor\n *\n * Constructs a new actor shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxActor(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxActor, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxActor.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxActor.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar width = w/3;\n\tc.moveTo(0, h);\n\tc.curveTo(0, 3 * h / 5, 0, 2 * h / 5, w / 2, 2 * h / 5);\n\tc.curveTo(w / 2 - width, 2 * h / 5, w / 2 - width, 0, w / 2, 0);\n\tc.curveTo(w / 2 + width, 0, w / 2 + width, 2 * h / 5, w / 2, 2 * h / 5);\n\tc.curveTo(w, 2 * h / 5, w, 3 * h / 5, w, h);\n\tc.close();\n};\n\n__mxOutput.mxActor = typeof mxActor !== 'undefined' ? mxActor : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCloud\n *\n * Extends <mxActor> to implement a cloud shape.\n * \n * This shape is registered under <mxConstants.SHAPE_CLOUD> in\n * <mxCellRenderer>.\n * \n * Constructor: mxCloud\n *\n * Constructs a new cloud shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCloud(bounds, fill, stroke, strokewidth)\n{\n\tmxActor.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxCloud, mxActor);\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCloud.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tc.moveTo(0.25 * w, 0.25 * h);\n\tc.curveTo(0.05 * w, 0.25 * h, 0, 0.5 * h, 0.16 * w, 0.55 * h);\n\tc.curveTo(0, 0.66 * h, 0.18 * w, 0.9 * h, 0.31 * w, 0.8 * h);\n\tc.curveTo(0.4 * w, h, 0.7 * w, h, 0.8 * w, 0.8 * h);\n\tc.curveTo(w, 0.8 * h, w, 0.6 * h, 0.875 * w, 0.5 * h);\n\tc.curveTo(w, 0.3 * h, 0.8 * w, 0.1 * h, 0.625 * w, 0.2 * h);\n\tc.curveTo(0.5 * w, 0.05 * h, 0.3 * w, 0.05 * h, 0.25 * w, 0.25 * h);\n\tc.close();\n};\n\n__mxOutput.mxCloud = typeof mxCloud !== 'undefined' ? mxCloud : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangleShape\n *\n * Extends <mxShape> to implement a rectangle shape.\n * This shape is registered under <mxConstants.SHAPE_RECTANGLE>\n * in <mxCellRenderer>.\n * \n * Constructor: mxRectangleShape\n *\n * Constructs a new rectangle shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRectangleShape(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRectangleShape, mxShape);\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient.\n */\nmxRectangleShape.prototype.isHtmlAllowed = function()\n{\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\t\t\n\t}\n\t\n\treturn !this.isRounded && !this.glass && this.rotation == 0 && (events ||\n\t\t(this.fill != null && this.fill != mxConstants.NONE));\n};\n\n/**\n * Function: paintBackground\n * \n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\n\t}\n\t\n\tif (events || (this.fill != null && this.fill != mxConstants.NONE) ||\n\t\t(this.stroke != null && this.stroke != mxConstants.NONE))\n\t{\n\t\tif (!events && (this.fill == null || this.fill == mxConstants.NONE))\n\t\t{\n\t\t\tc.pointerEvents = false;\n\t\t}\n\t\t\n\t\tif (this.isRounded)\n\t\t{\n\t\t\tvar r = 0;\n\t\t\t\n\t\t\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t\t\t{\n\t\t\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\t\t\tr = Math.min(w * f, h * f);\n\t\t\t}\n\t\t\t\n\t\t\tc.roundrect(x, y, w, h, r, r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.rect(x, y, w, h);\n\t\t}\n\t\t\t\n\t\tc.fillAndStroke();\n\t}\n};\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxRectangleShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: paintForeground\n * \n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (this.glass && !this.outline && this.fill != null && this.fill != mxConstants.NONE)\n\t{\n\t\tthis.paintGlassEffect(c, x, y, w, h, this.getArcSize(w + this.strokewidth, h + this.strokewidth));\n\t}\n};\n\n__mxOutput.mxRectangleShape = typeof mxRectangleShape !== 'undefined' ? mxRectangleShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEllipse\n *\n * Extends <mxShape> to implement an ellipse shape.\n * This shape is registered under <mxConstants.SHAPE_ELLIPSE>\n * in <mxCellRenderer>.\n * \n * Constructor: mxEllipse\n *\n * Constructs a new ellipse shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxEllipse, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Paints the ellipse shape.\n */\nmxEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxEllipse = typeof mxEllipse !== 'undefined' ? mxEllipse : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDoubleEllipse\n *\n * Extends <mxShape> to implement a double ellipse shape. This shape is\n * registered under <mxConstants.SHAPE_DOUBLE_ELLIPSE> in <mxCellRenderer>.\n * Use the following override to only fill the inner ellipse in this shape:\n * \n * (code)\n * mxDoubleEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n * {\n *   c.ellipse(x, y, w, h);\n *   c.stroke();\n *   \n *   var inset = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n *   x += inset;\n *   y += inset;\n *   w -= 2 * inset;\n *   h -= 2 * inset;\n *   \n *   if (w > 0 && h > 0)\n *   {\n *     c.ellipse(x, y, w, h);\n *   }\n *   \n *   c.fillAndStroke();\n * };\n * (end)\n * \n * Constructor: mxDoubleEllipse\n *\n * Constructs a new ellipse shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxDoubleEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxDoubleEllipse, mxShape);\n\n/**\n * Variable: vmlScale\n * \n * Scale for improving the precision of VML rendering. Default is 10.\n */\nmxDoubleEllipse.prototype.vmlScale = 10;\n\n/**\n * Function: paintBackground\n * \n * Paints the background.\n */\nmxDoubleEllipse.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: paintForeground\n * \n * Paints the foreground.\n */\nmxDoubleEllipse.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (!this.outline)\n\t{\n\t\tvar margin = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n\t\tx += margin;\n\t\ty += margin;\n\t\tw -= 2 * margin;\n\t\th -= 2 * margin;\n\t\t\n\t\t// FIXME: Rounding issues in IE8 standards mode (not in 1.x)\n\t\tif (w > 0 && h > 0)\n\t\t{\n\t\t\tc.ellipse(x, y, w, h);\n\t\t}\n\t\t\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounds for the label.\n */\nmxDoubleEllipse.prototype.getLabelBounds = function(rect)\n{\n\tvar margin = (mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth,\n\t\t\tMath.min(rect.width / 5 / this.scale, rect.height / 5 / this.scale)))) * this.scale;\n\n\treturn new mxRectangle(rect.x + margin, rect.y + margin, rect.width - 2 * margin, rect.height - 2 * margin);\n};\n\n__mxOutput.mxDoubleEllipse = typeof mxDoubleEllipse !== 'undefined' ? mxDoubleEllipse : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRhombus\n *\n * Extends <mxShape> to implement a rhombus (aka diamond) shape.\n * This shape is registered under <mxConstants.SHAPE_RHOMBUS>\n * in <mxCellRenderer>.\n * \n * Constructor: mxRhombus\n *\n * Constructs a new rhombus shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRhombus(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRhombus, mxShape);\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxRhombus.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Function: paintVertexShape\n * \n * Generic painting implementation.\n */\nmxRhombus.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar hw = w / 2;\n\tvar hh = h / 2;\n\t\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, [new mxPoint(x + hw, y), new mxPoint(x + w, y + hh), new mxPoint(x + hw, y + h),\n\t     new mxPoint(x, y + hh)], this.isRounded, arcSize, true);\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxRhombus = typeof mxRhombus !== 'undefined' ? mxRhombus : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPolyline\n *\n * Extends <mxShape> to implement a polyline (a line with multiple points).\n * This shape is registered under <mxConstants.SHAPE_POLYLINE> in\n * <mxCellRenderer>.\n * \n * Constructor: mxPolyline\n *\n * Constructs a new polyline shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxPolyline(points, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxPolyline, mxShape);\n\n/**\n * Function: getRotation\n * \n * Returns 0.\n */\nmxPolyline.prototype.getRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns 0.\n */\nmxPolyline.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Returns false.\n */\nmxPolyline.prototype.isPaintBoundsInverted = function()\n{\n\treturn false;\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintEdgeShape = function(c, pts)\n{\n\tvar prev = c.pointerEventsValue;\n\tc.pointerEventsValue = 'stroke';\n\t\n\tif (this.style == null || this.style[mxConstants.STYLE_CURVED] != 1)\n\t{\n\t\tthis.paintLine(c, pts, this.isRounded);\n\t}\n\telse\n\t{\n\t\tthis.paintCurvedLine(c, pts);\n\t}\n\t\n\tc.pointerEventsValue = prev;\n};\n\n/**\n * Function: paintLine\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintLine = function(c, pts, rounded)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, pts, rounded, arcSize, false);\n\tc.stroke();\n};\n\n/**\n * Function: paintCurvedLine\n * \n * Paints a curved line.\n */\nmxPolyline.prototype.paintCurvedLine = function(c, pts)\n{\n\tc.begin();\n\t\n\tvar pt = pts[0];\n\tvar n = pts.length;\n\t\n\tc.moveTo(pt.x, pt.y);\n\t\n\tfor (var i = 1; i < n - 2; i++)\n\t{\n\t\tvar p0 = pts[i];\n\t\tvar p1 = pts[i + 1];\n\t\tvar ix = (p0.x + p1.x) / 2;\n\t\tvar iy = (p0.y + p1.y) / 2;\n\t\t\n\t\tc.quadTo(p0.x, p0.y, ix, iy);\n\t}\n\t\n\tvar p0 = pts[n - 2];\n\tvar p1 = pts[n - 1];\n\t\n\tc.quadTo(p0.x, p0.y, p1.x, p1.y);\n\tc.stroke();\n};\n\n__mxOutput.mxPolyline = typeof mxPolyline !== 'undefined' ? mxPolyline : undefined;\n\nfunction mxPolygon(points, fill, stroke, strokewidth) {\n    mxPolyline.call(this);\n    this.points = points;\n    this.stroke = stroke;\n    this.fill = fill;\n    this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxPolyline.\n */\nmxUtils.extend(mxPolygon, mxPolyline);\n\n/**\n * Function: paintLine: overriding paintline function of polyline to paint the entire shape instead of just the line\n * \n * Paints the polygon\n */\nmxPolygon.prototype.paintLine = function (c, pts, rounded) {\n    var arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n    c.begin();\n    this.addPoints(c, pts, rounded, arcSize, true);\n    c.fillAndStroke();\n};\n\n__mxOutput.mxPolygon = typeof mxPolygon !== 'undefined' ? mxPolygon : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrow\n *\n * Extends <mxShape> to implement an arrow shape. (The shape\n * is used to represent edges, not vertices.)\n * This shape is registered under <mxConstants.SHAPE_ARROW>\n * in <mxCellRenderer>.\n * \n * Constructor: mxArrow\n *\n * Constructs a new arrow shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrow(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.spacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.endSize = (endSize != null) ? endSize : mxConstants.ARROW_SIZE;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrow, mxShape);\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrow.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\tvar w = Math.max(this.arrowWidth, this.endSize);\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrow.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar spacing =  mxConstants.ARROW_SPACING;\n\tvar width = mxConstants.ARROW_WIDTH;\n\tvar arrow = mxConstants.ARROW_SIZE;\n\n\t// Base vector (between end points)\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\tvar dx = pe.x - p0.x;\n\tvar dy = pe.y - p0.y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\tvar length = dist - 2 * spacing - arrow;\n\t\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar ny = dy / dist;\n\tvar basex = length * nx;\n\tvar basey = length * ny;\n\tvar floorx = width * ny/3;\n\tvar floory = -width * nx/3;\n\t\n\t// Computes points\n\tvar p0x = p0.x - floorx / 2 + spacing * nx;\n\tvar p0y = p0.y - floory / 2 + spacing * ny;\n\tvar p1x = p0x + floorx;\n\tvar p1y = p0y + floory;\n\tvar p2x = p1x + basex;\n\tvar p2y = p1y + basey;\n\tvar p3x = p2x + floorx;\n\tvar p3y = p2y + floory;\n\t// p4 not necessary\n\tvar p5x = p3x - 3 * floorx;\n\tvar p5y = p3y - 3 * floory;\n\t\n\tc.begin();\n\tc.moveTo(p0x, p0y);\n\tc.lineTo(p1x, p1y);\n\tc.lineTo(p2x, p2y);\n\tc.lineTo(p3x, p3y);\n\tc.lineTo(pe.x - spacing * nx, pe.y - spacing * ny);\n\tc.lineTo(p5x, p5y);\n\tc.lineTo(p5x + floorx, p5y + floory);\n\tc.close();\n\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxArrow = typeof mxArrow !== 'undefined' ? mxArrow : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrowConnector\n *\n * Extends <mxShape> to implement an new rounded arrow shape with support for\n * waypoints and double arrows. (The shape is used to represent edges, not\n * vertices.) This shape is registered under <mxConstants.SHAPE_ARROW_CONNECTOR>\n * in <mxCellRenderer>.\n * \n * Constructor: mxArrowConnector\n *\n * Constructs a new arrow shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrowConnector(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.arrowSpacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.startSize = mxConstants.ARROW_SIZE / 5;\n\tthis.endSize = mxConstants.ARROW_SIZE / 5;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrowConnector, mxShape);\n\n/**\n * Variable: useSvgBoundingBox\n * \n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxArrowConnector.prototype.useSvgBoundingBox = true;\n\n/**\n * Function: isRoundable\n * \n * Hook for subclassers.\n */\nmxArrowConnector.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Variable: resetStyles\n * \n * Overrides mxShape to reset spacing.\n */\nmxArrowConnector.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\t\n\tthis.arrowSpacing = mxConstants.ARROW_SPACING;\n};\n\n/**\n * Overrides apply to get smooth transition from default start- and endsize.\n */\nmxArrowConnector.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\n\tif (this.style != null)\n\t{\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t}\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrowConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\tvar w = this.getEdgeWidth();\n\t\n\tif (this.isMarkerStart())\n\t{\n\t\tw = Math.max(w, this.getStartArrowWidth());\n\t}\n\t\n\tif (this.isMarkerEnd())\n\t{\n\t\tw = Math.max(w, this.getEndArrowWidth());\n\t}\n\t\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrowConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar strokeWidth = this.strokewidth;\n\t\n\tif (this.outline)\n\t{\n\t\tstrokeWidth = Math.max(1, mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth));\n\t}\n\t\n\tvar startWidth = this.getStartArrowWidth() + strokeWidth;\n\tvar endWidth = this.getEndArrowWidth() + strokeWidth;\n\tvar edgeWidth = this.outline ? this.getEdgeWidth() + strokeWidth : this.getEdgeWidth();\n\tvar openEnded = this.isOpenEnded();\n\tvar markerStart = this.isMarkerStart();\n\tvar markerEnd = this.isMarkerEnd();\n\tvar spacing = (openEnded) ? 0 : this.arrowSpacing + strokeWidth / 2;\n\tvar startSize = this.startSize + strokeWidth;\n\tvar endSize = this.endSize + strokeWidth;\n\tvar isRounded = this.isArrowRounded();\n\t\n\t// Base vector (between first points)\n\tvar pe = pts[pts.length - 1];\n\n\t// Finds first non-overlapping point\n\tvar i0 = 1;\n\t\n\twhile (i0 < pts.length - 1 && pts[i0].x == pts[0].x && pts[i0].y == pts[0].y)\n\t{\n\t\ti0++;\n\t}\n\t\n\tvar dx = pts[i0].x - pts[0].x;\n\tvar dy = pts[i0].y - pts[0].y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\n\tif (dist == 0)\n\t{\n\t\treturn;\n\t}\n\t\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar nx2, nx1 = nx;\n\tvar ny = dy / dist;\n\tvar ny2, ny1 = ny;\n\tvar orthx = edgeWidth * ny;\n\tvar orthy = -edgeWidth * nx;\n\t\n\t// Stores the inbound function calls in reverse order in fns\n\tvar fns = [];\n\t\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('round');\n\t}\n\telse if (pts.length > 2)\n\t{\n\t\t// Only mitre if there are waypoints\n\t\tc.setMiterLimit(1.42);\n\t}\n\n\tc.begin();\n\n\tvar startNx = nx;\n\tvar startNy = ny;\n\n\tif (markerStart && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pts[0].x, pts[0].y, nx, ny, startSize, startWidth, edgeWidth, spacing, true);\n\t}\n\telse\n\t{\n\t\tvar outStartX = pts[0].x + orthx / 2 + spacing * nx;\n\t\tvar outStartY = pts[0].y + orthy / 2 + spacing * ny;\n\t\tvar inEndX = pts[0].x - orthx / 2 + spacing * nx;\n\t\tvar inEndY = pts[0].y - orthy / 2 + spacing * ny;\n\t\t\n\t\tif (openEnded)\n\t\t{\n\t\t\tc.moveTo(outStartX, outStartY);\n\t\t\t\n\t\t\tfns.push(function()\n\t\t\t{\n\t\t\t\tc.lineTo(inEndX, inEndY);\n\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inEndX, inEndY);\n\t\t\tc.lineTo(outStartX, outStartY);\n\t\t}\n\t}\n\t\n\tvar dx1 = 0;\n\tvar dy1 = 0;\n\tvar dist1 = 0;\n\n\tfor (var i = 0; i < pts.length - 2; i++)\n\t{\n\t\t// Work out in which direction the line is bending\n\t\tvar pos = mxUtils.relativeCcw(pts[i].x, pts[i].y, pts[i+1].x, pts[i+1].y, pts[i+2].x, pts[i+2].y);\n\n\t\tdx1 = pts[i+2].x - pts[i+1].x;\n\t\tdy1 = pts[i+2].y - pts[i+1].y;\n\n\t\tdist1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n\t\t\n\t\tif (dist1 != 0)\n\t\t{\n\t\t\tnx1 = dx1 / dist1;\n\t\t\tny1 = dy1 / dist1;\n\t\t\t\n\t\t\tvar tmp1 = nx * nx1 + ny * ny1;\n\t\t\tvar tmp = Math.max(Math.sqrt((tmp1 + 1) / 2), 0.04);\n\t\t\t\n\t\t\t// Work out the normal orthogonal to the line through the control point and the edge sides intersection\n\t\t\tnx2 = (nx + nx1);\n\t\t\tny2 = (ny + ny1);\n\t\n\t\t\tvar dist2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);\n\t\t\t\n\t\t\tif (dist2 != 0)\n\t\t\t{\n\t\t\t\tnx2 = nx2 / dist2;\n\t\t\t\tny2 = ny2 / dist2;\n\t\t\t\t\n\t\t\t\t// Higher strokewidths require a larger minimum bend, 0.35 covers all but the most extreme cases\n\t\t\t\tvar strokeWidthFactor = Math.max(tmp, Math.min(this.strokewidth / 200 + 0.04, 0.35));\n\t\t\t\tvar angleFactor = (pos != 0 && isRounded) ? Math.max(0.1, strokeWidthFactor) : Math.max(tmp, 0.06);\n\n\t\t\t\tvar outX = pts[i+1].x + ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar outY = pts[i+1].y - nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inX = pts[i+1].x - ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inY = pts[i+1].y + nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\t\n\t\t\t\tif (pos == 0 || !isRounded)\n\t\t\t\t{\n\t\t\t\t\t// If the two segments are aligned, or if we're not drawing curved sections between segments\n\t\t\t\t\t// just draw straight to the intersection point\n\t\t\t\t\tc.lineTo(outX, outY);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse if (pos == -1)\n\t\t\t\t{\n\t\t\t\t\tvar c1x = inX + ny * edgeWidth;\n\t\t\t\t\tvar c1y = inY - nx * edgeWidth;\n\t\t\t\t\tvar c2x = inX + ny1 * edgeWidth;\n\t\t\t\t\tvar c2y = inY - nx1 * edgeWidth;\n\t\t\t\t\tc.lineTo(c1x, c1y);\n\t\t\t\t\tc.quadTo(outX, outY, c2x, c2y);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tc.lineTo(outX, outY);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c1x = outX - ny * edgeWidth;\n\t\t\t\t\t\tvar c1y = outY + nx * edgeWidth;\n\t\t\t\t\t\tvar c2x = outX - ny1 * edgeWidth;\n\t\t\t\t\t\tvar c2y = outY + nx1 * edgeWidth;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.quadTo(x, y, c1x, c1y);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(c2x, c2y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnx = nx1;\n\t\t\t\tny = ny1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\torthx = edgeWidth * ny1;\n\torthy = - edgeWidth * nx1;\n\n\tif (markerEnd && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, false);\n\t}\n\telse\n\t{\n\t\tc.lineTo(pe.x - spacing * nx1 + orthx / 2, pe.y - spacing * ny1 + orthy / 2);\n\t\t\n\t\tvar inStartX = pe.x - spacing * nx1 - orthx / 2;\n\t\tvar inStartY = pe.y - spacing * ny1 - orthy / 2;\n\n\t\tif (!openEnded)\n\t\t{\n\t\t\tc.lineTo(inStartX, inStartY);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t\n\t\t\tfns.splice(0, 0, function()\n\t\t\t{\n\t\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t});\n\t\t}\n\t}\n\t\n\tfor (var i = fns.length - 1; i >= 0; i--)\n\t{\n\t\tfns[i]();\n\t}\n\n\tif (openEnded)\n\t{\n\t\tc.end();\n\t\tc.stroke();\n\t}\n\telse\n\t{\n\t\tc.close();\n\t\tc.fillAndStroke();\n\t}\n\t\n\t// Workaround for shadow on top of base arrow\n\tc.setShadow(false);\n\t\n\t// Need to redraw the markers without the low miter limit\n\tc.setMiterLimit(4);\n\t\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('flat');\n\t}\n\n\tif (pts.length > 2)\n\t{\n\t\t// Only to repaint markers if no waypoints\n\t\t// Need to redraw the markers without the low miter limit\n\t\tc.setMiterLimit(4);\n\t\tif (markerStart && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pts[0].x, pts[0].y, startNx, startNy, startSize, startWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t\t\n\t\tif (markerEnd && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t}\n};\n\n/**\n * Function: paintMarker\n * \n * Paints the marker.\n */\nmxArrowConnector.prototype.paintMarker = function(c, ptX, ptY, nx, ny, size, arrowWidth, edgeWidth, spacing, initialMove)\n{\n\tvar widthArrowRatio = edgeWidth / arrowWidth;\n\tvar orthx = edgeWidth * ny / 2;\n\tvar orthy = -edgeWidth * nx / 2;\n\n\tvar spaceX = (spacing + size) * nx;\n\tvar spaceY = (spacing + size) * ny;\n\n\tif (initialMove)\n\t{\n\t\tc.moveTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\telse\n\t{\n\t\tc.lineTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\n\tc.lineTo(ptX - orthx / widthArrowRatio + spaceX, ptY - orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + spacing * nx, ptY + spacing * ny);\n\tc.lineTo(ptX + orthx / widthArrowRatio + spaceX, ptY + orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + orthx + spaceX, ptY + orthy + spaceY);\n}\n\n/**\n * Function: isArrowRounded\n * \n * Returns wether the arrow is rounded\n */\nmxArrowConnector.prototype.isArrowRounded = function()\n{\n\treturn this.isRounded;\n};\n\n/**\n * Function: getStartArrowWidth\n * \n * Returns the width of the start arrow\n */\nmxArrowConnector.prototype.getStartArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEndArrowWidth\n * \n * Returns the width of the end arrow\n */\nmxArrowConnector.prototype.getEndArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEdgeWidth\n * \n * Returns the width of the body of the edge\n */\nmxArrowConnector.prototype.getEdgeWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH / 3;\n};\n\n/**\n * Function: isOpenEnded\n * \n * Returns whether the ends of the shape are drawn\n */\nmxArrowConnector.prototype.isOpenEnded = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isMarkerStart\n * \n * Returns whether the start marker is drawn\n */\nmxArrowConnector.prototype.isMarkerStart = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n\n/**\n * Function: isMarkerEnd\n * \n * Returns whether the end marker is drawn\n */\nmxArrowConnector.prototype.isMarkerEnd = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n__mxOutput.mxArrowConnector = typeof mxArrowConnector !== 'undefined' ? mxArrowConnector : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxText\n *\n * Extends <mxShape> to implement a text shape. To change vertical text from\n * bottom to top to top to bottom, the following code can be used:\n * \n * (code)\n * mxText.prototype.verticalTextRotation = 90;\n * (end)\n * \n * Constructor: mxText\n *\n * Constructs a new text shape.\n * \n * Parameters:\n * \n * value - String that represents the text to be displayed. This is stored in\n * <value>.\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * align - Specifies the horizontal alignment. Default is ''. This is stored in\n * <align>.\n * valign - Specifies the vertical alignment. Default is ''. This is stored in\n * <valign>.\n * color - String that specifies the text color. Default is 'black'. This is\n * stored in <color>.\n * family - String that specifies the font family. Default is\n * <mxConstants.DEFAULT_FONTFAMILY>. This is stored in <family>.\n * size - Integer that specifies the font size. Default is\n * <mxConstants.DEFAULT_FONTSIZE>. This is stored in <size>.\n * fontStyle - Specifies the font style. Default is 0. This is stored in\n * <fontStyle>.\n * spacing - Integer that specifies the global spacing. Default is 2. This is\n * stored in <spacing>.\n * spacingTop - Integer that specifies the top spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingTop>.\n * spacingRight - Integer that specifies the right spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingRight>.\n * spacingBottom - Integer that specifies the bottom spacing. Default is 0.The\n * sum of the spacing and this is stored in <spacingBottom>.\n * spacingLeft - Integer that specifies the left spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingLeft>.\n * horizontal - Boolean that specifies if the label is horizontal. Default is\n * true. This is stored in <horizontal>.\n * background - String that specifies the background color. Default is null.\n * This is stored in <background>.\n * border - String that specifies the label border color. Default is null.\n * This is stored in <border>.\n * wrap - Specifies if word-wrapping should be enabled. Default is false.\n * This is stored in <wrap>.\n * clipped - Specifies if the label should be clipped. Default is false.\n * This is stored in <clipped>.\n * overflow - Value of the overflow style. Default is 'visible'.\n */\nfunction mxText(value, bounds, align, valign, color,\n\tfamily,\tsize, fontStyle, spacing, spacingTop, spacingRight,\n\tspacingBottom, spacingLeft, horizontal, background, border,\n\twrap, clipped, overflow, labelPadding, textDirection)\n{\n\tmxShape.call(this);\n\tthis.value = value;\n\tthis.bounds = bounds;\n\tthis.color = (color != null) ? color : 'black';\n\tthis.align = (align != null) ? align : mxConstants.ALIGN_CENTER;\n\tthis.valign = (valign != null) ? valign : mxConstants.ALIGN_MIDDLE;\n\tthis.family = (family != null) ? family : mxConstants.DEFAULT_FONTFAMILY;\n\tthis.size = (size != null) ? size : mxConstants.DEFAULT_FONTSIZE;\n\tthis.fontStyle = (fontStyle != null) ? fontStyle : mxConstants.DEFAULT_FONTSTYLE;\n\tthis.spacing = parseInt(spacing || 2);\n\tthis.spacingTop = this.spacing + parseInt(spacingTop || 0);\n\tthis.spacingRight = this.spacing + parseInt(spacingRight || 0);\n\tthis.spacingBottom = this.spacing + parseInt(spacingBottom || 0);\n\tthis.spacingLeft = this.spacing + parseInt(spacingLeft || 0);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.background = background;\n\tthis.border = border;\n\tthis.wrap = (wrap != null) ? wrap : false;\n\tthis.clipped = (clipped != null) ? clipped : false;\n\tthis.overflow = (overflow != null) ? overflow : 'visible';\n\tthis.labelPadding = (labelPadding != null) ? labelPadding : 0;\n\tthis.textDirection = textDirection;\n\tthis.rotation = 0;\n\tthis.updateMargin();\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxText, mxShape);\n\n/**\n * Variable: baseSpacingTop\n * \n * Specifies the spacing to be added to the top spacing. Default is 0. Use the\n * value 5 here to get the same label positions as in mxGraph 1.x.\n */\nmxText.prototype.baseSpacingTop = 0;\n\n/**\n * Variable: baseSpacingBottom\n * \n * Specifies the spacing to be added to the bottom spacing. Default is 0. Use the\n * value 1 here to get the same label positions as in mxGraph 1.x.\n */\nmxText.prototype.baseSpacingBottom = 0;\n\n/**\n * Variable: baseSpacingLeft\n * \n * Specifies the spacing to be added to the left spacing. Default is 0.\n */\nmxText.prototype.baseSpacingLeft = 0;\n\n/**\n * Variable: baseSpacingRight\n * \n * Specifies the spacing to be added to the right spacing. Default is 0.\n */\nmxText.prototype.baseSpacingRight = 0;\n\n/**\n * Variable: replaceLinefeeds\n * \n * Specifies if linefeeds in HTML labels should be replaced with BR tags.\n * Default is true.\n */\nmxText.prototype.replaceLinefeeds = true;\n\n/**\n * Variable: verticalTextRotation\n * \n * Rotation for vertical text. Default is -90 (bottom to top).\n */\nmxText.prototype.verticalTextRotation = -90;\n\n/**\n * Variable: ignoreClippedStringSize\n * \n * Specifies if the string size should be measured in <updateBoundingBox> if\n * the label is clipped and the label position is center and middle. If this is\n * true, then the bounding box will be set to <bounds>. Default is true.\n * <ignoreStringSize> has precedence over this switch.\n */\nmxText.prototype.ignoreClippedStringSize = true;\n\n/**\n * Variable: ignoreStringSize\n * \n * Specifies if the actual string size should be measured. If disabled the\n * boundingBox will not ignore the actual size of the string, otherwise\n * <bounds> will be used instead. Default is false.\n */\nmxText.prototype.ignoreStringSize = false;\n\n/**\n * Variable: textWidthPadding\n * \n * Specifies the padding to be added to the text width for the bounding box.\n * This is needed to make sure no clipping is applied to borders. Default is 4\n * for IE 8 standards mode and 3 for all others.\n */\nmxText.prototype.textWidthPadding = (document.documentMode == 8 && !mxClient.IS_EM) ? 4 : 3;\n\n/**\n * Variable: lastValue\n * \n * Contains the last rendered text value. Used for caching.\n */\nmxText.prototype.lastValue = null;\n\n/**\n * Variable: cacheEnabled\n * \n * Specifies if caching for HTML labels should be enabled. Default is true.\n */\nmxText.prototype.cacheEnabled = true;\n\n/**\n * Function: isParseVml\n * \n * Text shapes do not contain VML markup and do not need to be parsed. This\n * method returns false to speed up rendering in IE8.\n */\nmxText.prototype.isParseVml = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation returns\n * true if the browser is not in IE8 standards mode.\n */\nmxText.prototype.isHtmlAllowed = function()\n{\n\treturn document.documentMode != 8 || mxClient.IS_EM;\n};\n\n/**\n * Function: getSvgScreenOffset\n * \n * Disables offset in IE9 for crisper image output.\n */\nmxText.prototype.getSvgScreenOffset = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: checkBounds\n * \n * Returns true if the bounds are not null and all of its variables are numeric.\n */\nmxText.prototype.checkBounds = function()\n{\n\treturn (!isNaN(this.scale) && isFinite(this.scale) && this.scale > 0 &&\n\t\t\tthis.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&\n\t\t\t!isNaN(this.bounds.width) && !isNaN(this.bounds.height));\n};\n\n/**\n * Function: paint\n * \n * Generic rendering code.\n */\nmxText.prototype.paint = function(c, update)\n{\n\t// Scale is passed-through to canvas\n\tvar s = this.scale;\n\tvar x = this.bounds.x / s;\n\tvar y = this.bounds.y / s;\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\t\n\tthis.updateTransform(c, x, y, w, h);\n\tthis.configureCanvas(c, x, y, w, h);\n\t\n\tif (update)\n\t{\n\t\tc.updateText(x, y, w, h, this.align, this.valign, this.wrap, this.overflow,\n\t\t\t\tthis.clipped, this.getTextRotation(), this.node);\n\t}\n\telse\n\t{\n\t\t// Checks if text contains HTML markup\n\t\tvar realHtml = mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML;\n\t\t\n\t\t// Always renders labels as HTML in VML\n\t\tvar fmt = (realHtml || c instanceof mxVmlCanvas2D) ? 'html' : '';\n\t\tvar val = this.value;\n\t\t\n\t\tif (!realHtml && fmt == 'html')\n\t\t{\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\tif (fmt == 'html' && !mxUtils.isNode(this.value))\n\t\t{\n\t\t\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\t\t\t\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = (!mxUtils.isNode(this.value) && this.replaceLinefeeds && fmt == 'html') ?\n\t\t\tval.replace(/\\n/g, '<br/>') : val;\n\t\t\t\n\t\tvar dir = this.textDirection;\n\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO && !realHtml)\n\t\t{\n\t\t\tdir = this.getAutoDirection();\n\t\t}\n\t\t\n\t\tif (dir != mxConstants.TEXT_DIRECTION_LTR && dir != mxConstants.TEXT_DIRECTION_RTL)\n\t\t{\n\t\t\tdir = null;\n\t\t}\n\t\t\n\t\tc.text(x, y, w, h, val, this.align, this.valign, this.wrap, fmt,\n\t\t\tthis.overflow, this.clipped, this.getTextRotation(), dir);\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Renders the text using the given DOM nodes.\n */\nmxText.prototype.redraw = function()\n{\n\tif (this.visible && this.checkBounds() && this.cacheEnabled && this.lastValue == this.value &&\n\t\t(mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML))\n\t{\n\t\tif (this.node.nodeName == 'DIV' && (this.isHtmlAllowed() || !mxClient.IS_VML))\n\t\t{\n\t\t\tif (mxClient.IS_SVG)\n\t\t\t{\n\t\t\t\tthis.redrawHtmlShapeWithCss3();\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));\n\t\n\t\t\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode <= 8))\n\t\t\t\t{\n\t\t\t\t\tthis.updateHtmlFilter();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.updateHtmlTransform();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.updateBoundingBox();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar canvas = this.createCanvas();\n\n\t\t\tif (canvas != null && canvas.updateText != null)\n\t\t\t{\n\t\t\t\t// Specifies if events should be handled\n\t\t\t\tcanvas.pointerEvents = this.pointerEvents;\n\t\n\t\t\t\tthis.paint(canvas, true);\n\t\t\t\tthis.destroyCanvas(canvas);\n\t\t\t\tthis.updateBoundingBox();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Fallback if canvas does not support updateText (VML)\n\t\t\t\tmxShape.prototype.redraw.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxShape.prototype.redraw.apply(this, arguments);\n\t\t\n\t\tif (mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\tthis.lastValue = this.value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.lastValue = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: resetStyles\n * \n * Resets all styles.\n */\nmxText.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\t\n\tthis.color = 'black';\n\tthis.align = mxConstants.ALIGN_CENTER;\n\tthis.valign = mxConstants.ALIGN_MIDDLE;\n\tthis.family = mxConstants.DEFAULT_FONTFAMILY;\n\tthis.size = mxConstants.DEFAULT_FONTSIZE;\n\tthis.fontStyle = mxConstants.DEFAULT_FONTSTYLE;\n\tthis.spacing = 2;\n\tthis.spacingTop = 2;\n\tthis.spacingRight = 2;\n\tthis.spacingBottom = 2;\n\tthis.spacingLeft = 2;\n\tthis.horizontal = true;\n\tdelete this.background;\n\tdelete this.border;\n\tthis.textDirection = mxConstants.DEFAULT_TEXT_DIRECTION;\n\tdelete this.margin;\n};\n\n/**\n * Function: apply\n * \n * Extends mxShape to update the text styles.\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxText.prototype.apply = function(state)\n{\n\tvar old = this.spacing;\n\tmxShape.prototype.apply.apply(this, arguments);\n\t\n\tif (this.style != null)\n\t{\n\t\tthis.fontStyle = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSTYLE, this.fontStyle);\n\t\tthis.family = mxUtils.getValue(this.style, mxConstants.STYLE_FONTFAMILY, this.family);\n\t\tthis.size = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSIZE, this.size);\n\t\tthis.color = mxUtils.getValue(this.style, mxConstants.STYLE_FONTCOLOR, this.color);\n\t\tthis.align = mxUtils.getValue(this.style, mxConstants.STYLE_ALIGN, this.align);\n\t\tthis.valign = mxUtils.getValue(this.style, mxConstants.STYLE_VERTICAL_ALIGN, this.valign);\n\t\tthis.spacing = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING, this.spacing));\n\t\tthis.spacingTop = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_TOP, this.spacingTop - old)) + this.spacing;\n\t\tthis.spacingRight = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_RIGHT, this.spacingRight - old)) + this.spacing;\n\t\tthis.spacingBottom = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_BOTTOM, this.spacingBottom - old)) + this.spacing;\n\t\tthis.spacingLeft = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_LEFT, this.spacingLeft - old)) + this.spacing;\n\t\tthis.horizontal = mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, this.horizontal);\n\t\tthis.background = mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_BACKGROUNDCOLOR, this.background);\n\t\tthis.border = mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_BORDERCOLOR, this.border);\n\t\tthis.textDirection = mxUtils.getValue(this.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n\t\tthis.opacity = mxUtils.getValue(this.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tthis.updateMargin();\n\t}\n\t\n\tthis.flipV = null;\n\tthis.flipH = null;\n};\n\n/**\n * Function: getAutoDirection\n * \n * Used to determine the automatic text direction. Returns\n * <mxConstants.TEXT_DIRECTION_LTR> or <mxConstants.TEXT_DIRECTION_RTL>\n * depending on the contents of <value>. This is not invoked for HTML, wrapped\n * content or if <value> is a DOM node.\n */\nmxText.prototype.getAutoDirection = function()\n{\n\t// Looks for strong (directional) characters\n\tvar tmp = /[A-Za-z\\u05d0-\\u065f\\u066a-\\u06ef\\u06fa-\\u07ff\\ufb1d-\\ufdff\\ufe70-\\ufefc]/.exec(this.value);\n\t\n\t// Returns the direction defined by the character\n\treturn (tmp != null && tmp.length > 0 && tmp[0] > 'z') ?\n\t\tmxConstants.TEXT_DIRECTION_RTL : mxConstants.TEXT_DIRECTION_LTR;\n};\n\n/**\n * Function: getContentNode\n * \n * Returns the node that contains the rendered input.\n */\nmxText.prototype.getContentNode = function()\n{\n\tvar result = this.node;\n\t\n\tif (result != null)\n\t{\n\t\t// Rendered with no foreignObject\n\t\tif (result.ownerSVGElement == null)\n\t\t{\n\t\t\tresult = this.node.firstChild.firstChild;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Innermost DIV that contains the actual content\n\t\t\tresult = result.firstChild.firstChild.firstChild.firstChild.firstChild;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using the given node and position.\n */\nmxText.prototype.updateBoundingBox = function()\n{\n\tvar node = this.node;\n\tthis.boundingBox = this.bounds.clone();\n\tvar rot = this.getTextRotation();\n\t\n\tvar h = (this.style != null) ? mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER) : null;\n\tvar v = (this.style != null) ? mxUtils.getValue(this.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE) : null;\n\n\tif (!this.ignoreStringSize && node != null && this.overflow != 'fill' && (!this.clipped ||\n\t\t!this.ignoreClippedStringSize || h != mxConstants.ALIGN_CENTER || v != mxConstants.ALIGN_MIDDLE))\n\t{\n\t\tvar ow = null;\n\t\tvar oh = null;\n\t\t\n\t\tif (node.ownerSVGElement != null)\n\t\t{\n\t\t\tif (node.firstChild != null && node.firstChild.firstChild != null &&\n\t\t\t\tnode.firstChild.firstChild.nodeName == 'foreignObject')\n\t\t\t{\n\t\t\t\t// Uses second inner DIV for font metrics\n\t\t\t\tnode = node.firstChild.firstChild.firstChild.firstChild;\n\t\t\t\toh = node.offsetHeight * this.scale;\n\t\t\t\t\n\t\t\t\tif (this.overflow == 'width')\n\t\t\t\t{\n\t\t\t\t\tow = this.boundingBox.width;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tow = node.offsetWidth * this.scale;\t\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tvar b = node.getBBox();\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for bounding box of empty string\n\t\t\t\t\tif (typeof(this.value) == 'string' && mxUtils.trim(this.value) == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = null;\n\t\t\t\t\t}\n\t\t\t\t\telse if (b.width == 0 && b.height == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = new mxRectangle(b.x, b.y, b.width, b.height);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// Ignores NS_ERROR_FAILURE in FF if container display is none.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar td = (this.state != null) ? this.state.view.textDiv : null;\n\n\t\t\t// Use cached offset size\n\t\t\tif (this.offsetWidth != null && this.offsetHeight != null)\n\t\t\t{\n\t\t\t\tow = this.offsetWidth * this.scale;\n\t\t\t\toh = this.offsetHeight * this.scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Cannot get node size while container hidden so a\n\t\t\t\t// shared temporary DIV is used for text measuring\n\t\t\t\tif (td != null)\n\t\t\t\t{\n\t\t\t\t\tthis.updateFont(td);\n\t\t\t\t\tthis.updateSize(td, false);\n\t\t\t\t\tthis.updateInnerHtml(td);\n\n\t\t\t\t\tnode = td;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar sizeDiv = node;\n\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t\t{\n\t\t\t\t\tvar w = Math.round(this.bounds.width / this.scale);\n\t\n\t\t\t\t\tif (this.wrap && w > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\t\t\tnode.style.whiteSpace = 'normal';\n\n\t\t\t\t\t\tif (node.style.wordWrap != 'break-word')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Innermost DIV is used for measuring text\n\t\t\t\t\t\t\tvar divs = sizeDiv.getElementsByTagName('div');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (divs.length > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsizeDiv = divs[divs.length - 1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tow = sizeDiv.offsetWidth + 2;\n\t\t\t\t\t\t\tdivs = this.node.getElementsByTagName('div');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.clipped)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tow = Math.min(w, ow);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Second last DIV width must be updated in DOM tree\n\t\t\t\t\t\t\tif (divs.length > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdivs[divs.length - 2].style.width = ow + 'px';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.whiteSpace = 'nowrap';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t}\n\n\t\t\t\tthis.offsetWidth = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\t\t\tthis.offsetHeight = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tow = this.offsetWidth * this.scale;\n\t\t\t\toh = this.offsetHeight * this.scale;\n\t\t\t}\n\t\t}\n\n\t\tif (ow != null && oh != null)\n\t\t{\t\n\t\t\tthis.boundingBox = new mxRectangle(this.bounds.x,\n\t\t\t\tthis.bounds.y, ow, oh);\n\t\t}\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tif (rot != 0)\n\t\t{\n\t\t\t// Accounts for pre-rotated x and y\n\t\t\tvar bbox = mxUtils.getBoundingBox(new mxRectangle(\n\t\t\t\tthis.margin.x * this.boundingBox.width,\n\t\t\t\tthis.margin.y * this.boundingBox.height,\n\t\t\t\tthis.boundingBox.width, this.boundingBox.height),\n\t\t\t\trot, new mxPoint(0, 0));\n\t\t\t\n\t\t\tthis.unrotatedBoundingBox = mxRectangle.fromRectangle(this.boundingBox);\n\t\t\tthis.unrotatedBoundingBox.x += this.margin.x * this.unrotatedBoundingBox.width;\n\t\t\tthis.unrotatedBoundingBox.y += this.margin.y * this.unrotatedBoundingBox.height;\n\t\t\t\n\t\t\tthis.boundingBox.x += bbox.x;\n\t\t\tthis.boundingBox.y += bbox.y;\n\t\t\tthis.boundingBox.width = bbox.width;\n\t\t\tthis.boundingBox.height = bbox.height;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.boundingBox.x += this.margin.x * this.boundingBox.width;\n\t\t\tthis.boundingBox.y += this.margin.y * this.boundingBox.height;\n\t\t\tthis.unrotatedBoundingBox = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns 0 to avoid using rotation in the canvas via updateTransform.\n */\nmxText.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getTextRotation\n * \n * Returns the rotation for the text label of the corresponding shape.\n */\nmxText.prototype.getTextRotation = function()\n{\n\treturn (this.state != null && this.state.shape != null) ? this.state.shape.getTextRotation() : 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Inverts the bounds if <mxShape.isBoundsInverted> returns true or if the\n * horizontal style is false.\n */\nmxText.prototype.isPaintBoundsInverted = function()\n{\n\treturn !this.horizontal && this.state != null && this.state.view.graph.model.isVertex(this.state.cell);\n};\n\n/**\n * Function: configureCanvas\n * \n * Sets the state of the canvas for drawing the shape.\n */\nmxText.prototype.configureCanvas = function(c, x, y, w, h)\n{\n\tmxShape.prototype.configureCanvas.apply(this, arguments);\n\t\n\tc.setFontColor(this.color);\n\tc.setFontBackgroundColor(this.background);\n\tc.setFontBorderColor(this.border);\n\tc.setFontFamily(this.family);\n\tc.setFontSize(this.size);\n\tc.setFontStyle(this.fontStyle);\n};\n\n/**\n * Function: updateVmlContainer\n * \n * Sets the width and height of the container to 1px.\n */\nmxText.prototype.updateVmlContainer = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tthis.node.style.width = '1px';\n\tthis.node.style.height = '1px';\n\tthis.node.style.overflow = 'visible';\n};\n\n/**\n * Function: getHtmlValue\n * \n * Private helper function to create SVG elements\n */\nmxText.prototype.getHtmlValue = function()\n{\n\tvar val = this.value;\n\t\n\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t{\n\t\tval = mxUtils.htmlEntities(val, false);\n\t}\n\t\n\t// Handles trailing newlines to make sure they are visible in rendering output\n\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\n\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\n\treturn val;\n};\n\n/**\n * Function: getTextCss\n * \n * Private helper function to create SVG elements\n */\nmxText.prototype.getTextCss = function()\n{\n\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' :\n\t\tmxConstants.LINE_HEIGHT;\n\n\tvar css = 'display: inline-block; font-size: ' + this.size + 'px; ' +\n\t\t'font-family: ' + this.family + '; color: ' + this.color + '; line-height: ' + lh +\n\t\t'; pointer-events: ' + ((this.pointerEvents) ? 'all' : 'none') + '; ';\n\n\tif ((this.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tcss += 'font-weight: bold; ';\n\t}\n\n\tif ((this.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tcss += 'font-style: italic; ';\n\t}\n\t\n\tvar deco = [];\n\t\n\tif ((this.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tdeco.push('underline');\n\t}\n\t\n\tif ((this.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\tdeco.push('line-through');\n\t}\n\t\n\tif (deco.length > 0)\n\t{\n\t\tcss += 'text-decoration: ' + deco.join(' ') + '; ';\n\t}\n\n\treturn css;\n};\n\n/**\n * Function: redrawHtmlShape\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.redrawHtmlShape = function()\n{\n\tif (mxClient.IS_SVG)\n\t{\n\t\tthis.redrawHtmlShapeWithCss3();\t\n\t}\n\telse\n\t{\n\t\tvar style = this.node.style;\n\t\n\t\t// Resets CSS styles\n\t\tstyle.whiteSpace = 'normal';\n\t\tstyle.overflow = '';\n\t\tstyle.width = '';\n\t\tstyle.height = '';\n\t\t\n\t\tthis.updateValue();\n\t\tthis.updateFont(this.node);\n\t\tthis.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));\n\t\t\n\t\tthis.offsetWidth = null;\n\t\tthis.offsetHeight = null;\n\t\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode <= 8))\n\t\t{\n\t\t\tthis.updateHtmlFilter();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateHtmlTransform();\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawHtmlShapeWithCss3\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.redrawHtmlShapeWithCss3 = function()\n{\n\tvar w = Math.max(0, Math.round(this.bounds.width / this.scale));\n\tvar h = Math.max(0, Math.round(this.bounds.height / this.scale));\n\tvar flex = 'position: absolute; left: ' + Math.round(this.bounds.x) + 'px; ' +\n\t\t'top: ' + Math.round(this.bounds.y) + 'px; pointer-events: none; ';\n\tvar block = this.getTextCss();\n\t\n\tmxSvgCanvas2D.createCss(w + 2, h, this.align, this.valign, this.wrap, this.overflow, this.clipped,\n\t\t(this.background != null) ? mxUtils.htmlEntities(this.background) : null,\n\t\t(this.border != null) ? mxUtils.htmlEntities(this.border) : null,\n\t\tflex, block, this.scale, mxUtils.bind(this, function(dx, dy, flex, item, block, ofl)\n\t{\n\t\tvar r = this.getTextRotation();\n\t\tvar tr = ((this.scale != 1) ? 'scale(' + this.scale + ') ' : '') +\n\t\t\t((r != 0) ? 'rotate(' + r + 'deg) ' : '') +\n\t\t\t((this.margin.x != 0 || this.margin.y != 0) ?\n\t\t\t\t'translate(' + (this.margin.x * 100) + '%,' +\n\t\t\t\t\t(this.margin.y * 100) + '%)' : '');\n\t\t\n\t\tif (tr != '')\n\t\t{\n\t\t\ttr = 'transform-origin: 0 0; transform: ' + tr + '; ';\n\t\t}\n\n\t\tif (ofl == '')\n\t\t{\n\t\t\tflex += item;\n\t\t\titem = 'display:inline-block; min-width: 100%; ' + tr;\n\t\t}\n\t\telse\n\t\t{\n\t\t\titem += tr;\n\t\t\t\n\t\t\tif (mxClient.IS_SF)\n\t\t\t{\n\t\t\t\titem += '-webkit-clip-path: content-box;';\n\t\t\t}\n\t\t}\n\n\t\tif (this.opacity < 100)\n\t\t{\n\t\t\tblock += 'opacity: ' + (this.opacity / 100) + '; ';\n\t\t}\n\t\t\n\t\tthis.node.setAttribute('style', flex);\n\t\t\n\t\tvar html = (mxUtils.isNode(this.value)) ? this.value.outerHTML : this.getHtmlValue();\n\t\t\n\t\tif (this.node.firstChild == null)\n\t\t{\n\t\t\tthis.node.innerHTML = '<div><div>' + html +'</div></div>';\n\t\t}\n\n\t\tthis.node.firstChild.firstChild.setAttribute('style', block);\n\t\tthis.node.firstChild.setAttribute('style', item);\n\t}));\n};\n\n/**\n * Function: updateHtmlTransform\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.updateHtmlTransform = function()\n{\n\tvar theta = this.getTextRotation();\n\tvar style = this.node.style;\n\tvar dx = this.margin.x;\n\tvar dy = this.margin.y;\n\t\n\tif (theta != 0)\n\t{\n\t\tmxUtils.setPrefixedStyle(style, 'transformOrigin', (-dx * 100) + '%' + ' ' + (-dy * 100) + '%');\n\t\tmxUtils.setPrefixedStyle(style, 'transform', 'translate(' + (dx * 100) + '%' + ',' + (dy * 100) + '%) ' +\n\t\t\t'scale(' + this.scale + ') rotate(' + theta + 'deg)');\n\t}\n\telse\n\t{\n\t\tmxUtils.setPrefixedStyle(style, 'transformOrigin', '0% 0%');\n\t\tmxUtils.setPrefixedStyle(style, 'transform', 'scale(' + this.scale + ') ' +\n\t\t\t'translate(' + (dx * 100) + '%' + ',' + (dy * 100) + '%)');\n\t}\n\n\tstyle.left = Math.round(this.bounds.x - Math.ceil(dx * ((this.overflow != 'fill' &&\n\t\tthis.overflow != 'width') ? 3 : 1))) + 'px';\n\tstyle.top = Math.round(this.bounds.y - dy * ((this.overflow != 'fill') ? 3 : 1)) + 'px';\n\t\n\tif (this.opacity < 100)\n\t{\n\t\tstyle.opacity = this.opacity / 100;\n\t}\n\telse\n\t{\n\t\tstyle.opacity = '';\n\t}\n};\n\n/**\n * Function: updateInnerHtml\n * \n * Sets the inner HTML of the given element to the <value>.\n */\nmxText.prototype.updateInnerHtml = function(elt)\n{\n\tif (mxUtils.isNode(this.value))\n\t{\n\t\telt.innerHTML = this.value.outerHTML;\n\t}\n\telse\n\t{\n\t\tvar val = this.value;\n\t\t\n\t\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\t// LATER: Can be cached in updateValue\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = mxUtils.replaceTrailingNewlines(val, '<div>&nbsp;</div>');\n\t\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\tval = '<div style=\"display:inline-block;_display:inline;\">' + val + '</div>';\n\t\t\n\t\telt.innerHTML = val;\n\t}\n};\n\n/**\n * Function: updateHtmlFilter\n *\n * Rotated text rendering quality is bad for IE9 quirks/IE8 standards\n */\nmxText.prototype.updateHtmlFilter = function()\n{\n\tvar style = this.node.style;\n\tvar dx = this.margin.x;\n\tvar dy = this.margin.y;\n\tvar s = this.scale;\n\t\n\t// Resets filter before getting offsetWidth\n\tmxUtils.setOpacity(this.node, this.opacity);\n\t\n\t// Adds 1 to match table height in 1.x\n\tvar ow = 0;\n\tvar oh = 0;\n\tvar td = (this.state != null) ? this.state.view.textDiv : null;\n\tvar sizeDiv = this.node;\n\t\n\t// Fallback for hidden text rendering in IE quirks mode\n\tif (td != null)\n\t{\n\t\ttd.style.overflow = '';\n\t\ttd.style.height = '';\n\t\ttd.style.width = '';\n\t\t\n\t\tthis.updateFont(td);\n\t\tthis.updateSize(td, false);\n\t\tthis.updateInnerHtml(td);\n\t\t\n\t\tvar w = Math.round(this.bounds.width / this.scale);\n\n\t\tif (this.wrap && w > 0)\n\t\t{\n\t\t\ttd.style.whiteSpace = 'normal';\n\t\t\ttd.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\tow = w;\n\t\t\t\n\t\t\tif (this.clipped)\n\t\t\t{\n\t\t\t\tow = Math.min(ow, this.bounds.width);\n\t\t\t}\n\n\t\t\ttd.style.width = ow + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttd.style.whiteSpace = 'nowrap';\n\t\t}\n\t\t\n\t\tsizeDiv = td;\n\t\t\n\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t{\n\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\n\t\t\tif (this.wrap && td.style.wordWrap == 'break-word')\n\t\t\t{\n\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t}\n\t\t}\n\n\t\t// Required to update the height of the text box after wrapping width is known \n\t\tif (!this.clipped && this.wrap && w > 0)\n\t\t{\n\t\t\tow = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\t\ttd.style.width = ow + 'px';\n\t\t}\n\t\t\n\t\toh = sizeDiv.offsetHeight + 2;\n\t\t\n\t\tif (mxClient.IS_QUIRKS && this.border != null && this.border != mxConstants.NONE)\n\t\t{\n\t\t\toh += 3;\n\t\t}\n\t}\n\telse if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t{\n\t\tsizeDiv = sizeDiv.firstChild;\n\t\toh = sizeDiv.offsetHeight;\n\t}\n\n\tow = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\n\tif (this.clipped)\n\t{\n\t\toh = Math.min(oh, this.bounds.height);\n\t}\n\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\t// Handles special case for live preview with no wrapper DIV and no textDiv\n\tif (this.overflow == 'fill')\n\t{\n\t\toh = h;\n\t\tow = w;\n\t}\n\telse if (this.overflow == 'width')\n\t{\n\t\toh = sizeDiv.scrollHeight;\n\t\tow = w;\n\t}\n\t\n\t// Stores for later use\n\tthis.offsetWidth = ow;\n\tthis.offsetHeight = oh;\n\t\n\t// Simulates max-height CSS in quirks mode\n\tif (mxClient.IS_QUIRKS && (this.clipped || (this.overflow == 'width' && h > 0)))\n\t{\n\t\th = Math.min(h, oh);\n\t\tstyle.height = Math.round(h) + 'px';\n\t}\n\telse\n\t{\n\t\th = oh;\n\t}\n\n\tif (this.overflow != 'fill' && this.overflow != 'width')\n\t{\n\t\tif (this.clipped)\n\t\t{\n\t\t\tow = Math.min(w, ow);\n\t\t}\n\t\t\n\t\tw = ow;\n\n\t\t// Simulates max-width CSS in quirks mode\n\t\tif ((mxClient.IS_QUIRKS && this.clipped) || this.wrap)\n\t\t{\n\t\t\tstyle.width = Math.round(w) + 'px';\n\t\t}\n\t}\n\n\th *= s;\n\tw *= s;\n\t\n\t// Rotation case is handled via VML canvas\n\tvar rad = this.getTextRotation() * (Math.PI / 180);\n\t\n\t// Precalculate cos and sin for the rotation\n\tvar real_cos = parseFloat(parseFloat(Math.cos(rad)).toFixed(8));\n\tvar real_sin = parseFloat(parseFloat(Math.sin(-rad)).toFixed(8));\n\n\trad %= 2 * Math.PI;\n\t\n\tif (rad < 0)\n\t{\n\t\trad += 2 * Math.PI;\n\t}\n\t\n\trad %= Math.PI;\n\t\n\tif (rad > Math.PI / 2)\n\t{\n\t\trad = Math.PI - rad;\n\t}\n\t\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(-rad);\n\n\tvar tx = w * -(dx + 0.5);\n\tvar ty = h * -(dy + 0.5);\n\n\tvar top_fix = (h - h * cos + w * sin) / 2 + real_sin * tx - real_cos * ty;\n\tvar left_fix = (w - w * cos + h * sin) / 2 - real_cos * tx - real_sin * ty;\n\t\n\tif (rad != 0)\n\t{\n\t\tvar f = 'progid:DXImageTransform.Microsoft.Matrix(M11=' + real_cos + ', M12='+\n\t\t\treal_sin + ', M21=' + (-real_sin) + ', M22=' + real_cos + ', sizingMethod=\\'auto expand\\')';\n\t\t\n\t\tif (style.filter != null && style.filter.length > 0)\n\t\t{\n\t\t\tstyle.filter += ' ' + f;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle.filter = f;\n\t\t}\n\t}\n\t\n\t// Workaround for rendering offsets\n\tvar dy = 0;\n\t\n\tif (this.overflow != 'fill' && mxClient.IS_QUIRKS)\n\t{\n\t\tif (this.valign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tdy -= 1;\n\t\t}\n\t\telse if (this.valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdy += 1;\n\t\t}\n\t}\n\n\tstyle.zoom = s;\n\tstyle.left = Math.round(this.bounds.x + left_fix - w / 2) + 'px';\n\tstyle.top = Math.round(this.bounds.y + top_fix - h / 2 + dy) + 'px';\n};\n\n/**\n * Function: updateValue\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateValue = function()\n{\n\tif (mxUtils.isNode(this.value))\n\t{\n\t\tthis.node.innerHTML = '';\n\t\tthis.node.appendChild(this.value);\n\t}\n\telse\n\t{\n\t\tvar val = this.value;\n\t\t\n\t\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\n\t\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\tvar bg = (this.background != null && this.background != mxConstants.NONE) ? this.background : null;\n\t\tvar bd = (this.border != null && this.border != mxConstants.NONE) ? this.border : null;\n\n\t\tif (this.overflow == 'fill' || this.overflow == 'width')\n\t\t{\n\t\t\tif (bg != null)\n\t\t\t{\n\t\t\t\tthis.node.style.backgroundColor = bg;\n\t\t\t}\n\t\t\t\n\t\t\tif (bd != null)\n\t\t\t{\n\t\t\t\tthis.node.style.border = '1px solid ' + bd;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar css = '';\n\t\t\t\n\t\t\tif (bg != null)\n\t\t\t{\n\t\t\t\tcss += 'background-color:' + mxUtils.htmlEntities(bg) + ';';\n\t\t\t}\n\t\t\t\n\t\t\tif (bd != null)\n\t\t\t{\n\t\t\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(bd) + ';';\n\t\t\t}\n\t\t\t\n\t\t\t// Wrapper DIV for background, zoom needed for inline in quirks\n\t\t\t// and to measure wrapped font sizes in all browsers\n\t\t\t// FIXME: Background size in quirks mode for wrapped text\n\t\t\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' :\n\t\t\t\tmxConstants.LINE_HEIGHT;\n\t\t\tval = '<div style=\"zoom:1;' + css + 'display:inline-block;_display:inline;text-decoration:inherit;' +\n\t\t\t\t'padding-bottom:1px;padding-right:1px;line-height:' + lh + '\">' + val + '</div>';\n\t\t}\n\n\t\tthis.node.innerHTML = val;\n\t\t\n\t\t// Sets text direction\n\t\tvar divs = this.node.getElementsByTagName('div');\n\t\t\n\t\tif (divs.length > 0)\n\t\t{\n\t\t\tvar dir = this.textDirection;\n\n\t\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO && this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t\t{\n\t\t\t\tdir = this.getAutoDirection();\n\t\t\t}\n\t\t\t\n\t\t\tif (dir == mxConstants.TEXT_DIRECTION_LTR || dir == mxConstants.TEXT_DIRECTION_RTL)\n\t\t\t{\n\t\t\t\tdivs[divs.length - 1].setAttribute('dir', dir);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdivs[divs.length - 1].removeAttribute('dir');\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: updateFont\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateFont = function(node)\n{\n\tvar style = node.style;\n\t\n\tstyle.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\tstyle.fontSize = this.size + 'px';\n\tstyle.fontFamily = this.family;\n\tstyle.verticalAlign = 'top';\n\tstyle.color = this.color;\n\t\n\tif ((this.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle.fontWeight = 'bold';\n\t}\n\telse\n\t{\n\t\tstyle.fontWeight = '';\n\t}\n\n\tif ((this.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle.fontStyle = 'italic';\n\t}\n\telse\n\t{\n\t\tstyle.fontStyle = '';\n\t}\n\t\n\tvar txtDecor = [];\n\t\n\tif ((this.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttxtDecor.push('underline');\n\t}\n\t\n\tif ((this.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\ttxtDecor.push('line-through');\n\t}\n\t\n\tstyle.textDecoration = txtDecor.join(' ');\n\t\n\tif (this.align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tstyle.textAlign = 'center';\n\t}\n\telse if (this.align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstyle.textAlign = 'right';\n\t}\n\telse\n\t{\n\t\tstyle.textAlign = 'left';\n\t}\n};\n\n/**\n * Function: updateSize\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateSize = function(node, enableWrap)\n{\n\tvar w = Math.max(0, Math.round(this.bounds.width / this.scale));\n\tvar h = Math.max(0, Math.round(this.bounds.height / this.scale));\n\tvar style = node.style;\n\t\n\t// NOTE: Do not use maxWidth here because wrapping will\n\t// go wrong if the cell is outside of the viewable area\n\tif (this.clipped)\n\t{\n\t\tstyle.overflow = 'hidden';\n\t\t\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tstyle.maxHeight = h + 'px';\n\t\t\tstyle.maxWidth = w + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle.width = w + 'px';\n\t\t}\n\t}\n\telse if (this.overflow == 'fill')\n\t{\n\t\tstyle.width = (w + 1) + 'px';\n\t\tstyle.height = (h + 1) + 'px';\n\t\tstyle.overflow = 'hidden';\n\t}\n\telse if (this.overflow == 'width')\n\t{\n\t\tstyle.width = (w + 1) + 'px';\n\t\tstyle.maxHeight = (h + 1) + 'px';\n\t\tstyle.overflow = 'hidden';\n\t}\n\t\n\tif (this.wrap && w > 0)\n\t{\n\t\tstyle.wordWrap = mxConstants.WORD_WRAP;\n\t\tstyle.whiteSpace = 'normal';\n\t\tstyle.width = w + 'px';\n\n\t\tif (enableWrap && this.overflow != 'fill' && this.overflow != 'width')\n\t\t{\n\t\t\tvar sizeDiv = node;\n\t\t\t\n\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t{\n\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t\n\t\t\t\tif (node.style.wordWrap == 'break-word')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar tmp = sizeDiv.offsetWidth;\n\t\t\t\n\t\t\t// Workaround for text measuring in hidden containers\n\t\t\tif (tmp == 0)\n\t\t\t{\n\t\t\t\tvar prev = node.parentNode;\n\t\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\tdocument.body.appendChild(node);\n\t\t\t\ttmp = sizeDiv.offsetWidth;\n\t\t\t\tnode.style.visibility = '';\n\t\t\t\tprev.appendChild(node);\n\t\t\t}\n\n\t\t\ttmp += 3;\n\t\t\t\n\t\t\tif (this.clipped)\n\t\t\t{\n\t\t\t\ttmp = Math.min(tmp, w);\n\t\t\t}\n\t\t\t\n\t\t\tstyle.width = tmp + 'px';\n\t\t}\n\t}\n\telse\n\t{\n\t\tstyle.whiteSpace = 'nowrap';\n\t}\n};\n\n/**\n * Function: getMargin\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.updateMargin = function()\n{\n\tthis.margin = mxUtils.getAlignmentAsPoint(this.align, this.valign);\n};\n\n/**\n * Function: getSpacing\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.getSpacing = function()\n{\n\tvar dx = 0;\n\tvar dy = 0;\n\n\tif (this.align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tdx = (this.spacingLeft - this.spacingRight) / 2;\n\t}\n\telse if (this.align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tdx = -this.spacingRight - this.baseSpacingRight;\n\t}\n\telse\n\t{\n\t\tdx = this.spacingLeft + this.baseSpacingLeft;\n\t}\n\n\tif (this.valign == mxConstants.ALIGN_MIDDLE)\n\t{\n\t\tdy = (this.spacingTop - this.spacingBottom) / 2;\n\t}\n\telse if (this.valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tdy = -this.spacingBottom - this.baseSpacingBottom;;\n\t}\n\telse\n\t{\n\t\tdy = this.spacingTop + this.baseSpacingTop;\n\t}\n\t\n\treturn new mxPoint(dx, dy);\n};\n\n__mxOutput.mxText = typeof mxText !== 'undefined' ? mxText : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxTriangle\n * \n * Implementation of the triangle shape.\n * \n * Constructor: mxTriangle\n *\n * Constructs a new triangle shape.\n */\nfunction mxTriangle()\n{\n\tmxActor.call(this);\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxTriangle, mxActor);\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxTriangle.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxTriangle.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tthis.addPoints(c, [new mxPoint(0, 0), new mxPoint(w, 0.5 * h), new mxPoint(0, h)], this.isRounded, arcSize, true);\n};\n\n__mxOutput.mxTriangle = typeof mxTriangle !== 'undefined' ? mxTriangle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHexagon\n * \n * Implementation of the hexagon shape.\n * \n * Constructor: mxHexagon\n *\n * Constructs a new hexagon shape.\n */\nfunction mxHexagon()\n{\n\tmxActor.call(this);\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxHexagon, mxActor);\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxHexagon.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tthis.addPoints(c, [new mxPoint(0.25 * w, 0), new mxPoint(0.75 * w, 0), new mxPoint(w, 0.5 * h), new mxPoint(0.75 * w, h),\n\t                   new mxPoint(0.25 * w, h), new mxPoint(0, 0.5 * h)], this.isRounded, arcSize, true);\n};\n\n__mxOutput.mxHexagon = typeof mxHexagon !== 'undefined' ? mxHexagon : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLine\n *\n * Extends <mxShape> to implement a horizontal line shape.\n * This shape is registered under <mxConstants.SHAPE_LINE> in\n * <mxCellRenderer>.\n * \n * Constructor: mxLine\n *\n * Constructs a new line shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLine(bounds, stroke, strokewidth, vertical)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.vertical = (vertical != null) ? vertical : this.vertical;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLine, mxShape);\n\n/**\n * Function: vertical\n * \n * Whether to paint a vertical line.\n */\nmxLine.prototype.vertical = false;\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxLine.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.begin();\n\n\tif (this.vertical)\n\t{\n\t\tvar mid = x + w / 2;\n\t\tc.moveTo(mid, y);\n\t\tc.lineTo(mid, y + h);\n\t}\n\telse\n\t{\n\t\tvar mid = y + h / 2;\n\t\tc.moveTo(x, mid);\n\t\tc.lineTo(x + w, mid);\n\t}\n\n\tc.stroke();\n};\n\n__mxOutput.mxLine = typeof mxLine !== 'undefined' ? mxLine : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageShape\n *\n * Extends <mxShape> to implement an image shape. This shape is registered\n * under <mxConstants.SHAPE_IMAGE> in <mxCellRenderer>.\n * \n * Constructor: mxImageShape\n * \n * Constructs a new image shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * image - String that specifies the URL of the image. This is stored in\n * <image>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 0. This is stored in <strokewidth>.\n */\nfunction mxImageShape(bounds, image, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.image = image;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.shadow = false;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxImageShape, mxRectangleShape);\n\n/**\n * Variable: preserveImageAspect\n *\n * Switch to preserve image aspect. Default is true.\n */\nmxImageShape.prototype.preserveImageAspect = true;\n\n/**\n * Function: getSvgScreenOffset\n * \n * Disables offset in IE9 for crisper image output.\n */\nmxImageShape.prototype.getSvgScreenOffset = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: apply\n * \n * Overrides <mxShape.apply> to replace the fill and stroke colors with the\n * respective values from <mxConstants.STYLE_IMAGE_BACKGROUND> and\n * <mxConstants.STYLE_IMAGE_BORDER>.\n * \n * Applies the style of the given <mxCellState> to the shape. This\n * implementation assigns the following styles to local fields:\n * \n * - <mxConstants.STYLE_IMAGE_BACKGROUND> => fill\n * - <mxConstants.STYLE_IMAGE_BORDER> => stroke\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxImageShape.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\t\n\tthis.fill = null;\n\tthis.stroke = null;\n\tthis.gradient = null;\n\t\n\tif (this.style != null)\n\t{\n\t\tthis.preserveImageAspect = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_ASPECT, 1) == 1;\n\t\t\n\t\t// Legacy support for imageFlipH/V\n\t\tthis.flipH = this.flipH || mxUtils.getValue(this.style, 'imageFlipH', 0) == 1;\n\t\tthis.flipV = this.flipV || mxUtils.getValue(this.style, 'imageFlipV', 0) == 1;\n\t}\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation always\n * returns false.\n */\nmxImageShape.prototype.isHtmlAllowed = function()\n{\n\treturn !this.preserveImageAspect;\n};\n\n/**\n * Function: createHtml\n *\n * Creates and returns the HTML DOM node(s) to represent\n * this shape. This implementation falls back to <createVml>\n * so that the HTML creation is optional.\n */\nmxImageShape.prototype.createHtml = function()\n{\n\tvar node = document.createElement('div');\n\tnode.style.position = 'absolute';\n\n\treturn node;\n};\n\n/**\n * Function: isRoundable\n * \n * Disables inherited roundable support.\n */\nmxImageShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn false;\n};\n\n/**\n * Function: paintVertexShape\n * \n * Generic background painting implementation.\n */\nmxImageShape.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BACKGROUND, null);\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, null);\n\t\t\n\t\tif (fill != null)\n\t\t{\n\t\t\t// Stroke rendering required for shadow\n\t\t\tc.setFillColor(fill);\n\t\t\tc.setStrokeColor(stroke);\n\t\t\tc.rect(x, y, w, h);\n\t\t\tc.fillAndStroke();\n\t\t}\n\n\t\t// FlipH/V are implicit via mxShape.updateTransform\n\t\tc.image(x, y, w, h, this.image, this.preserveImageAspect, false, false);\n\t\t\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, null);\n\t\t\n\t\tif (stroke != null)\n\t\t{\n\t\t\tc.setShadow(false);\n\t\t\tc.setStrokeColor(stroke);\n\t\t\tc.rect(x, y, w, h);\n\t\t\tc.stroke();\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxRectangleShape.prototype.paintBackground.apply(this, arguments);\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Overrides <mxShape.redraw> to preserve the aspect ratio of images.\n */\nmxImageShape.prototype.redrawHtmlShape = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tthis.node.style.width = Math.max(0, Math.round(this.bounds.width)) + 'px';\n\tthis.node.style.height = Math.max(0, Math.round(this.bounds.height)) + 'px';\n\tthis.node.innerHTML = '';\n\n\tif (this.image != null)\n\t{\n\t\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BACKGROUND, '');\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, '');\n\t\tthis.node.style.backgroundColor = fill;\n\t\tthis.node.style.borderColor = stroke;\n\t\t\n\t\t// VML image supports PNG in IE6\n\t\tvar useVml = mxClient.IS_IE6 || ((document.documentMode == null || document.documentMode <= 8) && this.rotation != 0);\n\t\tvar img = document.createElement((useVml) ? mxClient.VML_PREFIX + ':image' : 'img');\n\t\timg.setAttribute('border', '0');\n\t\timg.style.position = 'absolute';\n\t\timg.src = this.image;\n\n\t\tvar filter = (this.opacity < 100) ? 'alpha(opacity=' + this.opacity + ')' : '';\n\t\tthis.node.style.filter = filter;\n\t\t\n\t\tif (this.flipH && this.flipV)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(rotation=2)';\n\t\t}\n\t\telse if (this.flipH)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(mirror=1)';\n\t\t}\n\t\telse if (this.flipV)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)';\n\t\t}\n\n\t\tif (img.style.filter != filter)\n\t\t{\n\t\t\timg.style.filter = filter;\n\t\t}\n\n\t\tif (img.nodeName == 'image')\n\t\t{\n\t\t\timg.style.rotation = this.rotation;\n\t\t}\n\t\telse if (this.rotation != 0)\n\t\t{\n\t\t\t// LATER: Add flipV/H support\n\t\t\tmxUtils.setPrefixedStyle(img.style, 'transform', 'rotate(' + this.rotation + 'deg)');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.setPrefixedStyle(img.style, 'transform', '');\n\t\t}\n\n\t\t// Known problem: IE clips top line of image for certain angles\n\t\timg.style.width = this.node.style.width;\n\t\timg.style.height = this.node.style.height;\n\t\t\n\t\tthis.node.style.backgroundImage = '';\n\t\tthis.node.appendChild(img);\n\t}\n\telse\n\t{\n\t\tthis.setTransparentBackgroundImage(this.node);\n\t}\n};\n\n__mxOutput.mxImageShape = typeof mxImageShape !== 'undefined' ? mxImageShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLabel\n *\n * Extends <mxShape> to implement an image shape with a label.\n * This shape is registered under <mxConstants.SHAPE_LABEL> in\n * <mxCellRenderer>.\n * \n * Constructor: mxLabel\n *\n * Constructs a new label shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLabel(bounds, fill, stroke, strokewidth)\n{\n\tmxRectangleShape.call(this, bounds, fill, stroke, strokewidth);\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLabel, mxRectangleShape);\n\n/**\n * Variable: imageSize\n *\n * Default width and height for the image. Default is\n * <mxConstants.DEFAULT_IMAGESIZE>.\n */\nmxLabel.prototype.imageSize = mxConstants.DEFAULT_IMAGESIZE;\n\n/**\n * Variable: spacing\n *\n * Default value for image spacing. Default is 2.\n */\nmxLabel.prototype.spacing = 2;\n\n/**\n * Variable: indicatorSize\n *\n * Default width and height for the indicicator. Default is 10.\n */\nmxLabel.prototype.indicatorSize = 10;\n\n/**\n * Variable: indicatorSpacing\n *\n * Default spacing between image and indicator. Default is 2.\n */\nmxLabel.prototype.indicatorSpacing = 2;\n\n/**\n * Function: init\n *\n * Initializes the shape and the <indicator>.\n */\nmxLabel.prototype.init = function(container)\n{\n\tmxShape.prototype.init.apply(this, arguments);\n\n\tif (this.indicatorShape != null)\n\t{\n\t\tthis.indicator = new this.indicatorShape();\n\t\tthis.indicator.dialect = this.dialect;\n\t\tthis.indicator.init(this.node);\n\t}\n};\n\n/**\n * Function: redraw\n *\n * Reconfigures this shape. This will update the colors of the indicator\n * and reconfigure it if required.\n */\nmxLabel.prototype.redraw = function()\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.fill = this.indicatorColor;\n\t\tthis.indicator.stroke = this.indicatorStrokeColor;\n\t\tthis.indicator.gradient = this.indicatorGradientColor;\n\t\tthis.indicator.direction = this.indicatorDirection;\n\t\tthis.indicator.redraw();\n\t}\n\t\n\tmxShape.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient and\n * no indicator shape.\n */\nmxLabel.prototype.isHtmlAllowed = function()\n{\n\treturn mxRectangleShape.prototype.isHtmlAllowed.apply(this, arguments) &&\n\t\tthis.indicatorColor == null && this.indicatorShape == null;\n};\n\n/**\n * Function: paintForeground\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tthis.paintImage(c, x, y, w, h);\n\tthis.paintIndicator(c, x, y, w, h);\n\t\n\tmxRectangleShape.prototype.paintForeground.apply(this, arguments);\n};\n\n/**\n * Function: paintImage\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintImage = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.image, false, false, false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.getImageBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_WIDTH, mxConstants.DEFAULT_IMAGESIZE);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_HEIGHT, mxConstants.DEFAULT_IMAGESIZE);\n\tvar spacing = mxUtils.getNumber(this.style, mxConstants.STYLE_SPACING, this.spacing) + 5;\n\n\tif (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse if (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\n\tif (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\t\n\treturn new mxRectangle(x, y, width, height);\n};\n\n/**\n * Function: paintIndicator\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintIndicator = function(c, x, y, w, h)\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tthis.indicator.paint(c);\n\t}\n\telse if (this.indicatorImage != null)\n\t{\n\t\tvar bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.indicatorImage, false, false, false);\n\t}\n};\n\n/**\n * Function: getIndicatorBounds\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.getIndicatorBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_WIDTH, this.indicatorSize);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_HEIGHT, this.indicatorSize);\n\tvar spacing = this.spacing + 5;\t\t\n\t\n\tif (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse if (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\t\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\t\n\treturn new mxRectangle(x, y, width, height);\n};\n/**\n * Function: redrawHtmlShape\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.redrawHtmlShape = function()\n{\n\tmxRectangleShape.prototype.redrawHtmlShape.apply(this, arguments);\n\t\n\t// Removes all children\n\twhile(this.node.hasChildNodes())\n\t{\n\t\tthis.node.removeChild(this.node.lastChild);\n\t}\n\t\n\tif (this.image != null)\n\t{\n\t\tvar node = document.createElement('img');\n\t\tnode.style.position = 'relative';\n\t\tnode.setAttribute('border', '0');\n\t\t\n\t\tvar bounds = this.getImageBounds(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);\n\t\tbounds.x -= this.bounds.x;\n\t\tbounds.y -= this.bounds.y;\n\n\t\tnode.style.left = Math.round(bounds.x) + 'px';\n\t\tnode.style.top = Math.round(bounds.y) + 'px';\n\t\tnode.style.width = Math.round(bounds.width) + 'px';\n\t\tnode.style.height = Math.round(bounds.height) + 'px';\n\t\t\n\t\tnode.src = this.image;\n\t\t\n\t\tthis.node.appendChild(node);\n\t}\n};\n\n__mxOutput.mxLabel = typeof mxLabel !== 'undefined' ? mxLabel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCylinder\n *\n * Extends <mxShape> to implement an cylinder shape. If a\n * custom shape with one filled area and an overlay path is\n * needed, then this shape's <redrawPath> should be overridden.\n * This shape is registered under <mxConstants.SHAPE_CYLINDER>\n * in <mxCellRenderer>.\n * \n * Constructor: mxCylinder\n *\n * Constructs a new cylinder shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCylinder(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxCylinder, mxShape);\n\n/**\n * Variable: maxHeight\n *\n * Defines the maximum height of the top and bottom part\n * of the cylinder shape.\n */\nmxCylinder.prototype.maxHeight = 40;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Sets stroke tolerance to 0 for SVG.\n */\nmxCylinder.prototype.svgStrokeTolerance = 0;\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxCylinder.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h, false);\n\tc.fillAndStroke();\n\t\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tc.begin();\n\t\tthis.redrawPath(c, x, y, w, h, true);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: getCylinderSize\n *\n * Returns the cylinder size.\n */\nmxCylinder.prototype.getCylinderSize = function(x, y, w, h)\n{\n\treturn Math.min(this.maxHeight, Math.round(h / 5));\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCylinder.prototype.redrawPath = function(c, x, y, w, h, isForeground)\n{\n\tvar dy = this.getCylinderSize(x, y, w, h);\n\t\n\tif ((isForeground && this.fill != null) || (!isForeground && this.fill == null))\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, 2 * dy, w, 2 * dy, w, dy);\n\t\t\n\t\t// Needs separate shapes for correct hit-detection\n\t\tif (!isForeground)\n\t\t{\n\t\t\tc.stroke();\n\t\t\tc.begin();\n\t\t}\n\t}\n\t\n\tif (!isForeground)\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, -dy / 3, w, -dy / 3, w, dy);\n\t\tc.lineTo(w, h - dy);\n\t\tc.curveTo(w, h + dy / 3, 0, h + dy / 3, 0, h - dy);\n\t\tc.close();\n\t}\n};\n\n__mxOutput.mxCylinder = typeof mxCylinder !== 'undefined' ? mxCylinder : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConnector\n * \n * Extends <mxShape> to implement a connector shape. The connector\n * shape allows for arrow heads on either side.\n * \n * This shape is registered under <mxConstants.SHAPE_CONNECTOR> in\n * <mxCellRenderer>.\n * \n * Constructor: mxConnector\n * \n * Constructs a new connector shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * Default is 'black'.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxConnector(points, stroke, strokewidth)\n{\n\tmxPolyline.call(this, points, stroke, strokewidth);\n};\n\n/**\n * Extends mxPolyline.\n */\nmxUtils.extend(mxConnector, mxPolyline);\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using <createBoundingBox> and\n * <augmentBoundingBox> and stores the result in <boundingBox>.\n */\nmxConnector.prototype.updateBoundingBox = function()\n{\n\tthis.useSvgBoundingBox = this.style != null && this.style[mxConstants.STYLE_CURVED] == 1;\n\tmxShape.prototype.updateBoundingBox.apply(this, arguments);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// The indirection via functions for markers is needed in\n\t// order to apply the offsets before painting the line and\n\t// paint the markers after painting the line.\n\tvar sourceMarker = this.createMarker(c, pts, true);\n\tvar targetMarker = this.createMarker(c, pts, false);\n\n\tmxPolyline.prototype.paintEdgeShape.apply(this, arguments);\n\t\n\t// Disables shadows, dashed styles and fixes fill color for markers\n\tc.setFillColor(this.stroke);\n\tc.setShadow(false);\n\tc.setDashed(false);\n\t\n\tif (sourceMarker != null)\n\t{\n\t\tsourceMarker();\n\t}\n\t\n\tif (targetMarker != null)\n\t{\n\t\ttargetMarker();\n\t}\n};\n\n/**\n * Function: createMarker\n * \n * Prepares the marker by adding offsets in pts and returning a function to\n * paint the marker.\n */\nmxConnector.prototype.createMarker = function(c, pts, source)\n{\n\tvar result = null;\n\tvar n = pts.length;\n\tvar type = mxUtils.getValue(this.style, (source) ? mxConstants.STYLE_STARTARROW : mxConstants.STYLE_ENDARROW);\n\tvar p0 = (source) ? pts[1] : pts[n - 2];\n\tvar pe = (source) ? pts[0] : pts[n - 1];\n\t\n\tif (type != null && p0 != null && pe != null)\n\t{\n\t\tvar count = 1;\n\t\t\n\t\t// Uses next non-overlapping point\n\t\twhile (count < n - 1 && Math.round(p0.x - pe.x) == 0 && Math.round(p0.y - pe.y) == 0)\n\t\t{\n\t\t\tp0 = (source) ? pts[1 + count] : pts[n - 2 - count];\n\t\t\tcount++;\n\t\t}\n\t\n\t\t// Computes the norm and the inverse norm\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\t\n\t\tvar dist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n\t\t\n\t\tvar unitX = dx / dist;\n\t\tvar unitY = dy / dist;\n\t\n\t\tvar size = mxUtils.getNumber(this.style, (source) ? mxConstants.STYLE_STARTSIZE : mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE);\n\t\t\n\t\t// Allow for stroke width in the end point used and the \n\t\t// orthogonal vectors describing the direction of the marker\n\t\tvar filled = this.style[(source) ? mxConstants.STYLE_STARTFILL : mxConstants.STYLE_ENDFILL] != 0;\n\t\t\n\t\tresult = mxMarker.createMarker(c, this, type, pe, unitX, unitY, size, source, this.strokewidth, filled);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the strokewidth and shadow offsets.\n */\nmxConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\t// Adds marker sizes\n\tvar size = 0;\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE)\n\t{\n\t\tsize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_MARKERSIZE) + 1;\n\t}\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE)\n\t{\n\t\tsize = Math.max(size, mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE)) + 1;\n\t}\n\t\n\tbbox.grow(size * this.scale);\n};\n\n__mxOutput.mxConnector = typeof mxConnector !== 'undefined' ? mxConnector : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlane\n *\n * Extends <mxShape> to implement a swimlane shape. This shape is registered\n * under <mxConstants.SHAPE_SWIMLANE> in <mxCellRenderer>. Use the\n * <mxConstants.STYLE_STYLE_STARTSIZE> to define the size of the title\n * region, <mxConstants.STYLE_SWIMLANE_FILLCOLOR> for the content area fill,\n * <mxConstants.STYLE_SEPARATORCOLOR> to draw an additional vertical separator\n * and <mxConstants.STYLE_SWIMLANE_LINE> to hide the line between the title\n * region and the content area. The <mxConstants.STYLE_HORIZONTAL> affects\n * the orientation of this shape, not only its label.\n * \n * Constructor: mxSwimlane\n *\n * Constructs a new swimlane shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxSwimlane(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxSwimlane, mxShape);\n\n/**\n * Variable: imageSize\n *\n * Default imagewidth and imageheight if an image but no imagewidth\n * and imageheight are defined in the style. Value is 16.\n */\nmxSwimlane.prototype.imageSize = 16;\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxSwimlane.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: getTitleSize\n * \n * Returns the title size.\n */\nmxSwimlane.prototype.getTitleSize = function()\n{\n\treturn Math.max(0, mxUtils.getValue(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE));\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounding box for the label.\n */\nmxSwimlane.prototype.getLabelBounds = function(rect)\n{\n\tvar start = this.getTitleSize();\n\tvar bounds = new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n\tvar horizontal = this.isHorizontal();\n\t\n\tvar flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\tvar flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\n\t// East is default\n\tvar shapeVertical = (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_SOUTH);\n\tvar realHorizontal = horizontal == !shapeVertical;\n\t\n\tvar realFlipH = !realHorizontal && flipH != (this.direction == mxConstants.DIRECTION_SOUTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_WEST);\n\tvar realFlipV = realHorizontal && flipV != (this.direction == mxConstants.DIRECTION_SOUTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_WEST);\n\n\t// Shape is horizontal\n\tif (!shapeVertical)\n\t{\n\t\tvar tmp = Math.min(bounds.height, start * this.scale);\n\n\t\tif (realFlipH || realFlipV)\n\t\t{\n\t\t\tbounds.y += bounds.height - tmp;\n\t\t}\n\n\t\tbounds.height = tmp;\n\t}\n\telse\n\t{\n\t\tvar tmp = Math.min(bounds.width, start * this.scale);\n\t\t\n\t\tif (realFlipH || realFlipV)\n\t\t{\n\t\t\tbounds.x += bounds.width - tmp;\t\n\t\t}\n\n\t\tbounds.width = tmp;\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getGradientBounds = function(c, x, y, w, h)\n{\n\tvar start = this.getTitleSize();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tstart = Math.min(start, h);\n\t\treturn new mxRectangle(x, y, w, start);\n\t}\n\telse\n\t{\n\t\tstart = Math.min(start, w);\n\t\treturn new mxRectangle(x, y, start, h);\n\t}\n};\n\n/**\n * Function: getSwimlaneArcSize\n * \n * Returns the arcsize for the swimlane.\n */\nmxSwimlane.prototype.getSwimlaneArcSize = function(w, h, start)\n{\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t{\n\t\treturn Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t}\n\telse\n\t{\n\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\n\t\treturn start * f * 3; \n\t}\n};\n\n/**\n * Function: isHorizontal\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.isHorizontal = function()\n{\n\treturn mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n};\n\n/**\n * Function: paintVertexShape\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar start = this.getTitleSize();\n\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_SWIMLANE_FILLCOLOR, mxConstants.NONE);\n\tvar swimlaneLine = mxUtils.getValue(this.style, mxConstants.STYLE_SWIMLANE_LINE, 1) == 1;\n\tvar r = 0;\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tstart = Math.min(start, h);\n\t}\n\telse\n\t{\n\t\tstart = Math.min(start, w);\n\t}\n\t\n\tc.translate(x, y);\n\t\n\tif (!this.isRounded)\n\t{\n\t\tthis.paintSwimlane(c, x, y, w, h, start, fill, swimlaneLine);\n\t}\n\telse\n\t{\n\t\tr = this.getSwimlaneArcSize(w, h, start);\n\t\tr = Math.min(((this.isHorizontal()) ? h : w) - start, Math.min(start, r));\n\t\tthis.paintRoundedSwimlane(c, x, y, w, h, start, r, fill, swimlaneLine);\n\t}\n\t\n\tvar sep = mxUtils.getValue(this.style, mxConstants.STYLE_SEPARATORCOLOR, mxConstants.NONE);\n\tthis.paintSeparator(c, x, y, w, h, start, sep);\n\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x - x, bounds.y - y, bounds.width, bounds.height,\n\t\t\t\tthis.image, false, false, false);\n\t}\n\t\n\tif (this.glass)\n\t{\n\t\tc.setShadow(false);\n\t\tthis.paintGlassEffect(c, 0, 0, w, start, r);\n\t}\n};\n\n/**\n * Function: paintSwimlane\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintSwimlane = function(c, x, y, w, h, start, fill, swimlaneLine)\n{\n\tc.begin();\n\t\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\n\t}\n\t\n\tif (!events && (this.fill == null || this.fill == mxConstants.NONE))\n\t{\n\t\tc.pointerEvents = false;\n\t}\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(0, start);\n\t\tc.lineTo(0, 0);\n\t\tc.lineTo(w, 0);\n\t\tc.lineTo(w, start);\n\t\tc.fillAndStroke();\n\n\t\tif (start < h)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE || !events)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\t\n\t\t\tif (fill != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(0, start);\n\t\t\tc.lineTo(0, h);\n\t\t\tc.lineTo(w, h);\n\t\t\tc.lineTo(w, start);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(0, 0);\n\t\tc.lineTo(0, h);\n\t\tc.lineTo(start, h);\n\t\tc.fillAndStroke();\n\t\t\n\t\tif (start < w)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE || !events)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\t\n\t\t\tif (fill != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(start, 0);\n\t\t\tc.lineTo(w, 0);\n\t\t\tc.lineTo(w, h);\n\t\t\tc.lineTo(start, h);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (swimlaneLine)\n\t{\n\t\tthis.paintDivider(c, x, y, w, h, start, fill == mxConstants.NONE);\n\t}\n};\n\n/**\n * Function: paintRoundedSwimlane\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintRoundedSwimlane = function(c, x, y, w, h, start, r, fill, swimlaneLine)\n{\n\tc.begin();\n\t\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\n\t}\n\t\n\tif (!events && (this.fill == null || this.fill == mxConstants.NONE))\n\t{\n\t\tc.pointerEvents = false;\n\t}\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(w, start);\n\t\tc.lineTo(w, r);\n\t\tc.quadTo(w, 0, w - Math.min(w / 2, r), 0);\n\t\tc.lineTo(Math.min(w / 2, r), 0);\n\t\tc.quadTo(0, 0, 0, r);\n\t\tc.lineTo(0, start);\n\t\tc.fillAndStroke();\n\t\t\n\t\tif (start < h)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE || !events)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\t\n\t\t\tif (fill != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(0, start);\n\t\t\tc.lineTo(0, h - r);\n\t\t\tc.quadTo(0, h, Math.min(w / 2, r), h);\n\t\t\tc.lineTo(w - Math.min(w / 2, r), h);\n\t\t\tc.quadTo(w, h, w, h - r);\n\t\t\tc.lineTo(w, start);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(r, 0);\n\t\tc.quadTo(0, 0, 0, Math.min(h / 2, r));\n\t\tc.lineTo(0, h - Math.min(h / 2, r));\n\t\tc.quadTo(0, h, r, h);\n\t\tc.lineTo(start, h);\n\t\tc.fillAndStroke();\n\n\t\tif (start < w)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE || !events)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\t\n\t\t\tif (fill != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(start, h);\n\t\t\tc.lineTo(w - r, h);\n\t\t\tc.quadTo(w, h, w, h - Math.min(h / 2, r));\n\t\t\tc.lineTo(w, Math.min(h / 2, r));\n\t\t\tc.quadTo(w, 0, w - r, 0);\n\t\t\tc.lineTo(start, 0);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (swimlaneLine)\n\t{\n\t\tthis.paintDivider(c, x, y, w, h, start, fill == mxConstants.NONE);\n\t}\n};\n\n/**\n * Function: paintDivider\n *\n * Paints the divider between swimlane title and content area.\n */\nmxSwimlane.prototype.paintDivider = function(c, x, y, w, h, start, shadow)\n{\n\tif (!shadow)\n\t{\n\t\tc.setShadow(false);\n\t}\n\n\tc.begin();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(0, start);\n\t\tc.lineTo(w, start);\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(start, h);\n\t}\n\n\tc.stroke();\n};\n\n/**\n * Function: paintSeparator\n *\n * Paints the vertical or horizontal separator line between swimlanes.\n */\nmxSwimlane.prototype.paintSeparator = function(c, x, y, w, h, start, color)\n{\n\tif (color != mxConstants.NONE)\n\t{\n\t\tc.setStrokeColor(color);\n\t\tc.setDashed(true);\n\t\tc.begin();\n\t\t\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tc.moveTo(w, start);\n\t\t\tc.lineTo(w, h);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(start, 0);\n\t\t\tc.lineTo(w, 0);\n\t\t}\n\t\t\n\t\tc.stroke();\n\t\tc.setDashed(false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.getImageBounds = function(x, y, w, h)\n{\n\tif (this.isHorizontal())\n\t{\n\t\treturn new mxRectangle(x + w - this.imageSize, y, this.imageSize, this.imageSize);\n\t}\n\telse\n\t{\n\t\treturn new mxRectangle(x, y, this.imageSize, this.imageSize);\n\t}\n};\n\n__mxOutput.mxSwimlane = typeof mxSwimlane !== 'undefined' ? mxSwimlane : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxGraphLayout\n * \n * Base class for all layout algorithms in mxGraph. Main public functions are\n * <moveCell> for handling a moved cell within a layouted parent, and <execute> for\n * running the layout on a given parent cell.\n *\n * Known Subclasses:\n *\n * <mxCircleLayout>, <mxCompactTreeLayout>, <mxCompositeLayout>,\n * <mxFastOrganicLayout>, <mxParallelEdgeLayout>, <mxPartitionLayout>,\n * <mxStackLayout>\n * \n * Constructor: mxGraphLayout\n *\n * Constructs a new layout using the given layouts.\n *\n * Arguments:\n * \n * graph - Enclosing \n */\nfunction mxGraphLayout(graph)\n{\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphLayout.prototype.graph = null;\n\n/**\n * Variable: useBoundingBox\n *\n * Boolean indicating if the bounding box of the label should be used if\n * its available. Default is true.\n */\nmxGraphLayout.prototype.useBoundingBox = true;\n\n/**\n * Variable: parent\n *\n * The parent cell of the layout, if any\n */\nmxGraphLayout.prototype.parent = null;\n\n/**\n * Function: moveCell\n * \n * Notified when a cell is being moved in a parent that has automatic\n * layout to update the cell state (eg. index) so that the outcome of the\n * layout will position the vertex as close to the point (x, y) as\n * possible.\n * \n * Empty implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> which has been moved.\n * x - X-coordinate of the new cell location.\n * y - Y-coordinate of the new cell location.\n */\nmxGraphLayout.prototype.moveCell = function(cell, x, y) { };\n\n/**\n * Function: resizeCell\n * \n * Notified when a cell is being resized in a parent that has automatic\n * layout to update the other cells in the layout.\n * \n * Empty implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> which has been moved.\n * bounds - <mxRectangle> that represents the new cell bounds.\n */\nmxGraphLayout.prototype.resizeCell = function(cell, bounds) { };\n\n/**\n * Function: execute\n * \n * Executes the layout algorithm for the children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be layed out.\n */\nmxGraphLayout.prototype.execute = function(parent) { };\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this layout operates on.\n */\nmxGraphLayout.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: getConstraint\n * \n * Returns the constraint for the given key and cell. The optional edge and\n * source arguments are used to return inbound and outgoing routing-\n * constraints for the given edge and vertex. This implementation always\n * returns the value for the given key in the style of the given cell.\n * \n * Parameters:\n * \n * key - Key of the constraint to be returned.\n * cell - <mxCell> whose constraint should be returned.\n * edge - Optional <mxCell> that represents the connection whose constraint\n * should be returned. Default is null.\n * source - Optional boolean that specifies if the connection is incoming\n * or outgoing. Default is null.\n */\nmxGraphLayout.prototype.getConstraint = function(key, cell, edge, source)\n{\n\treturn this.graph.getCurrentCellStyle(cell)[key]\n};\n\n/**\n * Function: traverse\n * \n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Example:\n * \n * (code)\n * mxLog.show();\n * var cell = graph.getSelectionCell();\n * graph.traverse(cell, false, function(vertex, edge)\n * {\n *   mxLog.debug(graph.getLabel(vertex));\n * });\n * (end)\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * func - Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * visited - Optional <mxDictionary> of cell paths for the visited cells.\n */\nmxGraphLayout.traverse = function(vertex, directed, func, edge, visited)\n{\n\tif (func != null && vertex != null)\n\t{\n\t\tdirected = (directed != null) ? directed : true;\n\t\tvisited = visited || new mxDictionary();\n\t\t\n\t\tif (!visited.get(vertex))\n\t\t{\n\t\t\tvisited.put(vertex, true);\n\t\t\tvar result = func(vertex, edge);\n\t\t\t\n\t\t\tif (result == null || result)\n\t\t\t{\n\t\t\t\tvar edgeCount = this.graph.model.getEdgeCount(vertex);\n\t\t\t\t\n\t\t\t\tif (edgeCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = this.graph.model.getEdgeAt(vertex, i);\n\t\t\t\t\t\tvar isSource = this.graph.model.getTerminal(e, true) == vertex;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif (!directed || isSource)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar next = this.graph.view.getVisibleTerminal(e, !isSource);\n\t\t\t\t\t\t\tthis.traverse(next, directed, func, e, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isAncestor\n * \n * Returns true if the given parent is an ancestor of the given child.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent.\n * child - <mxCell> that specifies the child.\n * traverseAncestors - boolean whether to \n */\nmxGraphLayout.prototype.isAncestor = function(parent, child, traverseAncestors)\n{\n\tif (!traverseAncestors)\n\t{\n\t\treturn (this.graph.model.getParent(child) == parent);\n\t}\t\n\t\n\tif (child == parent)\n\t{\n\t\treturn false;\n\t}\n\n\twhile (child != null && child != parent)\n\t{\n\t\tchild = this.graph.model.getParent(child);\n\t}\n\t\n\treturn child == parent;\n};\n\n/**\n * Function: isVertexMovable\n * \n * Returns a boolean indicating if the given <mxCell> is movable or\n * bendable by the algorithm. This implementation returns true if the given\n * cell is movable in the graph.\n * \n * Parameters:\n * \n * cell - <mxCell> whose movable state should be returned.\n */\nmxGraphLayout.prototype.isVertexMovable = function(cell)\n{\n\treturn this.graph.isCellMovable(cell);\n};\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored by\n * the algorithm. This implementation returns false for all vertices.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxGraphLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn !this.graph.getModel().isVertex(vertex) ||\n\t\t!this.graph.isCellVisible(vertex);\n};\n\n/**\n * Function: isEdgeIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored by\n * the algorithm. This implementation returns false for all vertices.\n * \n * Parameters:\n * \n * cell - <mxCell> whose ignored state should be returned.\n */\nmxGraphLayout.prototype.isEdgeIgnored = function(edge)\n{\n\tvar model = this.graph.getModel();\n\t\n\treturn !model.isEdge(edge) ||\n\t\t!this.graph.isCellVisible(edge) ||\n\t\tmodel.getTerminal(edge, true) == null ||\n\t\tmodel.getTerminal(edge, false) == null;\n};\n\n/**\n * Function: setEdgeStyleEnabled\n * \n * Disables or enables the edge style of the given edge.\n */\nmxGraphLayout.prototype.setEdgeStyleEnabled = function(edge, value)\n{\n\tthis.graph.setCellStyles(mxConstants.STYLE_NOEDGESTYLE,\n\t\t\t(value) ? '0' : '1', [edge]);\n};\n\n/**\n * Function: setOrthogonalEdge\n * \n * Disables or enables orthogonal end segments of the given edge.\n */\nmxGraphLayout.prototype.setOrthogonalEdge = function(edge, value)\n{\n\tthis.graph.setCellStyles(mxConstants.STYLE_ORTHOGONAL,\n\t\t\t(value) ? '1' : '0', [edge]);\n};\n\n/**\n * Function: getParentOffset\n * \n * Determines the offset of the given parent to the parent\n * of the layout\n */\nmxGraphLayout.prototype.getParentOffset = function(parent)\n{\n\tvar result = new mxPoint();\n\n\tif (parent != null && parent != this.parent)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isAncestor(this.parent, parent))\n\t\t{\n\t\t\tvar parentGeo = model.getGeometry(parent);\n\n\t\t\twhile (parent != this.parent)\n\t\t\t{\n\t\t\t\tresult.x = result.x + parentGeo.x;\n\t\t\t\tresult.y = result.y + parentGeo.y;\n\n\t\t\t\tparent = model.getParent(parent);;\n\t\t\t\tparentGeo = model.getGeometry(parent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: setEdgePoints\n * \n * Replaces the array of mxPoints in the geometry of the given edge\n * with the given array of mxPoints.\n */\nmxGraphLayout.prototype.setEdgePoints = function(edge, points)\n{\n\tif (edge != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar geometry = model.getGeometry(edge);\n\n\t\tif (geometry == null)\n\t\t{\n\t\t\tgeometry = new mxGeometry();\n\t\t\tgeometry.setRelative(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeometry = geometry.clone();\n\t\t}\n\n\t\tif (this.parent != null && points != null)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\n\t\t\tvar parentOffset = this.getParentOffset(parent);\n\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tpoints[i].x = points[i].x - parentOffset.x;\n\t\t\t\tpoints[i].y = points[i].y - parentOffset.y;\n\t\t\t}\n\t\t}\n\n\t\tgeometry.points = points;\n\t\tmodel.setGeometry(edge, geometry);\n\t}\n};\n\n/**\n * Function: setVertexLocation\n * \n * Sets the new position of the given cell taking into account the size of\n * the bounding box if <useBoundingBox> is true. The change is only carried\n * out if the new location is not equal to the existing location, otherwise\n * the geometry is not replaced with an updated instance. The new or old\n * bounds are returned (including overlapping labels).\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry is to be set.\n * x - Integer that defines the x-coordinate of the new location.\n * y - Integer that defines the y-coordinate of the new location.\n */\nmxGraphLayout.prototype.setVertexLocation = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(cell);\n\tvar result = null;\n\t\n\tif (geometry != null)\n\t{\n\t\tresult = new mxRectangle(x, y, geometry.width, geometry.height);\n\t\t\n\t\t// Checks for oversize labels and shifts the result\n\t\t// TODO: Use mxUtils.getStringSize for label bounds\n\t\tif (this.useBoundingBox)\n\t\t{\n\t\t\tvar state = this.graph.getView().getState(cell);\n\t\t\t\n\t\t\tif (state != null && state.text != null && state.text.boundingBox != null)\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar box = state.text.boundingBox;\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.x < state.x)\n\t\t\t\t{\n\t\t\t\t\tx += (state.x - box.x) / scale;\n\t\t\t\t\tresult.width = box.width;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.y < state.y)\n\t\t\t\t{\n\t\t\t\t\ty += (state.y - box.y) / scale;\n\t\t\t\t\tresult.height = box.height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.parent != null)\n\t\t{\n\t\t\tvar parent = model.getParent(cell);\n\n\t\t\tif (parent != null && parent != this.parent)\n\t\t\t{\n\t\t\t\tvar parentOffset = this.getParentOffset(parent);\n\n\t\t\t\tx = x - parentOffset.x;\n\t\t\t\ty = y - parentOffset.y;\n\t\t\t}\n\t\t}\n\n\t\tif (geometry.x != x || geometry.y != y)\n\t\t{\n\t\t\tgeometry = geometry.clone();\n\t\t\tgeometry.x = x;\n\t\t\tgeometry.y = y;\n\t\t\t\n\t\t\tmodel.setGeometry(cell, geometry);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getVertexBounds\n * \n * Returns an <mxRectangle> that defines the bounds of the given cell or\n * the bounding box if <useBoundingBox> is true.\n */\nmxGraphLayout.prototype.getVertexBounds = function(cell)\n{\n\tvar geo = this.graph.getModel().getGeometry(cell);\n\n\t// Checks for oversize label bounding box and corrects\n\t// the return value accordingly\n\t// TODO: Use mxUtils.getStringSize for label bounds\n\tif (this.useBoundingBox)\n\t{\n\t\tvar state = this.graph.getView().getState(cell);\n\n\t\tif (state != null && state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tvar scale = this.graph.getView().scale;\n\t\t\tvar tmp = state.text.boundingBox;\n\n\t\t\tvar dx0 = Math.max(state.x - tmp.x, 0) / scale;\n\t\t\tvar dy0 = Math.max(state.y - tmp.y, 0) / scale;\n\t\t\tvar dx1 = Math.max((tmp.x + tmp.width) - (state.x + state.width), 0) / scale;\n  \t\t\tvar dy1 = Math.max((tmp.y + tmp.height) - (state.y + state.height), 0) / scale;\n\n\t\t\tgeo = new mxRectangle(geo.x - dx0, geo.y - dy0, geo.width + dx0 + dx1, geo.height + dy0 + dy1);\n\t\t}\n\t}\n\n\tif (this.parent != null)\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\tgeo = geo.clone();\n\n\t\tif (parent != null && parent != this.parent)\n\t\t{\n\t\t\tvar parentOffset = this.getParentOffset(parent);\n\t\t\tgeo.x = geo.x + parentOffset.x;\n\t\t\tgeo.y = geo.y + parentOffset.y;\n\t\t}\n\t}\n\n\treturn new mxRectangle(geo.x, geo.y, geo.width, geo.height);\n};\n\n/**\n * Function: arrangeGroups\n * \n * Shortcut to <mxGraph.updateGroupBounds> with moveGroup set to true.\n */\nmxGraphLayout.prototype.arrangeGroups = function(cells, border, topBorder, rightBorder, bottomBorder, leftBorder)\n{\n\treturn this.graph.updateGroupBounds(cells, border, true, topBorder, rightBorder, bottomBorder, leftBorder);\n};\n\n/**\n * Class: WeightedCellSorter\n * \n * A utility class used to track cells whilst sorting occurs on the weighted\n * sum of their connected edges. Does not violate (x.compareTo(y)==0) ==\n * (x.equals(y))\n *\n * Constructor: WeightedCellSorter\n * \n * Constructs a new weighted cell sorted for the given cell and weight.\n */\nfunction WeightedCellSorter(cell, weightedValue)\n{\n\tthis.cell = cell;\n\tthis.weightedValue = weightedValue;\n};\n\n/**\n * Variable: weightedValue\n * \n * The weighted value of the cell stored.\n */\nWeightedCellSorter.prototype.weightedValue = 0;\n\n/**\n * Variable: nudge\n * \n * Whether or not to flip equal weight values.\n */\nWeightedCellSorter.prototype.nudge = false;\n\n/**\n * Variable: visited\n * \n * Whether or not this cell has been visited in the current assignment.\n */\nWeightedCellSorter.prototype.visited = false;\n\n/**\n * Variable: rankIndex\n * \n * The index this cell is in the model rank.\n */\nWeightedCellSorter.prototype.rankIndex = null;\n\n/**\n * Variable: cell\n * \n * The cell whose median value is being calculated.\n */\nWeightedCellSorter.prototype.cell = null;\n\n/**\n * Function: compare\n * \n * Compares two WeightedCellSorters.\n */\nWeightedCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.weightedValue > a.weightedValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.weightedValue < a.weightedValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (b.nudge)\n\t\t\t{\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n__mxOutput.mxGraphLayout = typeof mxGraphLayout !== 'undefined' ? mxGraphLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStackLayout\n * \n * Extends <mxGraphLayout> to create a horizontal or vertical stack of the\n * child vertices. The children do not need to be connected for this layout\n * to work.\n * \n * Example:\n * \n * (code)\n * var layout = new mxStackLayout(graph, true);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxStackLayout\n * \n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxStackLayout(graph, horizontal, spacing, x0, y0, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = (spacing != null) ? spacing : 0;\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.border = (border != null) ? border : 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxStackLayout.prototype = new mxGraphLayout();\nmxStackLayout.prototype.constructor = mxStackLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxStackLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n *\n * Specifies the spacing between the cells. Default is 0.\n */\nmxStackLayout.prototype.spacing = null;\n\n/**\n * Variable: x0\n *\n * Specifies the horizontal origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.x0 = null;\n\n/**\n * Variable: y0\n *\n * Specifies the vertical origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.y0 = null;\n\n/**\n * Variable: border\n *\n * Border to be added if fill is true. Default is 0.\n */\nmxStackLayout.prototype.border = 0;\n\n/**\n * Variable: marginTop\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginTop = 0;\n\n/**\n * Variable: marginLeft\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginLeft = 0;\n\n/**\n * Variable: marginRight\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginRight = 0;\n\n/**\n * Variable: marginBottom\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginBottom = 0;\n\n/**\n * Variable: keepFirstLocation\n * \n * Boolean indicating if the location of the first cell should be\n * kept, that is, it will not be moved to x0 or y0. Default is false.\n */\nmxStackLayout.prototype.keepFirstLocation = false;\n\n/**\n * Variable: fill\n * \n * Boolean indicating if dimension should be changed to fill out the parent\n * cell. Default is false.\n */\nmxStackLayout.prototype.fill = false;\n\t\n/**\n * Variable: resizeParent\n * \n * If the parent should be resized to match the width/height of the\n * stack. Default is false.\n */\nmxStackLayout.prototype.resizeParent = false;\n\n/**\n * Variable: resizeParentMax\n * \n * Use maximum of existing value and new value for resize of parent.\n * Default is false.\n */\nmxStackLayout.prototype.resizeParentMax = false;\n\n/**\n * Variable: resizeLast\n * \n * If the last element should be resized to fill out the parent. Default is\n * false. If <resizeParent> is true then this is ignored.\n */\nmxStackLayout.prototype.resizeLast = false;\n\n/**\n * Variable: wrap\n * \n * Value at which a new column or row should be created. Default is null.\n */\nmxStackLayout.prototype.wrap = null;\n\n/**\n * Variable: borderCollapse\n * \n * If the strokeWidth should be ignored. Default is true.\n */\nmxStackLayout.prototype.borderCollapse = true;\n\n/**\n * Variable: allowGaps\n * \n * If gaps should be allowed in the stack. Default is false.\n */\nmxStackLayout.prototype.allowGaps = false;\n\n/**\n * Variable: gridSize\n * \n * Grid size for alignment of position and size. Default is 0.\n */\nmxStackLayout.prototype.gridSize = 0;\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxStackLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell>.\n */\nmxStackLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\tvar horizontal = this.isHorizontal();\n\t\n\tif (cell != null && parent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar value = (horizontal) ? x : y;\n\t\tvar pstate = this.graph.getView().getState(parent);\n\n\t\tif (pstate != null)\n\t\t{\n\t\t\tvalue -= (horizontal) ? pstate.x : pstate.y;\n\t\t}\n\t\t\n\t\tvalue /= this.graph.view.scale;\n\t\t\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (child != cell)\n\t\t\t{\n\t\t\t\tvar bounds = model.getGeometry(child);\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = (horizontal) ?\n\t\t\t\t\t\tbounds.x + bounds.width / 2 :\n\t\t\t\t\t\tbounds.y + bounds.height / 2;\n\t\t\t\t\t\n\t\t\t\t\tif (last <= value && tmp > value)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tlast = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: getParentSize\n * \n * Returns the size for the parent container or the size of the graph\n * container if the parent is a layer or the root of the model.\n */\nmxStackLayout.prototype.getParentSize = function(parent)\n{\n\tvar model = this.graph.getModel();\t\t\t\n\tvar pgeo = model.getGeometry(parent);\n\t\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null && ((pgeo == null &&\n\t\tmodel.isLayer(parent)) || parent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\t\n\treturn pgeo;\n};\n\n/**\n * Function: getLayoutCells\n * \n * Returns the cells to be layouted.\n */\nmxStackLayout.prototype.getLayoutCells = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tvar childCount = model.getChildCount(parent);\n\tvar cells = [];\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (!this.isVertexIgnored(child) && this.isVertexMovable(child))\n\t\t{\n\t\t\tcells.push(child);\n\t\t}\n\t}\n\t\n\tif (this.allowGaps)\n\t{\n\t\tcells.sort(mxUtils.bind(this, function(c1, c2)\n\t\t{\n\t\t\tvar geo1 = this.graph.getCellGeometry(c1);\n\t\t\tvar geo2 = this.graph.getCellGeometry(c2);\n\t\t\t\n\t\t\treturn (this.horizontal) ?\n\t\t\t\t((geo1.x == geo2.x) ? 0 : ((geo1.x > geo2.x > 0) ? 1 : -1)) :\n\t\t\t\t((geo1.y == geo2.y) ? 0 : ((geo1.y > geo2.y > 0) ? 1 : -1));\n\t\t}));\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: snap\n * \n * Snaps the given value to the grid size.\n */\nmxStackLayout.prototype.snap = function(value)\n{\n\tif (this.gridSize != null && this.gridSize > 0)\n\t{\n\t\tvalue = Math.max(value, this.gridSize);\n\t\t\n\t\tif (value / this.gridSize > 1)\n\t\t{\n\t\t\tvar mod = value % this.gridSize;\n\t\t\tvalue += mod > this.gridSize / 2 ? (this.gridSize - mod) : -mod;\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.execute = function(parent)\n{\n\tif (parent != null)\n\t{\n\t\tvar pgeo = this.getParentSize(parent);\n\t\tvar horizontal = this.isHorizontal();\n\t\tvar model = this.graph.getModel();\t\n\t\tvar fillValue = null;\n\t\t\n\t\tif (pgeo != null)\n\t\t{\n\t\t\tfillValue = (horizontal) ? pgeo.height - this.marginTop - this.marginBottom :\n\t\t\t\tpgeo.width - this.marginLeft - this.marginRight;\n\t\t}\n\t\t\n\t\tfillValue -= 2 * this.border;\n\t\tvar x0 = this.x0 + this.border + this.marginLeft;\n\t\tvar y0 = this.y0 + this.border + this.marginTop;\n\t\t\n\t\t// Handles swimlane start size\n\t\tif (this.graph.isSwimlane(parent))\n\t\t{\n\t\t\t// Uses computed style to get latest \n\t\t\tvar style = this.graph.getCellStyle(parent);\n\t\t\tvar start = mxUtils.getNumber(style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE);\n\t\t\tvar horz = mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true) == 1;\n\n\t\t\tif (pgeo != null)\n\t\t\t{\n\t\t\t\tif (horz)\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.height);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.width);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (horizontal == horz)\n\t\t\t{\n\t\t\t\tfillValue -= start;\n\t\t\t}\n\n\t\t\tif (horz)\n\t\t\t{\n\t\t\t\ty0 += start;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx0 += start;\n\t\t\t}\n\t\t}\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar tmp = 0;\n\t\t\tvar last = null;\n\t\t\tvar lastValue = 0;\n\t\t\tvar lastChild = null;\n\t\t\tvar cells = this.getLayoutCells(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar child = cells[i];\n\t\t\t\tvar geo = model.getGeometry(child);\n\t\t\t\t\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tif (this.wrap != null && last != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ((horizontal && last.x + last.width +\n\t\t\t\t\t\t\tgeo.width + 2 * this.spacing > this.wrap) ||\n\t\t\t\t\t\t\t(!horizontal && last.y + last.height +\n\t\t\t\t\t\t\tgeo.height + 2 * this.spacing > this.wrap))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlast = null;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ty0 += tmp + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tx0 += tmp + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttmp = 0;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttmp = Math.max(tmp, (horizontal) ? geo.height : geo.width);\n\t\t\t\t\tvar sw = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (!this.borderCollapse)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar childStyle = this.graph.getCellStyle(child);\n\t\t\t\t\t\tsw = mxUtils.getNumber(childStyle, mxConstants.STYLE_STROKEWIDTH, 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (last != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar temp = lastValue + this.spacing + Math.floor(sw / 2);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = this.snap(((this.allowGaps) ? Math.max(temp, geo.x) :\n\t\t\t\t\t\t\t\ttemp) - this.marginLeft) + this.marginLeft;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.y = this.snap(((this.allowGaps) ? Math.max(temp, geo.y) :\n\t\t\t\t\t\t\t\ttemp) - this.marginTop) + this.marginTop;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (!this.keepFirstLocation)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = (this.allowGaps && geo.x > x0) ? Math.max(this.snap(geo.x -\n\t\t\t\t\t\t\t\tthis.marginLeft) + this.marginLeft, x0) : x0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.y = (this.allowGaps && geo.y > y0) ? Math.max(this.snap(geo.y -\n\t\t\t\t\t\t\t\tthis.marginTop) + this.marginTop, y0) : y0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y = y0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.fill && fillValue != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.height = fillValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.width = fillValue;\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.width = this.snap(geo.width);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.height = this.snap(geo.height);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.setChildGeometry(child, geo);\n\t\t\t\t\tlastChild = child;\n\t\t\t\t\tlast = geo;\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tlastValue = last.x + last.width + Math.floor(sw / 2);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tlastValue = last.y + last.height + Math.floor(sw / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resizeParent && pgeo != null && last != null && !this.graph.isCellCollapsed(parent))\n\t\t\t{\n\t\t\t\tthis.updateParentGeometry(parent, pgeo, last);\n\t\t\t}\n\t\t\telse if (this.resizeLast && pgeo != null && last != null && lastChild != null)\n\t\t\t{\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tlast.width = pgeo.width - last.x - this.spacing - this.marginRight - this.marginLeft;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlast.height = pgeo.height - last.y - this.spacing - this.marginBottom;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.setChildGeometry(lastChild, last);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: setChildGeometry\n * \n * Sets the specific geometry to the given child cell.\n * \n * Parameters:\n * \n * child - The given child of <mxCell>.\n * geo - The specific geometry of <mxGeometry>.\n */\nmxStackLayout.prototype.setChildGeometry = function(child, geo)\n{\n\tvar geo2 = this.graph.getCellGeometry(child);\n\t\n\tif (geo2 == null || geo.x != geo2.x || geo.y != geo2.y ||\n\t\tgeo.width != geo2.width || geo.height != geo2.height)\n\t{\n\t\tthis.graph.getModel().setGeometry(child, geo);\n\t}\n};\n\n/**\n * Function: updateParentGeometry\n * \n * Updates the geometry of the given parent cell.\n * \n * Parameters:\n * \n * parent - The given parent of <mxCell>.\n * pgeo - The new <mxGeometry> for parent.\n * last - The last <mxGeometry>.\n */\nmxStackLayout.prototype.updateParentGeometry = function(parent, pgeo, last)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\t\n\n\tvar pgeo2 = pgeo.clone();\n\t\n\tif (horizontal)\n\t{\n\t\tvar tmp = last.x + last.width + this.marginRight + this.border;\n\t\t\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.width = Math.max(pgeo2.width, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.width = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar tmp = last.y + last.height + this.marginBottom + this.border;\n\t\t\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.height = Math.max(pgeo2.height, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.height = tmp;\n\t\t}\n\t}\n\t\n\tif (pgeo.x != pgeo2.x || pgeo.y != pgeo2.y ||\n\t\tpgeo.width != pgeo2.width || pgeo.height != pgeo2.height)\n\t{\n\t\tmodel.setGeometry(parent, pgeo2);\n\t}\n};\n\n__mxOutput.mxStackLayout = typeof mxStackLayout !== 'undefined' ? mxStackLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPartitionLayout\n * \n * Extends <mxGraphLayout> for partitioning the parent cell vertically or\n * horizontally by filling the complete area with the child cells. A horizontal\n * layout partitions the height of the given parent whereas a a non-horizontal\n * layout partitions the width. If the parent is a layer (that is, a child of\n * the root node), then the current graph size is partitioned. The children do\n * not need to be connected for this layout to work.\n * \n * Example:\n * \n * (code)\n * var layout = new mxPartitionLayout(graph, true, 10, 20);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxPartitionLayout\n * \n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxPartitionLayout(graph, horizontal, spacing, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = spacing || 0;\n\tthis.border = border || 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxPartitionLayout.prototype = new mxGraphLayout();\nmxPartitionLayout.prototype.constructor = mxPartitionLayout;\n\n/**\n * Variable: horizontal\n * \n * Boolean indicating the direction in which the space is partitioned.\n * Default is true.\n */\nmxPartitionLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n * \n * Integer that specifies the absolute spacing in pixels between the\n * children. Default is 0.\n */\nmxPartitionLayout.prototype.spacing = null;\n\n/**\n * Variable: border\n * \n * Integer that specifies the absolute inset in pixels for the parent that\n * contains the children. Default is 0.\n */\nmxPartitionLayout.prototype.border = null;\n\n/**\n * Variable: resizeVertices\n * \n * Boolean that specifies if vertices should be resized. Default is true.\n */\nmxPartitionLayout.prototype.resizeVertices = true;\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxPartitionLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell>.\n */\nmxPartitionLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\t\n\tif (cell != null &&\n\t\tparent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\t// Finds index of the closest swimlane\n\t\t// TODO: Take into account the orientation\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\tvar bounds = this.getVertexBounds(child);\n\t\t\t\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tvar tmp = bounds.x + bounds.width / 2;\n\t\t\t\t\n\t\t\t\tif (last < x && tmp > x)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlast = tmp;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\t\t\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>. All children where <isVertexIgnored>\n * returns false and <isVertexMovable> returns true are modified.\n */\nmxPartitionLayout.prototype.execute = function(parent)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\n\tvar pgeo = model.getGeometry(parent);\n\t\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null &&\n\t\t((pgeo == null &&\n\t\tmodel.isLayer(parent)) ||\n\t\tparent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\n\tif (pgeo != null)\n\t{\n\t\tvar children = [];\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (!this.isVertexIgnored(child) &&\n\t\t\t\tthis.isVertexMovable(child))\n\t\t\t{\n\t\t\t\tchildren.push(child);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar n = children.length;\n\n\t\tif (n > 0)\n\t\t{\n\t\t\tvar x0 = this.border;\n\t\t\tvar y0 = this.border;\n\t\t\tvar other = (horizontal) ? pgeo.height : pgeo.width;\n\t\t\tother -= 2 * this.border;\n\n\t\t\tvar size = (this.graph.isSwimlane(parent)) ?\n\t\t\t\tthis.graph.getStartSize(parent) :\n\t\t\t\tnew mxRectangle();\n\n\t\t\tother -= (horizontal) ? size.height : size.width;\n\t\t\tx0 = x0 + size.width;\n\t\t\ty0 = y0 + size.height;\n\n\t\t\tvar tmp = this.border + (n - 1) * this.spacing;\n\t\t\tvar value = (horizontal) ?\n\t\t\t\t((pgeo.width - x0 - tmp) / n) :\n\t\t\t\t((pgeo.height - y0 - tmp) / n);\n\t\t\t\n\t\t\t// Avoids negative values, that is values where the sum of the\n\t\t\t// spacing plus the border is larger then the available space\n\t\t\tif (value > 0)\n\t\t\t{\n\t\t\t\tmodel.beginUpdate();\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < n; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\tvar geo = model.getGeometry(child);\n\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t\t\tgeo.y = y0;\n\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.width = value;\n\t\t\t\t\t\t\t\t\tgeo.height = other;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tx0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.height = value;\n\t\t\t\t\t\t\t\t\tgeo.width = other;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\ty0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmodel.setGeometry(child, geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally\n\t\t\t\t{\n\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxPartitionLayout = typeof mxPartitionLayout !== 'undefined' ? mxPartitionLayout : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCompactTreeLayout\n * \n * Extends <mxGraphLayout> to implement a compact tree (Moen) algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n * \n * Example:\n * \n * (code)\n * var layout = new mxCompactTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new compact tree layout for the specified graph\n * and orientation.\n */\nfunction mxCompactTreeLayout(graph, horizontal, invert)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.invert = (invert != null) ? invert : false;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompactTreeLayout.prototype = new mxGraphLayout();\nmxCompactTreeLayout.prototype.constructor = mxCompactTreeLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxCompactTreeLayout.prototype.horizontal = null;\t \n\n/**\n * Variable: invert\n *\n * Specifies if edge directions should be inverted. Default is false.\n */\nmxCompactTreeLayout.prototype.invert = null;\t \n\n/**\n * Variable: resizeParent\n * \n * If the parents should be resized to match the width/height of the\n * children. Default is true.\n */\nmxCompactTreeLayout.prototype.resizeParent = true;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxCompactTreeLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: groupPadding\n * \n * Padding added to resized parents. Default is 10.\n */\nmxCompactTreeLayout.prototype.groupPadding = 10;\n\n/**\n * Variable: groupPaddingTop\n * \n * Top padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingTop = 0;\n\n/**\n * Variable: groupPaddingRight\n * \n * Right padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingRight = 0;\n\n/**\n * Variable: groupPaddingBottom\n * \n * Bottom padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingBottom = 0;\n\n/**\n * Variable: groupPaddingLeft\n * \n * Left padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingLeft = 0;\n\n/**\n * Variable: parentsChanged\n *\n * A set of the parents that need updating based on children\n * process as part of the layout.\n */\nmxCompactTreeLayout.prototype.parentsChanged = null;\n\n/**\n * Variable: moveTree\n * \n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.moveTree = false;\n\n/**\n * Variable: visited\n * \n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.visited = null;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 10.\n */\nmxCompactTreeLayout.prototype.levelDistance = 10;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 20.\n */\nmxCompactTreeLayout.prototype.nodeDistance = 20;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCompactTreeLayout.prototype.resetEdges = true;\n\n/**\n * Variable: prefHozEdgeSep\n * \n * The preferred horizontal distance between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n * \n * The preferred vertical offset between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefVertEdgeOff = 4;\n\n/**\n * Variable: minEdgeJetty\n * \n * The minimum distance for an edge jetty from a vertex.\n */\nmxCompactTreeLayout.prototype.minEdgeJetty = 8;\n\n/**\n * Variable: channelBuffer\n * \n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed.\n */\nmxCompactTreeLayout.prototype.channelBuffer = 4;\n\n/**\n * Variable: edgeRouting\n * \n * Whether or not to apply the internal tree edge routing.\n */\nmxCompactTreeLayout.prototype.edgeRouting = true;\n\n/**\n * Variable: sortEdges\n * \n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxCompactTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: alignRanks\n * \n * Whether or not the tops of cells in each rank should be aligned\n * across the rank\n */\nmxCompactTreeLayout.prototype.alignRanks = false;\n\n/**\n * Variable: maxRankHeight\n * \n * An array of the maximum height of cells (relative to the layout direction)\n * per rank\n */\nmxCompactTreeLayout.prototype.maxRankHeight = null;\n\n/**\n * Variable: root\n * \n * The cell to use as the root of the tree\n */\nmxCompactTreeLayout.prototype.root = null;\n\n/**\n * Variable: node\n * \n * The internal node representation of the root cell. Do not set directly\n * , this value is only exposed to assist with post-processing functionality\n */\nmxCompactTreeLayout.prototype.node = null;\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxCompactTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxCompactTreeLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n * Overrides <root> if specified.\n */\nmxCompactTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.getModel();\n\n\tif (root == null)\n\t{\n\t\t// Takes the parent as the root if it has outgoing edges\n\t\tif (this.graph.getEdges(parent, model.getParent(parent),\n\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t{\n\t\t\tthis.root = parent;\n\t\t}\n\t\t\n\t\t// Tries to find a suitable root in the parent's\n\t\t// children\n\t\telse\n\t\t{\n\t\t\tvar roots = this.graph.findTreeRoots(parent, true, this.invert);\n\t\t\t\n\t\t\tif (roots.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < roots.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (!this.isVertexIgnored(roots[i]) &&\n\t\t\t\t\t\tthis.graph.getEdges(roots[i], null,\n\t\t\t\t\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.root = roots[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.root = root;\n\t}\n\t\n\tif (this.root != null)\n\t{\n\t\tif (this.resizeParent)\n\t\t{\n\t\t\tthis.parentsChanged = new Object();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.parentsChanged = null;\n\t\t}\n\n\t\t//  Maintaining parent location\n\t\tthis.parentX = null;\n\t\tthis.parentY = null;\n\t\t\n\t\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tthis.parentX = geo.x;\n\t\t\t\tthis.parentY = geo.y;\n\t\t\t}\n\t\t}\n\t\t\n\t\tmodel.beginUpdate();\n\t\t\n\t\ttry\n\t\t{\n\t\t\tthis.visited = new Object();\n\t\t\tthis.node = this.dfs(this.root, parent);\n\t\t\t\n\t\t\tif (this.alignRanks)\n\t\t\t{\n\t\t\t\tthis.maxRankHeight = [];\n\t\t\t\tthis.findRankHeights(this.node, 0);\n\t\t\t\tthis.setCellHeights(this.node, 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.node != null)\n\t\t\t{\n\t\t\t\tthis.layout(this.node);\n\t\t\t\tvar x0 = this.graph.gridSize;\n\t\t\t\tvar y0 = x0;\n\t\t\t\t\n\t\t\t\tif (!this.moveTree)\n\t\t\t\t{\n\t\t\t\t\tvar g = this.getVertexBounds(this.root);\n\t\t\t\t\t\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx0 = g.x;\n\t\t\t\t\t\ty0 = g.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar bounds = null;\n\t\t\t\t\n\t\t\t\tif (this.isHorizontal())\n\t\t\t\t{\n\t\t\t\t\tbounds = this.horizontalLayout(this.node, x0, y0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbounds = this.verticalLayout(this.node, null, x0, y0);\n\t\t\t\t}\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = 0;\n\t\t\t\t\tvar dy = 0;\n\n\t\t\t\t\tif (bounds.x < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = Math.abs(x0 - bounds.x);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bounds.y < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = Math.abs(y0 - bounds.y);\t\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.moveNode(this.node, dx, dy);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.resizeParent)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.adjustParents();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.edgeRouting)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Iterate through all edges setting their positions\n\t\t\t\t\t\tthis.localEdgeProcessing(this.node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Maintaining parent location\n\t\t\t\tif (this.parentX != null && this.parentY != null)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\tgeo.x = this.parentX;\n\t\t\t\t\t\tgeo.y = this.parentY;\n\t\t\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: moveNode\n * \n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.moveNode = function(node, dx, dy)\n{\n\tnode.x += dx;\n\tnode.y += dy;\n\tthis.apply(node);\n\t\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.moveNode(child, dx, dy);\n\t\tchild = child.next;\n\t}\n};\n\n\n/**\n * Function: sortOutgoingEdges\n * \n * Called if <sortEdges> is true to sort the array of outgoing edges in place.\n */\nmxCompactTreeLayout.prototype.sortOutgoingEdges = function(source, edges)\n{\n\tvar lookup = new mxDictionary();\n\t\n\tedges.sort(function(e1, e2)\n\t{\n\t\tvar end1 = e1.getTerminal(e1.getTerminal(false) == source);\n\t\tvar p1 = lookup.get(end1);\n\t\t\n\t\tif (p1 == null)\n\t\t{\n\t\t\tp1 = mxCellPath.create(end1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end1, p1);\n\t\t}\n\n\t\tvar end2 = e2.getTerminal(e2.getTerminal(false) == source);\n\t\tvar p2 = lookup.get(end2);\n\t\t\n\t\tif (p2 == null)\n\t\t{\n\t\t\tp2 = mxCellPath.create(end2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end2, p2);\n\t\t}\n\n\t\treturn mxCellPath.compare(p1, p2);\n\t});\n};\n\n/**\n * Function: findRankHeights\n * \n * Stores the maximum height (relative to the layout\n * direction) of cells in each rank\n */\nmxCompactTreeLayout.prototype.findRankHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] == null || this.maxRankHeight[rank] < node.height)\n\t{\n\t\tthis.maxRankHeight[rank] = node.height;\n\t}\n\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.findRankHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: setCellHeights\n * \n * Set the cells heights (relative to the layout\n * direction) when the tops of each rank are to be aligned\n */\nmxCompactTreeLayout.prototype.setCellHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] != null && this.maxRankHeight[rank] > node.height)\n\t{\n\t\tnode.height = this.maxRankHeight[rank];\n\t}\n\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.setCellHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: dfs\n * \n * Does a depth first search starting at the specified cell.\n * Makes sure the specified parent is never left by the\n * algorithm.\n */\nmxCompactTreeLayout.prototype.dfs = function(cell, parent)\n{\n\tvar id = mxCellPath.create(cell);\n\tvar node = null;\n\t\n\tif (cell != null && this.visited[id] == null && !this.isVertexIgnored(cell))\n\t{\n\t\tthis.visited[id] = cell;\n\t\tnode = this.createNode(cell);\n\n\t\tvar model = this.graph.getModel();\n\t\tvar prev = null;\n\t\tvar out = this.graph.getEdges(cell, parent, this.invert, !this.invert, false, true);\n\t\tvar view = this.graph.getView();\n\t\t\n\t\tif (this.sortEdges)\n\t\t{\n\t\t\tthis.sortOutgoingEdges(cell, out);\n\t\t}\n\n\t\tfor (var i = 0; i < out.length; i++)\n\t\t{\n\t\t\tvar edge = out[i];\n\t\t\t\n\t\t\tif (!this.isEdgeIgnored(edge))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.edgeRouting)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Checks if terminal in same swimlane\n\t\t\t\tvar state = view.getState(edge);\n\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(this.invert) : view.getVisibleTerminal(edge, this.invert);\n\t\t\t\tvar tmp = this.dfs(target, parent);\n\t\t\t\t\n\t\t\t\tif (tmp != null && model.getGeometry(target) != null)\n\t\t\t\t{\n\t\t\t\t\tif (prev == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.child = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tprev.next = tmp;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tprev = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: layout\n * \n * Starts the actual compact tree layout algorithm\n * at the given node.\n */\nmxCompactTreeLayout.prototype.layout = function(node)\n{\n\tif (node != null)\n\t{\n\t\tvar child = node.child;\n\t\t\n\t\twhile (child != null)\n\t\t{\n\t\t\tthis.layout(child);\n\t\t\tchild = child.next;\n\t\t}\n\t\t\n\t\tif (node.child != null)\n\t\t{\n\t\t\tthis.attachParent(node, this.join(node));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.layoutLeaf(node);\n\t\t}\n\t}\n};\n\n/**\n * Function: horizontalLayout\n */\nmxCompactTreeLayout.prototype.horizontalLayout = function(node, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetX;\n\tnode.y += y0 + node.offsetY;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\t\n\tif (child != null)\n\t{\n\t\tbounds = this.horizontalLayout(child, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.y + child.offsetY;\n\t\tvar s = child.next;\n\t\t\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.horizontalLayout(s, node.x + child.offsetX, siblingOffset, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\t\n/**\n * Function: verticalLayout\n */\nmxCompactTreeLayout.prototype.verticalLayout = function(node, parent, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetY;\n\tnode.y += y0 + node.offsetX;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\t\n\tif (child != null)\n\t{\n\t\tbounds = this.verticalLayout(child, node, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.x + child.offsetY;\n\t\tvar s = child.next;\n\t\t\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.verticalLayout(s, node, siblingOffset, node.y + child.offsetX, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: attachParent\n */\nmxCompactTreeLayout.prototype.attachParent = function(node, height)\n{\n\tvar x = this.nodeDistance + this.levelDistance;\n\tvar y2 = (height - node.width) / 2 - this.nodeDistance;\n\tvar y1 = y2 + node.width + 2 * this.nodeDistance - height;\n\t\n\tnode.child.offsetX = x + node.height;\n\tnode.child.offsetY = y1;\n\t\n\tnode.contour.upperHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y1, node.contour.upperHead));\n\tnode.contour.lowerHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y2, node.contour.lowerHead));\n};\n\n/**\n * Function: layoutLeaf\n */\nmxCompactTreeLayout.prototype.layoutLeaf = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\t\n\tnode.contour.upperTail = this.createLine(\n\t\tnode.height + dist, 0);\n\tnode.contour.upperHead = node.contour.upperTail;\n\tnode.contour.lowerTail = this.createLine(\n\t\t0, -node.width - dist);\n\tnode.contour.lowerHead = this.createLine(\n\t\tnode.height + dist, 0, node.contour.lowerTail);\n};\n\n/**\n * Function: join\n */\nmxCompactTreeLayout.prototype.join = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\t\n\tvar child = node.child;\n\tnode.contour = child.contour;\n\tvar h = child.width + dist;\n\tvar sum = h;\n\tchild = child.next;\n\t\n\twhile (child != null)\n\t{\n\t\tvar d = this.merge(node.contour, child.contour);\n\t\tchild.offsetY = d + h;\n\t\tchild.offsetX = 0;\n\t\th = child.width + dist;\n\t\tsum += d + h;\n\t\tchild = child.next;\n\t}\n\t\n\treturn sum;\n};\n\n/**\n * Function: merge\n */\nmxCompactTreeLayout.prototype.merge = function(p1, p2)\n{\n\tvar x = 0;\n\tvar y = 0;\n\tvar total = 0;\n\t\n\tvar upper = p1.lowerHead;\n\tvar lower = p2.upperHead;\n\t\n\twhile (lower != null && upper != null)\n\t{\n\t\tvar d = this.offset(x, y, lower.dx, lower.dy,\n\t\t\tupper.dx, upper.dy);\n\t\ty += d;\n\t\ttotal += d;\n\t\t\n\t\tif (x + lower.dx <= upper.dx)\n\t\t{\n\t\t\tx += lower.dx;\n\t\t\ty += lower.dy;\n\t\t\tlower = lower.next;\n\t\t}\n\t\telse\n\t\t{\t\t\t\t\n\t\t\tx -= upper.dx;\n\t\t\ty -= upper.dy;\n\t\t\tupper = upper.next;\n\t\t}\n\t}\n\t\n\tif (lower != null)\n\t{\n\t\tvar b = this.bridge(p1.upperTail, 0, 0, lower, x, y);\n\t\tp1.upperTail = (b.next != null) ? p2.upperTail : b;\n\t\tp1.lowerTail = p2.lowerTail;\n\t}\n\telse\n\t{\n\t\tvar b = this.bridge(p2.lowerTail, x, y, upper, 0, 0);\n\t\t\n\t\tif (b.next == null)\n\t\t{\n\t\t\tp1.lowerTail = b;\n\t\t}\n\t}\n\t\n\tp1.lowerHead = p2.lowerHead;\n\t\n\treturn total;\n};\n\n/**\n * Function: offset\n */\nmxCompactTreeLayout.prototype.offset = function(p1, p2, a1, a2, b1, b2)\n{\n\tvar d = 0;\n\t\n\tif (b1 <= p1 || p1 + a1 <= 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar t = b1 * a2 - a1 * b2;\n\t\n\tif (t > 0)\n\t{\n\t\tif (p1 < 0)\n\t\t{\n\t\t\tvar s = p1 * a2;\n\t\t\td = s / a1 - p2;\n\t\t}\n\t\telse if (p1 > 0)\n\t\t{\n\t\t\tvar s = p1 * b2;\n\t\t\td = s / b1 - p2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\td = -p2;\n\t\t}\n\t}\n\telse if (b1 < p1 + a1)\n\t{\n\t\tvar s = (b1 - p1) * a2;\n\t\td = b2 - (p2 + s / a1);\n\t}\n\telse if (b1 > p1 + a1)\n\t{\n\t\tvar s = (a1 + p1) * b2;\n\t\td = s / b1 - (p2 + a2);\n\t}\n\telse\n\t{\n\t\td = b2 - (p2 + a2);\n\t}\n\n\tif (d > 0)\n\t{\n\t\treturn d;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n/**\n * Function: bridge\n */\nmxCompactTreeLayout.prototype.bridge = function(line1, x1, y1, line2, x2, y2)\n{\n\tvar dx = x2 + line2.dx - x1;\n\tvar dy = 0;\n\tvar s = 0;\n\t\n\tif (line2.dx == 0)\n\t{\n\t\tdy = line2.dy;\n\t}\n\telse\n\t{\n\t\ts = dx * line2.dy;\n\t\tdy = s / line2.dx;\n\t}\n\t\n\tvar r = this.createLine(dx, dy, line2.next);\n\tline1.next = this.createLine(0, y2 + line2.dy - dy - y1, r);\n\t\n\treturn r;\n};\n\n/**\n * Function: createNode\n */\nmxCompactTreeLayout.prototype.createNode = function(cell)\n{\n\tvar node = new Object();\n\tnode.cell = cell;\n\tnode.x = 0;\n\tnode.y = 0;\n\tnode.width = 0;\n\tnode.height = 0;\n\t\n\tvar geo = this.getVertexBounds(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tnode.width = geo.height;\n\t\t\tnode.height = geo.width;\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.width = geo.width;\n\t\t\tnode.height = geo.height;\n\t\t}\n\t}\n\t\n\tnode.offsetX = 0;\n\tnode.offsetY = 0;\n\tnode.contour = new Object();\n\t\n\treturn node;\n};\n\n/**\n * Function: apply\n */\nmxCompactTreeLayout.prototype.apply = function(node, bounds)\n{\n\tvar model = this.graph.getModel();\n\tvar cell = node.cell;\n\tvar g = model.getGeometry(cell);\n\n\tif (cell != null && g != null)\n\t{\n\t\tif (this.isVertexMovable(cell))\n\t\t{\n\t\t\tg = this.setVertexLocation(cell, node.x, node.y);\n\t\t\t\n\t\t\tif (this.resizeParent)\n\t\t\t{\n\t\t\t\tvar parent = model.getParent(cell);\n\t\t\t\tvar id = mxCellPath.create(parent);\n\t\t\t\t\n\t\t\t\t// Implements set semantic\n\t\t\t\tif (this.parentsChanged[id] == null)\n\t\t\t\t{\n\t\t\t\t\tthis.parentsChanged[id] = parent;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (bounds == null)\n\t\t{\n\t\t\tbounds = new mxRectangle(g.x, g.y, g.width, g.height);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds = new mxRectangle(Math.min(bounds.x, g.x),\n\t\t\t\tMath.min(bounds.y, g.y),\n\t\t\t\tMath.max(bounds.x + bounds.width, g.x + g.width),\n\t\t\t\tMath.max(bounds.y + bounds.height, g.y + g.height));\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: createLine\n */\nmxCompactTreeLayout.prototype.createLine = function(dx, dy, next)\n{\n\tvar line = new Object();\n\tline.dx = dx;\n\tline.dy = dy;\n\tline.next = next;\n\t\n\treturn line;\n};\n\n/**\n * Function: adjustParents\n * \n * Adjust parent cells whose child geometries have changed. The default \n * implementation adjusts the group to just fit around the children with \n * a padding.\n */\nmxCompactTreeLayout.prototype.adjustParents = function()\n{\n\tvar tmp = [];\n\t\n\tfor (var id in this.parentsChanged)\n\t{\n\t\ttmp.push(this.parentsChanged[id]);\n\t}\n\t\n\tthis.arrangeGroups(mxUtils.sortCells(tmp, true), this.groupPadding, this.groupPaddingTop,\n\t\tthis.groupPaddingRight, this.groupPaddingBottom, this.groupPaddingLeft);\n};\n\n/**\n * Function: localEdgeProcessing\n *\n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.localEdgeProcessing = function(node)\n{\n\tthis.processNodeOutgoing(node);\n\tvar child = node.child;\n\n\twhile (child != null)\n\t{\n\t\tthis.localEdgeProcessing(child);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: processNodeOutgoing\n *\n * Separates the x position of edges as they connect to vertices\n */\nmxCompactTreeLayout.prototype.processNodeOutgoing = function(node)\n{\n\tvar child = node.child;\n\tvar parentCell = node.cell;\n\n\tvar childCount = 0;\n\tvar sortedCells = [];\n\n\twhile (child != null)\n\t{\n\t\tchildCount++;\n\n\t\tvar sortingCriterion = child.x;\n\n\t\tif (this.horizontal)\n\t\t{\n\t\t\tsortingCriterion = child.y;\n\t\t}\n\n\t\tsortedCells.push(new WeightedCellSorter(child, sortingCriterion));\n\t\tchild = child.next;\n\t}\n\n\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\tvar availableWidth = node.width;\n\n\tvar requiredWidth = (childCount + 1) * this.prefHozEdgeSep;\n\n\t// Add a buffer on the edges of the vertex if the edge count allows\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tavailableWidth -= 2 * this.prefHozEdgeSep;\n\t}\n\n\tvar edgeSpacing = availableWidth / childCount;\n\n\tvar currentXOffset = edgeSpacing / 2.0;\n\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tcurrentXOffset += this.prefHozEdgeSep;\n\t}\n\n\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\tvar maxYOffset = 0;\n\n\tvar parentBounds = this.getVertexBounds(parentCell);\n\tchild = node.child;\n\n\tfor (var j = 0; j < sortedCells.length; j++)\n\t{\n\t\tvar childCell = sortedCells[j].cell.cell;\n\t\tvar childBounds = this.getVertexBounds(childCell);\n\n\t\tvar edges = this.graph.getEdgesBetween(parentCell,\n\t\t\t\tchildCell, false);\n\t\t\n\t\tvar newPoints = [];\n\t\tvar x = 0;\n\t\tvar y = 0;\n\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tif (this.horizontal)\n\t\t\t{\n\t\t\t\t// Use opposite co-ords, calculation was done for \n\t\t\t\t// \n\t\t\t\tx = parentBounds.x + parentBounds.width;\n\t\t\t\ty = parentBounds.y + currentXOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = parentBounds.x + parentBounds.width\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = childBounds.y + childBounds.height / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = parentBounds.x + currentXOffset;\n\t\t\t\ty = parentBounds.y + parentBounds.height;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = parentBounds.y + parentBounds.height\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = childBounds.x + childBounds.width / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t}\n\n\t\tif (j < childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t}\n\t\telse if (j > childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t}\n\t\t// Ignore the case if equals, this means the second of 2\n\t\t// jettys with the same y (even number of edges)\n\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2] = currentX;\n\t\tcurrentXOffset += edgeSpacing;\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2 + 1] = currentYOffset;\n\n\t\tmaxYOffset = Math.max(maxYOffset, currentYOffset);\n\t}\n};\n__mxOutput.mxCompactTreeLayout = typeof mxCompactTreeLayout !== 'undefined' ? mxCompactTreeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRadialTreeLayout\n * \n * Extends <mxGraphLayout> to implement a radial tree algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n * \n * Example:\n * \n * (code)\n * var layout = new mxRadialTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxRadialTreeLayout\n * \n * Constructs a new radial tree layout for the specified graph\n */\nfunction mxRadialTreeLayout(graph)\n{\n\tmxCompactTreeLayout.call(this, graph , false);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxUtils.extend(mxRadialTreeLayout, mxCompactTreeLayout);\n\n/**\n * Variable: angleOffset\n *\n * The initial offset to compute the angle position.\n */\nmxRadialTreeLayout.prototype.angleOffset = 0.5;\n\n/**\n * Variable: rootx\n *\n * The X co-ordinate of the root cell\n */\nmxRadialTreeLayout.prototype.rootx = 0;\n\n/**\n * Variable: rooty\n *\n * The Y co-ordinate of the root cell\n */\nmxRadialTreeLayout.prototype.rooty = 0;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 120.\n */\nmxRadialTreeLayout.prototype.levelDistance = 120;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 10.\n */\nmxRadialTreeLayout.prototype.nodeDistance = 10;\n\n/**\n * Variable: autoRadius\n * \n * Specifies if the radios should be computed automatically\n */\nmxRadialTreeLayout.prototype.autoRadius = false;\n\n/**\n * Variable: sortEdges\n * \n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxRadialTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: rowMinX\n * \n * Array of leftmost x coordinate of each row\n */\nmxRadialTreeLayout.prototype.rowMinX = [];\n\n/**\n * Variable: rowMaxX\n * \n * Array of rightmost x coordinate of each row\n */\nmxRadialTreeLayout.prototype.rowMaxX = [];\n\n/**\n * Variable: rowMinCenX\n * \n * Array of x coordinate of leftmost vertex of each row\n */\nmxRadialTreeLayout.prototype.rowMinCenX = [];\n\n/**\n * Variable: rowMaxCenX\n * \n * Array of x coordinate of rightmost vertex of each row\n */\nmxRadialTreeLayout.prototype.rowMaxCenX = [];\n\n/**\n * Variable: rowRadi\n * \n * Array of y deltas of each row behind root vertex, also the radius in the tree\n */\nmxRadialTreeLayout.prototype.rowRadi = [];\n\n/**\n * Variable: row\n * \n * Array of vertices on each row\n */\nmxRadialTreeLayout.prototype.row = [];\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxRadialTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n */\nmxRadialTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\t\n\tthis.useBoundingBox = false;\n\tthis.edgeRouting = false;\n\t//this.horizontal = false;\n\n\tmxCompactTreeLayout.prototype.execute.apply(this, arguments);\n\t\n\tvar bounds = null;\n\tvar rootBounds = this.getVertexBounds(this.root);\n\tthis.centerX = rootBounds.x + rootBounds.width / 2;\n\tthis.centerY = rootBounds.y + rootBounds.height / 2;\n\n\t// Calculate the bounds of the involved vertices directly from the values set in the compact tree\n\tfor (var vertex in this.visited)\n\t{\n\t\tvar vertexBounds = this.getVertexBounds(this.visited[vertex]);\n\t\tbounds = (bounds != null) ? bounds : vertexBounds.clone();\n\t\tbounds.add(vertexBounds);\n\t}\n\t\n\tthis.calcRowDims([this.node], 0);\n\t\n\tvar maxLeftGrad = 0;\n\tvar maxRightGrad = 0;\n\n\t// Find the steepest left and right gradients\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tvar leftGrad = (this.centerX - this.rowMinX[i] - this.nodeDistance) / this.rowRadi[i];\n\t\tvar rightGrad = (this.rowMaxX[i] - this.centerX - this.nodeDistance) / this.rowRadi[i];\n\t\t\n\t\tmaxLeftGrad = Math.max (maxLeftGrad, leftGrad);\n\t\tmaxRightGrad = Math.max (maxRightGrad, rightGrad);\n\t}\n\t\n\t// Extend out row so they meet the maximum gradient and convert to polar co-ords\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tvar xLeftLimit = this.centerX - this.nodeDistance - maxLeftGrad * this.rowRadi[i];\n\t\tvar xRightLimit = this.centerX + this.nodeDistance + maxRightGrad * this.rowRadi[i];\n\t\tvar fullWidth = xRightLimit - xLeftLimit;\n\t\t\n\t\tfor (var j = 0; j < this.row[i].length; j ++)\n\t\t{\n\t\t\tvar row = this.row[i];\n\t\t\tvar node = row[j];\n\t\t\tvar vertexBounds = this.getVertexBounds(node.cell);\n\t\t\tvar xProportion = (vertexBounds.x + vertexBounds.width / 2 - xLeftLimit) / (fullWidth);\n\t\t\tvar theta =  2 * Math.PI * xProportion;\n\t\t\tnode.theta = theta;\n\t\t}\n\t}\n\n\t// Post-process from outside inwards to try to align parents with children\n\tfor (var i = this.row.length - 2; i >= 0; i--)\n\t{\n\t\tvar row = this.row[i];\n\t\t\n\t\tfor (var j = 0; j < row.length; j++)\n\t\t{\n\t\t\tvar node = row[j];\n\t\t\tvar child = node.child;\n\t\t\tvar counter = 0;\n\t\t\tvar totalTheta = 0;\n\t\t\t\n\t\t\twhile (child != null)\n\t\t\t{\n\t\t\t\ttotalTheta += child.theta;\n\t\t\t\tcounter++;\n\t\t\t\tchild = child.next;\n\t\t\t}\n\t\t\t\n\t\t\tif (counter > 0)\n\t\t\t{\n\t\t\t\tvar averTheta = totalTheta / counter;\n\t\t\t\t\n\t\t\t\tif (averTheta > node.theta && j < row.length - 1)\n\t\t\t\t{\n\t\t\t\t\tvar nextTheta = row[j+1].theta;\n\t\t\t\t\tnode.theta = Math.min (averTheta, nextTheta - Math.PI/10);\n\t\t\t\t}\n\t\t\t\telse if (averTheta < node.theta && j > 0 )\n\t\t\t\t{\n\t\t\t\t\tvar lastTheta = row[j-1].theta;\n\t\t\t\t\tnode.theta = Math.max (averTheta, lastTheta + Math.PI/10);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Set locations\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.row[i].length; j ++)\n\t\t{\n\t\t\tvar row = this.row[i];\n\t\t\tvar node = row[j];\n\t\t\tvar vertexBounds = this.getVertexBounds(node.cell);\n\t\t\tthis.setVertexLocation(node.cell,\n\t\t\t\t\t\t\t\t\tthis.centerX - vertexBounds.width / 2 + this.rowRadi[i] * Math.cos(node.theta),\n\t\t\t\t\t\t\t\t\tthis.centerY - vertexBounds.height / 2 + this.rowRadi[i] * Math.sin(node.theta));\n\t\t}\n\t}\n};\n\n/**\n * Function: calcRowDims\n * \n * Recursive function to calculate the dimensions of each row\n * \n * Parameters:\n * \n * row - Array of internal nodes, the children of which are to be processed.\n * rowNum - Integer indicating which row is being processed.\n */\nmxRadialTreeLayout.prototype.calcRowDims = function(row, rowNum)\n{\n\tif (row == null || row.length == 0)\n\t{\n\t\treturn;\n\t}\n\n\t// Place root's children proportionally around the first level\n\tthis.rowMinX[rowNum] = this.centerX;\n\tthis.rowMaxX[rowNum] = this.centerX;\n\tthis.rowMinCenX[rowNum] = this.centerX;\n\tthis.rowMaxCenX[rowNum] = this.centerX;\n\tthis.row[rowNum] = [];\n\n\tvar rowHasChildren = false;\n\n\tfor (var i = 0; i < row.length; i++)\n\t{\n\t\tvar child = row[i] != null ? row[i].child : null;\n\n\t\twhile (child != null)\n\t\t{\n\t\t\tvar cell = child.cell;\n\t\t\tvar vertexBounds = this.getVertexBounds(cell);\n\t\t\t\n\t\t\tthis.rowMinX[rowNum] = Math.min(vertexBounds.x, this.rowMinX[rowNum]);\n\t\t\tthis.rowMaxX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width, this.rowMaxX[rowNum]);\n\t\t\tthis.rowMinCenX[rowNum] = Math.min(vertexBounds.x + vertexBounds.width / 2, this.rowMinCenX[rowNum]);\n\t\t\tthis.rowMaxCenX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width / 2, this.rowMaxCenX[rowNum]);\n\t\t\tthis.rowRadi[rowNum] = vertexBounds.y - this.getVertexBounds(this.root).y;\n\t\n\t\t\tif (child.child != null)\n\t\t\t{\n\t\t\t\trowHasChildren = true;\n\t\t\t}\n\t\t\t\n\t\t\tthis.row[rowNum].push(child);\n\t\t\tchild = child.next;\n\t\t}\n\t}\n\t\n\tif (rowHasChildren)\n\t{\n\t\tthis.calcRowDims(this.row[rowNum], rowNum + 1);\n\t}\n};\n\n__mxOutput.mxRadialTreeLayout = typeof mxRadialTreeLayout !== 'undefined' ? mxRadialTreeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxFastOrganicLayout\n * \n * Extends <mxGraphLayout> to implement a fast organic layout algorithm.\n * The vertices need to be connected for this layout to work, vertices\n * with no connections are ignored.\n * \n * Example:\n * \n * (code)\n * var layout = new mxFastOrganicLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new fast organic layout for the specified graph.\n */\nfunction mxFastOrganicLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxFastOrganicLayout.prototype = new mxGraphLayout();\nmxFastOrganicLayout.prototype.constructor = mxFastOrganicLayout;\n\n/**\n * Variable: useInputOrigin\n * \n * Specifies if the top left corner of the input cells should be the origin\n * of the layout result. Default is true.\n */\nmxFastOrganicLayout.prototype.useInputOrigin = true;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxFastOrganicLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxFastOrganicLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: forceConstant\n * \n * The force constant by which the attractive forces are divided and the\n * replusive forces are multiple by the square of. The value equates to the\n * average radius there is of free space around each node. Default is 50.\n */\nmxFastOrganicLayout.prototype.forceConstant = 50;\n\n/**\n * Variable: forceConstantSquared\n * \n * Cache of <forceConstant>^2 for performance.\n */\nmxFastOrganicLayout.prototype.forceConstantSquared = 0;\n\n/**\n * Variable: minDistanceLimit\n * \n * Minimal distance limit. Default is 2. Prevents of\n * dividing by zero.\n */\nmxFastOrganicLayout.prototype.minDistanceLimit = 2;\n\n/**\n * Variable: maxDistanceLimit\n * \n * Maximal distance limit. Default is 500. Prevents of\n * dividing by zero.\n */\nmxFastOrganicLayout.prototype.maxDistanceLimit = 500;\n\n/**\n * Variable: minDistanceLimitSquared\n * \n * Cached version of <minDistanceLimit> squared.\n */\nmxFastOrganicLayout.prototype.minDistanceLimitSquared = 4;\n\n/**\n * Variable: initialTemp\n * \n * Start value of temperature. Default is 200.\n */\nmxFastOrganicLayout.prototype.initialTemp = 200;\n\n/**\n * Variable: temperature\n * \n * Temperature to limit displacement at later stages of layout.\n */\nmxFastOrganicLayout.prototype.temperature = 0;\n\n/**\n * Variable: maxIterations\n * \n * Total number of iterations to run the layout though.\n */\nmxFastOrganicLayout.prototype.maxIterations = 0;\n\n/**\n * Variable: iteration\n * \n * Current iteration count.\n */\nmxFastOrganicLayout.prototype.iteration = 0;\n\n/**\n * Variable: vertexArray\n * \n * An array of all vertices to be laid out.\n */\nmxFastOrganicLayout.prototype.vertexArray;\n\n/**\n * Variable: dispX\n * \n * An array of locally stored X co-ordinate displacements for the vertices.\n */\nmxFastOrganicLayout.prototype.dispX;\n\n/**\n * Variable: dispY\n * \n * An array of locally stored Y co-ordinate displacements for the vertices.\n */\nmxFastOrganicLayout.prototype.dispY;\n\n/**\n * Variable: cellLocation\n * \n * An array of locally stored co-ordinate positions for the vertices.\n */\nmxFastOrganicLayout.prototype.cellLocation;\n\n/**\n * Variable: radius\n * \n * The approximate radius of each cell, nodes only.\n */\nmxFastOrganicLayout.prototype.radius;\n\n/**\n * Variable: radiusSquared\n * \n * The approximate radius squared of each cell, nodes only.\n */\nmxFastOrganicLayout.prototype.radiusSquared;\n\n/**\n * Variable: isMoveable\n * \n * Array of booleans representing the movable states of the vertices.\n */\nmxFastOrganicLayout.prototype.isMoveable;\n\n/**\n * Variable: neighbours\n * \n * Local copy of cell neighbours.\n */\nmxFastOrganicLayout.prototype.neighbours;\n\n/**\n * Variable: indices\n * \n * Hashtable from cells to local indices.\n */\nmxFastOrganicLayout.prototype.indices;\n\n/**\n * Variable: allowedToRun\n * \n * Boolean flag that specifies if the layout is allowed to run. If this is\n * set to false, then the layout exits in the following iteration.\n */\nmxFastOrganicLayout.prototype.allowedToRun = true;\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxFastOrganicLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>. This operates on all children of the\n * given parent where <isVertexIgnored> returns false.\n */\nmxFastOrganicLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tthis.vertexArray = [];\n\tvar cells = this.graph.getChildVertices(parent);\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (!this.isVertexIgnored(cells[i]))\n\t\t{\n\t\t\tthis.vertexArray.push(cells[i]);\n\t\t}\n\t}\n\t\n\tvar initialBounds = (this.useInputOrigin) ?\n\t\t\tthis.graph.getBoundingBoxFromGeometry(this.vertexArray) :\n\t\t\t\tnull;\n\tvar n = this.vertexArray.length;\n\n\tthis.indices = [];\n\tthis.dispX = [];\n\tthis.dispY = [];\n\tthis.cellLocation = [];\n\tthis.isMoveable = [];\n\tthis.neighbours = [];\n\tthis.radius = [];\n\tthis.radiusSquared = [];\n\n\tif (this.forceConstant < 0.001)\n\t{\n\t\tthis.forceConstant = 0.001;\n\t}\n\n\tthis.forceConstantSquared = this.forceConstant * this.forceConstant;\n\n\t// Create a map of vertices first. This is required for the array of\n\t// arrays called neighbours which holds, for each vertex, a list of\n\t// ints which represents the neighbours cells to that vertex as\n\t// the indices into vertexArray\n\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t{\n\t\tvar vertex = this.vertexArray[i];\n\t\tthis.cellLocation[i] = [];\n\t\t\n\t\t// Set up the mapping from array indices to cells\n\t\tvar id = mxObjectIdentity.get(vertex);\n\t\tthis.indices[id] = i;\n\t\tvar bounds = this.getVertexBounds(vertex);\n\n\t\t// Set the X,Y value of the internal version of the cell to\n\t\t// the center point of the vertex for better positioning\n\t\tvar width = bounds.width;\n\t\tvar height = bounds.height;\n\t\t\n\t\t// Randomize (0, 0) locations\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\t\n\t\tthis.cellLocation[i][0] = x + width / 2.0;\n\t\tthis.cellLocation[i][1] = y + height / 2.0;\n\t\tthis.radius[i] = Math.min(width, height);\n\t\tthis.radiusSquared[i] = this.radius[i] * this.radius[i];\n\t}\n\n\t// Moves cell location back to top-left from center locations used in\n\t// algorithm, resetting the edge points is part of the transaction\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < n; i++)\n\t\t{\n\t\t\tthis.dispX[i] = 0;\n\t\t\tthis.dispY[i] = 0;\n\t\t\tthis.isMoveable[i] = this.isVertexMovable(this.vertexArray[i]);\n\n\t\t\t// Get lists of neighbours to all vertices, translate the cells\n\t\t\t// obtained in indices into vertexArray and store as an array\n\t\t\t// against the orginial cell index\n\t\t\tvar edges = this.graph.getConnections(this.vertexArray[i], parent);\n\t\t\tvar cells = this.graph.getOpposites(edges, this.vertexArray[i]);\n\t\t\tthis.neighbours[i] = [];\n\n\t\t\tfor (var j = 0; j < cells.length; j++)\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(edges[j]);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \tthis.setEdgeStyleEnabled(edges[j], false);\n\t\t\t    }\n\n\t\t\t\t// Looks the cell up in the indices dictionary\n\t\t\t\tvar id = mxObjectIdentity.get(cells[j]);\n\t\t\t\tvar index = this.indices[id];\n\n\t\t\t\t// Check the connected cell in part of the vertex list to be\n\t\t\t\t// acted on by this layout\n\t\t\t\tif (index != null)\n\t\t\t\t{\n\t\t\t\t\tthis.neighbours[i][j] = index;\n\t\t\t\t}\n\n\t\t\t\t// Else if index of the other cell doesn't correspond to\n\t\t\t\t// any cell listed to be acted upon in this layout. Set\n\t\t\t\t// the index to the value of this vertex (a dummy self-loop)\n\t\t\t\t// so the attraction force of the edge is not calculated\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.neighbours[i][j] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.temperature = this.initialTemp;\n\n\t\t// If max number of iterations has not been set, guess it\n\t\tif (this.maxIterations == 0)\n\t\t{\n\t\t\tthis.maxIterations = 20 * Math.sqrt(n);\n\t\t}\n\t\t\n\t\t// Main iteration loop\n\t\tfor (this.iteration = 0; this.iteration < this.maxIterations; this.iteration++)\n\t\t{\n\t\t\tif (!this.allowedToRun)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Calculate repulsive forces on all vertices\n\t\t\tthis.calcRepulsion();\n\n\t\t\t// Calculate attractive forces through edges\n\t\t\tthis.calcAttraction();\n\n\t\t\tthis.calcPositions();\n\t\t\tthis.reduceTemperature();\n\t\t}\n\n\t\tvar minx = null;\n\t\tvar miny = null;\n\t\t\n\t\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t\t{\n\t\t\tvar vertex = this.vertexArray[i];\n\t\t\t\n\t\t\tif (this.isVertexMovable(vertex))\n\t\t\t{\n\t\t\t\tvar bounds = this.getVertexBounds(vertex);\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tthis.cellLocation[i][0] -= bounds.width / 2.0;\n\t\t\t\t\tthis.cellLocation[i][1] -= bounds.height / 2.0;\n\t\t\t\t\t\n\t\t\t\t\tvar x = this.graph.snap(Math.round(this.cellLocation[i][0]));\n\t\t\t\t\tvar y = this.graph.snap(Math.round(this.cellLocation[i][1]));\n\t\t\t\t\t\n\t\t\t\t\tthis.setVertexLocation(vertex, x, y);\n\t\t\t\t\t\n\t\t\t\t\tif (minx == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tminx = x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tminx = Math.min(minx, x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (miny == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tminy = y;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tminy = Math.min(miny, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Modifies the cloned geometries in-place. Not needed\n\t\t// to clone the geometries again as we're in the same\n\t\t// undoable change.\n\t\tvar dx = -(minx || 0) + 1;\n\t\tvar dy = -(miny || 0) + 1;\n\t\t\n\t\tif (initialBounds != null)\n\t\t{\n\t\t\tdx += initialBounds.x;\n\t\t\tdy += initialBounds.y;\n\t\t}\n\t\t\n\t\tthis.graph.moveCells(this.vertexArray, dx, dy);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: calcPositions\n * \n * Takes the displacements calculated for each cell and applies them to the\n * local cache of cell positions. Limits the displacement to the current\n * temperature.\n */\nmxFastOrganicLayout.prototype.calcPositions = function()\n{\n\tfor (var index = 0; index < this.vertexArray.length; index++)\n\t{\n\t\tif (this.isMoveable[index])\n\t\t{\n\t\t\t// Get the distance of displacement for this node for this\n\t\t\t// iteration\n\t\t\tvar deltaLength = Math.sqrt(this.dispX[index] * this.dispX[index] +\n\t\t\t\tthis.dispY[index] * this.dispY[index]);\n\n\t\t\tif (deltaLength < 0.001)\n\t\t\t{\n\t\t\t\tdeltaLength = 0.001;\n\t\t\t}\n\n\t\t\t// Scale down by the current temperature if less than the\n\t\t\t// displacement distance\n\t\t\tvar newXDisp = this.dispX[index] / deltaLength\n\t\t\t\t* Math.min(deltaLength, this.temperature);\n\n\t\t\tvar newYDisp = this.dispY[index] / deltaLength\n\t\t\t\t* Math.min(deltaLength, this.temperature);\n\n\t\t\t// reset displacements\n\t\t\tthis.dispX[index] = 0;\n\t\t\tthis.dispY[index] = 0;\n\n\t\t\t// Update the cached cell locations\n\t\t\tthis.cellLocation[index][0] += newXDisp;\n\t\t\tthis.cellLocation[index][1] += newYDisp;\n\t\t}\n\t}\n};\n\n/**\n * Function: calcAttraction\n * \n * Calculates the attractive forces between all laid out nodes linked by\n * edges\n */\nmxFastOrganicLayout.prototype.calcAttraction = function()\n{\n\t// Check the neighbours of each vertex and calculate the attractive\n\t// force of the edge connecting them\n\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t{\n\t\tfor (var k = 0; k < this.neighbours[i].length; k++)\n\t\t{\n\t\t\t// Get the index of the othe cell in the vertex array\n\t\t\tvar j = this.neighbours[i][k];\n\t\t\t\n\t\t\t// Do not proceed self-loops\n\t\t\tif (i != j &&\n\t\t\t\tthis.isMoveable[i] &&\n\t\t\t\tthis.isMoveable[j])\n\t\t\t{\n\t\t\t\tvar xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n\t\t\t\tvar yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n\n\t\t\t\t// The distance between the nodes\n\t\t\t\tvar deltaLengthSquared = xDelta * xDelta + yDelta\n\t\t\t\t\t\t* yDelta - this.radiusSquared[i] - this.radiusSquared[j];\n\n\t\t\t\tif (deltaLengthSquared < this.minDistanceLimitSquared)\n\t\t\t\t{\n\t\t\t\t\tdeltaLengthSquared = this.minDistanceLimitSquared;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar deltaLength = Math.sqrt(deltaLengthSquared);\n\t\t\t\tvar force = (deltaLengthSquared) / this.forceConstant;\n\n\t\t\t\tvar displacementX = (xDelta / deltaLength) * force;\n\t\t\t\tvar displacementY = (yDelta / deltaLength) * force;\n\t\t\t\t\n\t\t\t\tthis.dispX[i] -= displacementX;\n\t\t\t\tthis.dispY[i] -= displacementY;\n\t\t\t\t\n\t\t\t\tthis.dispX[j] += displacementX;\n\t\t\t\tthis.dispY[j] += displacementY;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: calcRepulsion\n * \n * Calculates the repulsive forces between all laid out nodes\n */\nmxFastOrganicLayout.prototype.calcRepulsion = function()\n{\n\tvar vertexCount = this.vertexArray.length;\n\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tfor (var j = i; j < vertexCount; j++)\n\t\t{\n\t\t\t// Exits if the layout is no longer allowed to run\n\t\t\tif (!this.allowedToRun)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (j != i &&\n\t\t\t\tthis.isMoveable[i] &&\n\t\t\t\tthis.isMoveable[j])\n\t\t\t{\n\t\t\t\tvar xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n\t\t\t\tvar yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n\n\t\t\t\tif (xDelta == 0)\n\t\t\t\t{\n\t\t\t\t\txDelta = 0.01 + Math.random();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (yDelta == 0)\n\t\t\t\t{\n\t\t\t\t\tyDelta = 0.01 + Math.random();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Distance between nodes\n\t\t\t\tvar deltaLength = Math.sqrt((xDelta * xDelta)\n\t\t\t\t\t\t+ (yDelta * yDelta));\n\t\t\t\tvar deltaLengthWithRadius = deltaLength - this.radius[i]\n\t\t\t\t\t\t- this.radius[j];\n\n\t\t\t\tif (deltaLengthWithRadius > this.maxDistanceLimit)\n\t\t\t\t{\n\t\t\t\t\t// Ignore vertices too far apart\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (deltaLengthWithRadius < this.minDistanceLimit)\n\t\t\t\t{\n\t\t\t\t\tdeltaLengthWithRadius = this.minDistanceLimit;\n\t\t\t\t}\n\n\t\t\t\tvar force = this.forceConstantSquared / deltaLengthWithRadius;\n\n\t\t\t\tvar displacementX = (xDelta / deltaLength) * force;\n\t\t\t\tvar displacementY = (yDelta / deltaLength) * force;\n\t\t\t\t\n\t\t\t\tthis.dispX[i] += displacementX;\n\t\t\t\tthis.dispY[i] += displacementY;\n\n\t\t\t\tthis.dispX[j] -= displacementX;\n\t\t\t\tthis.dispY[j] -= displacementY;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: reduceTemperature\n * \n * Reduces the temperature of the layout from an initial setting in a linear\n * fashion to zero.\n */\nmxFastOrganicLayout.prototype.reduceTemperature = function()\n{\n\tthis.temperature = this.initialTemp * (1.0 - this.iteration / this.maxIterations);\n};\n\n__mxOutput.mxFastOrganicLayout = typeof mxFastOrganicLayout !== 'undefined' ? mxFastOrganicLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCircleLayout\n * \n * Extends <mxGraphLayout> to implement a circluar layout for a given radius.\n * The vertices do not need to be connected for this layout to work and all\n * connections between vertices are not taken into account.\n * \n * Example:\n * \n * (code)\n * var layout = new mxCircleLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCircleLayout\n *\n * Constructs a new circular layout for the specified radius.\n *\n * Arguments:\n * \n * graph - <mxGraph> that contains the cells.\n * radius - Optional radius as an int. Default is 100.\n */\nfunction mxCircleLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.radius = (radius != null) ? radius : 100;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCircleLayout.prototype = new mxGraphLayout();\nmxCircleLayout.prototype.constructor = mxCircleLayout;\n\n/**\n * Variable: radius\n * \n * Integer specifying the size of the radius. Default is 100.\n */\nmxCircleLayout.prototype.radius = null;\n\n/**\n * Variable: moveCircle\n * \n * Boolean specifying if the circle should be moved to the top,\n * left corner specified by <x0> and <y0>. Default is false.\n */\nmxCircleLayout.prototype.moveCircle = false;\n\n/**\n * Variable: x0\n * \n * Integer specifying the left coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.x0 = 0;\n\n/**\n * Variable: y0\n * \n * Integer specifying the top coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.y0 = 0;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCircleLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxCircleLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxCircleLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\t// Gets all vertices inside the parent and finds\n\t\t// the maximum dimension of the largest vertex\n\t\tvar max = 0;\n\t\tvar top = null;\n\t\tvar left = null;\n\t\tvar vertices = [];\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(cell);\n\t\t\t\tvar bounds = this.getVertexBounds(cell);\n\t\t\t\t\n\t\t\t\tif (top == null)\n\t\t\t\t{\n\t\t\t\t\ttop = bounds.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttop = Math.min(top, bounds.y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (left == null)\n\t\t\t\t{\n\t\t\t\t\tleft = bounds.x;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleft = Math.min(left, bounds.x);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmax = Math.max(max, Math.max(bounds.width, bounds.height));\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(cell);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \t\tthis.setEdgeStyleEnabled(cell, false);\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar r = this.getRadius(vertices.length, max);\n\n\t\t// Moves the circle to the specified origin\n\t\tif (this.moveCircle)\n\t\t{\n\t\t\tleft = this.x0;\n\t\t\ttop = this.y0;\n\t\t}\n\t\t\n\t\tthis.circle(vertices, r, left, top);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: getRadius\n * \n * Returns the radius to be used for the given vertex count. Max is the maximum\n * width or height of all vertices in the layout.\n */\nmxCircleLayout.prototype.getRadius = function(count, max)\n{\n\treturn Math.max(count * max / Math.PI, this.radius);\n};\n\n/**\n * Function: circle\n * \n * Executes the circular layout for the specified array\n * of vertices and the given radius. This is called from\n * <execute>.\n */\nmxCircleLayout.prototype.circle = function(vertices, r, left, top)\n{\n\tvar vertexCount = vertices.length;\n\tvar phi = 2 * Math.PI / vertexCount;\n\t\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tif (this.isVertexMovable(vertices[i]))\n\t\t{\n\t\t\tthis.setVertexLocation(vertices[i],\n\t\t\t\tMath.round(left + r + r * Math.sin(i * phi)),\n\t\t\t\tMath.round(top + r + r * Math.cos(i * phi)));\n\t\t}\n\t}\n};\n\n__mxOutput.mxCircleLayout = typeof mxCircleLayout !== 'undefined' ? mxCircleLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxParallelEdgeLayout\n * \n * Extends <mxGraphLayout> for arranging parallel edges. This layout works\n * on edges for all pairs of vertices where there is more than one edge\n * connecting the latter.\n * \n * Example:\n * \n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * To run the layout for the parallel edges of a changed edge only, the\n * following code can be used.\n * \n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * \n * graph.addListener(mxEvent.CELL_CONNECTED, function(sender, evt)\n * {\n *   var model = graph.getModel();\n *   var edge = evt.getProperty('edge');\n *   var src = model.getTerminal(edge, true);\n *   var trg = model.getTerminal(edge, false);\n *   \n *   layout.isEdgeIgnored = function(edge2)\n *   {\n *     var src2 = model.getTerminal(edge2, true);\n *     var trg2 = model.getTerminal(edge2, false);\n *     \n *     return !(model.isEdge(edge2) && ((src == src2 && trg == trg2) || (src == trg2 && trg == src2)));\n *   };\n *   \n *   layout.execute(graph.getDefaultParent());\n * });\n * (end)\n * \n * Constructor: mxParallelEdgeLayout\n * \n * Constructs a new parallel edge layout for the specified graph.\n */\nfunction mxParallelEdgeLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxParallelEdgeLayout.prototype = new mxGraphLayout();\nmxParallelEdgeLayout.prototype.constructor = mxParallelEdgeLayout;\n\n/**\n * Variable: spacing\n * \n * Defines the spacing between the parallels. Default is 20.\n */\nmxParallelEdgeLayout.prototype.spacing = 20;\n\n/**\n * Variable: checkOverlap\n * \n * Specifies if only overlapping edges should be considered\n * parallel. Default is false.\n */\nmxParallelEdgeLayout.prototype.checkOverlap = false;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxParallelEdgeLayout.prototype.execute = function(parent, cells)\n{\n\tvar lookup = this.findParallels(parent, cells);\n\t\n\tthis.graph.model.beginUpdate();\t\n\ttry\n\t{\n\t\tfor (var i in lookup)\n\t\t{\n\t\t\tvar parallels = lookup[i];\n\n\t\t\tif (parallels.length > 1)\n\t\t\t{\n\t\t\t\tthis.layout(parallels);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.model.endUpdate();\n\t}\n};\n\n/**\n * Function: findParallels\n * \n * Finds the parallel edges in the given parent.\n */\nmxParallelEdgeLayout.prototype.findParallels = function(parent, cells)\n{\n\tvar lookup = [];\n\t\n\tvar addCell = mxUtils.bind(this, function(cell)\n\t{\n\t\tif (!this.isEdgeIgnored(cell))\n\t\t{\n\t\t\tvar id = this.getEdgeId(cell);\n\t\t\t\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tif (lookup[id] == null)\n\t\t\t\t{\n\t\t\t\t\tlookup[id] = [];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlookup[id].push(cell);\n\t\t\t}\n\t\t}\n\t});\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\taddCell(cells[i]);\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar model = this.graph.getModel();\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\taddCell(model.getChildAt(parent, i));\n\t\t}\n\t}\n\t\n\treturn lookup;\n};\n\n/**\n * Function: getEdgeId\n * \n * Returns a unique ID for the given edge. The id is independent of the\n * edge direction and is built using the visible terminal of the given\n * edge.\n */\nmxParallelEdgeLayout.prototype.getEdgeId = function(edge)\n{\n\tvar view = this.graph.getView();\n\t\n\t// Cannot used cached visible terminal because this could be triggered in BEFORE_UNDO\n\tvar src = view.getVisibleTerminal(edge, true);\n\tvar trg = view.getVisibleTerminal(edge, false);\n\tvar pts = '';\n\n\tif (src != null && trg != null)\n\t{\n\t\tsrc = mxObjectIdentity.get(src);\n\t\ttrg = mxObjectIdentity.get(trg);\n\t\t\n\t\tif (this.checkOverlap)\n\t\t{\n\t\t\tvar state = this.graph.view.getState(edge);\n\t\t\t\n\t\t\tif (state != null && state.absolutePoints != null)\n\t\t\t{\n\t\t\t\tvar tmp = [];\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < state.absolutePoints.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar pt = state.absolutePoints[i];\n\t\t\t\t\t\n\t\t\t\t\tif (pt != null)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp.push(pt.x, pt.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpts = tmp.join(',');\n\t\t\t}\n\t\t};\n\t\t\n\t\treturn ((src > trg) ? trg + '-' + src : src + '-' + trg) + pts;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: layout\n * \n * Lays out the parallel edges in the given array.\n */\nmxParallelEdgeLayout.prototype.layout = function(parallels)\n{\n\tvar edge = parallels[0];\n\tvar view = this.graph.getView();\n\tvar model = this.graph.getModel();\n\tvar src = model.getGeometry(view.getVisibleTerminal(edge, true));\n\tvar trg = model.getGeometry(view.getVisibleTerminal(edge, false));\n\t\n\t// Routes multiple loops\n\tif (src == trg)\n\t{\n\t\tvar x0 = src.x + src.width + this.spacing;\n\t\tvar y0 = src.y + src.height / 2;\n\n\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t{\n\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\tx0 += this.spacing;\n\t\t}\n\t}\n\telse if (src != null && trg != null)\n\t{\n\t\t// Routes parallel edges\n\t\tvar scx = src.x + src.width / 2;\n\t\tvar scy = src.y + src.height / 2;\n\t\t\n\t\tvar tcx = trg.x + trg.width / 2;\n\t\tvar tcy = trg.y + trg.height / 2;\n\t\t\n\t\tvar dx = tcx - scx;\n\t\tvar dy = tcy - scy;\n\n\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\t\t\n\t\tif (len > 0)\n\t\t{\n\t\t\tvar x0 = scx + dx / 2;\n\t\t\tvar y0 = scy + dy / 2;\n\t\t\t\n\t\t\tvar nx = dy * this.spacing / len;\n\t\t\tvar ny = dx * this.spacing / len;\n\t\t\t\n\t\t\tx0 += nx * (parallels.length - 1) / 2;\n\t\t\ty0 -= ny * (parallels.length - 1) / 2;\n\t\n\t\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t\t{\n\t\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\t\tx0 -= nx;\n\t\t\t\ty0 += ny;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: route\n * \n * Routes the given edge via the given point.\n */\nmxParallelEdgeLayout.prototype.route = function(edge, x, y)\n{\n\tif (this.graph.isCellMovable(edge))\n\t{\n\t\tthis.setEdgePoints(edge, [new mxPoint(x, y)]);\n\t}\n};\n\n__mxOutput.mxParallelEdgeLayout = typeof mxParallelEdgeLayout !== 'undefined' ? mxParallelEdgeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCompositeLayout\n * \n * Allows to compose multiple layouts into a single layout. The master layout\n * is the layout that handles move operations if another layout than the first\n * element in <layouts> should be used. The <master> layout is not executed as\n * the code assumes that it is part of <layouts>.\n * \n * Example:\n * (code)\n * var first = new mxFastOrganicLayout(graph);\n * var second = new mxParallelEdgeLayout(graph);\n * var layout = new mxCompositeLayout(graph, [first, second], first);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompositeLayout\n *\n * Constructs a new layout using the given layouts. The graph instance is\n * required for creating the transaction that contains all layouts.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * layouts - Array of <mxGraphLayouts>.\n * master - Optional layout that handles moves. If no layout is given then\n * the first layout of the above array is used to handle moves.\n */\nfunction mxCompositeLayout(graph, layouts, master)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.layouts = layouts;\n\tthis.master = master;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompositeLayout.prototype = new mxGraphLayout();\nmxCompositeLayout.prototype.constructor = mxCompositeLayout;\n\t\n/**\n * Variable: layouts\n * \n * Holds the array of <mxGraphLayouts> that this layout contains.\n */\nmxCompositeLayout.prototype.layouts = null;\n\n/**\n * Variable: master\n * \n * Reference to the <mxGraphLayouts> that handles moves. If this is null\n * then the first layout in <layouts> is used.\n */\nmxCompositeLayout.prototype.master = null;\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell> by calling move on <master> or the first\n * layout in <layouts>.\n */\nmxCompositeLayout.prototype.moveCell = function(cell, x, y)\n{\n\tif (this.master != null)\n\t{\n\t\tthis.master.moveCell.apply(this.master, arguments);\n\t}\n\telse\n\t{\n\t\tthis.layouts[0].moveCell.apply(this.layouts[0], arguments);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute> by executing all <layouts> in a\n * single transaction.\n */\nmxCompositeLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < this.layouts.length; i++)\n\t\t{\n\t\t\tthis.layouts[i].execute.apply(this.layouts[i], arguments);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n__mxOutput.mxCompositeLayout = typeof mxCompositeLayout !== 'undefined' ? mxCompositeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEdgeLabelLayout\n * \n * Extends <mxGraphLayout> to implement an edge label layout. This layout\n * makes use of cell states, which means the graph must be validated in\n * a graph view (so that the label bounds are available) before this layout\n * can be executed.\n * \n * Example:\n * \n * (code)\n * var layout = new mxEdgeLabelLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxEdgeLabelLayout\n *\n * Constructs a new edge label layout.\n *\n * Arguments:\n * \n * graph - <mxGraph> that contains the cells.\n */\nfunction mxEdgeLabelLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxEdgeLabelLayout.prototype = new mxGraphLayout();\nmxEdgeLabelLayout.prototype.constructor = mxEdgeLabelLayout;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxEdgeLabelLayout.prototype.execute = function(parent)\n{\n\tvar view = this.graph.view;\n\tvar model = this.graph.getModel();\n\t\n\t// Gets all vertices and edges inside the parent\n\tvar edges = [];\n\tvar vertices = [];\n\tvar childCount = model.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar cell = model.getChildAt(parent, i);\n\t\tvar state = view.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(state);\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\tedges.push(state);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.placeLabels(vertices, edges);\n};\n\n/**\n * Function: placeLabels\n * \n * Places the labels of the given edges.\n */\nmxEdgeLabelLayout.prototype.placeLabels = function(v, e)\n{\n\tvar model = this.graph.getModel();\n\t\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < e.length; i++)\n\t\t{\n\t\t\tvar edge = e[i];\n\t\t\t\n\t\t\tif (edge != null && edge.text != null &&\n\t\t\t\tedge.text.boundingBox != null)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < v.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar vertex = v[j];\n\t\t\t\t\t\n\t\t\t\t\tif (vertex != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.avoid(edge, vertex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: avoid\n * \n * Places the labels of the given edges.\n */\nmxEdgeLabelLayout.prototype.avoid = function(edge, vertex)\n{\n\tvar model = this.graph.getModel();\n\tvar labRect = edge.text.boundingBox;\n\t\n\tif (mxUtils.intersects(labRect, vertex))\n\t{\n\t\tvar dy1 = -labRect.y - labRect.height + vertex.y;\n\t\tvar dy2 = -labRect.y + vertex.y + vertex.height;\n\t\t\n\t\tvar dy = (Math.abs(dy1) < Math.abs(dy2)) ? dy1 : dy2;\n\t\t\n\t\tvar dx1 = -labRect.x - labRect.width + vertex.x;\n\t\tvar dx2 = -labRect.x + vertex.x + vertex.width;\n\t\n\t\tvar dx = (Math.abs(dx1) < Math.abs(dx2)) ? dx1 : dx2;\n\t\t\n\t\tif (Math.abs(dx) < Math.abs(dy))\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\n\t\tvar g = model.getGeometry(edge.cell);\n\t\t\n\t\tif (g != null)\n\t\t{\n\t\t\tg = g.clone();\n\t\t\t\n\t\t\tif (g.offset != null)\n\t\t\t{\n\t\t\t\tg.offset.x += dx;\n\t\t\t\tg.offset.y += dy;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\t\n\t\t\tmodel.setGeometry(edge.cell, g);\n\t\t}\n\t}\n};\n\n__mxOutput.mxEdgeLabelLayout = typeof mxEdgeLabelLayout !== 'undefined' ? mxEdgeLabelLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphAbstractHierarchyCell\n * \n * An abstraction of an internal hierarchy node or edge\n * \n * Constructor: mxGraphAbstractHierarchyCell\n *\n * Constructs a new hierarchical layout algorithm.\n */\nfunction mxGraphAbstractHierarchyCell()\n{\n\tthis.x = [];\n\tthis.y = [];\n\tthis.temp = [];\n};\n\n/**\n * Variable: maxRank\n * \n * The maximum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.maxRank = -1;\n\n/**\n * Variable: minRank\n * \n * The minimum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.minRank = -1;\n\n/**\n * Variable: x\n * \n * The x position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.x = null;\n\n/**\n * Variable: y\n * \n * The y position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.y = null;\n\n/**\n * Variable: width\n * \n * The width of this cell. Default is 0.\n */\nmxGraphAbstractHierarchyCell.prototype.width = 0;\n\n/**\n * Variable: height\n * \n * The height of this cell. Default is 0.\n */\nmxGraphAbstractHierarchyCell.prototype.height = 0;\n\n/**\n * Variable: nextLayerConnectedCells\n * \n * A cached version of the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.nextLayerConnectedCells = null;\n\n/**\n * Variable: previousLayerConnectedCells\n * \n * A cached version of the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.previousLayerConnectedCells = null;\n\n/**\n * Variable: temp\n * \n * Temporary variable for general use. Generally, try to avoid\n * carrying information between stages. Currently, the longest\n * path layering sets temp to the rank position in fixRanks()\n * and the crossing reduction uses this. This meant temp couldn't\n * be used for hashing the nodes in the model dfs and so hashCode\n * was created\n */\nmxGraphAbstractHierarchyCell.prototype.temp = null;\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.getNextLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: isEdge\n * \n * Returns whether or not this cell is an edge\n */\nmxGraphAbstractHierarchyCell.prototype.isEdge = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isVertex\n * \n * Returns whether or not this cell is a node\n */\nmxGraphAbstractHierarchyCell.prototype.isVertex = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\treturn null;\n};\n\n/**\n * Function: setX\n * \n * Set the value of x for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setX = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.x[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.x[layer - this.minRank - 1] = value;\n\t}\n};\n\n/**\n * Function: getX\n * \n * Gets the value of x on the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getX = function(layer)\n{\n\tif (this.isVertex())\n\t{\n\t\treturn this.x[0];\n\t}\n\telse if (this.isEdge())\n\t{\n\t\treturn this.x[layer - this.minRank - 1];\n\t}\n\n\treturn 0.0;\n};\n\n/**\n * Function: setY\n * \n * Set the value of y for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setY = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.y[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.y[layer -this. minRank - 1] = value;\n\t}\n};\n\n__mxOutput.mxGraphAbstractHierarchyCell = typeof mxGraphAbstractHierarchyCell !== 'undefined' ? mxGraphAbstractHierarchyCell : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyNode\n * \n * An abstraction of a hierarchical edge for the hierarchy layout\n * \n * Constructor: mxGraphHierarchyNode\n *\n * Constructs an internal node to represent the specified real graph cell\n *\n * Arguments:\n * \n * cell - the real graph cell this node represents\n */\nfunction mxGraphHierarchyNode(cell)\n{\n\tmxGraphAbstractHierarchyCell.apply(this, arguments);\n\tthis.cell = cell;\n\tthis.id = mxObjectIdentity.get(cell);\n\tthis.connectsAsTarget = [];\n\tthis.connectsAsSource = [];\n};\n\n/**\n * Extends mxGraphAbstractHierarchyCell.\n */\nmxGraphHierarchyNode.prototype = new mxGraphAbstractHierarchyCell();\nmxGraphHierarchyNode.prototype.constructor = mxGraphHierarchyNode;\n\n/**\n * Variable: cell\n * \n * The graph cell this object represents.\n */\nmxGraphHierarchyNode.prototype.cell = null;\n\n/**\n * Variable: id\n * \n * The object identity of the wrapped cell\n */\nmxGraphHierarchyNode.prototype.id = null;\n\n/**\n * Variable: connectsAsTarget\n * \n * Collection of hierarchy edges that have this node as a target\n */\nmxGraphHierarchyNode.prototype.connectsAsTarget = null;\n\n/**\n * Variable: connectsAsSource\n * \n * Collection of hierarchy edges that have this node as a source\n */\nmxGraphHierarchyNode.prototype.connectsAsSource = null;\n\n/**\n * Variable: hashCode\n * \n * Assigns a unique hashcode for each node. Used by the model dfs instead\n * of copying HashSets\n */\nmxGraphHierarchyNode.prototype.hashCode = false;\n\n/**\n * Function: getRankValue\n * \n * Returns the integer value of the layer that this node resides in\n */\nmxGraphHierarchyNode.prototype.getRankValue = function(layer)\n{\n\treturn this.maxRank;\n};\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphHierarchyNode.prototype.getNextLayerConnectedCells = function(layer)\n{\n\tif (this.nextLayerConnectedCells == null)\n\t{\n\t\tthis.nextLayerConnectedCells = [];\n\t\tthis.nextLayerConnectedCells[0] = [];\n\t\t\n\t\tfor (var i = 0; i < this.connectsAsTarget.length; i++)\n\t\t{\n\t\t\tvar edge = this.connectsAsTarget[i];\n\n\t\t\tif (edge.maxRank == -1 || edge.maxRank == layer + 1)\n\t\t\t{\n\t\t\t\t// Either edge is not in any rank or\n\t\t\t\t// no dummy nodes in edge, add node of other side of edge\n\t\t\t\tthis.nextLayerConnectedCells[0].push(edge.source);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Edge spans at least two layers, add edge\n\t\t\t\tthis.nextLayerConnectedCells[0].push(edge);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.nextLayerConnectedCells[0];\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphHierarchyNode.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\tif (this.previousLayerConnectedCells == null)\n\t{\n\t\tthis.previousLayerConnectedCells = [];\n\t\tthis.previousLayerConnectedCells[0] = [];\n\t\t\n\t\tfor (var i = 0; i < this.connectsAsSource.length; i++)\n\t\t{\n\t\t\tvar edge = this.connectsAsSource[i];\n\n\t\t\tif (edge.minRank == -1 || edge.minRank == layer - 1)\n\t\t\t{\n\t\t\t\t// No dummy nodes in edge, add node of other side of edge\n\t\t\t\tthis.previousLayerConnectedCells[0].push(edge.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Edge spans at least two layers, add edge\n\t\t\t\tthis.previousLayerConnectedCells[0].push(edge);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.previousLayerConnectedCells[0];\n};\n\n/**\n * Function: isVertex\n * \n * Returns true.\n */\nmxGraphHierarchyNode.prototype.isVertex = function()\n{\n\treturn true;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphHierarchyNode.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn this.temp[0];\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphHierarchyNode.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\tthis.temp[0] = value;\n};\n\n/**\n * Function: isAncestor\n */\nmxGraphHierarchyNode.prototype.isAncestor = function(otherNode)\n{\n\t// Firstly, the hash code of this node needs to be shorter than the\n\t// other node\n\tif (otherNode != null && this.hashCode != null && otherNode.hashCode != null\n\t\t\t&& this.hashCode.length < otherNode.hashCode.length)\n\t{\n\t\tif (this.hashCode == otherNode.hashCode)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif (this.hashCode == null || this.hashCode == null)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// Secondly, this hash code must match the start of the other\n\t\t// node's hash code. Arrays.equals cannot be used here since\n\t\t// the arrays are different length, and we do not want to\n\t\t// perform another array copy.\n\t\tfor (var i = 0; i < this.hashCode.length; i++)\n\t\t{\n\t\t\tif (this.hashCode[i] != otherNode.hashCode[i])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getCoreCell\n * \n * Gets the core vertex associated with this wrapper\n */\nmxGraphHierarchyNode.prototype.getCoreCell = function()\n{\n\treturn this.cell;\n};\n\n__mxOutput.mxGraphHierarchyNode = typeof mxGraphHierarchyNode !== 'undefined' ? mxGraphHierarchyNode : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyEdge\n * \n * An abstraction of a hierarchical edge for the hierarchy layout\n * \n * Constructor: mxGraphHierarchyEdge\n *\n * Constructs a hierarchy edge\n *\n * Arguments:\n * \n * edges - a list of real graph edges this abstraction represents\n */\nfunction mxGraphHierarchyEdge(edges)\n{\n\tmxGraphAbstractHierarchyCell.apply(this, arguments);\n\tthis.edges = edges;\n\tthis.ids = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tthis.ids.push(mxObjectIdentity.get(edges[i]));\n\t}\n};\n\n/**\n * Extends mxGraphAbstractHierarchyCell.\n */\nmxGraphHierarchyEdge.prototype = new mxGraphAbstractHierarchyCell();\nmxGraphHierarchyEdge.prototype.constructor = mxGraphHierarchyEdge;\n\n/**\n * Variable: edges\n * \n * The graph edge(s) this object represents. Parallel edges are all grouped\n * together within one hierarchy edge.\n */\nmxGraphHierarchyEdge.prototype.edges = null;\n\n/**\n * Variable: ids\n * \n * The object identities of the wrapped cells\n */\nmxGraphHierarchyEdge.prototype.ids = null;\n\n/**\n * Variable: source\n * \n * The node this edge is sourced at\n */\nmxGraphHierarchyEdge.prototype.source = null;\n\n/**\n * Variable: target\n * \n * The node this edge targets\n */\nmxGraphHierarchyEdge.prototype.target = null;\n\n/**\n * Variable: isReversed\n * \n * Whether or not the direction of this edge has been reversed\n * internally to create a DAG for the hierarchical layout\n */\nmxGraphHierarchyEdge.prototype.isReversed = false;\n\n/**\n * Function: invert\n * \n * Inverts the direction of this internal edge(s)\n */\nmxGraphHierarchyEdge.prototype.invert = function(layer)\n{\n\tvar temp = this.source;\n\tthis.source = this.target;\n\tthis.target = temp;\n\tthis.isReversed = !this.isReversed;\n};\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphHierarchyEdge.prototype.getNextLayerConnectedCells = function(layer)\n{\n\tif (this.nextLayerConnectedCells == null)\n\t{\n\t\tthis.nextLayerConnectedCells = [];\n\t\t\n\t\tfor (var i = 0; i < this.temp.length; i++)\n\t\t{\n\t\t\tthis.nextLayerConnectedCells[i] = [];\n\t\t\t\n\t\t\tif (i == this.temp.length - 1)\n\t\t\t{\n\t\t\t\tthis.nextLayerConnectedCells[i].push(this.source);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.nextLayerConnectedCells[i].push(this);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn this.nextLayerConnectedCells[layer - this.minRank - 1];\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphHierarchyEdge.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\tif (this.previousLayerConnectedCells == null)\n\t{\n\t\tthis.previousLayerConnectedCells = [];\n\n\t\tfor (var i = 0; i < this.temp.length; i++)\n\t\t{\n\t\t\tthis.previousLayerConnectedCells[i] = [];\n\t\t\t\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tthis.previousLayerConnectedCells[i].push(this.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.previousLayerConnectedCells[i].push(this);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.previousLayerConnectedCells[layer - this.minRank - 1];\n};\n\n/**\n * Function: isEdge\n * \n * Returns true.\n */\nmxGraphHierarchyEdge.prototype.isEdge = function()\n{\n\treturn true;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphHierarchyEdge.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn this.temp[layer - this.minRank - 1];\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphHierarchyEdge.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\tthis.temp[layer - this.minRank - 1] = value;\n};\n\n/**\n * Function: getCoreCell\n * \n * Gets the first core edge associated with this wrapper\n */\nmxGraphHierarchyEdge.prototype.getCoreCell = function()\n{\n\tif (this.edges != null && this.edges.length > 0)\n\t{\n\t\treturn this.edges[0];\n\t}\n\t\n\treturn null;\n};\n\n__mxOutput.mxGraphHierarchyEdge = typeof mxGraphHierarchyEdge !== 'undefined' ? mxGraphHierarchyEdge : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyModel\n *\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * Constructor: mxGraphHierarchyModel\n *\n * Creates an internal ordered graph model using the vertices passed in. If\n * there are any, leftward edge need to be inverted in the internal model\n *\n * Arguments:\n *\n * graph - the facade describing the graph to be operated on\n * vertices - the vertices for this hierarchy\n * ordered - whether or not the vertices are already ordered\n * deterministic - whether or not this layout should be deterministic on each\n * tightenToSource - whether or not to tighten vertices towards the sources\n * scanRanksFromSinks - Whether rank assignment is from the sinks or sources.\n * usage\n */\nfunction mxGraphHierarchyModel(layout, vertices, roots, parent, tightenToSource)\n{\n\tvar graph = layout.getGraph();\n\tthis.tightenToSource = tightenToSource;\n\tthis.roots = roots;\n\tthis.parent = parent;\n\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly\n\tthis.vertexMapper = new mxDictionary();\n\tthis.edgeMapper = new mxDictionary();\n\tthis.maxRank = 0;\n\tvar internalVertices = [];\n\n\tif (vertices == null)\n\t{\n\t\tvertices = this.graph.getChildVertices(parent);\n\t}\n\n\tthis.maxRank = this.SOURCESCANSTARTRANK;\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly. Guess size by number\n\t// of edges is roughly same as number of vertices.\n\tthis.createInternalCells(layout, vertices, internalVertices);\n\n\t// Go through edges set their sink values. Also check the\n\t// ordering if and invert edges if necessary\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tvar edges = internalVertices[i].connectsAsSource;\n\n\t\tfor (var j = 0; j < edges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = edges[j];\n\t\t\tvar realEdges = internalEdge.edges;\n\n\t\t\t// Only need to process the first real edge, since\n\t\t\t// all the edges connect to the same other vertex\n\t\t\tif (realEdges != null && realEdges.length > 0)\n\t\t\t{\n\t\t\t\tvar realEdge = realEdges[0];\n\t\t\t\tvar targetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\trealEdge, false);\n\t\t\t\tvar internalTargetCell = this.vertexMapper.get(targetCell);\n\n\t\t\t\tif (internalVertices[i] == internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\t// If there are parallel edges going between two vertices and not all are in the same direction\n\t\t\t\t\t// you can have navigated across one direction when doing the cycle reversal that isn't the same\n\t\t\t\t\t// direction as the first real edge in the array above. When that happens the if above catches\n\t\t\t\t\t// that and we correct the target cell before continuing.\n\t\t\t\t\t// This branch only detects this single case\n\t\t\t\t\ttargetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\t\trealEdge, true);\n\t\t\t\t\tinternalTargetCell = this.vertexMapper.get(targetCell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (internalTargetCell != null\n\t\t\t\t\t\t&& internalVertices[i] != internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\tinternalEdge.target = internalTargetCell;\n\n\t\t\t\t\tif (internalTargetCell.connectsAsTarget.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.indexOf(internalTargetCell.connectsAsTarget, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use the temp variable in the internal nodes to mark this\n\t\t// internal vertex as having been visited.\n\t\tinternalVertices[i].temp[0] = 1;\n\t}\n};\n\n/**\n * Variable: maxRank\n *\n * Stores the largest rank number allocated\n */\nmxGraphHierarchyModel.prototype.maxRank = null;\n\n/**\n * Variable: vertexMapper\n *\n * Map from graph vertices to internal model nodes.\n */\nmxGraphHierarchyModel.prototype.vertexMapper = null;\n\n/**\n * Variable: edgeMapper\n *\n * Map from graph edges to internal model edges\n */\nmxGraphHierarchyModel.prototype.edgeMapper = null;\n\n/**\n * Variable: ranks\n *\n * Mapping from rank number to actual rank\n */\nmxGraphHierarchyModel.prototype.ranks = null;\n\n/**\n * Variable: roots\n *\n * Store of roots of this hierarchy model, these are real graph cells, not\n * internal cells\n */\nmxGraphHierarchyModel.prototype.roots = null;\n\n/**\n * Variable: parent\n *\n * The parent cell whose children are being laid out\n */\nmxGraphHierarchyModel.prototype.parent = null;\n\n/**\n * Variable: dfsCount\n *\n * Count of the number of times the ancestor dfs has been used.\n */\nmxGraphHierarchyModel.prototype.dfsCount = 0;\n\n/**\n * Variable: SOURCESCANSTARTRANK\n *\n * High value to start source layering scan rank value from.\n */\nmxGraphHierarchyModel.prototype.SOURCESCANSTARTRANK = 100000000;\n\n/**\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxGraphHierarchyModel.prototype.tightenToSource = false;\n\n/**\n * Function: createInternalCells\n *\n * Creates all edges in the internal model\n *\n * Parameters:\n *\n * layout - Reference to the <mxHierarchicalLayout> algorithm.\n * vertices - Array of <mxCells> that represent the vertices whom are to\n * have an internal representation created.\n * internalVertices - The array of <mxGraphHierarchyNodes> to have their\n * information filled in using the real vertices.\n */\nmxGraphHierarchyModel.prototype.createInternalCells = function(layout, vertices, internalVertices)\n{\n\tvar graph = layout.getGraph();\n\n\t// Create internal edges\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tinternalVertices[i] = new mxGraphHierarchyNode(vertices[i]);\n\t\tthis.vertexMapper.put(vertices[i], internalVertices[i]);\n\n\t\t// If the layout is deterministic, order the cells\n\t\t//List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n\t\tvar conns = layout.getEdges(vertices[i]);\n\t\tinternalVertices[i].connectsAsSource = [];\n\n\t\t// Create internal edges, but don't do any rank assignment yet\n\t\t// First use the information from the greedy cycle remover to\n\t\t// invert the leftward edges internally\n\t\tfor (var j = 0; j < conns.length; j++)\n\t\t{\n\t\t\tvar cell = layout.getVisibleTerminal(conns[j], false);\n\n\t\t\t// Looking for outgoing edges only\n\t\t\tif (cell != vertices[i] && layout.graph.model.isVertex(cell) &&\n\t\t\t\t\t!layout.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\t// We process all edge between this source and its targets\n\t\t\t\t// If there are edges going both ways, we need to collect\n\t\t\t\t// them all into one internal edges to avoid looping problems\n\t\t\t\t// later. We assume this direction (source -> target) is the \n\t\t\t\t// natural direction if at least half the edges are going in\n\t\t\t\t// that direction.\n\n\t\t\t\t// The check below for edges[0] being in the vertex mapper is\n\t\t\t\t// in case we've processed this the other way around\n\t\t\t\t// (target -> source) and the number of edges in each direction\n\t\t\t\t// are the same. All the graph edges will have been assigned to\n\t\t\t\t// an internal edge going the other way, so we don't want to \n\t\t\t\t// process them again\n\t\t\t\tvar undirectedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, false);\n\t\t\t\tvar directedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, true);\n\t\t\t\t\n\t\t\t\tif (undirectedEdges != null &&\n\t\t\t\t\t\tundirectedEdges.length > 0 &&\n\t\t\t\t\t\tthis.edgeMapper.get(undirectedEdges[0]) == null &&\n\t\t\t\t\t\tdirectedEdges.length * 2 >= undirectedEdges.length)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = new mxGraphHierarchyEdge(undirectedEdges);\n\n\t\t\t\t\tfor (var k = 0; k < undirectedEdges.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar edge = undirectedEdges[k];\n\t\t\t\t\t\tthis.edgeMapper.put(edge, internalEdge);\n\n\t\t\t\t\t\t// Resets all point on the edge and disables the edge style\n\t\t\t\t\t\t// without deleting it from the cell style\n\t\t\t\t\t\tgraph.resetEdge(edge);\n\n\t\t\t\t\t    if (layout.disableEdgeStyle)\n\t\t\t\t\t    {\n\t\t\t\t\t    \tlayout.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\t    \tlayout.setOrthogonalEdge(edge,true);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tinternalEdge.source = internalVertices[i];\n\n\t\t\t\t\tif (mxUtils.indexOf(internalVertices[i].connectsAsSource, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalVertices[i].connectsAsSource.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure temp variable is cleared from any previous use\n\t\tinternalVertices[i].temp[0] = 0;\n\t}\n};\n\n/**\n * Function: initialRank\n *\n * Basic determination of minimum layer ranking by working from from sources\n * or sinks and working through each node in the relevant edge direction.\n * Starting at the sinks is basically a longest path layering algorithm.\n*/\nmxGraphHierarchyModel.prototype.initialRank = function()\n{\n\tvar startNodes = [];\n\n\tif (this.roots != null)\n\t{\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar internalNode = this.vertexMapper.get(this.roots[i]);\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tstartNodes.push(internalNode);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar internalNodes = this.vertexMapper.getValues();\n\t\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] = -1;\n\t}\n\n\tvar startNodesCopy = startNodes.slice();\n\n\twhile (startNodes.length > 0)\n\t{\n\t\tvar internalNode = startNodes[0];\n\t\tvar layerDeterminingEdges;\n\t\tvar edgesToBeMarked;\n\n\t\tlayerDeterminingEdges = internalNode.connectsAsTarget;\n\t\tedgesToBeMarked = internalNode.connectsAsSource;\n\n\t\t// flag to keep track of whether or not all layer determining\n\t\t// edges have been scanned\n\t\tvar allEdgesScanned = true;\n\n\t\t// Work out the layer of this node from the layer determining\n\t\t// edges. The minimum layer number of any node connected by one of\n\t\t// the layer determining edges variable\n\t\tvar minimumLayer = this.SOURCESCANSTARTRANK;\n\n\t\tfor (var i = 0; i < layerDeterminingEdges.length; i++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[i];\n\n\t\t\tif (internalEdge.temp[0] == 5270620)\n\t\t\t{\n\t\t\t\t// This edge has been scanned, get the layer of the\n\t\t\t\t// node on the other end\n\t\t\t\tvar otherNode = internalEdge.source;\n\t\t\t\tminimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tallEdgesScanned = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If all edge have been scanned, assign the layer, mark all\n\t\t// edges in the other direction and remove from the nodes list\n\t\tif (allEdgesScanned)\n\t\t{\n\t\t\tinternalNode.temp[0] = minimumLayer;\n\t\t\tthis.maxRank = Math.min(this.maxRank, minimumLayer);\n\n\t\t\tif (edgesToBeMarked != null)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < edgesToBeMarked.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = edgesToBeMarked[i];\n\n\t\t\t\t\t// Assign unique stamp ( y/m/d/h )\n\t\t\t\t\tinternalEdge.temp[0] = 5270620;\n\n\t\t\t\t\t// Add node on other end of edge to LinkedList of\n\t\t\t\t\t// nodes to be analysed\n\t\t\t\t\tvar otherNode = internalEdge.target;\n\n\t\t\t\t\t// Only add node if it hasn't been assigned a layer\n\t\t\t\t\tif (otherNode.temp[0] == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstartNodes.push(otherNode);\n\n\t\t\t\t\t\t// Mark this other node as neither being\n\t\t\t\t\t\t// unassigned nor assigned so it isn't\n\t\t\t\t\t\t// added to this list again, but it's\n\t\t\t\t\t\t// layer isn't used in any calculation.\n\t\t\t\t\t\totherNode.temp[0] = -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartNodes.shift();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not all the edges have been scanned, get to the back of\n\t\t\t// the class and put the dunces cap on\n\t\t\tvar removedCell = startNodes.shift();\n\t\t\tstartNodes.push(internalNode);\n\n\t\t\tif (removedCell == internalNode && startNodes.length == 1)\n\t\t\t{\n\t\t\t\t// This is an error condition, we can't get out of\n\t\t\t\t// this loop. It could happen for more than one node\n\t\t\t\t// but that's a lot harder to detect. Log the error\n\t\t\t\t// TODO make log comment\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize the ranks down from their large starting value to place\n\t// at least 1 sink on layer 0\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] -= this.maxRank;\n\t}\n\t\n\t// Tighten the rank 0 nodes as far as possible\n\tfor ( var i = 0; i < startNodesCopy.length; i++)\n\t{\n\t\tvar internalNode = startNodesCopy[i];\n\t\tvar currentMaxLayer = 0;\n\t\tvar layerDeterminingEdges = internalNode.connectsAsSource;\n\n\t\tfor ( var j = 0; j < layerDeterminingEdges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[j];\n\t\t\tvar otherNode = internalEdge.target;\n\t\t\tinternalNode.temp[0] = Math.max(currentMaxLayer,\n\t\t\t\t\totherNode.temp[0] + 1);\n\t\t\tcurrentMaxLayer = internalNode.temp[0];\n\t\t}\n\t}\n\t\n\t// Reset the maxRank to that which would be expected for a from-sink\n\t// scan\n\tthis.maxRank = this.SOURCESCANSTARTRANK - this.maxRank;\n};\n\n/**\n * Function: fixRanks\n *\n * Fixes the layer assignments to the values stored in the nodes. Also needs\n * to create dummy nodes for edges that cross layers.\n */\nmxGraphHierarchyModel.prototype.fixRanks = function()\n{\n\tvar rankList = [];\n\tthis.ranks = [];\n\n\tfor (var i = 0; i < this.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tthis.ranks[i] = rankList[i];\n\t}\n\n\t// Perform a DFS to obtain an initial ordering for each rank.\n\t// Without doing this you would end up having to process\n\t// crossings for a standard tree.\n\tvar rootsArray = null;\n\n\tif (this.roots != null)\n\t{\n\t\tvar oldRootsArray = this.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < oldRootsArray.length; i++)\n\t\t{\n\t\t\tvar cell = oldRootsArray[i];\n\t\t\tvar internalNode = this.vertexMapper.get(cell);\n\t\t\trootsArray[i] = internalNode;\n\t\t}\n\t}\n\n\tthis.visit(function(parent, node, edge, layer, seen)\n\t{\n\t\tif (seen == 0 && node.maxRank < 0 && node.minRank < 0)\n\t\t{\n\t\t\trankList[node.temp[0]].push(node);\n\t\t\tnode.maxRank = node.temp[0];\n\t\t\tnode.minRank = node.temp[0];\n\n\t\t\t// Set temp[0] to the nodes position in the rank\n\t\t\tnode.temp[0] = rankList[node.maxRank].length - 1;\n\t\t}\n\n\t\tif (parent != null && edge != null)\n\t\t{\n\t\t\tvar parentToCellRankDifference = parent.maxRank - node.maxRank;\n\n\t\t\tif (parentToCellRankDifference > 1)\n\t\t\t{\n\t\t\t\t// There are ranks in between the parent and current cell\n\t\t\t\tedge.maxRank = parent.maxRank;\n\t\t\t\tedge.minRank = node.maxRank;\n\t\t\t\tedge.temp = [];\n\t\t\t\tedge.x = [];\n\t\t\t\tedge.y = [];\n\n\t\t\t\tfor (var i = edge.minRank + 1; i < edge.maxRank; i++)\n\t\t\t\t{\n\t\t\t\t\t// The connecting edge must be added to the\n\t\t\t\t\t// appropriate ranks\n\t\t\t\t\trankList[i].push(edge);\n\t\t\t\t\tedge.setGeneralPurposeVariable(i, rankList[i]\n\t\t\t\t\t\t\t.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, rootsArray, false, null);\n};\n\n/**\n * Function: visit\n *\n * A depth first search through the internal heirarchy model.\n *\n * Parameters:\n *\n * visitor - The visitor function pattern to be called for each node.\n * trackAncestors - Whether or not the search is to keep track all nodes\n * directly above this one in the search path.\n */\nmxGraphHierarchyModel.prototype.visit = function(visitor, dfsRoots, trackAncestors, seenNodes)\n{\n\t// Run dfs through on all roots\n\tif (dfsRoots != null)\n\t{\n\t\tfor (var i = 0; i < dfsRoots.length; i++)\n\t\t{\n\t\t\tvar internalNode = dfsRoots[i];\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tif (seenNodes == null)\n\t\t\t\t{\n\t\t\t\t\tseenNodes = new Object();\n\t\t\t\t}\n\n\t\t\t\tif (trackAncestors)\n\t\t\t\t{\n\t\t\t\t\t// Set up hash code for root\n\t\t\t\t\tinternalNode.hashCode = [];\n\t\t\t\t\tinternalNode.hashCode[0] = this.dfsCount;\n\t\t\t\t\tinternalNode.hashCode[1] = i;\n\t\t\t\t\tthis.extendedDfs(null, internalNode, null, visitor, seenNodes,\n\t\t\t\t\t\t\tinternalNode.hashCode, i, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.dfs(null, internalNode, null, visitor, seenNodes, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dfsCount++;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Performs a depth first search on the internal hierarchy model\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs a set of all of the\n * ancestor node of the current node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxGraphHierarchyModel.prototype.dfs = function(parent, root, connectingEdge, visitor, seen, layer)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\t\n\t\t\tfor (var i = 0; i< outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.dfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\tlayer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendedDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of cells ancestors, but it\n * should be only used when necessary because of it can be computationally\n * intensive for deep searches.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs\n * ancestors - the parent hash code\n * childHash - the new hash code for this node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxGraphHierarchyModel.prototype.extendedDfs = function(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer)\n{\n\t// Explanation of custom hash set. Previously, the ancestors variable\n\t// was passed through the dfs as a HashSet. The ancestors were copied\n\t// into a new HashSet and when the new child was processed it was also\n\t// added to the set. If the current node was in its ancestor list it\n\t// meant there is a cycle in the graph and this information is passed\n\t// to the visitor.visit() in the seen parameter. The HashSet clone was\n\t// very expensive on CPU so a custom hash was developed using primitive\n\t// types. temp[] couldn't be used so hashCode[] was added to each node.\n\t// Each new child adds another int to the array, copying the prefix\n\t// from its parent. Child of the same parent add different ints (the\n\t// limit is therefore 2^32 children per parent...). If a node has a\n\t// child with the hashCode already set then the child code is compared\n\t// to the same portion of the current nodes array. If they match there\n\t// is a loop.\n\t// Note that the basic mechanism would only allow for 1 use of this\n\t// functionality, so the root nodes have two ints. The second int is\n\t// incremented through each node root and the first is incremented\n\t// through each run of the dfs algorithm (therefore the dfs is not\n\t// thread safe). The hash code of each node is set if not already set,\n\t// or if the first int does not match that of the current run.\n\tif (root != null)\n\t{\n\t\tif (parent != null)\n\t\t{\n\t\t\t// Form this nodes hash code if necessary, that is, if the\n\t\t\t// hashCode variable has not been initialized or if the\n\t\t\t// start of the parent hash code does not equal the start of\n\t\t\t// this nodes hash code, indicating the code was set on a\n\t\t\t// previous run of this dfs.\n\t\t\tif (root.hashCode == null ||\n\t\t\t\troot.hashCode[0] != parent.hashCode[0])\n\t\t\t{\n\t\t\t\tvar hashCodeLength = parent.hashCode.length + 1;\n\t\t\t\troot.hashCode = parent.hashCode.slice();\n\t\t\t\troot.hashCode[hashCodeLength - 1] = childHash;\n\t\t\t}\n\t\t}\n\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n__mxOutput.mxGraphHierarchyModel = typeof mxGraphHierarchyModel !== 'undefined' ? mxGraphHierarchyModel : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneModel\n *\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * Constructor: mxSwimlaneModel\n *\n * Creates an internal ordered graph model using the vertices passed in. If\n * there are any, leftward edge need to be inverted in the internal model\n *\n * Arguments:\n *\n * graph - the facade describing the graph to be operated on\n * vertices - the vertices for this hierarchy\n * ordered - whether or not the vertices are already ordered\n * deterministic - whether or not this layout should be deterministic on each\n * tightenToSource - whether or not to tighten vertices towards the sources\n * scanRanksFromSinks - Whether rank assignment is from the sinks or sources.\n * usage\n */\nfunction mxSwimlaneModel(layout, vertices, roots, parent, tightenToSource)\n{\n\tvar graph = layout.getGraph();\n\tthis.tightenToSource = tightenToSource;\n\tthis.roots = roots;\n\tthis.parent = parent;\n\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly\n\tthis.vertexMapper = new mxDictionary();\n\tthis.edgeMapper = new mxDictionary();\n\tthis.maxRank = 0;\n\tvar internalVertices = [];\n\n\tif (vertices == null)\n\t{\n\t\tvertices = this.graph.getChildVertices(parent);\n\t}\n\n\tthis.maxRank = this.SOURCESCANSTARTRANK;\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly. Guess size by number\n\t// of edges is roughly same as number of vertices.\n\tthis.createInternalCells(layout, vertices, internalVertices);\n\n\t// Go through edges set their sink values. Also check the\n\t// ordering if and invert edges if necessary\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tvar edges = internalVertices[i].connectsAsSource;\n\n\t\tfor (var j = 0; j < edges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = edges[j];\n\t\t\tvar realEdges = internalEdge.edges;\n\n\t\t\t// Only need to process the first real edge, since\n\t\t\t// all the edges connect to the same other vertex\n\t\t\tif (realEdges != null && realEdges.length > 0)\n\t\t\t{\n\t\t\t\tvar realEdge = realEdges[0];\n\t\t\t\tvar targetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\trealEdge, false);\n\t\t\t\tvar internalTargetCell = this.vertexMapper.get(targetCell);\n\n\t\t\t\tif (internalVertices[i] == internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\t// If there are parallel edges going between two vertices and not all are in the same direction\n\t\t\t\t\t// you can have navigated across one direction when doing the cycle reversal that isn't the same\n\t\t\t\t\t// direction as the first real edge in the array above. When that happens the if above catches\n\t\t\t\t\t// that and we correct the target cell before continuing.\n\t\t\t\t\t// This branch only detects this single case\n\t\t\t\t\ttargetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\t\trealEdge, true);\n\t\t\t\t\tinternalTargetCell = this.vertexMapper.get(targetCell);\n\t\t\t\t}\n\n\t\t\t\tif (internalTargetCell != null\n\t\t\t\t\t\t&& internalVertices[i] != internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\tinternalEdge.target = internalTargetCell;\n\n\t\t\t\t\tif (internalTargetCell.connectsAsTarget.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.indexOf(internalTargetCell.connectsAsTarget, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use the temp variable in the internal nodes to mark this\n\t\t// internal vertex as having been visited.\n\t\tinternalVertices[i].temp[0] = 1;\n\t}\n};\n\n/**\n * Variable: maxRank\n *\n * Stores the largest rank number allocated\n */\nmxSwimlaneModel.prototype.maxRank = null;\n\n/**\n * Variable: vertexMapper\n *\n * Map from graph vertices to internal model nodes.\n */\nmxSwimlaneModel.prototype.vertexMapper = null;\n\n/**\n * Variable: edgeMapper\n *\n * Map from graph edges to internal model edges\n */\nmxSwimlaneModel.prototype.edgeMapper = null;\n\n/**\n * Variable: ranks\n *\n * Mapping from rank number to actual rank\n */\nmxSwimlaneModel.prototype.ranks = null;\n\n/**\n * Variable: roots\n *\n * Store of roots of this hierarchy model, these are real graph cells, not\n * internal cells\n */\nmxSwimlaneModel.prototype.roots = null;\n\n/**\n * Variable: parent\n *\n * The parent cell whose children are being laid out\n */\nmxSwimlaneModel.prototype.parent = null;\n\n/**\n * Variable: dfsCount\n *\n * Count of the number of times the ancestor dfs has been used.\n */\nmxSwimlaneModel.prototype.dfsCount = 0;\n\n/**\n * Variable: SOURCESCANSTARTRANK\n *\n * High value to start source layering scan rank value from.\n */\nmxSwimlaneModel.prototype.SOURCESCANSTARTRANK = 100000000;\n\n/**\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxSwimlaneModel.prototype.tightenToSource = false;\n\n/**\n * Variable: ranksPerGroup\n *\n * An array of the number of ranks within each swimlane\n */\nmxSwimlaneModel.prototype.ranksPerGroup = null;\n\n/**\n * Function: createInternalCells\n *\n * Creates all edges in the internal model\n *\n * Parameters:\n *\n * layout - Reference to the <mxHierarchicalLayout> algorithm.\n * vertices - Array of <mxCells> that represent the vertices whom are to\n * have an internal representation created.\n * internalVertices - The array of <mxGraphHierarchyNodes> to have their\n * information filled in using the real vertices.\n */\nmxSwimlaneModel.prototype.createInternalCells = function(layout, vertices, internalVertices)\n{\n\tvar graph = layout.getGraph();\n\tvar swimlanes = layout.swimlanes;\n\n\t// Create internal edges\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tinternalVertices[i] = new mxGraphHierarchyNode(vertices[i]);\n\t\tthis.vertexMapper.put(vertices[i], internalVertices[i]);\n\t\tinternalVertices[i].swimlaneIndex = -1;\n\n\t\tfor (var ii = 0; ii < swimlanes.length; ii++)\n\t\t{\n\t\t\tif (graph.model.getParent(vertices[i]) == swimlanes[ii])\n\t\t\t{\n\t\t\t\tinternalVertices[i].swimlaneIndex = ii;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If the layout is deterministic, order the cells\n\t\t//List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n\t\tvar conns = layout.getEdges(vertices[i]);\n\t\tinternalVertices[i].connectsAsSource = [];\n\n\t\t// Create internal edges, but don't do any rank assignment yet\n\t\t// First use the information from the greedy cycle remover to\n\t\t// invert the leftward edges internally\n\t\tfor (var j = 0; j < conns.length; j++)\n\t\t{\n\t\t\tvar cell = layout.getVisibleTerminal(conns[j], false);\n\n\t\t\t// Looking for outgoing edges only\n\t\t\tif (cell != vertices[i] && layout.graph.model.isVertex(cell) &&\n\t\t\t\t\t!layout.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\t// We process all edge between this source and its targets\n\t\t\t\t// If there are edges going both ways, we need to collect\n\t\t\t\t// them all into one internal edges to avoid looping problems\n\t\t\t\t// later. We assume this direction (source -> target) is the \n\t\t\t\t// natural direction if at least half the edges are going in\n\t\t\t\t// that direction.\n\n\t\t\t\t// The check below for edges[0] being in the vertex mapper is\n\t\t\t\t// in case we've processed this the other way around\n\t\t\t\t// (target -> source) and the number of edges in each direction\n\t\t\t\t// are the same. All the graph edges will have been assigned to\n\t\t\t\t// an internal edge going the other way, so we don't want to \n\t\t\t\t// process them again\n\t\t\t\tvar undirectedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, false);\n\t\t\t\tvar directedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, true);\n\t\t\t\t\n\t\t\t\tif (undirectedEdges != null &&\n\t\t\t\t\t\tundirectedEdges.length > 0 &&\n\t\t\t\t\t\tthis.edgeMapper.get(undirectedEdges[0]) == null &&\n\t\t\t\t\t\tdirectedEdges.length * 2 >= undirectedEdges.length)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = new mxGraphHierarchyEdge(undirectedEdges);\n\n\t\t\t\t\tfor (var k = 0; k < undirectedEdges.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar edge = undirectedEdges[k];\n\t\t\t\t\t\tthis.edgeMapper.put(edge, internalEdge);\n\n\t\t\t\t\t\t// Resets all point on the edge and disables the edge style\n\t\t\t\t\t\t// without deleting it from the cell style\n\t\t\t\t\t\tgraph.resetEdge(edge);\n\n\t\t\t\t\t    if (layout.disableEdgeStyle)\n\t\t\t\t\t    {\n\t\t\t\t\t    \tlayout.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\t    \tlayout.setOrthogonalEdge(edge,true);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tinternalEdge.source = internalVertices[i];\n\n\t\t\t\t\tif (mxUtils.indexOf(internalVertices[i].connectsAsSource, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalVertices[i].connectsAsSource.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure temp variable is cleared from any previous use\n\t\tinternalVertices[i].temp[0] = 0;\n\t}\n};\n\n/**\n * Function: initialRank\n *\n * Basic determination of minimum layer ranking by working from from sources\n * or sinks and working through each node in the relevant edge direction.\n * Starting at the sinks is basically a longest path layering algorithm.\n*/\nmxSwimlaneModel.prototype.initialRank = function()\n{\n\tthis.ranksPerGroup = [];\n\t\n\tvar startNodes = [];\n\tvar seen = new Object();\n\n\tif (this.roots != null)\n\t{\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar internalNode = this.vertexMapper.get(this.roots[i]);\n\t\t\tthis.maxChainDfs(null, internalNode, null, seen, 0);\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tstartNodes.push(internalNode);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Calculate the lower and upper rank bounds of each swimlane\n\tvar lowerRank = [];\n\tvar upperRank = [];\n\t\n\tfor (var i = this.ranksPerGroup.length - 1; i >= 0; i--)\n\t{\n\t\tif (i == this.ranksPerGroup.length - 1)\n\t\t{\n\t\t\tlowerRank[i] = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlowerRank[i] = upperRank[i+1] + 1;\n\t\t}\n\t\t\n\t\tupperRank[i] = lowerRank[i] + this.ranksPerGroup[i];\n\t}\n\t\n\tthis.maxRank = upperRank[0];\n\n\tvar internalNodes = this.vertexMapper.getValues();\n\t\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] = -1;\n\t}\n\n\tvar startNodesCopy = startNodes.slice();\n\t\n\twhile (startNodes.length > 0)\n\t{\n\t\tvar internalNode = startNodes[0];\n\t\tvar layerDeterminingEdges;\n\t\tvar edgesToBeMarked;\n\n\t\tlayerDeterminingEdges = internalNode.connectsAsTarget;\n\t\tedgesToBeMarked = internalNode.connectsAsSource;\n\n\t\t// flag to keep track of whether or not all layer determining\n\t\t// edges have been scanned\n\t\tvar allEdgesScanned = true;\n\n\t\t// Work out the layer of this node from the layer determining\n\t\t// edges. The minimum layer number of any node connected by one of\n\t\t// the layer determining edges variable\n\t\tvar minimumLayer = upperRank[0];\n\n\t\tfor (var i = 0; i < layerDeterminingEdges.length; i++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[i];\n\n\t\t\tif (internalEdge.temp[0] == 5270620)\n\t\t\t{\n\t\t\t\t// This edge has been scanned, get the layer of the\n\t\t\t\t// node on the other end\n\t\t\t\tvar otherNode = internalEdge.source;\n\t\t\t\tminimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tallEdgesScanned = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If all edge have been scanned, assign the layer, mark all\n\t\t// edges in the other direction and remove from the nodes list\n\t\tif (allEdgesScanned)\n\t\t{\n\t\t\tif (minimumLayer > upperRank[internalNode.swimlaneIndex])\n\t\t\t{\n\t\t\t\tminimumLayer = upperRank[internalNode.swimlaneIndex];\n\t\t\t}\n\n\t\t\tinternalNode.temp[0] = minimumLayer;\n\n\t\t\tif (edgesToBeMarked != null)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < edgesToBeMarked.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = edgesToBeMarked[i];\n\n\t\t\t\t\t// Assign unique stamp ( y/m/d/h )\n\t\t\t\t\tinternalEdge.temp[0] = 5270620;\n\n\t\t\t\t\t// Add node on other end of edge to LinkedList of\n\t\t\t\t\t// nodes to be analysed\n\t\t\t\t\tvar otherNode = internalEdge.target;\n\n\t\t\t\t\t// Only add node if it hasn't been assigned a layer\n\t\t\t\t\tif (otherNode.temp[0] == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstartNodes.push(otherNode);\n\n\t\t\t\t\t\t// Mark this other node as neither being\n\t\t\t\t\t\t// unassigned nor assigned so it isn't\n\t\t\t\t\t\t// added to this list again, but it's\n\t\t\t\t\t\t// layer isn't used in any calculation.\n\t\t\t\t\t\totherNode.temp[0] = -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartNodes.shift();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not all the edges have been scanned, get to the back of\n\t\t\t// the class and put the dunces cap on\n\t\t\tvar removedCell = startNodes.shift();\n\t\t\tstartNodes.push(internalNode);\n\n\t\t\tif (removedCell == internalNode && startNodes.length == 1)\n\t\t\t{\n\t\t\t\t// This is an error condition, we can't get out of\n\t\t\t\t// this loop. It could happen for more than one node\n\t\t\t\t// but that's a lot harder to detect. Log the error\n\t\t\t\t// TODO make log comment\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize the ranks down from their large starting value to place\n\t// at least 1 sink on layer 0\n//\tfor (var key in this.vertexMapper)\n//\t{\n//\t\tvar internalNode = this.vertexMapper[key];\n//\t\t// Mark the node as not having had a layer assigned\n//\t\tinternalNode.temp[0] -= this.maxRank;\n//\t}\n\t\n\t// Tighten the rank 0 nodes as far as possible\n//\tfor ( var i = 0; i < startNodesCopy.length; i++)\n//\t{\n//\t\tvar internalNode = startNodesCopy[i];\n//\t\tvar currentMaxLayer = 0;\n//\t\tvar layerDeterminingEdges = internalNode.connectsAsSource;\n//\n//\t\tfor ( var j = 0; j < layerDeterminingEdges.length; j++)\n//\t\t{\n//\t\t\tvar internalEdge = layerDeterminingEdges[j];\n//\t\t\tvar otherNode = internalEdge.target;\n//\t\t\tinternalNode.temp[0] = Math.max(currentMaxLayer,\n//\t\t\t\t\totherNode.temp[0] + 1);\n//\t\t\tcurrentMaxLayer = internalNode.temp[0];\n//\t\t}\n//\t}\n};\n\n/**\n * Function: maxChainDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of chains within groups.\n * Any cycles should be removed prior to running, but previously seen cells\n * are ignored.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * seen - a set of all nodes seen by this dfs\n * chainCount - the number of edges in the chain of vertices going through\n * the current swimlane\n */\nmxSwimlaneModel.prototype.maxChainDfs = function(parent, root, connectingEdge, seen, chainCount)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = mxCellPath.create(root.cell);\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvar slIndex = root.swimlaneIndex;\n\t\t\t\n\t\t\tif (this.ranksPerGroup[slIndex] == null || this.ranksPerGroup[slIndex] < chainCount)\n\t\t\t{\n\t\t\t\tthis.ranksPerGroup[slIndex] = chainCount;\n\t\t\t}\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Only navigate in source->target direction within the same\n\t\t\t\t// swimlane, or from a lower index swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex < targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.maxChainDfs(root, targetNode, internalEdge, mxUtils.clone(seen, null , true), 0);\n\t\t\t\t}\n\t\t\t\telse if (root.swimlaneIndex == targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.maxChainDfs(root, targetNode, internalEdge, mxUtils.clone(seen, null , true), chainCount + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: fixRanks\n *\n * Fixes the layer assignments to the values stored in the nodes. Also needs\n * to create dummy nodes for edges that cross layers.\n */\nmxSwimlaneModel.prototype.fixRanks = function()\n{\n\tvar rankList = [];\n\tthis.ranks = [];\n\n\tfor (var i = 0; i < this.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tthis.ranks[i] = rankList[i];\n\t}\n\n\t// Perform a DFS to obtain an initial ordering for each rank.\n\t// Without doing this you would end up having to process\n\t// crossings for a standard tree.\n\tvar rootsArray = null;\n\n\tif (this.roots != null)\n\t{\n\t\tvar oldRootsArray = this.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < oldRootsArray.length; i++)\n\t\t{\n\t\t\tvar cell = oldRootsArray[i];\n\t\t\tvar internalNode = this.vertexMapper.get(cell);\n\t\t\trootsArray[i] = internalNode;\n\t\t}\n\t}\n\n\tthis.visit(function(parent, node, edge, layer, seen)\n\t{\n\t\tif (seen == 0 && node.maxRank < 0 && node.minRank < 0)\n\t\t{\n\t\t\trankList[node.temp[0]].push(node);\n\t\t\tnode.maxRank = node.temp[0];\n\t\t\tnode.minRank = node.temp[0];\n\n\t\t\t// Set temp[0] to the nodes position in the rank\n\t\t\tnode.temp[0] = rankList[node.maxRank].length - 1;\n\t\t}\n\n\t\tif (parent != null && edge != null)\n\t\t{\n\t\t\tvar parentToCellRankDifference = parent.maxRank - node.maxRank;\n\n\t\t\tif (parentToCellRankDifference > 1)\n\t\t\t{\n\t\t\t\t// There are ranks in between the parent and current cell\n\t\t\t\tedge.maxRank = parent.maxRank;\n\t\t\t\tedge.minRank = node.maxRank;\n\t\t\t\tedge.temp = [];\n\t\t\t\tedge.x = [];\n\t\t\t\tedge.y = [];\n\n\t\t\t\tfor (var i = edge.minRank + 1; i < edge.maxRank; i++)\n\t\t\t\t{\n\t\t\t\t\t// The connecting edge must be added to the\n\t\t\t\t\t// appropriate ranks\n\t\t\t\t\trankList[i].push(edge);\n\t\t\t\t\tedge.setGeneralPurposeVariable(i, rankList[i]\n\t\t\t\t\t\t\t.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, rootsArray, false, null);\n};\n\n/**\n * Function: visit\n *\n * A depth first search through the internal heirarchy model.\n *\n * Parameters:\n *\n * visitor - The visitor function pattern to be called for each node.\n * trackAncestors - Whether or not the search is to keep track all nodes\n * directly above this one in the search path.\n */\nmxSwimlaneModel.prototype.visit = function(visitor, dfsRoots, trackAncestors, seenNodes)\n{\n\t// Run dfs through on all roots\n\tif (dfsRoots != null)\n\t{\n\t\tfor (var i = 0; i < dfsRoots.length; i++)\n\t\t{\n\t\t\tvar internalNode = dfsRoots[i];\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tif (seenNodes == null)\n\t\t\t\t{\n\t\t\t\t\tseenNodes = new Object();\n\t\t\t\t}\n\n\t\t\t\tif (trackAncestors)\n\t\t\t\t{\n\t\t\t\t\t// Set up hash code for root\n\t\t\t\t\tinternalNode.hashCode = [];\n\t\t\t\t\tinternalNode.hashCode[0] = this.dfsCount;\n\t\t\t\t\tinternalNode.hashCode[1] = i;\n\t\t\t\t\tthis.extendedDfs(null, internalNode, null, visitor, seenNodes,\n\t\t\t\t\t\t\tinternalNode.hashCode, i, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.dfs(null, internalNode, null, visitor, seenNodes, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dfsCount++;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Performs a depth first search on the internal hierarchy model\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs a set of all of the\n * ancestor node of the current node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxSwimlaneModel.prototype.dfs = function(parent, root, connectingEdge, visitor, seen, layer)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\t\n\t\t\tfor (var i = 0; i< outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.dfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\tlayer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendedDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of cells ancestors, but it\n * should be only used when necessary because of it can be computationally\n * intensive for deep searches.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs\n * ancestors - the parent hash code\n * childHash - the new hash code for this node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxSwimlaneModel.prototype.extendedDfs = function(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer)\n{\n\t// Explanation of custom hash set. Previously, the ancestors variable\n\t// was passed through the dfs as a HashSet. The ancestors were copied\n\t// into a new HashSet and when the new child was processed it was also\n\t// added to the set. If the current node was in its ancestor list it\n\t// meant there is a cycle in the graph and this information is passed\n\t// to the visitor.visit() in the seen parameter. The HashSet clone was\n\t// very expensive on CPU so a custom hash was developed using primitive\n\t// types. temp[] couldn't be used so hashCode[] was added to each node.\n\t// Each new child adds another int to the array, copying the prefix\n\t// from its parent. Child of the same parent add different ints (the\n\t// limit is therefore 2^32 children per parent...). If a node has a\n\t// child with the hashCode already set then the child code is compared\n\t// to the same portion of the current nodes array. If they match there\n\t// is a loop.\n\t// Note that the basic mechanism would only allow for 1 use of this\n\t// functionality, so the root nodes have two ints. The second int is\n\t// incremented through each node root and the first is incremented\n\t// through each run of the dfs algorithm (therefore the dfs is not\n\t// thread safe). The hash code of each node is set if not already set,\n\t// or if the first int does not match that of the current run.\n\tif (root != null)\n\t{\n\t\tif (parent != null)\n\t\t{\n\t\t\t// Form this nodes hash code if necessary, that is, if the\n\t\t\t// hashCode variable has not been initialized or if the\n\t\t\t// start of the parent hash code does not equal the start of\n\t\t\t// this nodes hash code, indicating the code was set on a\n\t\t\t// previous run of this dfs.\n\t\t\tif (root.hashCode == null ||\n\t\t\t\troot.hashCode[0] != parent.hashCode[0])\n\t\t\t{\n\t\t\t\tvar hashCodeLength = parent.hashCode.length + 1;\n\t\t\t\troot.hashCode = parent.hashCode.slice();\n\t\t\t\troot.hashCode[hashCodeLength - 1] = childHash;\n\t\t\t}\n\t\t}\n\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\tvar incomingEdges = root.connectsAsTarget.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\t\t\t\t\n\t\t\t\t// Only navigate in source->target direction within the same\n\t\t\t\t// swimlane, or from a lower index swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex <= targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < incomingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = incomingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.source;\n\n\t\t\t\t// Only navigate in target->source direction from a lower index \n\t\t\t\t// swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex < targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n__mxOutput.mxSwimlaneModel = typeof mxSwimlaneModel !== 'undefined' ? mxSwimlaneModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHierarchicalLayoutStage\n * \n * The specific layout interface for hierarchical layouts. It adds a\n * <code>run</code> method with a parameter for the hierarchical layout model\n * that is shared between the layout stages.\n * \n * Constructor: mxHierarchicalLayoutStage\n *\n * Constructs a new hierarchical layout stage.\n */\nfunction mxHierarchicalLayoutStage() { };\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxHierarchicalLayoutStage.prototype.execute = function(parent) { };\n\n__mxOutput.mxHierarchicalLayoutStage = typeof mxHierarchicalLayoutStage !== 'undefined' ? mxHierarchicalLayoutStage : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMedianHybridCrossingReduction\n * \n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well heuristic to straighten edges as\n * far as possible.\n * \n * Constructor: mxMedianHybridCrossingReduction\n *\n * Creates a coordinate assignment.\n * \n * Arguments:\n * \n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxMedianHybridCrossingReduction(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxMedianHybridCrossingReduction.\n */\nmxMedianHybridCrossingReduction.prototype = new mxHierarchicalLayoutStage();\nmxMedianHybridCrossingReduction.prototype.constructor = mxMedianHybridCrossingReduction;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMedianHybridCrossingReduction.prototype.layout = null;\n\n/**\n * Variable: maxIterations\n * \n * The maximum number of iterations to perform whilst reducing edge\n * crossings. Default is 24.\n */\nmxMedianHybridCrossingReduction.prototype.maxIterations = 24;\n\n/**\n * Variable: nestedBestRanks\n * \n * Stores each rank as a collection of cells in the best order found for\n * each layer so far\n */\nmxMedianHybridCrossingReduction.prototype.nestedBestRanks = null;\n\n/**\n * Variable: currentBestCrossings\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.currentBestCrossings = 0;\n\n/**\n * Variable: iterationsWithoutImprovement\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.iterationsWithoutImprovement = 0;\n\n/**\n * Variable: maxNoImprovementIterations\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.maxNoImprovementIterations = 2;\n\n/**\n * Function: execute\n * \n * Performs a vertex ordering within ranks as described by Gansner et al\n * 1993\n */\nmxMedianHybridCrossingReduction.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\n\t// Stores initial ordering as being the best one found so far\n\tthis.nestedBestRanks = [];\n\t\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.nestedBestRanks[i] = model.ranks[i].slice();\n\t}\n\n\tvar iterationsWithoutImprovement = 0;\n\tvar currentBestCrossings = this.calculateCrossings(model);\n\n\tfor (var i = 0; i < this.maxIterations &&\n\t\titerationsWithoutImprovement < this.maxNoImprovementIterations; i++)\n\t{\n\t\tthis.weightedMedian(i, model);\n\t\tthis.transpose(i, model);\n\t\tvar candidateCrossings = this.calculateCrossings(model);\n\n\t\tif (candidateCrossings < currentBestCrossings)\n\t\t{\n\t\t\tcurrentBestCrossings = candidateCrossings;\n\t\t\titerationsWithoutImprovement = 0;\n\n\t\t\t// Store the current rankings as the best ones\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tthis.nestedBestRanks[j][cell.getGeneralPurposeVariable(j)] = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Increase count of iterations where we haven't improved the\n\t\t\t// layout\n\t\t\titerationsWithoutImprovement++;\n\n\t\t\t// Restore the best values to the cells\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tcell.setGeneralPurposeVariable(j, k);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (currentBestCrossings == 0)\n\t\t{\n\t\t\t// Do nothing further\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Store the best rankings but in the model\n\tvar ranks = [];\n\tvar rankList = [];\n\n\tfor (var i = 0; i < model.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tranks[i] = rankList[i];\n\t}\n\n\tfor (var i = 0; i < this.nestedBestRanks.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.nestedBestRanks[i].length; j++)\n\t\t{\n\t\t\trankList[i].push(this.nestedBestRanks[i][j]);\n\t\t}\n\t}\n\n\tmodel.ranks = ranks;\n};\n\n\n/**\n * Function: calculateCrossings\n * \n * Calculates the total number of edge crossing in the current graph.\n * Returns the current number of edge crossings in the hierarchy graph\n * model in the current candidate layout\n * \n * Parameters:\n * \n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateCrossings = function(model)\n{\n\tvar numRanks = model.ranks.length;\n\tvar totalCrossings = 0;\n\n\tfor (var i = 1; i < numRanks; i++)\n\t{\n\t\ttotalCrossings += this.calculateRankCrossing(i, model);\n\t}\n\t\n\treturn totalCrossings;\n};\n\n/**\n * Function: calculateRankCrossing\n * \n * Calculates the number of edges crossings between the specified rank and\n * the rank below it. Returns the number of edges crossings with the rank\n * beneath\n * \n * Parameters:\n * \n * i -  the topmost rank of the pair ( higher rank value )\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateRankCrossing = function(i, model)\n{\n\tvar totalCrossings = 0;\n\tvar rank = model.ranks[i];\n\tvar previousRank = model.ranks[i - 1];\n\n\tvar tmpIndices = [];\n\n\t// Iterate over the top rank and fill in the connection information\n\tfor (var j = 0; j < rank.length; j++)\n\t{\n\t\tvar node = rank[j];\n\t\tvar rankPosition = node.getGeneralPurposeVariable(i);\n\t\tvar connectedCells = node.getPreviousLayerConnectedCells(i);\n\t\tvar nodeIndices = [];\n\n\t\tfor (var k = 0; k < connectedCells.length; k++)\n\t\t{\n\t\t\tvar connectedNode = connectedCells[k];\n\t\t\tvar otherCellRankPosition = connectedNode.getGeneralPurposeVariable(i - 1);\n\t\t\tnodeIndices.push(otherCellRankPosition);\n\t\t}\n\t\t\n\t\tnodeIndices.sort(function(x, y) { return x - y; });\n\t\ttmpIndices[rankPosition] = nodeIndices;\n\t}\n\t\n\tvar indices = [];\n\n\tfor (var j = 0; j < tmpIndices.length; j++)\n\t{\n\t\tindices = indices.concat(tmpIndices[j]);\n\t}\n\n\tvar firstIndex = 1;\n\t\n\twhile (firstIndex < previousRank.length)\n\t{\n\t\tfirstIndex <<= 1;\n\t}\n\n\tvar treeSize = 2 * firstIndex - 1;\n\tfirstIndex -= 1;\n\n\tvar tree = [];\n\t\n\tfor (var j = 0; j < treeSize; ++j)\n\t{\n\t\ttree[j] = 0;\n\t}\n\n\tfor (var j = 0; j < indices.length; j++)\n\t{\n\t\tvar index = indices[j];\n\t    var treeIndex = index + firstIndex;\n\t    ++tree[treeIndex];\n\t    \n\t    while (treeIndex > 0)\n\t    {\n\t    \tif (treeIndex % 2)\n\t    \t{\n\t    \t\ttotalCrossings += tree[treeIndex + 1];\n\t    \t}\n\t      \n\t    \ttreeIndex = (treeIndex - 1) >> 1;\n\t    \t++tree[treeIndex];\n\t    }\n\t}\n\n\treturn totalCrossings;\n};\n\n/**\n * Function: transpose\n * \n * Takes each possible adjacent cell pair on each rank and checks if\n * swapping them around reduces the number of crossing\n * \n * Parameters:\n * \n * mainLoopIteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.transpose = function(mainLoopIteration, model)\n{\n\tvar improved = true;\n\n\t// Track the number of iterations in case of looping\n\tvar count = 0;\n\tvar maxCount = 10;\n\twhile (improved && count++ < maxCount)\n\t{\n\t\t// On certain iterations allow allow swapping of cell pairs with\n\t\t// equal edge crossings switched or not switched. This help to\n\t\t// nudge a stuck layout into a lower crossing total.\n\t\tvar nudge = mainLoopIteration % 2 == 1 && count % 2 == 1;\n\t\timproved = false;\n\t\t\n\t\tfor (var i = 0; i < model.ranks.length; i++)\n\t\t{\n\t\t\tvar rank = model.ranks[i];\n\t\t\tvar orderedCells = [];\n\t\t\t\n\t\t\tfor (var j = 0; j < rank.length; j++)\n\t\t\t{\n\t\t\t\tvar cell = rank[j];\n\t\t\t\tvar tempRank = cell.getGeneralPurposeVariable(i);\n\t\t\t\t\n\t\t\t\t// FIXME: Workaround to avoid negative tempRanks\n\t\t\t\tif (tempRank < 0)\n\t\t\t\t{\n\t\t\t\t\ttempRank = j;\n\t\t\t\t}\n\t\t\t\torderedCells[tempRank] = cell;\n\t\t\t}\n\t\t\t\n\t\t\tvar leftCellAboveConnections = null;\n\t\t\tvar leftCellBelowConnections = null;\n\t\t\tvar rightCellAboveConnections = null;\n\t\t\tvar rightCellBelowConnections = null;\n\t\t\t\n\t\t\tvar leftAbovePositions = null;\n\t\t\tvar leftBelowPositions = null;\n\t\t\tvar rightAbovePositions = null;\n\t\t\tvar rightBelowPositions = null;\n\t\t\t\n\t\t\tvar leftCell = null;\n\t\t\tvar rightCell = null;\n\n\t\t\tfor (var j = 0; j < (rank.length - 1); j++)\n\t\t\t{\n\t\t\t\t// For each intra-rank adjacent pair of cells\n\t\t\t\t// see if swapping them around would reduce the\n\t\t\t\t// number of edges crossing they cause in total\n\t\t\t\t// On every cell pair except the first on each rank, we\n\t\t\t\t// can save processing using the previous values for the\n\t\t\t\t// right cell on the new left cell\n\t\t\t\tif (j == 0)\n\t\t\t\t{\n\t\t\t\t\tleftCell = orderedCells[j];\n\t\t\t\t\tleftCellAboveConnections = leftCell\n\t\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\t\tleftCellBelowConnections = leftCell\n\t\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\t\t\t\t\tleftAbovePositions = [];\n\t\t\t\t\tleftBelowPositions = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < leftCellAboveConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftAbovePositions[k] = leftCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < leftCellBelowConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftBelowPositions[k] = leftCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftCellAboveConnections = rightCellAboveConnections;\n\t\t\t\t\tleftCellBelowConnections = rightCellBelowConnections;\n\t\t\t\t\tleftAbovePositions = rightAbovePositions;\n\t\t\t\t\tleftBelowPositions = rightBelowPositions;\n\t\t\t\t\tleftCell = rightCell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\trightCell = orderedCells[j + 1];\n\t\t\t\trightCellAboveConnections = rightCell\n\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\trightCellBelowConnections = rightCell\n\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\n\t\t\t\trightAbovePositions = [];\n\t\t\t\trightBelowPositions = [];\n\n\t\t\t\tfor (var k = 0; k < rightCellAboveConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightAbovePositions[k] = rightCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < rightCellBelowConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightBelowPositions[k] = rightCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t}\n\n\t\t\t\tvar totalCurrentCrossings = 0;\n\t\t\t\tvar totalSwitchedCrossings = 0;\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < leftAbovePositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightAbovePositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftAbovePositions[k] > rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftAbovePositions[k] < rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < leftBelowPositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightBelowPositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftBelowPositions[k] > rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftBelowPositions[k] < rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((totalSwitchedCrossings < totalCurrentCrossings) ||\n\t\t\t\t\t(totalSwitchedCrossings == totalCurrentCrossings &&\n\t\t\t\t\tnudge))\n\t\t\t\t{\n\t\t\t\t\tvar temp = leftCell.getGeneralPurposeVariable(i);\n\t\t\t\t\tleftCell.setGeneralPurposeVariable(i, rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(i));\n\t\t\t\t\trightCell.setGeneralPurposeVariable(i, temp);\n\n\t\t\t\t\t// With this pair exchanged we have to switch all of\n\t\t\t\t\t// values for the left cell to the right cell so the\n\t\t\t\t\t// next iteration for this rank uses it as the left\n\t\t\t\t\t// cell again\n\t\t\t\t\trightCellAboveConnections = leftCellAboveConnections;\n\t\t\t\t\trightCellBelowConnections = leftCellBelowConnections;\n\t\t\t\t\trightAbovePositions = leftAbovePositions;\n\t\t\t\t\trightBelowPositions = leftBelowPositions;\n\t\t\t\t\trightCell = leftCell;\n\t\t\t\t\t\n\t\t\t\t\tif (!nudge)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Don't count nudges as improvement or we'll end\n\t\t\t\t\t\t// up stuck in two combinations and not finishing\n\t\t\t\t\t\t// as early as we should\n\t\t\t\t\t\timproved = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: weightedMedian\n * \n * Sweeps up or down the layout attempting to minimise the median placement\n * of connected cells on adjacent ranks\n * \n * Parameters:\n * \n * iteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.weightedMedian = function(iteration, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (iteration % 2 == 0);\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank - 1; j >= 0; j--)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 1; j < model.maxRank; j++)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianRank\n * \n * Attempts to minimise the median placement of connected cells on this rank\n * and one of the adjacent ranks\n * \n * Parameters:\n * \n * rankValue - the layer number of this rank\n * downwardSweep - whether or not this is a downward sweep through the graph\n */\nmxMedianHybridCrossingReduction.prototype.medianRank = function(rankValue, downwardSweep)\n{\n\tvar numCellsForRank = this.nestedBestRanks[rankValue].length;\n\tvar medianValues = [];\n\tvar reservedPositions = [];\n\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tvar cell = this.nestedBestRanks[rankValue][i];\n\t\tvar sorterEntry = new MedianCellSorter();\n\t\tsorterEntry.cell = cell;\n\n\t\t// Flip whether or not equal medians are flipped on up and down\n\t\t// sweeps\n\t\t// TODO re-implement some kind of nudge\n\t\t// medianValues[i].nudge = !downwardSweep;\n\t\tvar nextLevelConnectedCells;\n\t\t\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\t\t\n\t\tvar nextRankValue;\n\t\t\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextRankValue = rankValue + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextRankValue = rankValue - 1;\n\t\t}\n\n\t\tif (nextLevelConnectedCells != null\n\t\t\t\t&& nextLevelConnectedCells.length != 0)\n\t\t{\n\t\t\tsorterEntry.medianValue = this.medianValue(\n\t\t\t\t\tnextLevelConnectedCells, nextRankValue);\n\t\t\tmedianValues.push(sorterEntry);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Nodes with no adjacent vertices are flagged in the reserved array\n\t\t\t// to indicate they should be left in their current position.\n\t\t\treservedPositions[cell.getGeneralPurposeVariable(rankValue)] = true;\n\t\t}\n\t}\n\t\n\tmedianValues.sort(MedianCellSorter.prototype.compare);\n\t\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tif (reservedPositions[i] == null)\n\t\t{\n\t\t\tvar cell = medianValues.shift().cell;\n\t\t\tcell.setGeneralPurposeVariable(rankValue, i);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianValue\n * \n * Calculates the median rank order positioning for the specified cell using\n * the connected cells on the specified rank. Returns the median rank\n * ordering value of the connected cells\n * \n * Parameters:\n * \n * connectedCells - the cells on the specified rank connected to the\n * specified cell\n * rankValue - the rank that the connected cell lie upon\n */\nmxMedianHybridCrossingReduction.prototype.medianValue = function(connectedCells, rankValue)\n{\n\tvar medianValues = [];\n\tvar arrayCount = 0;\n\t\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tvar cell = connectedCells[i];\n\t\tmedianValues[arrayCount++] = cell.getGeneralPurposeVariable(rankValue);\n\t}\n\n\t// Sort() sorts lexicographically by default (i.e. 11 before 9) so force\n\t// numerical order sort\n\tmedianValues.sort(function(a,b){return a - b;});\n\t\n\tif (arrayCount % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(arrayCount / 2)];\n\t}\n\telse if (arrayCount == 2)\n\t{\n\t\treturn ((medianValues[0] + medianValues[1]) / 2.0);\n\t}\n\telse\n\t{\n\t\tvar medianPoint = arrayCount / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1] - medianValues[0];\n\t\tvar rightMedian = medianValues[arrayCount - 1]\n\t\t\t\t- medianValues[medianPoint];\n\n\t\treturn (medianValues[medianPoint - 1] * rightMedian + medianValues[medianPoint]\n\t\t\t\t* leftMedian)\n\t\t\t\t/ (leftMedian + rightMedian);\n\t}\n};\n\n/**\n * Class: MedianCellSorter\n * \n * A utility class used to track cells whilst sorting occurs on the median\n * values. Does not violate (x.compareTo(y)==0) == (x.equals(y))\n *\n * Constructor: MedianCellSorter\n * \n * Constructs a new median cell sorter.\n */\nfunction MedianCellSorter()\n{\n\t// empty\n};\n\n/**\n * Variable: medianValue\n * \n * The weighted value of the cell stored.\n */\nMedianCellSorter.prototype.medianValue = 0;\n\n/**\n * Variable: cell\n * \n * The cell whose median value is being calculated\n */\nMedianCellSorter.prototype.cell = false;\n\n/**\n * Function: compare\n * \n * Compares two MedianCellSorters.\n */\nMedianCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.medianValue > a.medianValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.medianValue < a.medianValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n__mxOutput.mxMedianHybridCrossingReduction = typeof mxMedianHybridCrossingReduction !== 'undefined' ? mxMedianHybridCrossingReduction : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMinimumCycleRemover\n * \n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n * \n * Constructor: mxMinimumCycleRemover\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxMinimumCycleRemover(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxMinimumCycleRemover.prototype = new mxHierarchicalLayoutStage();\nmxMinimumCycleRemover.prototype.constructor = mxMinimumCycleRemover;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMinimumCycleRemover.prototype.layout = null;\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxMinimumCycleRemover.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodesArray = model.vertexMapper.getValues();\n\tvar unseenNodes = new Object();\n\t\n\tfor (var i = 0; i < unseenNodesArray.length; i++)\n\t{\n\t\tunseenNodes[unseenNodesArray[i].id] = unseenNodesArray[i];\n\t}\n\t\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\t\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\t\t\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t}\n\t\t\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, rootsArray, true, null);\n\n\t// If there are any nodes that should be nodes that the dfs can miss\n\t// these need to be processed with the dfs and the roots assigned\n\t// correctly to form a correct internal model\n\tvar seenNodesCopy = mxUtils.clone(seenNodes, null, true);\n\n\t// Pick a random cell and dfs from it\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\t\t\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, unseenNodes, true, seenNodesCopy);\n};\n\n__mxOutput.mxMinimumCycleRemover = typeof mxMinimumCycleRemover !== 'undefined' ? mxMinimumCycleRemover : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCoordinateAssignment\n * \n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well as heuristics to straighten edges as\n * far as possible.\n * \n * Constructor: mxCoordinateAssignment\n *\n * Creates a coordinate assignment.\n * \n * Arguments:\n * \n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxCoordinateAssignment(layout, intraCellSpacing, interRankCellSpacing,\n\torientation, initialX, parallelEdgeSpacing)\n{\n\tthis.layout = layout;\n\tthis.intraCellSpacing = intraCellSpacing;\n\tthis.interRankCellSpacing = interRankCellSpacing;\n\tthis.orientation = orientation;\n\tthis.initialX = initialX;\n\tthis.parallelEdgeSpacing = parallelEdgeSpacing;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxCoordinateAssignment.prototype = new mxHierarchicalLayoutStage();\nmxCoordinateAssignment.prototype.constructor = mxCoordinateAssignment;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxCoordinateAssignment.prototype.layout = null;\n\n/**\n * Variable: intraCellSpacing\n * \n * The minimum buffer between cells on the same rank. Default is 30.\n */\nmxCoordinateAssignment.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The minimum distance between cells on adjacent ranks. Default is 100.\n */\nmxCoordinateAssignment.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxCoordinateAssignment.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: maxIterations\n * \n * The number of heuristic iterations to run. Default is 8.\n */\nmxCoordinateAssignment.prototype.maxIterations = 8;\n\n/**\n * Variable: prefHozEdgeSep\n * \n * The preferred horizontal distance between edges exiting a vertex Default is 5.\n */\nmxCoordinateAssignment.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n * \n * The preferred vertical offset between edges exiting a vertex Default is 2.\n */\nmxCoordinateAssignment.prototype.prefVertEdgeOff = 2;\n\n/**\n * Variable: minEdgeJetty\n * \n * The minimum distance for an edge jetty from a vertex Default is 12.\n */\nmxCoordinateAssignment.prototype.minEdgeJetty = 12;\n\n/**\n * Variable: channelBuffer\n * \n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed Default is 4.\n */\nmxCoordinateAssignment.prototype.channelBuffer = 4;\n\n/**\n * Variable: jettyPositions\n * \n * Map of internal edges and (x,y) pair of positions of the start and end jetty\n * for that edge where it connects to the source and target vertices.\n * Note this should technically be a WeakHashMap, but since JS does not\n * have an equivalent, housekeeping must be performed before using.\n * i.e. check all edges are still in the model and clear the values.\n * Note that the y co-ord is the offset of the jetty, not the\n * absolute point\n */\nmxCoordinateAssignment.prototype.jettyPositions = null;\n\n/**\n * Variable: orientation\n * \n * The position of the root ( start ) node(s) relative to the rest of the\n * laid out graph. Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxCoordinateAssignment.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: initialX\n * \n * The minimum x position node placement starts at\n */\nmxCoordinateAssignment.prototype.initialX = null;\n\n/**\n * Variable: limitX\n * \n * The maximum x value this positioning lays up to\n */\nmxCoordinateAssignment.prototype.limitX = null;\n\n/**\n * Variable: currentXDelta\n * \n * The sum of x-displacements for the current iteration\n */\nmxCoordinateAssignment.prototype.currentXDelta = null;\n\n/**\n * Variable: widestRank\n * \n * The rank that has the widest x position\n */\nmxCoordinateAssignment.prototype.widestRank = null;\n\n/**\n * Variable: rankTopY\n * \n * Internal cache of top-most values of Y for each rank\n */\nmxCoordinateAssignment.prototype.rankTopY = null;\n\n/**\n * Variable: rankBottomY\n * \n * Internal cache of bottom-most value of Y for each rank\n */\nmxCoordinateAssignment.prototype.rankBottomY = null;\n\n/**\n * Variable: widestRankValue\n * \n * The X-coordinate of the edge of the widest rank\n */\nmxCoordinateAssignment.prototype.widestRankValue = null;\n\n/**\n * Variable: rankWidths\n * \n * The width of all the ranks\n */\nmxCoordinateAssignment.prototype.rankWidths = null;\n\n/**\n * Variable: rankY\n * \n * The Y-coordinate of all the ranks\n */\nmxCoordinateAssignment.prototype.rankY = null;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxCoordinateAssignment.prototype.fineTuning = true;\n\n/**\n * Variable: nextLayerConnectedCache\n * \n * A store of connections to the layer above for speed\n */\nmxCoordinateAssignment.prototype.nextLayerConnectedCache = null;\n\n/**\n * Variable: previousLayerConnectedCache\n * \n * A store of connections to the layer below for speed\n */\nmxCoordinateAssignment.prototype.previousLayerConnectedCache = null;\n\n/**\n * Variable: groupPadding\n * \n * Padding added to resized parents Default is 10.\n */\nmxCoordinateAssignment.prototype.groupPadding = 10;\n\n/**\n * Utility method to display current positions\n */\nmxCoordinateAssignment.prototype.printStatus = function()\n{\n\tvar model = this.layout.getModel();\n\tmxLog.show();\n\n\tmxLog.writeln('======Coord assignment debug=======');\n\n\tfor (var j = 0; j < model.ranks.length; j++)\n\t{\n\t\tmxLog.write('Rank ', j, ' : ' );\n\t\tvar rank = model.ranks[j];\n\t\t\n\t\tfor (var k = 0; k < rank.length; k++)\n\t\t{\n\t\t\tvar cell = rank[k];\n\t\t\t\n\t\t\tmxLog.write(cell.getGeneralPurposeVariable(j), '  ');\n\t\t}\n\t\tmxLog.writeln();\n\t}\n\t\n\tmxLog.writeln('====================================');\n};\n\n/**\n * Function: execute\n * \n * A basic horizontal coordinate assignment algorithm\n */\nmxCoordinateAssignment.prototype.execute = function(parent)\n{\n\tthis.jettyPositions = Object();\n\tvar model = this.layout.getModel();\n\tthis.currentXDelta = 0.0;\n\n\tthis.initialCoords(this.layout.getGraph(), model);\n\t\n//\tthis.printStatus();\n\t\n\tif (this.fineTuning)\n\t{\n\t\tthis.minNode(model);\n\t}\n\t\n\tvar bestXDelta = 100000000.0;\n\t\n\tif (this.fineTuning)\n\t{\n\t\tfor (var i = 0; i < this.maxIterations; i++)\n\t\t{\n//\t\t\tthis.printStatus();\n\t\t\n\t\t\t// Median Heuristic\n\t\t\tif (i != 0)\n\t\t\t{\n\t\t\t\tthis.medianPos(i, model);\n\t\t\t\tthis.minNode(model);\n\t\t\t}\n\t\t\t\n\t\t\t// if the total offset is less for the current positioning,\n\t\t\t// there are less heavily angled edges and so the current\n\t\t\t// positioning is used\n\t\t\tif (this.currentXDelta < bestXDelta)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < model.ranks.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\t\tcell.setX(j, cell.getGeneralPurposeVariable(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbestXDelta = this.currentXDelta;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Restore the best positions\n\t\t\t\tfor (var j = 0; j < model.ranks.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\t\tcell.setGeneralPurposeVariable(j, cell.getX(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.minPath(this.layout.getGraph(), model);\n\t\t\t\n\t\t\tthis.currentXDelta = 0;\n\t\t}\n\t}\n\t\n\tthis.setCellLocations(this.layout.getGraph(), model);\n};\n\n/**\n * Function: minNode\n * \n * Performs one median positioning sweep in both directions\n */\nmxCoordinateAssignment.prototype.minNode = function(model)\n{\n\t// Queue all nodes\n\tvar nodeList = [];\n\t\n\t// Need to be able to map from cell to cellWrapper\n\tvar map = new mxDictionary();\n\tvar rank = [];\n\t\n\tfor (var i = 0; i <= model.maxRank; i++)\n\t{\n\t\trank[i] = model.ranks[i];\n\t\t\n\t\tfor (var j = 0; j < rank[i].length; j++)\n\t\t{\n\t\t\t// Use the weight to store the rank and visited to store whether\n\t\t\t// or not the cell is in the list\n\t\t\tvar node = rank[i][j];\n\t\t\tvar nodeWrapper = new WeightedCellSorter(node, i);\n\t\t\tnodeWrapper.rankIndex = j;\n\t\t\tnodeWrapper.visited = true;\n\t\t\tnodeList.push(nodeWrapper);\n\t\t\t\n\t\t\tmap.put(node, nodeWrapper);\n\t\t}\n\t}\n\t\n\t// Set a limit of the maximum number of times we will access the queue\n\t// in case a loop appears\n\tvar maxTries = nodeList.length * 10;\n\tvar count = 0;\n\t\n\t// Don't move cell within this value of their median\n\tvar tolerance = 1;\n\t\n\twhile (nodeList.length > 0 && count <= maxTries)\n\t{\n\t\tvar cellWrapper = nodeList.shift();\n\t\tvar cell = cellWrapper.cell;\n\t\t\n\t\tvar rankValue = cellWrapper.weightedValue;\n\t\tvar rankIndex = parseInt(cellWrapper.rankIndex);\n\t\t\n\t\tvar nextLayerConnectedCells = cell.getNextLayerConnectedCells(rankValue);\n\t\tvar previousLayerConnectedCells = cell.getPreviousLayerConnectedCells(rankValue);\n\t\t\n\t\tvar numNextLayerConnected = nextLayerConnectedCells.length;\n\t\tvar numPreviousLayerConnected = previousLayerConnectedCells.length;\n\n\t\tvar medianNextLevel = this.medianXValue(nextLayerConnectedCells,\n\t\t\t\trankValue + 1);\n\t\tvar medianPreviousLevel = this.medianXValue(previousLayerConnectedCells,\n\t\t\t\trankValue - 1);\n\n\t\tvar numConnectedNeighbours = numNextLayerConnected\n\t\t\t\t+ numPreviousLayerConnected;\n\t\tvar currentPosition = cell.getGeneralPurposeVariable(rankValue);\n\t\tvar cellMedian = currentPosition;\n\t\t\n\t\tif (numConnectedNeighbours > 0)\n\t\t{\n\t\t\tcellMedian = (medianNextLevel * numNextLayerConnected + medianPreviousLevel\n\t\t\t\t\t* numPreviousLayerConnected)\n\t\t\t\t\t/ numConnectedNeighbours;\n\t\t}\n\n\t\t// Flag storing whether or not position has changed\n\t\tvar positionChanged = false;\n\t\t\n\t\tif (cellMedian < currentPosition - tolerance)\n\t\t{\n\t\t\tif (rankIndex == 0)\n\t\t\t{\n\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\tpositionChanged = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar leftCell = rank[rankValue][rankIndex - 1];\n\t\t\t\tvar leftLimit = leftCell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue);\n\t\t\t\tleftLimit = leftLimit + leftCell.width / 2\n\t\t\t\t\t\t+ this.intraCellSpacing + cell.width / 2;\n\n\t\t\t\tif (leftLimit < cellMedian)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t\telse if (leftLimit < cell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t- tolerance)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, leftLimit);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (cellMedian > currentPosition + tolerance)\n\t\t{\n\t\t\tvar rankSize = rank[rankValue].length;\n\t\t\t\n\t\t\tif (rankIndex == rankSize - 1)\n\t\t\t{\n\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\tpositionChanged = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar rightCell = rank[rankValue][rankIndex + 1];\n\t\t\t\tvar rightLimit = rightCell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue);\n\t\t\t\trightLimit = rightLimit - rightCell.width / 2\n\t\t\t\t\t\t- this.intraCellSpacing - cell.width / 2;\n\t\t\t\t\n\t\t\t\tif (rightLimit > cellMedian)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t\telse if (rightLimit > cell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t+ tolerance)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, rightLimit);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (positionChanged)\n\t\t{\n\t\t\t// Add connected nodes to map and list\n\t\t\tfor (var i = 0; i < nextLayerConnectedCells.length; i++)\n\t\t\t{\n\t\t\t\tvar connectedCell = nextLayerConnectedCells[i];\n\t\t\t\tvar connectedCellWrapper = map.get(connectedCell);\n\t\t\t\t\n\t\t\t\tif (connectedCellWrapper != null)\n\t\t\t\t{\n\t\t\t\t\tif (connectedCellWrapper.visited == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tconnectedCellWrapper.visited = true;\n\t\t\t\t\t\tnodeList.push(connectedCellWrapper);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add connected nodes to map and list\n\t\t\tfor (var i = 0; i < previousLayerConnectedCells.length; i++)\n\t\t\t{\n\t\t\t\tvar connectedCell = previousLayerConnectedCells[i];\n\t\t\t\tvar connectedCellWrapper = map.get(connectedCell);\n\n\t\t\t\tif (connectedCellWrapper != null)\n\t\t\t\t{\n\t\t\t\t\tif (connectedCellWrapper.visited == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tconnectedCellWrapper.visited = true;\n\t\t\t\t\t\tnodeList.push(connectedCellWrapper);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tcellWrapper.visited = false;\n\t\tcount++;\n\t}\n};\n\n/**\n * Function: medianPos\n * \n * Performs one median positioning sweep in one direction\n * \n * Parameters:\n * \n * i - the iteration of the whole process\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.medianPos = function(i, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (i % 2 == 0);\n\t\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank; j > 0; j--)\n\t\t{\n\t\t\tthis.rankMedianPosition(j - 1, model, j);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 0; j < model.maxRank - 1; j++)\n\t\t{\n\t\t\tthis.rankMedianPosition(j + 1, model, j);\n\t\t}\n\t}\n};\n\n/**\n * Function: rankMedianPosition\n * \n * Performs median minimisation over one rank.\n * \n * Parameters:\n * \n * rankValue - the layer number of this rank\n * model - an internal model of the hierarchical layout\n * nextRankValue - the layer number whose connected cels are to be laid out\n * relative to\n */\nmxCoordinateAssignment.prototype.rankMedianPosition = function(rankValue, model, nextRankValue)\n{\n\tvar rank = model.ranks[rankValue];\n\n\t// Form an array of the order in which the cell are to be processed\n\t// , the order is given by the weighted sum of the in or out edges,\n\t// depending on whether we're traveling up or down the hierarchy.\n\tvar weightedValues = [];\n\tvar cellMap = new Object();\n\n\tfor (var i = 0; i < rank.length; i++)\n\t{\n\t\tvar currentCell = rank[i];\n\t\tweightedValues[i] = new WeightedCellSorter();\n\t\tweightedValues[i].cell = currentCell;\n\t\tweightedValues[i].rankIndex = i;\n\t\tcellMap[currentCell.id] = weightedValues[i];\n\t\tvar nextLayerConnectedCells = null;\n\t\t\n\t\tif (nextRankValue < rankValue)\n\t\t{\n\t\t\tnextLayerConnectedCells = currentCell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLayerConnectedCells = currentCell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\n\t\t// Calculate the weighing based on this node type and those this\n\t\t// node is connected to on the next layer\n\t\tweightedValues[i].weightedValue = this.calculatedWeightedValue(\n\t\t\t\tcurrentCell, nextLayerConnectedCells);\n\t}\n\n\tweightedValues.sort(WeightedCellSorter.prototype.compare);\n\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\t\n\tfor (var i = 0; i < weightedValues.length; i++)\n\t{\n\t\tvar numConnectionsNextLevel = 0;\n\t\tvar cell = weightedValues[i].cell;\n\t\tvar nextLayerConnectedCells = null;\n\t\tvar medianNextLevel = 0;\n\n\t\tif (nextRankValue < rankValue)\n\t\t{\n\t\t\tnextLayerConnectedCells = cell.getPreviousLayerConnectedCells(\n\t\t\t\t\trankValue).slice();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLayerConnectedCells = cell.getNextLayerConnectedCells(\n\t\t\t\t\trankValue).slice();\n\t\t}\n\n\t\tif (nextLayerConnectedCells != null)\n\t\t{\n\t\t\tnumConnectionsNextLevel = nextLayerConnectedCells.length;\n\t\t\t\n\t\t\tif (numConnectionsNextLevel > 0)\n\t\t\t{\n\t\t\t\tmedianNextLevel = this.medianXValue(nextLayerConnectedCells,\n\t\t\t\t\t\tnextRankValue);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// For case of no connections on the next level set the\n\t\t\t\t// median to be the current position and try to be\n\t\t\t\t// positioned there\n\t\t\t\tmedianNextLevel = cell.getGeneralPurposeVariable(rankValue);\n\t\t\t}\n\t\t}\n\n\t\tvar leftBuffer = 0.0;\n\t\tvar leftLimit = -100000000.0;\n\t\t\n\t\tfor (var j = weightedValues[i].rankIndex - 1; j >= 0;)\n\t\t{\n\t\t\tvar weightedValue = cellMap[rank[j].id];\n\t\t\t\n\t\t\tif (weightedValue != null)\n\t\t\t{\n\t\t\t\tvar leftCell = weightedValue.cell;\n\t\t\t\t\n\t\t\t\tif (weightedValue.visited)\n\t\t\t\t{\n\t\t\t\t\t// The left limit is the right hand limit of that\n\t\t\t\t\t// cell plus any allowance for unallocated cells\n\t\t\t\t\t// in-between\n\t\t\t\t\tleftLimit = leftCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t\t+ leftCell.width\n\t\t\t\t\t\t\t/ 2.0\n\t\t\t\t\t\t\t+ this.intraCellSpacing\n\t\t\t\t\t\t\t+ leftBuffer + cell.width / 2.0;\n\t\t\t\t\tj = -1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftBuffer += leftCell.width + this.intraCellSpacing;\n\t\t\t\t\tj--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar rightBuffer = 0.0;\n\t\tvar rightLimit = 100000000.0;\n\t\t\n\t\tfor (var j = weightedValues[i].rankIndex + 1; j < weightedValues.length;)\n\t\t{\n\t\t\tvar weightedValue = cellMap[rank[j].id];\n\t\t\t\n\t\t\tif (weightedValue != null)\n\t\t\t{\n\t\t\t\tvar rightCell = weightedValue.cell;\n\t\t\t\t\n\t\t\t\tif (weightedValue.visited)\n\t\t\t\t{\n\t\t\t\t\t// The left limit is the right hand limit of that\n\t\t\t\t\t// cell plus any allowance for unallocated cells\n\t\t\t\t\t// in-between\n\t\t\t\t\trightLimit = rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t\t- rightCell.width\n\t\t\t\t\t\t\t/ 2.0\n\t\t\t\t\t\t\t- this.intraCellSpacing\n\t\t\t\t\t\t\t- rightBuffer - cell.width / 2.0;\n\t\t\t\t\tj = weightedValues.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\trightBuffer += rightCell.width + this.intraCellSpacing;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (medianNextLevel >= leftLimit && medianNextLevel <= rightLimit)\n\t\t{\n\t\t\tcell.setGeneralPurposeVariable(rankValue, medianNextLevel);\n\t\t}\n\t\telse if (medianNextLevel < leftLimit)\n\t\t{\n\t\t\t// Couldn't place at median value, place as close to that\n\t\t\t// value as possible\n\t\t\tcell.setGeneralPurposeVariable(rankValue, leftLimit);\n\t\t\tthis.currentXDelta += leftLimit - medianNextLevel;\n\t\t}\n\t\telse if (medianNextLevel > rightLimit)\n\t\t{\n\t\t\t// Couldn't place at median value, place as close to that\n\t\t\t// value as possible\n\t\t\tcell.setGeneralPurposeVariable(rankValue, rightLimit);\n\t\t\tthis.currentXDelta += medianNextLevel - rightLimit;\n\t\t}\n\n\t\tweightedValues[i].visited = true;\n\t}\n};\n\n/**\n * Function: calculatedWeightedValue\n * \n * Calculates the priority the specified cell has based on the type of its\n * cell and the cells it is connected to on the next layer\n * \n * Parameters:\n * \n * currentCell - the cell whose weight is to be calculated\n * collection - the cells the specified cell is connected to\n */\nmxCoordinateAssignment.prototype.calculatedWeightedValue = function(currentCell, collection)\n{\n\tvar totalWeight = 0;\n\t\n\tfor (var i = 0; i < collection.length; i++)\n\t{\n\t\tvar cell = collection[i];\n\n\t\tif (currentCell.isVertex() && cell.isVertex())\n\t\t{\n\t\t\ttotalWeight++;\n\t\t}\n\t\telse if (currentCell.isEdge() && cell.isEdge())\n\t\t{\n\t\t\ttotalWeight += 8;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttotalWeight += 2;\n\t\t}\n\t}\n\n\treturn totalWeight;\n};\n\n/**\n * Function: medianXValue\n * \n * Calculates the median position of the connected cell on the specified\n * rank\n * \n * Parameters:\n * \n * connectedCells - the cells the candidate connects to on this level\n * rankValue - the layer number of this rank\n */\nmxCoordinateAssignment.prototype.medianXValue = function(connectedCells, rankValue)\n{\n\tif (connectedCells.length == 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar medianValues = [];\n\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tmedianValues[i] = connectedCells[i].getGeneralPurposeVariable(rankValue);\n\t}\n\n\tmedianValues.sort(function(a,b){return a - b;});\n\t\n\tif (connectedCells.length % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(connectedCells.length / 2)];\n\t}\n\telse\n\t{\n\t\tvar medianPoint = connectedCells.length / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1];\n\t\tvar rightMedian = medianValues[medianPoint];\n\n\t\treturn ((leftMedian + rightMedian) / 2);\n\t}\n};\n\n/**\n * Function: initialCoords\n * \n * Sets up the layout in an initial positioning. The ranks are all centered\n * as much as possible along the middle vertex in each rank. The other cells\n * are then placed as close as possible on either side.\n * \n * Parameters:\n * \n * facade - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.initialCoords = function(facade, model)\n{\n\tthis.calculateWidestRank(facade, model);\n\n\t// Sweep up and down from the widest rank\n\tfor (var i = this.widestRank; i >= 0; i--)\n\t{\n\t\tif (i < model.maxRank)\n\t\t{\n\t\t\tthis.rankCoordinates(i, facade, model);\n\t\t}\n\t}\n\n\tfor (var i = this.widestRank+1; i <= model.maxRank; i++)\n\t{\n\t\tif (i > 0)\n\t\t{\n\t\t\tthis.rankCoordinates(i, facade, model);\n\t\t}\n\t}\n};\n\n/**\n * Function: rankCoordinates\n * \n * Sets up the layout in an initial positioning. All the first cells in each\n * rank are moved to the left and the rest of the rank inserted as close\n * together as their size and buffering permits. This method works on just\n * the specified rank.\n * \n * Parameters:\n * \n * rankValue - the current rank being processed\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.rankCoordinates = function(rankValue, graph, model)\n{\n\tvar rank = model.ranks[rankValue];\n\tvar maxY = 0.0;\n\tvar localX = this.initialX + (this.widestRankValue - this.rankWidths[rankValue])\n\t\t\t/ 2;\n\n\t// Store whether or not any of the cells' bounds were unavailable so\n\t// to only issue the warning once for all cells\n\tvar boundsWarning = false;\n\t\n\tfor (var i = 0; i < rank.length; i++)\n\t{\n\t\tvar node = rank[i];\n\t\t\n\t\tif (node.isVertex())\n\t\t{\n\t\t\tvar bounds = this.layout.getVertexBounds(node.cell);\n\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnode.width = bounds.width;\n\t\t\t\t\tnode.height = bounds.height;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnode.width = bounds.height;\n\t\t\t\t\tnode.height = bounds.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tboundsWarning = true;\n\t\t\t}\n\n\t\t\tmaxY = Math.max(maxY, node.height);\n\t\t}\n\t\telse if (node.isEdge())\n\t\t{\n\t\t\t// The width is the number of additional parallel edges\n\t\t\t// time the parallel edge spacing\n\t\t\tvar numEdges = 1;\n\n\t\t\tif (node.edges != null)\n\t\t\t{\n\t\t\t\tnumEdges = node.edges.length;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxLog.warn('edge.edges is null');\n\t\t\t}\n\n\t\t\tnode.width = (numEdges - 1) * this.parallelEdgeSpacing;\n\t\t}\n\n\t\t// Set the initial x-value as being the best result so far\n\t\tlocalX += node.width / 2.0;\n\t\tnode.setX(rankValue, localX);\n\t\tnode.setGeneralPurposeVariable(rankValue, localX);\n\t\tlocalX += node.width / 2.0;\n\t\tlocalX += this.intraCellSpacing;\n\t}\n\n\tif (boundsWarning == true)\n\t{\n\t\tmxLog.warn('At least one cell has no bounds');\n\t}\n};\n\n/**\n * Function: calculateWidestRank\n * \n * Calculates the width rank in the hierarchy. Also set the y value of each\n * rank whilst performing the calculation\n * \n * Parameters:\n * \n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.calculateWidestRank = function(graph, model)\n{\n\t// Starting y co-ordinate\n\tvar y = -this.interRankCellSpacing;\n\t\n\t// Track the widest cell on the last rank since the y\n\t// difference depends on it\n\tvar lastRankMaxCellHeight = 0.0;\n\tthis.rankWidths = [];\n\tthis.rankY = [];\n\n\tfor (var rankValue = model.maxRank; rankValue >= 0; rankValue--)\n\t{\n\t\t// Keep track of the widest cell on this rank\n\t\tvar maxCellHeight = 0.0;\n\t\tvar rank = model.ranks[rankValue];\n\t\tvar localX = this.initialX;\n\n\t\t// Store whether or not any of the cells' bounds were unavailable so\n\t\t// to only issue the warning once for all cells\n\t\tvar boundsWarning = false;\n\t\t\n\t\tfor (var i = 0; i < rank.length; i++)\n\t\t{\n\t\t\tvar node = rank[i];\n\n\t\t\tif (node.isVertex())\n\t\t\t{\n\t\t\t\tvar bounds = this.layout.getVertexBounds(node.cell);\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.width = bounds.width;\n\t\t\t\t\t\tnode.height = bounds.height;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.width = bounds.height;\n\t\t\t\t\t\tnode.height = bounds.width;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tboundsWarning = true;\n\t\t\t\t}\n\n\t\t\t\tmaxCellHeight = Math.max(maxCellHeight, node.height);\n\t\t\t}\n\t\t\telse if (node.isEdge())\n\t\t\t{\n\t\t\t\t// The width is the number of additional parallel edges\n\t\t\t\t// time the parallel edge spacing\n\t\t\t\tvar numEdges = 1;\n\n\t\t\t\tif (node.edges != null)\n\t\t\t\t{\n\t\t\t\t\tnumEdges = node.edges.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmxLog.warn('edge.edges is null');\n\t\t\t\t}\n\n\t\t\t\tnode.width = (numEdges - 1) * this.parallelEdgeSpacing;\n\t\t\t}\n\n\t\t\t// Set the initial x-value as being the best result so far\n\t\t\tlocalX += node.width / 2.0;\n\t\t\tnode.setX(rankValue, localX);\n\t\t\tnode.setGeneralPurposeVariable(rankValue, localX);\n\t\t\tlocalX += node.width / 2.0;\n\t\t\tlocalX += this.intraCellSpacing;\n\n\t\t\tif (localX > this.widestRankValue)\n\t\t\t{\n\t\t\t\tthis.widestRankValue = localX;\n\t\t\t\tthis.widestRank = rankValue;\n\t\t\t}\n\n\t\t\tthis.rankWidths[rankValue] = localX;\n\t\t}\n\n\t\tif (boundsWarning == true)\n\t\t{\n\t\t\tmxLog.warn('At least one cell has no bounds');\n\t\t}\n\n\t\tthis.rankY[rankValue] = y;\n\t\tvar distanceToNextRank = maxCellHeight / 2.0\n\t\t\t\t+ lastRankMaxCellHeight / 2.0 + this.interRankCellSpacing;\n\t\tlastRankMaxCellHeight = maxCellHeight;\n\n\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.orientation == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\ty += distanceToNextRank;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ty -= distanceToNextRank;\n\t\t}\n\n\t\tfor (var i = 0; i < rank.length; i++)\n\t\t{\n\t\t\tvar cell = rank[i];\n\t\t\tcell.setY(rankValue, y);\n\t\t}\n\t}\n};\n\n/**\n * Function: minPath\n * \n * Straightens out chains of virtual nodes where possibleacade to those stored after this layout\n * processing step has completed.\n * \n * Parameters:\n *\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.minPath = function(graph, model)\n{\n\t// Work down and up each edge with at least 2 control points\n\t// trying to straighten each one out. If the same number of\n\t// straight segments are formed in both directions, the \n\t// preferred direction used is the one where the final\n\t// control points have the least offset from the connectable \n\t// region of the terminating vertices\n\tvar edges = model.edgeMapper.getValues();\n\t\n\tfor (var j = 0; j < edges.length; j++)\n\t{\n\t\tvar cell = edges[j];\n\t\t\n\t\tif (cell.maxRank - cell.minRank - 1 < 1)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\t// At least two virtual nodes in the edge\n\t\t// Check first whether the edge is already straight\n\t\tvar referenceX = cell\n\t\t\t\t.getGeneralPurposeVariable(cell.minRank + 1);\n\t\tvar edgeStraight = true;\n\t\tvar refSegCount = 0;\n\t\t\n\t\tfor (var i = cell.minRank + 2; i < cell.maxRank; i++)\n\t\t{\n\t\t\tvar x = cell.getGeneralPurposeVariable(i);\n\n\t\t\tif (referenceX != x)\n\t\t\t{\n\t\t\t\tedgeStraight = false;\n\t\t\t\treferenceX = x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trefSegCount++;\n\t\t\t}\n\t\t}\n\n\t\tif (!edgeStraight)\n\t\t{\n\t\t\tvar upSegCount = 0;\n\t\t\tvar downSegCount = 0;\n\t\t\tvar upXPositions = [];\n\t\t\tvar downXPositions = [];\n\n\t\t\tvar currentX = cell.getGeneralPurposeVariable(cell.minRank + 1);\n\n\t\t\tfor (var i = cell.minRank + 1; i < cell.maxRank - 1; i++)\n\t\t\t{\n\t\t\t\t// Attempt to straight out the control point on the\n\t\t\t\t// next segment up with the current control point.\n\t\t\t\tvar nextX = cell.getX(i + 1);\n\n\t\t\t\tif (currentX == nextX)\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = currentX;\n\t\t\t\t\tupSegCount++;\n\t\t\t\t}\n\t\t\t\telse if (this.repositionValid(model, cell, i + 1, currentX))\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = currentX;\n\t\t\t\t\tupSegCount++;\n\t\t\t\t\t// Leave currentX at same value\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = nextX;\n\t\t\t\t\tcurrentX = nextX;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\n\t\t\tcurrentX = cell.getX(i);\n\n\t\t\tfor (var i = cell.maxRank - 1; i > cell.minRank + 1; i--)\n\t\t\t{\n\t\t\t\t// Attempt to straight out the control point on the\n\t\t\t\t// next segment down with the current control point.\n\t\t\t\tvar nextX = cell.getX(i - 1);\n\n\t\t\t\tif (currentX == nextX)\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = currentX;\n\t\t\t\t\tdownSegCount++;\n\t\t\t\t}\n\t\t\t\telse if (this.repositionValid(model, cell, i - 1, currentX))\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = currentX;\n\t\t\t\t\tdownSegCount++;\n\t\t\t\t\t// Leave currentX at same value\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = cell.getX(i-1);\n\t\t\t\t\tcurrentX = nextX;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (downSegCount > refSegCount || upSegCount > refSegCount)\n\t\t\t{\n\t\t\t\tif (downSegCount >= upSegCount)\n\t\t\t\t{\n\t\t\t\t\t// Apply down calculation values\n\t\t\t\t\tfor (var i = cell.maxRank - 2; i > cell.minRank; i--)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell.setX(i, downXPositions[i - cell.minRank - 1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (upSegCount > downSegCount)\n\t\t\t\t{\n\t\t\t\t\t// Apply up calculation values\n\t\t\t\t\tfor (var i = cell.minRank + 2; i < cell.maxRank; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell.setX(i, upXPositions[i - cell.minRank - 2]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Neither direction provided a favourable result\n\t\t\t\t\t// But both calculations are better than the\n\t\t\t\t\t// existing solution, so apply the one with minimal\n\t\t\t\t\t// offset to attached vertices at either end.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: repositionValid\n * \n * Determines whether or not a node may be moved to the specified x \n * position on the specified rank\n * \n * Parameters:\n *\n * model - the layout model\n * cell - the cell being analysed\n * rank - the layer of the cell\n * position - the x position being sought\n */\nmxCoordinateAssignment.prototype.repositionValid = function(model, cell, rank, position)\n{\n\tvar rankArray = model.ranks[rank];\n\tvar rankIndex = -1;\n\n\tfor (var i = 0; i < rankArray.length; i++)\n\t{\n\t\tif (cell == rankArray[i])\n\t\t{\n\t\t\trankIndex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (rankIndex < 0)\n\t{\n\t\treturn false;\n\t}\n\n\tvar currentX = cell.getGeneralPurposeVariable(rank);\n\n\tif (position < currentX)\n\t{\n\t\t// Trying to move node to the left.\n\t\tif (rankIndex == 0)\n\t\t{\n\t\t\t// Left-most node, can move anywhere\n\t\t\treturn true;\n\t\t}\n\n\t\tvar leftCell = rankArray[rankIndex - 1];\n\t\tvar leftLimit = leftCell.getGeneralPurposeVariable(rank);\n\t\tleftLimit = leftLimit + leftCell.width / 2\n\t\t\t\t+ this.intraCellSpacing + cell.width / 2;\n\n\t\tif (leftLimit <= position)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\telse if (position > currentX)\n\t{\n\t\t// Trying to move node to the right.\n\t\tif (rankIndex == rankArray.length - 1)\n\t\t{\n\t\t\t// Right-most node, can move anywhere\n\t\t\treturn true;\n\t\t}\n\n\t\tvar rightCell = rankArray[rankIndex + 1];\n\t\tvar rightLimit = rightCell.getGeneralPurposeVariable(rank);\n\t\trightLimit = rightLimit - rightCell.width / 2\n\t\t\t\t- this.intraCellSpacing - cell.width / 2;\n\n\t\tif (rightLimit >= position)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n\n/**\n * Function: setCellLocations\n * \n * Sets the cell locations in the facade to those stored after this layout\n * processing step has completed.\n * \n * Parameters:\n *\n * graph - the input graph\n * model - the layout model\n */\nmxCoordinateAssignment.prototype.setCellLocations = function(graph, model)\n{\n\tthis.rankTopY = [];\n\tthis.rankBottomY = [];\n\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.rankTopY[i] = Number.MAX_VALUE;\n\t\tthis.rankBottomY[i] = -Number.MAX_VALUE;\n\t}\n\t\n\tvar vertices = model.vertexMapper.getValues();\n\n\t// Process vertices all first, since they define the lower and \n\t// limits of each rank. Between these limits lie the channels\n\t// where the edges can be routed across the graph\n\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tthis.setVertexLocation(vertices[i]);\n\t}\n\t\n\t// Post process edge styles. Needs the vertex locations set for initial\n\t// values of the top and bottoms of each rank\n\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.ORTHOGONAL\n\t\t\t|| this.layout.edgeStyle == mxHierarchicalEdgeStyle.POLYLINE\n\t\t\t|| this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t{\n\t\tthis.localEdgeProcessing(model);\n\t}\n\n\tvar edges = model.edgeMapper.getValues();\n\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tthis.setEdgePosition(edges[i]);\n\t}\n};\n\n/**\n * Function: localEdgeProcessing\n * \n * Separates the x position of edges as they connect to vertices\n * \n * Parameters:\n *\n * model - the layout model\n */\nmxCoordinateAssignment.prototype.localEdgeProcessing = function(model)\n{\n\t// Iterate through each vertex, look at the edges connected in\n\t// both directions.\n\tfor (var rankIndex = 0; rankIndex < model.ranks.length; rankIndex++)\n\t{\n\t\tvar rank = model.ranks[rankIndex];\n\n\t\tfor (var cellIndex = 0; cellIndex < rank.length; cellIndex++)\n\t\t{\n\t\t\tvar cell = rank[cellIndex];\n\n\t\t\tif (cell.isVertex())\n\t\t\t{\n\t\t\t\tvar currentCells = cell.getPreviousLayerConnectedCells(rankIndex);\n\n\t\t\t\tvar currentRank = rankIndex - 1;\n\n\t\t\t\t// Two loops, last connected cells, and next\n\t\t\t\tfor (var k = 0; k < 2; k++)\n\t\t\t\t{\n\t\t\t\t\tif (currentRank > -1\n\t\t\t\t\t\t\t&& currentRank < model.ranks.length\n\t\t\t\t\t\t\t&& currentCells != null\n\t\t\t\t\t\t\t&& currentCells.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar sortedCells = [];\n\n\t\t\t\t\t\tfor (var j = 0; j < currentCells.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar sorter = new WeightedCellSorter(\n\t\t\t\t\t\t\t\t\tcurrentCells[j], currentCells[j].getX(currentRank));\n\t\t\t\t\t\t\tsortedCells.push(sorter);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\t\t\t\t\t\tvar leftLimit = cell.x[0] - cell.width / 2;\n\t\t\t\t\t\tvar rightLimit = leftLimit + cell.width;\n\n\t\t\t\t\t\t// Connected edge count starts at 1 to allow for buffer\n\t\t\t\t\t\t// with edge of vertex\n\t\t\t\t\t\tvar connectedEdgeCount = 0;\n\t\t\t\t\t\tvar connectedEdgeGroupCount = 0;\n\t\t\t\t\t\tvar connectedEdges = [];\n\t\t\t\t\t\t// Calculate width requirements for all connected edges\n\t\t\t\t\t\tfor (var j = 0; j < sortedCells.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar innerCell = sortedCells[j].cell;\n\t\t\t\t\t\t\tvar connections;\n\n\t\t\t\t\t\t\tif (innerCell.isVertex())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Get the connecting edge\n\t\t\t\t\t\t\t\tif (k == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnections = cell.connectsAsSource;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnections = cell.connectsAsTarget;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfor (var connIndex = 0; connIndex < connections.length; connIndex++)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (connections[connIndex].source == innerCell\n\t\t\t\t\t\t\t\t\t\t\t|| connections[connIndex].target == innerCell)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tconnectedEdgeCount += connections[connIndex].edges\n\t\t\t\t\t\t\t\t\t\t\t\t.length;\n\t\t\t\t\t\t\t\t\t\tconnectedEdgeGroupCount++;\n\n\t\t\t\t\t\t\t\t\t\tconnectedEdges.push(connections[connIndex]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconnectedEdgeCount += innerCell.edges.length;\n\t\t\t\t\t\t\t\tconnectedEdgeGroupCount++;\n\t\t\t\t\t\t\t\tconnectedEdges.push(innerCell);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar requiredWidth = (connectedEdgeCount + 1)\n\t\t\t\t\t\t\t\t* this.prefHozEdgeSep;\n\n\t\t\t\t\t\t// Add a buffer on the edges of the vertex if the edge count allows\n\t\t\t\t\t\tif (cell.width > requiredWidth\n\t\t\t\t\t\t\t\t+ (2 * this.prefHozEdgeSep))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tleftLimit += this.prefHozEdgeSep;\n\t\t\t\t\t\t\trightLimit -= this.prefHozEdgeSep;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar availableWidth = rightLimit - leftLimit;\n\t\t\t\t\t\tvar edgeSpacing = availableWidth / connectedEdgeCount;\n\n\t\t\t\t\t\tvar currentX = leftLimit + edgeSpacing / 2.0;\n\t\t\t\t\t\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\t\t\t\t\t\tvar maxYOffset = 0;\n\n\t\t\t\t\t\tfor (var j = 0; j < connectedEdges.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar numActualEdges = connectedEdges[j].edges\n\t\t\t\t\t\t\t\t\t.length;\n\t\t\t\t\t\t\tvar pos = this.jettyPositions[connectedEdges[j].ids[0]];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (pos == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpos = [];\n\t\t\t\t\t\t\t\tthis.jettyPositions[connectedEdges[j].ids[0]] = pos;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (j < connectedEdgeCount / 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (j > connectedEdgeCount / 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Ignore the case if equals, this means the second of 2\n\t\t\t\t\t\t\t// jettys with the same y (even number of edges)\n\n\t\t\t\t\t\t\tfor (var m = 0; m < numActualEdges; m++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpos[m * 4 + k * 2] = currentX;\n\t\t\t\t\t\t\t\tcurrentX += edgeSpacing;\n\t\t\t\t\t\t\t\tpos[m * 4 + k * 2 + 1] = currentYOffset;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmaxYOffset = Math.max(maxYOffset,\n\t\t\t\t\t\t\t\t\tcurrentYOffset);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentCells = cell.getNextLayerConnectedCells(rankIndex);\n\n\t\t\t\t\tcurrentRank = rankIndex + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: setEdgePosition\n * \n * Fixes the control points\n */\nmxCoordinateAssignment.prototype.setEdgePosition = function(cell)\n{\n\t// For parallel edges we need to seperate out the points a\n\t// little\n\tvar offsetX = 0;\n\t// Only set the edge control points once\n\n\tif (cell.temp[0] != 101207)\n\t{\n\t\tvar maxRank = cell.maxRank;\n\t\tvar minRank = cell.minRank;\n\t\t\n\t\tif (maxRank == minRank)\n\t\t{\n\t\t\tmaxRank = cell.source.maxRank;\n\t\t\tminRank = cell.target.minRank;\n\t\t}\n\t\t\n\t\tvar parallelEdgeCount = 0;\n\t\tvar jettys = this.jettyPositions[cell.ids[0]];\n\n\t\tvar source = cell.isReversed ? cell.target.cell : cell.source.cell;\n\t\tvar graph = this.layout.graph;\n\t\tvar layoutReversed = this.orientation == mxConstants.DIRECTION_EAST\n\t\t\t\t|| this.orientation == mxConstants.DIRECTION_SOUTH;\n\n\t\tfor (var i = 0; i < cell.edges.length; i++)\n\t\t{\n\t\t\tvar realEdge = cell.edges[i];\n\t\t\tvar realSource = this.layout.getVisibleTerminal(realEdge, true);\n\n\t\t\t//List oldPoints = graph.getPoints(realEdge);\n\t\t\tvar newPoints = [];\n\n\t\t\t// Single length reversed edges end up with the jettys in the wrong\n\t\t\t// places. Since single length edges only have jettys, not segment\n\t\t\t// control points, we just say the edge isn't reversed in this section\n\t\t\tvar reversed = cell.isReversed;\n\t\t\t\n\t\t\tif (realSource != source)\n\t\t\t{\n\t\t\t\t// The real edges include all core model edges and these can go\n\t\t\t\t// in both directions. If the source of the hierarchical model edge\n\t\t\t\t// isn't the source of the specific real edge in this iteration\n\t\t\t\t// treat if as reversed\n\t\t\t\treversed = !reversed;\n\t\t\t}\n\n\t\t\t// First jetty of edge\n\t\t\tif (jettys != null)\n\t\t\t{\n\t\t\t\tvar arrayOffset = reversed ? 2 : 0;\n\t\t\t\tvar y = reversed ?\n\t\t\t\t\t\t(layoutReversed ? this.rankBottomY[minRank] : this.rankTopY[minRank]) :\n\t\t\t\t\t\t\t(layoutReversed ? this.rankTopY[maxRank] : this.rankBottomY[maxRank]);\n\t\t\t\tvar jetty = jettys[parallelEdgeCount * 4 + 1 + arrayOffset];\n\t\t\t\t\n\t\t\t\tif (reversed != layoutReversed)\n\t\t\t\t{\n\t\t\t\t\tjetty = -jetty;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ty += jetty;\n\t\t\t\tvar x = jettys[parallelEdgeCount * 4 + arrayOffset];\n\t\t\t\t\n\t\t\t\tvar modelSource = graph.model.getTerminal(realEdge, true);\n\n\t\t\t\tif (this.layout.isPort(modelSource) && graph.model.getParent(modelSource) == realSource)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.view.getState(modelSource);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = state.x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = realSource.geometry.x + cell.source.width * modelSource.geometry.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH\n\t\t\t\t\t\t|| this.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\t\t\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(x, y + jetty));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(y, x));\n\t\t\t\t\t\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(y + jetty, x));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Declare variables to define loop through edge points and \n\t\t\t// change direction if edge is reversed\n\n\t\t\tvar loopStart = cell.x.length - 1;\n\t\t\tvar loopLimit = -1;\n\t\t\tvar loopDelta = -1;\n\t\t\tvar currentRank = cell.maxRank - 1;\n\n\t\t\tif (reversed)\n\t\t\t{\n\t\t\t\tloopStart = 0;\n\t\t\t\tloopLimit = cell.x.length;\n\t\t\t\tloopDelta = 1;\n\t\t\t\tcurrentRank = cell.minRank + 1;\n\t\t\t}\n\t\t\t// Reversed edges need the points inserted in\n\t\t\t// reverse order\n\t\t\tfor (var j = loopStart; (cell.maxRank != cell.minRank) && j != loopLimit; j += loopDelta)\n\t\t\t{\n\t\t\t\t// The horizontal position in a vertical layout\n\t\t\t\tvar positionX = cell.x[j] + offsetX;\n\n\t\t\t\t// Work out the vertical positions in a vertical layout\n\t\t\t\t// in the edge buffer channels above and below this rank\n\t\t\t\tvar topChannelY = (this.rankTopY[currentRank] + this.rankBottomY[currentRank + 1]) / 2.0;\n\t\t\t\tvar bottomChannelY = (this.rankTopY[currentRank - 1] + this.rankBottomY[currentRank]) / 2.0;\n\n\t\t\t\tif (reversed)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = topChannelY;\n\t\t\t\t\ttopChannelY = bottomChannelY;\n\t\t\t\t\tbottomChannelY = tmp;\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(positionX, topChannelY));\n\t\t\t\t\tnewPoints.push(new mxPoint(positionX, bottomChannelY));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(topChannelY, positionX));\n\t\t\t\t\tnewPoints.push(new mxPoint(bottomChannelY, positionX));\n\t\t\t\t}\n\n\t\t\t\tthis.limitX = Math.max(this.limitX, positionX);\n\t\t\t\tcurrentRank += loopDelta;\n\t\t\t}\n\n\t\t\t// Second jetty of edge\n\t\t\tif (jettys != null)\n\t\t\t{\n\t\t\t\tvar arrayOffset = reversed ? 2 : 0;\n\t\t\t\tvar rankY = reversed ?\n\t\t\t\t\t\t(layoutReversed ? this.rankTopY[maxRank] : this.rankBottomY[maxRank]) :\n\t\t\t\t\t\t\t(layoutReversed ? this.rankBottomY[minRank] : this.rankTopY[minRank]);\n\t\t\t\tvar jetty = jettys[parallelEdgeCount * 4 + 3 - arrayOffset];\n\t\t\t\t\n\t\t\t\tif (reversed != layoutReversed)\n\t\t\t\t{\n\t\t\t\t\tjetty = -jetty;\n\t\t\t\t}\n\t\t\t\tvar y = rankY - jetty;\n\t\t\t\tvar x = jettys[parallelEdgeCount * 4 + 2 - arrayOffset];\n\t\t\t\t\n\t\t\t\tvar modelTarget = graph.model.getTerminal(realEdge, false);\n\t\t\t\tvar realTarget = this.layout.getVisibleTerminal(realEdge, false);\n\n\t\t\t\tif (this.layout.isPort(modelTarget) && graph.model.getParent(modelTarget) == realTarget)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.view.getState(modelTarget);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = state.x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = realTarget.geometry.x + cell.target.width * modelTarget.geometry.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(x, y - jetty));\n\t\t\t\t\t}\n\n\t\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(y - jetty, x));\n\t\t\t\t\t}\n\n\t\t\t\t\tnewPoints.push(new mxPoint(y, x));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cell.isReversed)\n\t\t\t{\n\t\t\t\tthis.processReversedEdge(cell, realEdge);\n\t\t\t}\n\n\t\t\tthis.layout.setEdgePoints(realEdge, newPoints);\n\n\t\t\t// Increase offset so next edge is drawn next to\n\t\t\t// this one\n\t\t\tif (offsetX == 0.0)\n\t\t\t{\n\t\t\t\toffsetX = this.parallelEdgeSpacing;\n\t\t\t}\n\t\t\telse if (offsetX > 0)\n\t\t\t{\n\t\t\t\toffsetX = -offsetX;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\toffsetX = -offsetX + this.parallelEdgeSpacing;\n\t\t\t}\n\t\t\t\n\t\t\tparallelEdgeCount++;\n\t\t}\n\n\t\tcell.temp[0] = 101207;\n\t}\n};\n\n\n/**\n * Function: setVertexLocation\n * \n * Fixes the position of the specified vertex.\n * \n * Parameters:\n * \n * cell - the vertex to position\n */\nmxCoordinateAssignment.prototype.setVertexLocation = function(cell)\n{\n\tvar realCell = cell.cell;\n\tvar positionX = cell.x[0] - cell.width / 2;\n\tvar positionY = cell.y[0] - cell.height / 2;\n\n\tthis.rankTopY[cell.minRank] = Math.min(this.rankTopY[cell.minRank], positionY);\n\tthis.rankBottomY[cell.minRank] = Math.max(this.rankBottomY[cell.minRank],\n\t\t\tpositionY + cell.height);\n\n\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tthis.layout.setVertexLocation(realCell, positionX, positionY);\n\t}\n\telse\n\t{\n\t\tthis.layout.setVertexLocation(realCell, positionY, positionX);\n\t}\n\n\tthis.limitX = Math.max(this.limitX, positionX + cell.width);\n};\n\n/**\n * Function: processReversedEdge\n * \n * Hook to add additional processing\n * \n * Parameters:\n * \n * edge - the hierarchical model edge\n * realEdge - the real edge in the graph\n */\nmxCoordinateAssignment.prototype.processReversedEdge = function(graph, model)\n{\n\t// hook for subclassers\n};\n\n__mxOutput.mxCoordinateAssignment = typeof mxCoordinateAssignment !== 'undefined' ? mxCoordinateAssignment : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneOrdering\n * \n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n * \n * Constructor: mxSwimlaneOrdering\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxSwimlaneOrdering(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxSwimlaneOrdering.prototype = new mxHierarchicalLayoutStage();\nmxSwimlaneOrdering.prototype.constructor = mxSwimlaneOrdering;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxSwimlaneOrdering.prototype.layout = null;\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxSwimlaneOrdering.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodes = mxUtils.clone(model.vertexMapper, null, true);\n\t\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\t\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\t\t\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\t// Ancestor hashes only line up within a swimlane\n\t\tvar isAncestor = parent != null && parent.swimlaneIndex == node.swimlaneIndex && node.isAncestor(parent);\n\n\t\t// If the source->target swimlane indices go from higher to\n\t\t// lower, the edge is reverse\n\t\tvar reversedOverSwimlane = parent != null && connectingEdge != null &&\n\t\t\t\t\t\tparent.swimlaneIndex < node.swimlaneIndex && connectingEdge.source == node;\n\n\t\tif (isAncestor)\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\t\telse if (reversedOverSwimlane)\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsTarget);\n\t\t\tnode.connectsAsTarget.push(connectingEdge);\n\t\t\tparent.connectsAsSource.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsSource);\n\t\t}\n\t\t\n\t\tvar cellId = mxCellPath.create(node.cell);\n\t\tseenNodes[cellId] = node;\n\t\tdelete unseenNodes[cellId];\n\t}, rootsArray, true, null);\n};\n\n__mxOutput.mxSwimlaneOrdering = typeof mxSwimlaneOrdering !== 'undefined' ? mxSwimlaneOrdering : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxHierarchicalLayout\n * \n * A hierarchical layout algorithm.\n * \n * Constructor: mxHierarchicalLayout\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * orientation - Optional constant that defines the orientation of this\n * layout.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxHierarchicalLayout(graph, orientation, deterministic)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.orientation = (orientation != null) ? orientation : mxConstants.DIRECTION_NORTH;\n\tthis.deterministic = (deterministic != null) ? deterministic : true;\n};\n\nvar mxHierarchicalEdgeStyle =\n{\n\tORTHOGONAL: 1,\n\tPOLYLINE: 2,\n\tSTRAIGHT: 3,\n\tCURVE: 4\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxHierarchicalLayout.prototype = new mxGraphLayout();\nmxHierarchicalLayout.prototype.constructor = mxHierarchicalLayout;\n\n/**\n * Variable: roots\n * \n * Holds the array of <mxCell> that this layout contains.\n */\nmxHierarchicalLayout.prototype.roots = null;\n\n/**\n * Variable: resizeParent\n * \n * Specifies if the parent should be resized after the layout so that it\n * contains all the child cells. Default is false. See also <parentBorder>.\n */\nmxHierarchicalLayout.prototype.resizeParent = false;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxHierarchicalLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: moveParent\n * \n * Specifies if the parent should be moved if <resizeParent> is enabled.\n * Default is false.\n */\nmxHierarchicalLayout.prototype.moveParent = false;\n\n/**\n * Variable: parentBorder\n * \n * The border to be added around the children if the parent is to be\n * resized using <resizeParent>. Default is 0.\n */\nmxHierarchicalLayout.prototype.parentBorder = 0;\n\n/**\n * Variable: intraCellSpacing\n * \n * The spacing buffer added between cells on the same layer. Default is 30.\n */\nmxHierarchicalLayout.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The spacing buffer added between cell on adjacent layers. Default is 100.\n */\nmxHierarchicalLayout.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: interHierarchySpacing\n * \n * The spacing buffer between unconnected hierarchies. Default is 60.\n */\nmxHierarchicalLayout.prototype.interHierarchySpacing = 60;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxHierarchicalLayout.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: orientation\n * \n * The position of the root node(s) relative to the laid out graph in.\n * Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxHierarchicalLayout.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxHierarchicalLayout.prototype.fineTuning = true;\n\n/**\n * \n * Variable: tightenToSource\n * \n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells. Default is true.\n */\nmxHierarchicalLayout.prototype.tightenToSource = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxHierarchicalLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: traverseAncestors\n * \n * Whether or not to drill into child cells and layout in reverse\n * group order. This also cause the layout to navigate edges whose \n * terminal vertices have different parents but are in the same \n * ancestry chain. Default is true.\n */\nmxHierarchicalLayout.prototype.traverseAncestors = true;\n\n/**\n * Variable: model\n * \n * The internal <mxGraphHierarchyModel> formed of the layout.\n */\nmxHierarchicalLayout.prototype.model = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgeSourceTermCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesTargetTermCache = null;\n\n/**\n * Variable: edgeStyle\n * \n * The style to apply between cell layers to edge segments.\n * Default is <mxHierarchicalEdgeStyle.POLYLINE>.\n */\nmxHierarchicalLayout.prototype.edgeStyle = mxHierarchicalEdgeStyle.POLYLINE;\n\n/**\n * Function: getModel\n * \n * Returns the internal <mxGraphHierarchyModel> for this layout algorithm.\n */\nmxHierarchicalLayout.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: execute\n * \n * Executes the layout for the children of the specified parent.\n * \n * Parameters:\n * \n * parent - Parent <mxCell> that contains the children to be laid out.\n * roots - Optional starting roots of the layout.\n */\nmxHierarchicalLayout.prototype.execute = function(parent, roots)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.model;\n\tthis.edgesCache = new mxDictionary();\n\tthis.edgeSourceTermCache = new mxDictionary();\n\tthis.edgesTargetTermCache = new mxDictionary();\n\n\tif (roots != null && !(roots instanceof Array))\n\t{\n\t\troots = [roots];\n\t}\n\t\n\t// If the roots are set and the parent is set, only\n\t// use the roots that are some dependent of the that\n\t// parent.\n\t// If just the root are set, use them as-is\n\t// If just the parent is set use it's immediate\n\t// children as the initial set\n\n\tif (roots == null && parent == null)\n\t{\n\t\t// TODO indicate the problem\n\t\treturn;\n\t}\n\t\n\t//  Maintaining parent location\n\tthis.parentX = null;\n\tthis.parentY = null;\n\t\n\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tthis.parentX = geo.x;\n\t\t\tthis.parentY = geo.y;\n\t\t}\n\t}\n\t\n\tif (roots != null)\n\t{\n\t\tvar rootsCopy = [];\n\n\t\tfor (var i = 0; i < roots.length; i++)\n\t\t{\n\t\t\tvar ancestor = parent != null ? model.isAncestor(parent, roots[i]) : true;\n\t\t\t\n\t\t\tif (ancestor && model.isVertex(roots[i]))\n\t\t\t{\n\t\t\t\trootsCopy.push(roots[i]);\n\t\t\t}\n\t\t}\n\n\t\tthis.roots = rootsCopy;\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tthis.run(parent);\n\t\t\n\t\tif (this.resizeParent && !this.graph.isCellCollapsed(parent))\n\t\t{\n\t\t\tthis.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n\t\t}\n\t\t\n\t\t// Maintaining parent location\n\t\tif (this.parentX != null && this.parentY != null)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.x = this.parentX;\n\t\t\t\tgeo.y = this.parentY;\n\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: findRoots\n * \n * Returns all visible children in the given parent which do not have\n * incoming edges. If the result is empty then the children with the\n * maximum difference between incoming and outgoing edges are returned.\n * This takes into account edges that are being promoted to the given\n * root due to invisible children or collapsed cells.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * vertices - array of vertices to limit search to\n */\nmxHierarchicalLayout.prototype.findRoots = function(parent, vertices)\n{\n\tvar roots = [];\n\t\n\tif (parent != null && vertices != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar best = null;\n\t\tvar maxDiff = -100000;\n\t\t\n\t\tfor (var i in vertices)\n\t\t{\n\t\t\tvar cell = vertices[i];\n\n\t\t\tif (model.isVertex(cell) && this.graph.isCellVisible(cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getEdges(cell);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var k = 0; k < conns.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.getVisibleTerminal(conns[k], true);\n\n\t\t\t\t\tif (src == cell)\n\t\t\t\t\t{\n\t\t\t\t\t\tfanOut++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tfanIn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fanIn == 0 && fanOut > 0)\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: getEdges\n * \n * Returns the connected edges for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n */\nmxHierarchicalLayout.prototype.getEdges = function(cell)\n{\n\tvar cachedEdges = this.edgesCache.get(cell);\n\t\n\tif (cachedEdges != null)\n\t{\n\t\treturn cachedEdges;\n\t}\n\n\tvar model = this.graph.model;\n\tvar edges = [];\n\tvar isCollapsed = this.graph.isCellCollapsed(cell);\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\n\t\tif (this.isPort(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t\telse if (isCollapsed || !this.graph.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t}\n\n\tedges = edges.concat(model.getEdges(cell, true, true));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar source = this.getVisibleTerminal(edges[i], true);\n\t\tvar target = this.getVisibleTerminal(edges[i], false);\n\t\t\n\t\tif ((source == target) ||\n\t\t\t\t((source != target) &&\n\t\t\t\t\t\t((target == cell && (this.parent == null || this.isAncestor(this.parent, source, this.traverseAncestors))) ||\n\t\t\t\t\t\t \t(source == cell && (this.parent == null || this.isAncestor(this.parent, target, this.traverseAncestors))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\tthis.edgesCache.put(cell, result);\n\n\treturn result;\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Helper function to return visible terminal for edge allowing for ports\n * \n * Parameters:\n * \n * edge - <mxCell> whose edges should be returned.\n * source - Boolean that specifies whether the source or target terminal is to be returned\n */\nmxHierarchicalLayout.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar terminalCache = this.edgesTargetTermCache;\n\t\n\tif (source)\n\t{\n\t\tterminalCache = this.edgeSourceTermCache;\n\t}\n\n\tvar term = terminalCache.get(edge);\n\n\tif (term != null)\n\t{\n\t\treturn term;\n\t}\n\n\tvar state = this.graph.view.getState(edge);\n\t\n\tvar terminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t\n\tif (terminal == null)\n\t{\n\t\tterminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t}\n\n\tif (terminal != null)\n\t{\n\t\tif (this.isPort(terminal))\n\t\t{\n\t\t\tterminal = this.graph.model.getParent(terminal);\n\t\t}\n\t\t\n\t\tterminalCache.put(edge, terminal);\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: run\n * \n * The API method used to exercise the layout upon the graph description\n * and produce a separate description of the vertex position and edge\n * routing changes made. It runs each stage of the layout that has been\n * created.\n */\nmxHierarchicalLayout.prototype.run = function(parent)\n{\n\t// Separate out unconnected hierarchies\n\tvar hierarchyVertices = [];\n\tvar allVertexSet = [];\n\n\tif (this.roots == null && parent != null)\n\t{\n\t\tvar filledVertexSet = Object();\n\t\tthis.filterDescendants(parent, filledVertexSet);\n\n\t\tthis.roots = [];\n\t\tvar filledVertexSetEmpty = true;\n\n\t\t// Poor man's isSetEmpty\n\t\tfor (var key in filledVertexSet)\n\t\t{\n\t\t\tif (filledVertexSet[key] != null)\n\t\t\t{\n\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\twhile (!filledVertexSetEmpty)\n\t\t{\n\t\t\tvar candidateRoots = this.findRoots(parent, filledVertexSet);\n\t\t\t\n\t\t\t// If the candidate root is an unconnected group cell, remove it from\n\t\t\t// the layout. We may need a custom set that holds such groups and forces\n\t\t\t// them to be processed for resizing and/or moving.\n\t\t\t\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tvar vertexSet = Object();\n\t\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\t\tthis.traverse(candidateRoots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\t\thierarchyVertices, filledVertexSet);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tthis.roots.push(candidateRoots[i]);\n\t\t\t}\n\t\t\t\n\t\t\tfilledVertexSetEmpty = true;\n\t\t\t\n\t\t\t// Poor man's isSetEmpty\n\t\t\tfor (var key in filledVertexSet)\n\t\t\t{\n\t\t\t\tif (filledVertexSet[key] != null)\n\t\t\t\t{\n\t\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Find vertex set as directed traversal from roots\n\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar vertexSet = Object();\n\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\tthis.traverse(this.roots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\thierarchyVertices, null);\n\t\t}\n\t}\n\n\t// Iterate through the result removing parents who have children in this layout\n\t\n\t// Perform a layout for each seperate hierarchy\n\t// Track initial coordinate x-positioning\n\tvar initialX = 0;\n\n\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t{\n\t\tvar vertexSet = hierarchyVertices[i];\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var key in vertexSet)\n\t\t{\n\t\t\ttmp.push(vertexSet[key]);\n\t\t}\n\t\t\n\t\tthis.model = new mxGraphHierarchyModel(this, tmp, this.roots,\n\t\t\tparent, this.tightenToSource);\n\n\t\tthis.cycleStage(parent);\n\t\tthis.layeringStage();\n\t\t\n\t\tthis.crossingStage(parent);\n\t\tinitialX = this.placementStage(initialX, parent);\n\t}\n};\n\n/**\n * Function: filterDescendants\n * \n * Creates an array of descendant cells\n */\nmxHierarchicalLayout.prototype.filterDescendants = function(cell, result)\n{\n\tvar model = this.graph.model;\n\n\tif (model.isVertex(cell) && cell != this.parent && this.graph.isCellVisible(cell))\n\t{\n\t\tresult[mxObjectIdentity.get(cell)] = cell;\n\t}\n\n\tif (this.traverseAncestors || cell == this.parent\n\t\t\t&& this.graph.isCellVisible(cell))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\t// Ignore ports in the layout vertex list, they are dealt with\n\t\t\t// in the traversal mechanisms\n\t\t\tif (!this.isPort(child))\n\t\t\t{\n\t\t\t\tthis.filterDescendants(child, result);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, its parent is the connecting vertex in terms of graph traversal\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxHierarchicalLayout.prototype.isPort = function(cell)\n{\n\tif (cell != null && cell.geometry != null)\n\t{\n\t\treturn cell.geometry.relative;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and ports.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxHierarchicalLayout.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar src = this.getVisibleTerminal(edges[i], true);\n\t\tvar trg = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * allVertices - Array of cell paths for the visited cells.\n */\nmxHierarchicalLayout.prototype.traverse = function(vertex, directed, edge, allVertices, currentComp,\n\t\t\t\t\t\t\t\t\t\t\thierarchyVertices, filledVertexSet)\n{\n\tif (vertex != null && allVertices != null)\n\t{\n\t\t// Has this vertex been seen before in any traversal\n\t\t// And if the filled vertex set is populated, only \n\t\t// process vertices in that it contains\n\t\tvar vertexID = mxObjectIdentity.get(vertex);\n\t\t\n\t\tif ((allVertices[vertexID] == null)\n\t\t\t\t&& (filledVertexSet == null ? true : filledVertexSet[vertexID] != null))\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\tcurrentComp[vertexID] = vertex;\n\t\t\t}\n\t\t\tif (allVertices[vertexID] == null)\n\t\t\t{\n\t\t\t\tallVertices[vertexID] = vertex;\n\t\t\t}\n\n\t\t\tif (filledVertexSet !== null)\n\t\t\t{\n\t\t\t\tdelete filledVertexSet[vertexID];\n\t\t\t}\n\n\t\t\tvar edges = this.getEdges(vertex);\n\t\t\tvar edgeIsSource = [];\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tedgeIsSource[i] = (this.getVisibleTerminal(edges[i], true) == vertex);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tif (!directed || edgeIsSource[i])\n\t\t\t\t{\n\t\t\t\t\tvar next = this.getVisibleTerminal(edges[i], !edgeIsSource[i]);\n\t\t\t\t\t\n\t\t\t\t\t// Check whether there are more edges incoming from the target vertex than outgoing\n\t\t\t\t\t// The hierarchical model treats bi-directional parallel edges as being sourced\n\t\t\t\t\t// from the more \"sourced\" terminal. If the directions are equal in number, the direction\n\t\t\t\t\t// is that of the natural direction from the roots of the layout.\n\t\t\t\t\t// The checks below are slightly more verbose than need be for performance reasons\n\t\t\t\t\tvar netCount = 1;\n\n\t\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (j == i)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar isSource2 = edgeIsSource[j];\n\t\t\t\t\t\t\tvar otherTerm = this.getVisibleTerminal(edges[j], !isSource2);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (otherTerm == next)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (isSource2)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnetCount++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnetCount--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (netCount >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrentComp = this.traverse(next, directed, edges[i], allVertices,\n\t\t\t\t\t\t\tcurrentComp, hierarchyVertices,\n\t\t\t\t\t\t\tfilledVertexSet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\t// We've seen this vertex before, but not in the current component\n\t\t\t\t// This component and the one it's in need to be merged\n\n\t\t\t\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar comp = hierarchyVertices[i];\n\n\t\t\t\t\tif (comp[vertexID] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var key in comp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentComp[key] = comp[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Remove the current component from the hierarchy set\n\t\t\t\t\t\thierarchyVertices.splice(i, 1);\n\t\t\t\t\t\treturn currentComp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn currentComp;\n};\n\n/**\n * Function: cycleStage\n * \n * Executes the cycle stage using mxMinimumCycleRemover.\n */\nmxHierarchicalLayout.prototype.cycleStage = function(parent)\n{\n\tvar cycleStage = new mxMinimumCycleRemover(this);\n\tcycleStage.execute(parent);\n};\n\n/**\n * Function: layeringStage\n * \n * Implements first stage of a Sugiyama layout.\n */\nmxHierarchicalLayout.prototype.layeringStage = function()\n{\n\tthis.model.initialRank();\n\tthis.model.fixRanks();\n};\n\n/**\n * Function: crossingStage\n * \n * Executes the crossing stage using mxMedianHybridCrossingReduction.\n */\nmxHierarchicalLayout.prototype.crossingStage = function(parent)\n{\n\tvar crossingStage = new mxMedianHybridCrossingReduction(this);\n\tcrossingStage.execute(parent);\n};\n\n/**\n * Function: placementStage\n * \n * Executes the placement stage using mxCoordinateAssignment.\n */\nmxHierarchicalLayout.prototype.placementStage = function(initialX, parent)\n{\n\tvar placementStage = new mxCoordinateAssignment(this, this.intraCellSpacing,\n\t\t\tthis.interRankCellSpacing, this.orientation, initialX,\n\t\t\tthis.parallelEdgeSpacing);\n\tplacementStage.fineTuning = this.fineTuning;\n\tplacementStage.execute(parent);\n\t\n\treturn placementStage.limitX + this.interHierarchySpacing;\n};\n\n__mxOutput.mxHierarchicalLayout = typeof mxHierarchicalLayout !== 'undefined' ? mxHierarchicalLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneLayout\n * \n * A hierarchical layout algorithm.\n * \n * Constructor: mxSwimlaneLayout\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * orientation - Optional constant that defines the orientation of this\n * layout.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxSwimlaneLayout(graph, orientation, deterministic)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.orientation = (orientation != null) ? orientation : mxConstants.DIRECTION_NORTH;\n\tthis.deterministic = (deterministic != null) ? deterministic : true;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxSwimlaneLayout.prototype = new mxGraphLayout();\nmxSwimlaneLayout.prototype.constructor = mxSwimlaneLayout;\n\n/**\n * Variable: roots\n * \n * Holds the array of <mxCell> that this layout contains.\n */\nmxSwimlaneLayout.prototype.roots = null;\n\n/**\n * Variable: swimlanes\n * \n * Holds the array of <mxCell> of the ordered swimlanes to lay out\n */\nmxSwimlaneLayout.prototype.swimlanes = null;\n\n/**\n * Variable: dummyVertexWidth\n * \n * The cell width of any dummy vertices inserted\n */\nmxSwimlaneLayout.prototype.dummyVertexWidth = 50;\n\n/**\n * Variable: resizeParent\n * \n * Specifies if the parent should be resized after the layout so that it\n * contains all the child cells. Default is false. See also <parentBorder>.\n */\nmxSwimlaneLayout.prototype.resizeParent = false;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxSwimlaneLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: moveParent\n * \n * Specifies if the parent should be moved if <resizeParent> is enabled.\n * Default is false.\n */\nmxSwimlaneLayout.prototype.moveParent = false;\n\n/**\n * Variable: parentBorder\n * \n * The border to be added around the children if the parent is to be\n * resized using <resizeParent>. Default is 30.\n */\nmxSwimlaneLayout.prototype.parentBorder = 30;\n\n/**\n * Variable: intraCellSpacing\n * \n * The spacing buffer added between cells on the same layer. Default is 30.\n */\nmxSwimlaneLayout.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The spacing buffer added between cell on adjacent layers. Default is 100.\n */\nmxSwimlaneLayout.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: interHierarchySpacing\n * \n * The spacing buffer between unconnected hierarchies. Default is 60.\n */\nmxSwimlaneLayout.prototype.interHierarchySpacing = 60;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxSwimlaneLayout.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: orientation\n * \n * The position of the root node(s) relative to the laid out graph in.\n * Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxSwimlaneLayout.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxSwimlaneLayout.prototype.fineTuning = true;\n\n/**\n * Variable: tightenToSource\n * \n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells. Default is true.\n */\nmxSwimlaneLayout.prototype.tightenToSource = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxSwimlaneLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: traverseAncestors\n * \n * Whether or not to drill into child cells and layout in reverse\n * group order. This also cause the layout to navigate edges whose \n * terminal vertices have different parents but are in the same\n * ancestry chain. Default is true.\n */\nmxSwimlaneLayout.prototype.traverseAncestors = true;\n\n/**\n * Variable: model\n * \n * The internal <mxSwimlaneModel> formed of the layout.\n */\nmxSwimlaneLayout.prototype.model = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxSwimlaneLayout.prototype.edgesCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgeSourceTermCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesTargetTermCache = null;\n\n/**\n * Variable: edgeStyle\n * \n * The style to apply between cell layers to edge segments.\n * Default is <mxHierarchicalEdgeStyle.POLYLINE>.\n */\nmxHierarchicalLayout.prototype.edgeStyle = mxHierarchicalEdgeStyle.POLYLINE;\n\n/**\n * Function: getModel\n * \n * Returns the internal <mxSwimlaneModel> for this layout algorithm.\n */\nmxSwimlaneLayout.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: execute\n * \n * Executes the layout for the children of the specified parent.\n * \n * Parameters:\n * \n * parent - Parent <mxCell> that contains the children to be laid out.\n * swimlanes - Ordered array of swimlanes to be laid out\n */\nmxSwimlaneLayout.prototype.execute = function(parent, swimlanes)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.model;\n\tthis.edgesCache = new mxDictionary();\n\tthis.edgeSourceTermCache = new mxDictionary();\n\tthis.edgesTargetTermCache = new mxDictionary();\n\n\t// If the roots are set and the parent is set, only\n\t// use the roots that are some dependent of the that\n\t// parent.\n\t// If just the root are set, use them as-is\n\t// If just the parent is set use it's immediate\n\t// children as the initial set\n\n\tif (swimlanes == null || swimlanes.length < 1)\n\t{\n\t\t// TODO indicate the problem\n\t\treturn;\n\t}\n\n\tif (parent == null)\n\t{\n\t\tparent = model.getParent(swimlanes[0]);\n\t}\n\n\t//  Maintaining parent location\n\tthis.parentX = null;\n\tthis.parentY = null;\n\t\n\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tthis.parentX = geo.x;\n\t\t\tthis.parentY = geo.y;\n\t\t}\n\t}\n\n\tthis.swimlanes = swimlanes;\n\tvar dummyVertices = [];\n\t// Check the swimlanes all have vertices\n\t// in them\n\tfor (var i = 0; i < swimlanes.length; i++)\n\t{\n\t\tvar children = this.graph.getChildCells(swimlanes[i]);\n\t\t\n\t\tif (children == null || children.length == 0)\n\t\t{\n\t\t\tvar vertex = this.graph.insertVertex(swimlanes[i], null, null, 0, 0, this.dummyVertexWidth, 0);\n\t\t\tdummyVertices.push(vertex);\n\t\t}\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tthis.run(parent);\n\t\t\n\t\tif (this.resizeParent && !this.graph.isCellCollapsed(parent))\n\t\t{\n\t\t\tthis.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n\t\t}\n\t\t\n\t\t// Maintaining parent location\n\t\tif (this.parentX != null && this.parentY != null)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.x = this.parentX;\n\t\t\t\tgeo.y = this.parentY;\n\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t}\n\t\t}\n\n\t\tthis.graph.removeCells(dummyVertices);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: updateGroupBounds\n * \n * Updates the bounds of the given array of groups so that it includes\n * all child vertices.\n * \n */\nmxSwimlaneLayout.prototype.updateGroupBounds = function()\n{\n\t// Get all vertices and edge in the layout\n\tvar cells = [];\n\tvar model = this.model;\n\t\n\tfor (var key in model.edgeMapper)\n\t{\n\t\tvar edge = model.edgeMapper[key];\n\t\t\n\t\tfor (var i = 0; i < edge.edges.length; i++)\n\t\t{\n\t\t\tcells.push(edge.edges[i]);\n\t\t}\n\t}\n\t\n\tvar layoutBounds = this.graph.getBoundingBoxFromGeometry(cells, true);\n\tvar childBounds = [];\n\n\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t{\n\t\tvar lane = this.swimlanes[i];\n\t\tvar geo = this.graph.getCellGeometry(lane);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tvar children = this.graph.getChildCells(lane);\n\t\t\t\n\t\t\tvar size = (this.graph.isSwimlane(lane)) ?\n\t\t\t\t\tthis.graph.getStartSize(lane) : new mxRectangle();\n\n\t\t\tvar bounds = this.graph.getBoundingBoxFromGeometry(children);\n\t\t\tchildBounds[i] = bounds;\n\t\t\tvar childrenY = bounds.y + geo.y - size.height - this.parentBorder;\n\t\t\tvar maxChildrenY = bounds.y + geo.y + bounds.height;\n\n\t\t\tif (layoutBounds == null)\n\t\t\t{\n\t\t\t\tlayoutBounds = new mxRectangle(0, childrenY, 0, maxChildrenY - childrenY);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlayoutBounds.y = Math.min(layoutBounds.y, childrenY);\n\t\t\t\tvar maxY = Math.max(layoutBounds.y + layoutBounds.height, maxChildrenY);\n\t\t\t\tlayoutBounds.height = maxY - layoutBounds.y;\n\t\t\t}\n\t\t}\n\t}\n\n\t\n\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t{\n\t\tvar lane = this.swimlanes[i];\n\t\tvar geo = this.graph.getCellGeometry(lane);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tvar children = this.graph.getChildCells(lane);\n\t\t\t\n\t\t\tvar size = (this.graph.isSwimlane(lane)) ?\n\t\t\t\t\tthis.graph.getStartSize(lane) : new mxRectangle();\n\n\t\t\tvar newGeo = geo.clone();\n\t\t\t\n\t\t\tvar leftGroupBorder = (i == 0) ? this.parentBorder : this.interRankCellSpacing/2;\n\t\t\tvar w = size.width + leftGroupBorder;\n\t\t\tvar x = childBounds[i].x - w;\n\t\t\tvar y = layoutBounds.y - this.parentBorder;\n\n\t\t\tnewGeo.x += x;\n\t\t\tnewGeo.y = y;\n\t\t\t\n\t\t\tnewGeo.width = childBounds[i].width + w + this.interRankCellSpacing/2;\n\t\t\tnewGeo.height = layoutBounds.height + size.height + 2 * this.parentBorder;\n\t\t\t\n\t\t\tthis.graph.model.setGeometry(lane, newGeo);\n\t\t\tthis.graph.moveCells(children, -x, geo.y - y);\n\t\t}\n\t}\n};\n\n/**\n * Function: findRoots\n * \n * Returns all visible children in the given parent which do not have\n * incoming edges. If the result is empty then the children with the\n * maximum difference between incoming and outgoing edges are returned.\n * This takes into account edges that are being promoted to the given\n * root due to invisible children or collapsed cells.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * vertices - array of vertices to limit search to\n */\nmxSwimlaneLayout.prototype.findRoots = function(parent, vertices)\n{\n\tvar roots = [];\n\t\n\tif (parent != null && vertices != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar best = null;\n\t\tvar maxDiff = -100000;\n\t\t\n\t\tfor (var i in vertices)\n\t\t{\n\t\t\tvar cell = vertices[i];\n\n\t\t\tif (cell != null && model.isVertex(cell) && this.graph.isCellVisible(cell) && model.isAncestor(parent, cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getEdges(cell);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var k = 0; k < conns.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.getVisibleTerminal(conns[k], true);\n\n\t\t\t\t\tif (src == cell)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Only count connection within this swimlane\n\t\t\t\t\t\tvar other = this.getVisibleTerminal(conns[k], false);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (model.isAncestor(parent, other))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfanOut++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (model.isAncestor(parent, src))\n\t\t\t\t\t{\n\t\t\t\t\t\tfanIn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fanIn == 0 && fanOut > 0)\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: getEdges\n * \n * Returns the connected edges for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n */\nmxSwimlaneLayout.prototype.getEdges = function(cell)\n{\n\tvar cachedEdges = this.edgesCache.get(cell);\n\t\n\tif (cachedEdges != null)\n\t{\n\t\treturn cachedEdges;\n\t}\n\n\tvar model = this.graph.model;\n\tvar edges = [];\n\tvar isCollapsed = this.graph.isCellCollapsed(cell);\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\n\t\tif (this.isPort(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t\telse if (isCollapsed || !this.graph.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t}\n\n\tedges = edges.concat(model.getEdges(cell, true, true));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar source = this.getVisibleTerminal(edges[i], true);\n\t\tvar target = this.getVisibleTerminal(edges[i], false);\n\t\t\n\t\tif ((source == target) || ((source != target) && ((target == cell && (this.parent == null || this.graph.isValidAncestor(source, this.parent, this.traverseAncestors))) ||\n\t\t\t(source == cell && (this.parent == null ||\n\t\t\t\t\tthis.graph.isValidAncestor(target, this.parent, this.traverseAncestors))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\tthis.edgesCache.put(cell, result);\n\n\treturn result;\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Helper function to return visible terminal for edge allowing for ports\n * \n * Parameters:\n * \n * edge - <mxCell> whose edges should be returned.\n * source - Boolean that specifies whether the source or target terminal is to be returned\n */\nmxSwimlaneLayout.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar terminalCache = this.edgesTargetTermCache;\n\t\n\tif (source)\n\t{\n\t\tterminalCache = this.edgeSourceTermCache;\n\t}\n\n\tvar term = terminalCache.get(edge);\n\n\tif (term != null)\n\t{\n\t\treturn term;\n\t}\n\n\tvar state = this.graph.view.getState(edge);\n\t\n\tvar terminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t\n\tif (terminal == null)\n\t{\n\t\tterminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t}\n\n\tif (terminal != null)\n\t{\n\t\tif (this.isPort(terminal))\n\t\t{\n\t\t\tterminal = this.graph.model.getParent(terminal);\n\t\t}\n\t\t\n\t\tterminalCache.put(edge, terminal);\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: run\n * \n * The API method used to exercise the layout upon the graph description\n * and produce a separate description of the vertex position and edge\n * routing changes made. It runs each stage of the layout that has been\n * created.\n */\nmxSwimlaneLayout.prototype.run = function(parent)\n{\n\t// Separate out unconnected hierarchies\n\tvar hierarchyVertices = [];\n\tvar allVertexSet = Object();\n\n\tif (this.swimlanes != null && this.swimlanes.length > 0 && parent != null)\n\t{\n\t\tvar filledVertexSet = Object();\n\t\t\n\t\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t\t{\n\t\t\tthis.filterDescendants(this.swimlanes[i], filledVertexSet);\n\t\t}\n\n\t\tthis.roots = [];\n\t\tvar filledVertexSetEmpty = true;\n\n\t\t// Poor man's isSetEmpty\n\t\tfor (var key in filledVertexSet)\n\t\t{\n\t\t\tif (filledVertexSet[key] != null)\n\t\t\t{\n\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Only test for candidates in each swimlane in order\n\t\tvar laneCounter = 0;\n\n\t\twhile (!filledVertexSetEmpty && laneCounter < this.swimlanes.length)\n\t\t{\n\t\t\tvar candidateRoots = this.findRoots(this.swimlanes[laneCounter], filledVertexSet);\n\t\t\t\n\t\t\tif (candidateRoots.length == 0)\n\t\t\t{\n\t\t\t\tlaneCounter++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t// If the candidate root is an unconnected group cell, remove it from\n\t\t\t// the layout. We may need a custom set that holds such groups and forces\n\t\t\t// them to be processed for resizing and/or moving.\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tvar vertexSet = Object();\n\t\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\t\tthis.traverse(candidateRoots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\t\thierarchyVertices, filledVertexSet, laneCounter);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tthis.roots.push(candidateRoots[i]);\n\t\t\t}\n\t\t\t\n\t\t\tfilledVertexSetEmpty = true;\n\t\t\t\n\t\t\t// Poor man's isSetEmpty\n\t\t\tfor (var key in filledVertexSet)\n\t\t\t{\n\t\t\t\tif (filledVertexSet[key] != null)\n\t\t\t\t{\n\t\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Find vertex set as directed traversal from roots\n\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar vertexSet = Object();\n\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\tthis.traverse(this.roots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\thierarchyVertices, null);\n\t\t}\n\t}\n\n\tvar tmp = [];\n\t\n\tfor (var key in allVertexSet)\n\t{\n\t\ttmp.push(allVertexSet[key]);\n\t}\n\t\n\tthis.model = new mxSwimlaneModel(this, tmp, this.roots,\n\t\tparent, this.tightenToSource);\n\n\tthis.cycleStage(parent);\n\tthis.layeringStage();\n\t\n\tthis.crossingStage(parent);\n\tthis.placementStage(0, parent);\n};\n\n/**\n * Function: filterDescendants\n * \n * Creates an array of descendant cells\n */\nmxSwimlaneLayout.prototype.filterDescendants = function(cell, result)\n{\n\tvar model = this.graph.model;\n\n\tif (model.isVertex(cell) && cell != this.parent && model.getParent(cell) != this.parent && this.graph.isCellVisible(cell))\n\t{\n\t\tresult[mxObjectIdentity.get(cell)] = cell;\n\t}\n\n\tif (this.traverseAncestors || cell == this.parent\n\t\t\t&& this.graph.isCellVisible(cell))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\t// Ignore ports in the layout vertex list, they are dealt with\n\t\t\t// in the traversal mechanisms\n\t\t\tif (!this.isPort(child))\n\t\t\t{\n\t\t\t\tthis.filterDescendants(child, result);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, its parent is the connecting vertex in terms of graph traversal\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxSwimlaneLayout.prototype.isPort = function(cell)\n{\n\tif (cell.geometry.relative)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and ports.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxSwimlaneLayout.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar src = this.getVisibleTerminal(edges[i], true);\n\t\tvar trg = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * allVertices - Array of cell paths for the visited cells.\n * swimlaneIndex - the laid out order index of the swimlane vertex is contained in\n */\nmxSwimlaneLayout.prototype.traverse = function(vertex, directed, edge, allVertices, currentComp,\n\t\t\t\t\t\t\t\t\t\t\thierarchyVertices, filledVertexSet, swimlaneIndex)\n{\n\tif (vertex != null && allVertices != null)\n\t{\n\t\t// Has this vertex been seen before in any traversal\n\t\t// And if the filled vertex set is populated, only \n\t\t// process vertices in that it contains\n\t\tvar vertexID = mxObjectIdentity.get(vertex);\n\t\t\n\t\tif ((allVertices[vertexID] == null)\n\t\t\t\t&& (filledVertexSet == null ? true : filledVertexSet[vertexID] != null))\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\tcurrentComp[vertexID] = vertex;\n\t\t\t}\n\t\t\tif (allVertices[vertexID] == null)\n\t\t\t{\n\t\t\t\tallVertices[vertexID] = vertex;\n\t\t\t}\n\n\t\t\tif (filledVertexSet !== null)\n\t\t\t{\n\t\t\t\tdelete filledVertexSet[vertexID];\n\t\t\t}\n\n\t\t\tvar edges = this.getEdges(vertex);\n\t\t\tvar model = this.graph.model;\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tvar otherVertex = this.getVisibleTerminal(edges[i], true);\n\t\t\t\tvar isSource = otherVertex == vertex;\n\t\t\t\t\n\t\t\t\tif (isSource)\n\t\t\t\t{\n\t\t\t\t\totherVertex = this.getVisibleTerminal(edges[i], false);\n\t\t\t\t}\n\n\t\t\t\tvar otherIndex = 0;\n\t\t\t\t// Get the swimlane index of the other terminal\n\t\t\t\tfor (otherIndex = 0; otherIndex < this.swimlanes.length; otherIndex++)\n\t\t\t\t{\n\t\t\t\t\tif (model.isAncestor(this.swimlanes[otherIndex], otherVertex))\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (otherIndex >= this.swimlanes.length)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Traverse if the other vertex is within the same swimlane as\n\t\t\t\t// as the current vertex, or if the swimlane index of the other\n\t\t\t\t// vertex is greater than that of this vertex\n\t\t\t\tif ((otherIndex > swimlaneIndex) ||\n\t\t\t\t\t\t((!directed || isSource) && otherIndex == swimlaneIndex))\n\t\t\t\t{\n\t\t\t\t\tcurrentComp = this.traverse(otherVertex, directed, edges[i], allVertices,\n\t\t\t\t\t\t\tcurrentComp, hierarchyVertices,\n\t\t\t\t\t\t\tfilledVertexSet, otherIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\t// We've seen this vertex before, but not in the current component\n\t\t\t\t// This component and the one it's in need to be merged\n\t\t\t\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar comp = hierarchyVertices[i];\n\n\t\t\t\t\tif (comp[vertexID] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var key in comp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentComp[key] = comp[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Remove the current component from the hierarchy set\n\t\t\t\t\t\thierarchyVertices.splice(i, 1);\n\t\t\t\t\t\treturn currentComp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn currentComp;\n};\n\n/**\n * Function: cycleStage\n * \n * Executes the cycle stage using mxMinimumCycleRemover.\n */\nmxSwimlaneLayout.prototype.cycleStage = function(parent)\n{\n\tvar cycleStage = new mxSwimlaneOrdering(this);\n\tcycleStage.execute(parent);\n};\n\n/**\n * Function: layeringStage\n * \n * Implements first stage of a Sugiyama layout.\n */\nmxSwimlaneLayout.prototype.layeringStage = function()\n{\n\tthis.model.initialRank();\n\tthis.model.fixRanks();\n};\n\n/**\n * Function: crossingStage\n * \n * Executes the crossing stage using mxMedianHybridCrossingReduction.\n */\nmxSwimlaneLayout.prototype.crossingStage = function(parent)\n{\n\tvar crossingStage = new mxMedianHybridCrossingReduction(this);\n\tcrossingStage.execute(parent);\n};\n\n/**\n * Function: placementStage\n * \n * Executes the placement stage using mxCoordinateAssignment.\n */\nmxSwimlaneLayout.prototype.placementStage = function(initialX, parent)\n{\n\tvar placementStage = new mxCoordinateAssignment(this, this.intraCellSpacing,\n\t\t\tthis.interRankCellSpacing, this.orientation, initialX,\n\t\t\tthis.parallelEdgeSpacing);\n\tplacementStage.fineTuning = this.fineTuning;\n\tplacementStage.execute(parent);\n\t\n\treturn placementStage.limitX + this.interHierarchySpacing;\n};\n\n__mxOutput.mxSwimlaneLayout = typeof mxSwimlaneLayout !== 'undefined' ? mxSwimlaneLayout : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxGraphModel\n * \n * Extends <mxEventSource> to implement a graph model. The graph model acts as\n * a wrapper around the cells which are in charge of storing the actual graph\n * datastructure. The model acts as a transactional wrapper with event\n * notification for all changes, whereas the cells contain the atomic\n * operations for updating the actual datastructure.\n * \n * Layers:\n * \n * The cell hierarchy in the model must have a top-level root cell which\n * contains the layers (typically one default layer), which in turn contain the\n * top-level cells of the layers. This means each cell is contained in a layer.\n * If no layers are required, then all new cells should be added to the default\n * layer.\n * \n * Layers are useful for hiding and showing groups of cells, or for placing\n * groups of cells on top of other cells in the display. To identify a layer,\n * the <isLayer> function is used. It returns true if the parent of the given\n * cell is the root of the model.\n * \n * Events:\n * \n * See events section for more details. There is a new set of events for\n * tracking transactional changes as they happen. The events are called\n * startEdit for the initial beginUpdate, executed for each executed change\n * and endEdit for the terminal endUpdate. The executed event contains a\n * property called change which represents the change after execution.\n * \n * Encoding the model:\n * \n * To encode a graph model, use the following code:\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(graph.getModel());\n * (end)\n * \n * This will create an XML node that contains all the model information.\n * \n * Encoding and decoding changes:\n * \n * For the encoding of changes, a graph model listener is required that encodes\n * each change from the given array of changes.\n * \n * (code)\n * model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n *   var nodes = [];\n *   var codec = new mxCodec();\n * \n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     nodes.push(codec.encode(changes[i]));\n *   }\n *   // do something with the nodes\n * });\n * (end)\n * \n * For the decoding and execution of changes, the codec needs a lookup function\n * that allows it to resolve cell IDs as follows:\n * \n * (code)\n * var codec = new mxCodec();\n * codec.lookup = function(id)\n * {\n *   return model.getCell(id);\n * }\n * (end)\n * \n * For each encoded change (represented by a node), the following code can be\n * used to carry out the decoding and create a change object.\n * \n * (code)\n * var changes = [];\n * var change = codec.decode(node);\n * change.model = model;\n * change.execute();\n * changes.push(change);\n * (end)\n * \n * The changes can then be dispatched using the model as follows.\n * \n * (code)\n * var edit = new mxUndoableEdit(model, false);\n * edit.changes = changes;\n * \n * edit.notify = function()\n * {\n *   edit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n *   \t'edit', edit, 'changes', edit.changes));\n *   edit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n *   \t'edit', edit, 'changes', edit.changes));\n * }\n * \n * model.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n * model.fireEvent(new mxEventObject(mxEvent.CHANGE,\n * \t\t'edit', edit, 'changes', changes));\n * (end)\n *\n * Event: mxEvent.CHANGE\n *\n * Fires when an undoable edit is dispatched. The <code>edit</code> property\n * contains the <mxUndoableEdit>. The <code>changes</code> property contains\n * the array of atomic changes inside the undoable edit. The changes property\n * is <strong>deprecated</strong>, please use edit.changes instead.\n *\n * Example:\n * \n * For finding newly inserted cells, the following code can be used:\n * \n * (code)\n * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n * \n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     var change = changes[i];\n *     \n *     if (change instanceof mxChildChange &&\n *       change.change.previous == null)\n *     {\n *       graph.startEditingAtCell(change.child);\n *       break;\n *     }\n *   }\n * });\n * (end)\n * \n * \n * Event: mxEvent.NOTIFY\n *\n * Same as <mxEvent.CHANGE>, this event can be used for classes that need to\n * implement a sync mechanism between this model and, say, a remote model. In\n * such a setup, only local changes should trigger a notify event and all\n * changes should trigger a change event.\n * \n * Event: mxEvent.EXECUTE\n * \n * Fires between begin- and endUpdate and after an atomic change was executed\n * in the model. The <code>change</code> property contains the atomic change\n * that was executed.\n * \n * Event: mxEvent.EXECUTED\n * \n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n *\n * Event: mxEvent.BEGIN_UPDATE\n *\n * Fires after the <updateLevel> was incremented in <beginUpdate>. This event\n * contains no properties.\n * \n * Event: mxEvent.START_EDIT\n *\n * Fires after the <updateLevel> was changed from 0 to 1. This event\n * contains no properties.\n * \n * Event: mxEvent.END_UPDATE\n * \n * Fires after the <updateLevel> was decreased in <endUpdate> but before any\n * notification or change dispatching. The <code>edit</code> property contains\n * the <currentEdit>.\n * \n * Event: mxEvent.END_EDIT\n *\n * Fires after the <updateLevel> was changed from 1 to 0. This event\n * contains no properties.\n * \n * Event: mxEvent.BEFORE_UNDO\n * \n * Fires before the change is dispatched after the update level has reached 0\n * in <endUpdate>. The <code>edit</code> property contains the <curreneEdit>.\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the change was dispatched in <endUpdate>. The <code>edit</code>\n * property contains the <currentEdit>.\n * \n * Constructor: mxGraphModel\n * \n * Constructs a new graph model. If no root is specified then a new root\n * <mxCell> with a default layer is created.\n * \n * Parameters:\n * \n * root - <mxCell> that represents the root cell.\n */\nfunction mxGraphModel(root)\n{\n\tthis.currentEdit = this.createUndoableEdit();\n\t\n\tif (root != null)\n\t{\n\t\tthis.setRoot(root);\n\t}\n\telse\n\t{\n\t\tthis.clear();\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphModel.prototype = new mxEventSource();\nmxGraphModel.prototype.constructor = mxGraphModel;\n\n/**\n * Variable: root\n * \n * Holds the root cell, which in turn contains the cells that represent the\n * layers of the diagram as child cells. That is, the actual elements of the\n * diagram are supposed to live in the third generation of cells and below.\n */\nmxGraphModel.prototype.root = null;\n\n/**\n * Variable: cells\n * \n * Maps from Ids to cells.\n */\nmxGraphModel.prototype.cells = null;\n\n/**\n * Variable: maintainEdgeParent\n * \n * Specifies if edges should automatically be moved into the nearest common\n * ancestor of their terminals. Default is true.\n */\nmxGraphModel.prototype.maintainEdgeParent = true;\n\n/**\n * Variable: ignoreRelativeEdgeParent\n * \n * Specifies if relative edge parents should be ignored for finding the nearest\n * common ancestors of an edge's terminals. Default is true.\n */\nmxGraphModel.prototype.ignoreRelativeEdgeParent = true;\n\n/**\n * Variable: createIds\n * \n * Specifies if the model should automatically create Ids for new cells.\n * Default is true.\n */\nmxGraphModel.prototype.createIds = true;\n\n/**\n * Variable: prefix\n * \n * Defines the prefix of new Ids. Default is an empty string.\n */\nmxGraphModel.prototype.prefix = '';\n\n/**\n * Variable: postfix\n * \n * Defines the postfix of new Ids. Default is an empty string.\n */\nmxGraphModel.prototype.postfix = '';\n\n/**\n * Variable: nextId\n * \n * Specifies the next Id to be created. Initial value is 0.\n */\nmxGraphModel.prototype.nextId = 0;\n\n/**\n * Variable: currentEdit\n * \n * Holds the changes for the current transaction. If the transaction is\n * closed then a new object is created for this variable using\n * <createUndoableEdit>.\n */\nmxGraphModel.prototype.currentEdit = null;\n\n/**\n * Variable: updateLevel\n * \n * Counter for the depth of nested transactions. Each call to <beginUpdate>\n * will increment this number and each call to <endUpdate> will decrement\n * it. When the counter reaches 0, the transaction is closed and the\n * respective events are fired. Initial value is 0.\n */\nmxGraphModel.prototype.updateLevel = 0;\n\n/**\n * Variable: endingUpdate\n * \n * True if the program flow is currently inside endUpdate.\n */\nmxGraphModel.prototype.endingUpdate = false;\n\n/**\n * Function: clear\n *\n * Sets a new root using <createRoot>.\n */\nmxGraphModel.prototype.clear = function()\n{\n\tthis.setRoot(this.createRoot());\n};\n\n/**\n * Function: isCreateIds\n *\n * Returns <createIds>.\n */\nmxGraphModel.prototype.isCreateIds = function()\n{\n\treturn this.createIds;\n};\n\n/**\n * Function: setCreateIds\n *\n * Sets <createIds>.\n */\nmxGraphModel.prototype.setCreateIds = function(value)\n{\n\tthis.createIds = value;\n};\n\n/**\n * Function: createRoot\n *\n * Creates a new root cell with a default layer (child 0).\n */\nmxGraphModel.prototype.createRoot = function()\n{\n\tvar cell = new mxCell();\n\tcell.insert(new mxCell());\n\t\n\treturn cell;\n};\n\n/**\n * Function: getCell\n *\n * Returns the <mxCell> for the specified Id or null if no cell can be\n * found for the given Id.\n *\n * Parameters:\n * \n * id - A string representing the Id of the cell.\n */\nmxGraphModel.prototype.getCell = function(id)\n{\n\treturn (this.cells != null) ? this.cells[id] : null;\n};\n\n/**\n * Function: filterCells\n * \n * Returns the cells from the given array where the given filter function\n * returns true.\n */\nmxGraphModel.prototype.filterCells = function(cells, filter)\n{\n\tvar result = null;\n\t\n\tif (cells != null)\n\t{\n\t\tresult = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (filter(cells[i]))\n\t\t\t{\n\t\t\t\tresult.push(cells[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getDescendants\n * \n * Returns all descendants of the given cell and the cell itself in an array.\n * \n * Parameters:\n * \n * parent - <mxCell> whose descendants should be returned.\n */\nmxGraphModel.prototype.getDescendants = function(parent)\n{\n\treturn this.filterDescendants(null, parent);\n};\n\n/**\n * Function: filterDescendants\n * \n * Visits all cells recursively and applies the specified filter function\n * to each cell. If the function returns true then the cell is added\n * to the resulting array. The parent and result paramters are optional.\n * If parent is not specified then the recursion starts at <root>.\n * \n * Example:\n * The following example extracts all vertices from a given model:\n * (code)\n * var filter = function(cell)\n * {\n * \treturn model.isVertex(cell);\n * }\n * var vertices = model.filterDescendants(filter);\n * (end)\n * \n * Parameters:\n * \n * filter - JavaScript function that takes an <mxCell> as an argument\n * and returns a boolean.\n * parent - Optional <mxCell> that is used as the root of the recursion.\n */\nmxGraphModel.prototype.filterDescendants = function(filter, parent)\n{\n\t// Creates a new array for storing the result\n\tvar result = [];\n\n\t// Recursion starts at the root of the model\n\tparent = parent || this.getRoot();\n\t\n\t// Checks if the filter returns true for the cell\n\t// and adds it to the result array\n\tif (filter == null || filter(parent))\n\t{\n\t\tresult.push(parent);\n\t}\n\t\n\t// Visits the children of the cell\n\tvar childCount = this.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(parent, i);\n\t\tresult = result.concat(this.filterDescendants(filter, child));\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getRoot\n * \n * Returns the root of the model or the topmost parent of the given cell.\n *\n * Parameters:\n * \n * cell - Optional <mxCell> that specifies the child.\n */\nmxGraphModel.prototype.getRoot = function(cell)\n{\n\tvar root = cell || this.root;\n\t\n\tif (cell != null)\n\t{\n\t\twhile (cell != null)\n\t\t{\n\t\t\troot = cell;\n\t\t\tcell = this.getParent(cell);\n\t\t}\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: setRoot\n * \n * Sets the <root> of the model using <mxRootChange> and adds the change to\n * the current transaction. This resets all datastructures in the model and\n * is the preferred way of clearing an existing model. Returns the new\n * root.\n * \n * Example:\n * \n * (code)\n * var root = new mxCell();\n * root.insert(new mxCell());\n * model.setRoot(root);\n * (end)\n *\n * Parameters:\n * \n * root - <mxCell> that specifies the new root.\n */\nmxGraphModel.prototype.setRoot = function(root)\n{\n\tthis.execute(new mxRootChange(this, root));\n\t\n\treturn root;\n};\n\n/**\n * Function: rootChanged\n * \n * Inner callback to change the root of the model and update the internal\n * datastructures, such as <cells> and <nextId>. Returns the previous root.\n *\n * Parameters:\n * \n * root - <mxCell> that specifies the new root.\n */\nmxGraphModel.prototype.rootChanged = function(root)\n{\n\tvar oldRoot = this.root;\n\tthis.root = root;\n\t\n\t// Resets counters and datastructures\n\tthis.nextId = 0;\n\tthis.cells = null;\n\tthis.cellAdded(root);\n\t\n\treturn oldRoot;\n};\n\n/**\n * Function: isRoot\n * \n * Returns true if the given cell is the root of the model and a non-null\n * value.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible root.\n */\nmxGraphModel.prototype.isRoot = function(cell)\n{\n\treturn cell != null && this.root == cell;\n};\n\n/**\n * Function: isLayer\n * \n * Returns true if <isRoot> returns true for the parent of the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible layer.\n */\nmxGraphModel.prototype.isLayer = function(cell)\n{\n\treturn this.isRoot(this.getParent(cell));\n};\n\n/**\n * Function: isAncestor\n * \n * Returns true if the given parent is an ancestor of the given child. Note \n * returns true if child == parent.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent.\n * child - <mxCell> that specifies the child.\n */\nmxGraphModel.prototype.isAncestor = function(parent, child)\n{\n\twhile (child != null && child != parent)\n\t{\n\t\tchild = this.getParent(child);\n\t}\n\t\n\treturn child == parent;\n};\n\n/**\n * Function: contains\n * \n * Returns true if the model contains the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell.\n */\nmxGraphModel.prototype.contains = function(cell)\n{\n\treturn this.isAncestor(this.root, cell);\n};\n\n/**\n * Function: getParent\n * \n * Returns the parent of the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> whose parent should be returned.\n */\nmxGraphModel.prototype.getParent = function(cell)\n{\n\treturn (cell != null) ? cell.getParent() : null;\n};\n\n/**\n * Function: add\n * \n * Adds the specified child to the parent at the given index using\n * <mxChildChange> and adds the change to the current transaction. If no\n * index is specified then the child is appended to the parent's array of\n * children. Returns the inserted child.\n * \n * Parameters:\n * \n * parent - <mxCell> that specifies the parent to contain the child.\n * child - <mxCell> that specifies the child to be inserted.\n * index - Optional integer that specifies the index of the child.\n */\nmxGraphModel.prototype.add = function(parent, child, index)\n{\n\tif (child != parent && parent != null && child != null)\n\t{\t\n\t\t// Appends the child if no index was specified\n\t\tif (index == null)\n\t\t{\n\t\t\tindex = this.getChildCount(parent);\n\t\t}\n\t\t\n\t\tvar parentChanged = parent != this.getParent(child);\n\t\tthis.execute(new mxChildChange(this, parent, child, index));\n\n\t\t// Maintains the edges parents by moving the edges\n\t\t// into the nearest common ancestor of its terminals\n\t\tif (this.maintainEdgeParent && parentChanged)\n\t\t{\n\t\t\tthis.updateEdgeParents(child);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: cellAdded\n * \n * Inner callback to update <cells> when a cell has been added. This\n * implementation resolves collisions by creating new Ids. To change the\n * ID of a cell after it was inserted into the model, use the following\n * code:\n * \n * (code\n * delete model.cells[cell.getId()];\n * cell.setId(newId);\n * model.cells[cell.getId()] = cell;\n * (end)\n *\n * If the change of the ID should be part of the command history, then the\n * cell should be removed from the model and a clone with the new ID should\n * be reinserted into the model instead.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell that has been added.\n */\nmxGraphModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\t// Creates an Id for the cell if not Id exists\n\t\tif (cell.getId() == null && this.createIds)\n\t\t{\n\t\t\tcell.setId(this.createId(cell));\n\t\t}\n\t\t\n\t\tif (cell.getId() != null)\n\t\t{\n\t\t\tvar collision = this.getCell(cell.getId());\n\t\t\t\n\t\t\tif (collision != cell)\n\t\t\t{\t\n\t\t\t\t// Creates new Id for the cell\n\t\t\t\t// as long as there is a collision\n\t\t\t\twhile (collision != null)\n\t\t\t\t{\n\t\t\t\t\tcell.setId(this.createId(cell));\n\t\t\t\t\tcollision = this.getCell(cell.getId());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Lazily creates the cells dictionary\n\t\t\t\tif (this.cells == null)\n\t\t\t\t{\n\t\t\t\t\tthis.cells = new Object();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.cells[cell.getId()] = cell;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Makes sure IDs of deleted cells are not reused\n\t\tif (mxUtils.isNumeric(cell.getId()))\n\t\t{\n\t\t\tthis.nextId = Math.max(this.nextId, cell.getId());\n\t\t}\n\t\t\n\t\t// Recursively processes child cells\n\t\tvar childCount = this.getChildCount(cell);\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tthis.cellAdded(this.getChildAt(cell, i));\n\t\t}\n\t}\n};\n\n/**\n * Function: createId\n * \n * Hook method to create an Id for the specified cell. This implementation\n * concatenates <prefix>, id and <postfix> to create the Id and increments\n * <nextId>. The cell is ignored by this implementation, but can be used in\n * overridden methods to prefix the Ids with eg. the cell type.\n *\n * Parameters:\n *\n * cell - <mxCell> to create the Id for.\n */\nmxGraphModel.prototype.createId = function(cell)\n{\n\tvar id = this.nextId;\n\tthis.nextId++;\n\t\n\treturn this.prefix + id + this.postfix;\n};\n\n/**\n * Function: updateEdgeParents\n * \n * Updates the parent for all edges that are connected to cell or one of\n * its descendants using <updateEdgeParent>.\n */\nmxGraphModel.prototype.updateEdgeParents = function(cell, root)\n{\n\t// Gets the topmost node of the hierarchy\n\troot = root || this.getRoot(cell);\n\t\n\t// Updates edges on children first\n\tvar childCount = this.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(cell, i);\n\t\tthis.updateEdgeParents(child, root);\n\t}\n\t\n\t// Updates the parents of all connected edges\n\tvar edgeCount = this.getEdgeCount(cell);\n\tvar edges = [];\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tedges.push(this.getEdgeAt(cell, i));\n\t}\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar edge = edges[i];\n\t\t\n\t\t// Updates edge parent if edge and child have\n\t\t// a common root node (does not need to be the\n\t\t// model root node)\n\t\tif (this.isAncestor(root, edge))\n\t\t{\n\t\t\tthis.updateEdgeParent(edge, root);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateEdgeParent\n *\n * Inner callback to update the parent of the specified <mxCell> to the\n * nearest-common-ancestor of its two terminals.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * root - <mxCell> that represents the current root of the model.\n */\nmxGraphModel.prototype.updateEdgeParent = function(edge, root)\n{\n\tvar source = this.getTerminal(edge, true);\n\tvar target = this.getTerminal(edge, false);\n\tvar cell = null;\n\t\n\t// Uses the first non-relative descendants of the source terminal\n\twhile (source != null && !this.isEdge(source) &&\n\t\tsource.geometry != null && source.geometry.relative)\n\t{\n\t\tsource = this.getParent(source);\n\t}\n\t\n\t// Uses the first non-relative descendants of the target terminal\n\twhile (target != null && this.ignoreRelativeEdgeParent &&\n\t\t!this.isEdge(target) && target.geometry != null && \n\t\ttarget.geometry.relative)\n\t{\n\t\ttarget = this.getParent(target);\n\t}\n\t\n\tif (this.isAncestor(root, source) && this.isAncestor(root, target))\n\t{\n\t\tif (source == target)\n\t\t{\n\t\t\tcell = this.getParent(source);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcell = this.getNearestCommonAncestor(source, target);\n\t\t}\n\n\t\tif (cell != null && (this.getParent(cell) != this.root ||\n\t\t\tthis.isAncestor(cell, edge)) && this.getParent(edge) != cell)\n\t\t{\n\t\t\tvar geo = this.getGeometry(edge);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar origin1 = this.getOrigin(this.getParent(edge));\n\t\t\t\tvar origin2 = this.getOrigin(cell);\n\t\t\t\t\n\t\t\t\tvar dx = origin2.x - origin1.x;\n\t\t\t\tvar dy = origin2.y - origin1.y;\n\t\t\t\t\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.translate(-dx, -dy);\n\t\t\t\tthis.setGeometry(edge, geo);\n\t\t\t}\n\n\t\t\tthis.add(cell, edge, this.getChildCount(cell));\n\t\t}\n\t}\n};\n\n/**\n * Function: getOrigin\n * \n * Returns the absolute, accumulated origin for the children inside the\n * given parent as an <mxPoint>.\n */\nmxGraphModel.prototype.getOrigin = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tresult = this.getOrigin(this.getParent(cell));\n\t\t\n\t\tif (!this.isEdge(cell))\n\t\t{\n\t\t\tvar geo = this.getGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tresult.x += geo.x;\n\t\t\t\tresult.y += geo.y;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = new mxPoint();\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getNearestCommonAncestor\n * \n * Returns the nearest common ancestor for the specified cells.\n *\n * Parameters:\n * \n * cell1 - <mxCell> that specifies the first cell in the tree.\n * cell2 - <mxCell> that specifies the second cell in the tree.\n */\nmxGraphModel.prototype.getNearestCommonAncestor = function(cell1, cell2)\n{\n\tif (cell1 != null && cell2 != null)\n\t{\t\t\n\t\t// Creates the cell path for the second cell\n\t\tvar path = mxCellPath.create(cell2);\n\n\t\tif (path != null && path.length > 0)\n\t\t{\n\t\t\t// Bubbles through the ancestors of the first\n\t\t\t// cell to find the nearest common ancestor.\n\t\t\tvar cell = cell1;\n\t\t\tvar current = mxCellPath.create(cell);\n\t\t\t\n\t\t\t// Inverts arguments\n\t\t\tif (path.length < current.length)\n\t\t\t{\n\t\t\t\tcell = cell2;\n\t\t\t\tvar tmp = current;\n\t\t\t\tcurrent = path;\n\t\t\t\tpath = tmp;\n\t\t\t}\n\t\t\t\n\t\t\twhile (cell != null)\n\t\t\t{\n\t\t\t\tvar parent = this.getParent(cell);\n\t\t\t\t\n\t\t\t\t// Checks if the cell path is equal to the beginning of the given cell path\n\t\t\t\tif (path.indexOf(current + mxCellPath.PATH_SEPARATOR) == 0 && parent != null)\n\t\t\t\t{\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrent = mxCellPath.getParentPath(current);\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: remove\n * \n * Removes the specified cell from the model using <mxChildChange> and adds\n * the change to the current transaction. This operation will remove the\n * cell and all of its children from the model. Returns the removed cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that should be removed.\n */\nmxGraphModel.prototype.remove = function(cell)\n{\n\tif (cell == this.root)\n\t{\n\t\tthis.setRoot(null);\n\t}\n\telse if (this.getParent(cell) != null)\n\t{\n\t\tthis.execute(new mxChildChange(this, null, cell));\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellRemoved\n * \n * Inner callback to update <cells> when a cell has been removed.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell that has been removed.\n */\nmxGraphModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null && this.cells != null)\n\t{\n\t\t// Recursively processes child cells\n\t\tvar childCount = this.getChildCount(cell);\n\t\t\n\t\tfor (var i = childCount - 1; i >= 0; i--)\n\t\t{\n\t\t\tthis.cellRemoved(this.getChildAt(cell, i));\n\t\t}\n\t\t\n\t\t// Removes the dictionary entry for the cell\n\t\tif (this.cells != null && cell.getId() != null)\n\t\t{\n\t\t\tdelete this.cells[cell.getId()];\n\t\t}\n\t}\n};\n\n/**\n * Function: parentForCellChanged\n * \n * Inner callback to update the parent of a cell using <mxCell.insert>\n * on the parent and return the previous parent.\n *\n * Parameters:\n * \n * cell - <mxCell> to update the parent for.\n * parent - <mxCell> that specifies the new parent of the cell.\n * index - Optional integer that defines the index of the child\n * in the parent's child array.\n */\nmxGraphModel.prototype.parentForCellChanged = function(cell, parent, index)\n{\n\tvar previous = this.getParent(cell);\n\t\n\tif (parent != null)\n\t{\n\t\tif (parent != previous || previous.getIndex(cell) != index)\n\t\t{\n\t\t\tparent.insert(cell, index);\n\t\t}\n\t}\n\telse if (previous != null)\n\t{\n\t\tvar oldIndex = previous.getIndex(cell);\n\t\tprevious.remove(oldIndex);\n\t}\n\t\n\t// Adds or removes the cell from the model\n\tvar par = this.contains(parent);\n\tvar pre = this.contains(previous);\n\t\n\tif (par && !pre)\n\t{\n\t\tthis.cellAdded(cell);\n\t}\n\telse if (pre && !par)\n\t{\n\t\tthis.cellRemoved(cell);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: getChildCount\n *\n * Returns the number of children in the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> whose number of children should be returned.\n */\nmxGraphModel.prototype.getChildCount = function(cell)\n{\n\treturn (cell != null) ? cell.getChildCount() : 0;\n};\n\n/**\n * Function: getChildAt\n *\n * Returns the child of the given <mxCell> at the given index.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the parent.\n * index - Integer that specifies the index of the child to be returned.\n */\nmxGraphModel.prototype.getChildAt = function(cell, index)\n{\n\treturn (cell != null) ? cell.getChildAt(index) : null;\n};\n\n/**\n * Function: getChildren\n * \n * Returns all children of the given <mxCell> as an array of <mxCells>. The\n * return value should be only be read.\n *\n * Parameters:\n * \n * cell - <mxCell> the represents the parent.\n */\nmxGraphModel.prototype.getChildren = function(cell)\n{\n\treturn (cell != null) ? cell.children : null;\n};\n\t\n/**\n * Function: getChildVertices\n * \n * Returns the child vertices of the given parent.\n *\n * Parameters:\n * \n * cell - <mxCell> whose child vertices should be returned.\n */\nmxGraphModel.prototype.getChildVertices = function(parent)\n{\n\treturn this.getChildCells(parent, true, false);\n};\n\t\t\n/**\n * Function: getChildEdges\n * \n * Returns the child edges of the given parent.\n *\n * Parameters:\n * \n * cell - <mxCell> whose child edges should be returned.\n */\nmxGraphModel.prototype.getChildEdges = function(parent)\n{\n\treturn this.getChildCells(parent, false, true);\n};\n\n/**\n * Function: getChildCells\n * \n * Returns the children of the given cell that are vertices and/or edges\n * depending on the arguments.\n *\n * Parameters:\n * \n * cell - <mxCell> the represents the parent.\n * vertices - Boolean indicating if child vertices should be returned.\n * Default is false.\n * edges - Boolean indicating if child edges should be returned.\n * Default is false.\n */\nmxGraphModel.prototype.getChildCells = function(parent, vertices, edges)\n{\n\tvertices = (vertices != null) ? vertices : false;\n\tedges = (edges != null) ? edges : false;\n\t\n\tvar childCount = this.getChildCount(parent);\n\tvar result = [];\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(parent, i);\n\n\t\tif ((!edges && !vertices) || (edges && this.isEdge(child)) ||\n\t\t\t(vertices && this.isVertex(child)))\n\t\t{\n\t\t\tresult.push(child);\n\t\t}\n\t}\n\n\treturn result;\n};\n\t\t\n/**\n * Function: getTerminal\n * \n * Returns the source or target <mxCell> of the given edge depending on the\n * value of the boolean parameter.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * isSource - Boolean indicating which end of the edge should be returned.\n */\nmxGraphModel.prototype.getTerminal = function(edge, isSource)\n{\n\treturn (edge != null) ? edge.getTerminal(isSource) : null;\n};\n\n/**\n * Function: setTerminal\n * \n * Sets the source or target terminal of the given <mxCell> using\n * <mxTerminalChange> and adds the change to the current transaction.\n * This implementation updates the parent of the edge using <updateEdgeParent>\n * if required.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * terminal - <mxCell> that specifies the new terminal.\n * isSource - Boolean indicating if the terminal is the new source or\n * target terminal of the edge.\n */\nmxGraphModel.prototype.setTerminal = function(edge, terminal, isSource)\n{\n\tvar terminalChanged = terminal != this.getTerminal(edge, isSource);\n\tthis.execute(new mxTerminalChange(this, edge, terminal, isSource));\n\t\n\tif (this.maintainEdgeParent && terminalChanged)\n\t{\n\t\tthis.updateEdgeParent(edge, this.getRoot());\n\t}\n\t\n\treturn terminal;\n};\n\t\n/**\n * Function: setTerminals\n * \n * Sets the source and target <mxCell> of the given <mxCell> in a single\n * transaction using <setTerminal> for each end of the edge.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * source - <mxCell> that specifies the new source terminal.\n * target - <mxCell> that specifies the new target terminal.\n */\nmxGraphModel.prototype.setTerminals = function(edge, source, target)\n{\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tthis.setTerminal(edge, source, true);\n\t\tthis.setTerminal(edge, target, false);\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: terminalForCellChanged\n * \n * Inner helper function to update the terminal of the edge using\n * <mxCell.insertEdge> and return the previous terminal.\n * \n * Parameters:\n * \n * edge - <mxCell> that specifies the edge to be updated.\n * terminal - <mxCell> that specifies the new terminal.\n * isSource - Boolean indicating if the terminal is the new source or\n * target terminal of the edge.\n */\nmxGraphModel.prototype.terminalForCellChanged = function(edge, terminal, isSource)\n{\n\tvar previous = this.getTerminal(edge, isSource);\n\t\n\tif (terminal != null)\n\t{\n\t\tterminal.insertEdge(edge, isSource);\n\t}\n\telse if (previous != null)\n\t{\n\t\tprevious.removeEdge(edge, isSource);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: getEdgeCount\n * \n * Returns the number of distinct edges connected to the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the vertex.\n */\nmxGraphModel.prototype.getEdgeCount = function(cell)\n{\n\treturn (cell != null) ? cell.getEdgeCount() : 0;\n};\n\n/**\n * Function: getEdgeAt\n * \n * Returns the edge of cell at the given index.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the vertex.\n * index - Integer that specifies the index of the edge\n * to return.\n */\nmxGraphModel.prototype.getEdgeAt = function(cell, index)\n{\n\treturn (cell != null) ? cell.getEdgeAt(index) : null;\n};\n\t\n/**\n * Function: getDirectedEdgeCount\n * \n * Returns the number of incoming or outgoing edges, ignoring the given\n * edge.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edge count should be returned.\n * outgoing - Boolean that specifies if the number of outgoing or\n * incoming edges should be returned.\n * ignoredEdge - <mxCell> that represents an edge to be ignored.\n */\nmxGraphModel.prototype.getDirectedEdgeCount = function(cell, outgoing, ignoredEdge)\n{\n\tvar count = 0;\n\tvar edgeCount = this.getEdgeCount(cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(cell, i);\n\n\t\tif (edge != ignoredEdge && this.getTerminal(edge, outgoing) == cell)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count;\n};\n\n/**\n * Function: getConnections\n * \n * Returns all edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n * \n */\nmxGraphModel.prototype.getConnections = function(cell)\n{\n\treturn this.getEdges(cell, true, true, false);\n};\n\n/**\n * Function: getIncomingEdges\n * \n * Returns the incoming edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose incoming edges should be returned.\n * \n */\nmxGraphModel.prototype.getIncomingEdges = function(cell)\n{\n\treturn this.getEdges(cell, true, false, false);\n};\n\n/**\n * Function: getOutgoingEdges\n * \n * Returns the outgoing edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose outgoing edges should be returned.\n * \n */\nmxGraphModel.prototype.getOutgoingEdges = function(cell)\n{\n\treturn this.getEdges(cell, false, true, false);\n};\n\n/**\n * Function: getEdges\n * \n * Returns all distinct edges connected to this cell as a new array of\n * <mxCells>. If at least one of incoming or outgoing is true, then loops\n * are ignored, otherwise if both are false, then all edges connected to\n * the given cell are returned including loops.\n * \n * Parameters:\n * \n * cell - <mxCell> that specifies the cell.\n * incoming - Optional boolean that specifies if incoming edges should be\n * returned. Default is true.\n * outgoing - Optional boolean that specifies if outgoing edges should be\n * returned. Default is true.\n * includeLoops - Optional boolean that specifies if loops should be returned.\n * Default is true. \n */\nmxGraphModel.prototype.getEdges = function(cell, incoming, outgoing, includeLoops)\n{\n\tincoming = (incoming != null) ? incoming : true;\n\toutgoing = (outgoing != null) ? outgoing : true;\n\tincludeLoops = (includeLoops != null) ? includeLoops : true;\n\t\n\tvar edgeCount = this.getEdgeCount(cell);\n\tvar result = [];\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(cell, i);\n\t\tvar source = this.getTerminal(edge, true);\n\t\tvar target = this.getTerminal(edge, false);\n\n\t\tif ((includeLoops && source == target) || ((source != target) && ((incoming && target == cell) ||\n\t\t\t(outgoing && source == cell))))\n\t\t{\n\t\t\tresult.push(edge);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns all edges between the given source and target pair. If directed\n * is true, then only edges from the source to the target are returned,\n * otherwise, all edges between the two cells are returned.\n * \n * Parameters:\n * \n * source - <mxCell> that defines the source terminal of the edge to be\n * returned.\n * target - <mxCell> that defines the target terminal of the edge to be\n * returned.\n * directed - Optional boolean that specifies if the direction of the\n * edge should be taken into account. Default is false.\n */\nmxGraphModel.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\t\n\tvar tmp1 = this.getEdgeCount(source);\n\tvar tmp2 = this.getEdgeCount(target);\n\t\n\t// Assumes the source has less connected edges\n\tvar terminal = source;\n\tvar edgeCount = tmp1;\n\t\n\t// Uses the smaller array of connected edges\n\t// for searching the edge\n\tif (tmp2 < tmp1)\n\t{\n\t\tedgeCount = tmp2;\n\t\tterminal = target;\n\t}\n\t\n\tvar result = [];\n\t\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(terminal, i);\n\t\tvar src = this.getTerminal(edge, true);\n\t\tvar trg = this.getTerminal(edge, false);\n\t\tvar directedMatch = (src == source) && (trg == target);\n\t\tvar oppositeMatch = (trg == source) && (src == target);\n\n\t\tif (directedMatch || (!directed && oppositeMatch))\n\t\t{\n\t\t\tresult.push(edge);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getOpposites\n * \n * Returns all opposite vertices wrt terminal for the given edges, only\n * returning sources and/or targets as specified. The result is returned\n * as an array of <mxCells>.\n * \n * Parameters:\n * \n * edges - Array of <mxCells> that contain the edges to be examined.\n * terminal - <mxCell> that specifies the known end of the edges.\n * sources - Boolean that specifies if source terminals should be contained\n * in the result. Default is true.\n * targets - Boolean that specifies if target terminals should be contained\n * in the result. Default is true.\n */\nmxGraphModel.prototype.getOpposites = function(edges, terminal, sources, targets)\n{\n\tsources = (sources != null) ? sources : true;\n\ttargets = (targets != null) ? targets : true;\n\t\n\tvar terminals = [];\n\t\n\tif (edges != null)\n\t{\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar source = this.getTerminal(edges[i], true);\n\t\t\tvar target = this.getTerminal(edges[i], false);\n\t\t\t\n\t\t\t// Checks if the terminal is the source of\n\t\t\t// the edge and if the target should be\n\t\t\t// stored in the result\n\t\t\tif (source == terminal && target != null && target != terminal && targets)\n\t\t\t{\n\t\t\t\tterminals.push(target);\n\t\t\t}\n\t\t\t\n\t\t\t// Checks if the terminal is the taget of\n\t\t\t// the edge and if the source should be\n\t\t\t// stored in the result\n\t\t\telse if (target == terminal && source != null && source != terminal && sources)\n\t\t\t{\n\t\t\t\tterminals.push(source);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn terminals;\n};\n\n/**\n * Function: getTopmostCells\n * \n * Returns the topmost cells of the hierarchy in an array that contains no\n * descendants for each <mxCell> that it contains. Duplicates should be\n * removed in the cells array to improve performance.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose topmost ancestors should be returned.\n */\nmxGraphModel.prototype.getTopmostCells = function(cells)\n{\n\tvar dict = new mxDictionary();\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tdict.put(cells[i], true);\n\t}\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tvar cell = cells[i];\n\t\tvar topmost = true;\n\t\tvar parent = this.getParent(cell);\n\t\t\n\t\twhile (parent != null)\n\t\t{\n\t\t\tif (dict.get(parent))\n\t\t\t{\n\t\t\t\ttopmost = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tparent = this.getParent(parent);\n\t\t}\n\t\t\n\t\tif (topmost)\n\t\t{\n\t\t\ttmp.push(cell);\n\t\t}\n\t}\n\t\n\treturn tmp;\n};\n\n/**\n * Function: isVertex\n * \n * Returns true if the given cell is a vertex.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible vertex.\n */\nmxGraphModel.prototype.isVertex = function(cell)\n{\n\treturn (cell != null) ? cell.isVertex() : false;\n};\n\n/**\n * Function: isEdge\n * \n * Returns true if the given cell is an edge.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible edge.\n */\nmxGraphModel.prototype.isEdge = function(cell)\n{\n\treturn (cell != null) ? cell.isEdge() : false;\n};\n\n/**\n * Function: isConnectable\n * \n * Returns true if the given <mxCell> is connectable. If <edgesConnectable>\n * is false, then this function returns false for all edges else it returns\n * the return value of <mxCell.isConnectable>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose connectable state should be returned.\n */\nmxGraphModel.prototype.isConnectable = function(cell)\n{\n\treturn (cell != null) ? cell.isConnectable() : false;\n};\n\n/**\n * Function: getValue\n * \n * Returns the user object of the given <mxCell> using <mxCell.getValue>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose user object should be returned.\n */\nmxGraphModel.prototype.getValue = function(cell)\n{\n\treturn (cell != null) ? cell.getValue() : null;\n};\n\n/**\n * Function: setValue\n * \n * Sets the user object of then given <mxCell> using <mxValueChange>\n * and adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose user object should be changed.\n * value - Object that defines the new user object.\n */\nmxGraphModel.prototype.setValue = function(cell, value)\n{\n\tthis.execute(new mxValueChange(this, cell, value));\n\t\n\treturn value;\n};\n\n/**\n * Function: valueForCellChanged\n * \n * Inner callback to update the user object of the given <mxCell>\n * using <mxCell.valueChanged> and return the previous value,\n * that is, the return value of <mxCell.valueChanged>.\n * \n * To change a specific attribute in an XML node, the following code can be\n * used.\n * \n * (code)\n * graph.getModel().valueForCellChanged = function(cell, value)\n * {\n *   var previous = cell.value.getAttribute('label');\n *   cell.value.setAttribute('label', value);\n *   \n *   return previous;\n * };\n * (end) \n */\nmxGraphModel.prototype.valueForCellChanged = function(cell, value)\n{\n\treturn cell.valueChanged(value);\n};\n\n/**\n * Function: getGeometry\n * \n * Returns the <mxGeometry> of the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose geometry should be returned.\n */\nmxGraphModel.prototype.getGeometry = function(cell)\n{\n\treturn (cell != null) ? cell.getGeometry() : null;\n};\n\n/**\n * Function: setGeometry\n * \n * Sets the <mxGeometry> of the given <mxCell>. The actual update\n * of the cell is carried out in <geometryForCellChanged>. The\n * <mxGeometryChange> action is used to encapsulate the change.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be changed.\n * geometry - <mxGeometry> that defines the new geometry.\n */\nmxGraphModel.prototype.setGeometry = function(cell, geometry)\n{\n\tif (geometry != this.getGeometry(cell))\n\t{\n\t\tthis.execute(new mxGeometryChange(this, cell, geometry));\n\t}\n\t\n\treturn geometry;\n};\n\n/**\n * Function: geometryForCellChanged\n * \n * Inner callback to update the <mxGeometry> of the given <mxCell> using\n * <mxCell.setGeometry> and return the previous <mxGeometry>.\n */\nmxGraphModel.prototype.geometryForCellChanged = function(cell, geometry)\n{\n\tvar previous = this.getGeometry(cell);\n\tcell.setGeometry(geometry);\n\t\n\treturn previous;\n};\n\n/**\n * Function: getStyle\n * \n * Returns the style of the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose style should be returned.\n */\nmxGraphModel.prototype.getStyle = function(cell)\n{\n\treturn (cell != null) ? cell.getStyle() : null;\n};\n\n/**\n * Function: setStyle\n * \n * Sets the style of the given <mxCell> using <mxStyleChange> and\n * adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose style should be changed.\n * style - String of the form [stylename;|key=value;] to specify\n * the new cell style.\n */\nmxGraphModel.prototype.setStyle = function(cell, style)\n{\n\tif (style != this.getStyle(cell))\n\t{\n\t\tthis.execute(new mxStyleChange(this, cell, style));\n\t}\n\t\n\treturn style;\n};\n\n/**\n * Function: styleForCellChanged\n * \n * Inner callback to update the style of the given <mxCell>\n * using <mxCell.setStyle> and return the previous style.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * style - String of the form [stylename;|key=value;] to specify\n * the new cell style.\n */\nmxGraphModel.prototype.styleForCellChanged = function(cell, style)\n{\n\tvar previous = this.getStyle(cell);\n\tcell.setStyle(style);\n\t\n\treturn previous;\n};\n\n/**\n * Function: isCollapsed\n * \n * Returns true if the given <mxCell> is collapsed.\n *\n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be returned.\n */\nmxGraphModel.prototype.isCollapsed = function(cell)\n{\n\treturn (cell != null) ? cell.isCollapsed() : false;\n};\n\n/**\n * Function: setCollapsed\n * \n * Sets the collapsed state of the given <mxCell> using <mxCollapseChange>\n * and adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be changed.\n * collapsed - Boolean that specifies the new collpased state.\n */\nmxGraphModel.prototype.setCollapsed = function(cell, collapsed)\n{\n\tif (collapsed != this.isCollapsed(cell))\n\t{\n\t\tthis.execute(new mxCollapseChange(this, cell, collapsed));\n\t}\n\t\n\treturn collapsed;\n};\n\t\n/**\n * Function: collapsedStateForCellChanged\n *\n * Inner callback to update the collapsed state of the\n * given <mxCell> using <mxCell.setCollapsed> and return\n * the previous collapsed state.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * collapsed - Boolean that specifies the new collpased state.\n */\nmxGraphModel.prototype.collapsedStateForCellChanged = function(cell, collapsed)\n{\n\tvar previous = this.isCollapsed(cell);\n\tcell.setCollapsed(collapsed);\n\t\n\treturn previous;\n};\n\n/**\n * Function: isVisible\n * \n * Returns true if the given <mxCell> is visible.\n * \n * Parameters:\n * \n * cell - <mxCell> whose visible state should be returned.\n */\nmxGraphModel.prototype.isVisible = function(cell)\n{\n\treturn (cell != null) ? cell.isVisible() : false;\n};\n\n/**\n * Function: setVisible\n * \n * Sets the visible state of the given <mxCell> using <mxVisibleChange> and\n * adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose visible state should be changed.\n * visible - Boolean that specifies the new visible state.\n */\nmxGraphModel.prototype.setVisible = function(cell, visible)\n{\n\tif (visible != this.isVisible(cell))\n\t{\n\t\tthis.execute(new mxVisibleChange(this, cell, visible));\n\t}\n\t\n\treturn visible;\n};\n\t\n/**\n * Function: visibleStateForCellChanged\n *\n * Inner callback to update the visible state of the\n * given <mxCell> using <mxCell.setCollapsed> and return\n * the previous visible state.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * visible - Boolean that specifies the new visible state.\n */\nmxGraphModel.prototype.visibleStateForCellChanged = function(cell, visible)\n{\n\tvar previous = this.isVisible(cell);\n\tcell.setVisible(visible);\n\t\n\treturn previous;\n};\n\n/**\n * Function: execute\n * \n * Executes the given edit and fires events if required. The edit object\n * requires an execute function which is invoked. The edit is added to the\n * <currentEdit> between <beginUpdate> and <endUpdate> calls, so that\n * events will be fired if this execute is an individual transaction, that\n * is, if no previous <beginUpdate> calls have been made without calling\n * <endUpdate>. This implementation fires an <execute> event before\n * executing the given change.\n * \n * Parameters:\n * \n * change - Object that described the change.\n */\nmxGraphModel.prototype.execute = function(change)\n{\n\tchange.execute();\n\tthis.beginUpdate();\n\tthis.currentEdit.add(change);\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTE, 'change', change));\n\t// New global executed event\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\tthis.endUpdate();\n};\n\n/**\n * Function: beginUpdate\n * \n * Increments the <updateLevel> by one. The event notification\n * is queued until <updateLevel> reaches 0 by use of\n * <endUpdate>.\n *\n * All changes on <mxGraphModel> are transactional,\n * that is, they are executed in a single undoable change\n * on the model (without transaction isolation).\n * Therefore, if you want to combine any\n * number of changes into a single undoable change,\n * you should group any two or more API calls that\n * modify the graph model between <beginUpdate>\n * and <endUpdate> calls as shown here:\n * \n * (code)\n * var model = graph.getModel();\n * var parent = graph.getDefaultParent();\n * var index = model.getChildCount(parent);\n * model.beginUpdate();\n * try\n * {\n *   model.add(parent, v1, index);\n *   model.add(parent, v2, index+1);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n * \n * Of course there is a shortcut for appending a\n * sequence of cells into the default parent:\n * \n * (code)\n * graph.addCells([v1, v2]).\n * (end)\n */\nmxGraphModel.prototype.beginUpdate = function()\n{\n\tthis.updateLevel++;\n\tthis.fireEvent(new mxEventObject(mxEvent.BEGIN_UPDATE));\n\t\n\tif (this.updateLevel == 1)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t}\n};\n\n/**\n * Function: endUpdate\n * \n * Decrements the <updateLevel> by one and fires an <undo>\n * event if the <updateLevel> reaches 0. This function\n * indirectly fires a <change> event by invoking the notify\n * function on the <currentEdit> und then creates a new\n * <currentEdit> using <createUndoableEdit>.\n *\n * The <undo> event is fired only once per edit, whereas\n * the <change> event is fired whenever the notify\n * function is invoked, that is, on undo and redo of\n * the edit.\n */\nmxGraphModel.prototype.endUpdate = function()\n{\n\tthis.updateLevel--;\n\t\n\tif (this.updateLevel == 0)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tif (!this.endingUpdate)\n\t{\n\t\tthis.endingUpdate = this.updateLevel == 0;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.END_UPDATE, 'edit', this.currentEdit));\n\n\t\ttry\n\t\t{\t\t\n\t\t\tif (this.endingUpdate && !this.currentEdit.isEmpty())\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_UNDO, 'edit', this.currentEdit));\n\t\t\t\tvar tmp = this.currentEdit;\n\t\t\t\tthis.currentEdit = this.createUndoableEdit();\n\t\t\t\ttmp.notify();\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', tmp));\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.endingUpdate = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: createUndoableEdit\n * \n * Creates a new <mxUndoableEdit> that implements the\n * notify function to fire a <change> and <notify> event\n * through the <mxUndoableEdit>'s source.\n * \n * Parameters:\n * \n * significant - Optional boolean that specifies if the edit to be created is\n * significant. Default is true.\n */\nmxGraphModel.prototype.createUndoableEdit = function(significant)\n{\n\tvar edit = new mxUndoableEdit(this, (significant != null) ? significant : true);\n\t\n\tedit.notify = function()\n\t{\n\t\t// LATER: Remove changes property (deprecated)\n\t\tedit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'edit', edit, 'changes', edit.changes));\n\t\tedit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n\t\t\t'edit', edit, 'changes', edit.changes));\n\t};\n\t\n\treturn edit;\n};\n\n/**\n * Function: mergeChildren\n * \n * Merges the children of the given cell into the given target cell inside\n * this model. All cells are cloned unless there is a corresponding cell in\n * the model with the same id, in which case the source cell is ignored and\n * all edges are connected to the corresponding cell in this model. Edges\n * are considered to have no identity and are always cloned unless the\n * cloneAllEdges flag is set to false, in which case edges with the same\n * id in the target model are reconnected to reflect the terminals of the\n * source edges.\n */\nmxGraphModel.prototype.mergeChildren = function(from, to, cloneAllEdges)\n{\n\tcloneAllEdges = (cloneAllEdges != null) ? cloneAllEdges : true;\n\t\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tvar mapping = new Object();\n\t\tthis.mergeChildrenImpl(from, to, cloneAllEdges, mapping);\n\t\t\n\t\t// Post-processes all edges in the mapping and\n\t\t// reconnects the terminals to the corresponding\n\t\t// cells in the target model\n\t\tfor (var key in mapping)\n\t\t{\n\t\t\tvar cell = mapping[key];\n\t\t\tvar terminal = this.getTerminal(cell, true);\n\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tterminal = mapping[mxCellPath.create(terminal)];\n\t\t\t\tthis.setTerminal(cell, terminal, true);\n\t\t\t}\n\t\t\t\n\t\t\tterminal = this.getTerminal(cell, false);\n\t\t\t\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tterminal = mapping[mxCellPath.create(terminal)];\n\t\t\t\tthis.setTerminal(cell, terminal, false);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: mergeChildren\n * \n * Clones the children of the source cell into the given target cell in\n * this model and adds an entry to the mapping that maps from the source\n * cell to the target cell with the same id or the clone of the source cell\n * that was inserted into this model.\n */\nmxGraphModel.prototype.mergeChildrenImpl = function(from, to, cloneAllEdges, mapping)\n{\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tvar childCount = from.getChildCount();\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = from.getChildAt(i);\n\t\t\t\n\t\t\tif (typeof(cell.getId) == 'function')\n\t\t\t{\n\t\t\t\tvar id = cell.getId();\n\t\t\t\tvar target = (id != null && (!this.isEdge(cell) || !cloneAllEdges)) ?\n\t\t\t\t\t\tthis.getCell(id) : null;\n\t\t\t\t\n\t\t\t\t// Clones and adds the child if no cell exists for the id\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\tvar clone = cell.clone();\n\t\t\t\t\tclone.setId(id);\n\t\t\t\t\t\n\t\t\t\t\t// Sets the terminals from the original cell to the clone\n\t\t\t\t\t// because the lookup uses strings not cells in JS\n\t\t\t\t\tclone.setTerminal(cell.getTerminal(true), true);\n\t\t\t\t\tclone.setTerminal(cell.getTerminal(false), false);\n\t\t\t\t\t\n\t\t\t\t\t// Do *NOT* use model.add as this will move the edge away\n\t\t\t\t\t// from the parent in updateEdgeParent if maintainEdgeParent\n\t\t\t\t\t// is enabled in the target model\n\t\t\t\t\ttarget = to.insert(clone);\n\t\t\t\t\tthis.cellAdded(target);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Stores the mapping for later reconnecting edges\n\t\t\t\tmapping[mxCellPath.create(cell)] = target;\n\t\t\t\t\n\t\t\t\t// Recurses\n\t\t\t\tthis.mergeChildrenImpl(cell, target, cloneAllEdges, mapping);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: getParents\n * \n * Returns an array that represents the set (no duplicates) of all parents\n * for the given array of cells.\n * \n * Parameters:\n * \n * cells - Array of cells whose parents should be returned.\n */\nmxGraphModel.prototype.getParents = function(cells)\n{\n\tvar parents = [];\n\t\n\tif (cells != null)\n\t{\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar parent = this.getParent(cells[i]);\n\t\t\t\n\t\t\tif (parent != null && !dict.get(parent))\n\t\t\t{\n\t\t\t\tdict.put(parent, true);\n\t\t\t\tparents.push(parent);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn parents;\n};\n\n//\n// Cell Cloning\n//\n\n/**\n * Function: cloneCell\n * \n * Returns a deep clone of the given <mxCell> (including\n * the children) which is created using <cloneCells>.\n *\n * Parameters:\n * \n * cell - <mxCell> to be cloned.\n * includeChildren - Optional boolean indicating if the cells should be cloned\n * with all descendants. Default is true.\n */\nmxGraphModel.prototype.cloneCell = function(cell, includeChildren)\n{\n\tif (cell != null)\n\t{\n\t\treturn this.cloneCells([cell], includeChildren)[0];\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: cloneCells\n * \n * Returns an array of clones for the given array of <mxCells>.\n * Depending on the value of includeChildren, a deep clone is created for\n * each cell. Connections are restored based if the corresponding\n * cell is contained in the passed in array.\n *\n * Parameters:\n * \n * cells - Array of <mxCell> to be cloned.\n * includeChildren - Optional boolean indicating if the cells should be cloned\n * with all descendants. Default is true.\n * mapping - Optional mapping for existing clones.\n */\nmxGraphModel.prototype.cloneCells = function(cells, includeChildren, mapping)\n{\n\tincludeChildren = (includeChildren != null) ? includeChildren : true;\n\tmapping = (mapping != null) ? mapping : new Object();\n\tvar clones = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (cells[i] != null)\n\t\t{\n\t\t\tclones.push(this.cloneCellImpl(cells[i], mapping, includeChildren));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclones.push(null);\n\t\t}\n\t}\n\t\n\tfor (var i = 0; i < clones.length; i++)\n\t{\n\t\tif (clones[i] != null)\n\t\t{\n\t\t\tthis.restoreClone(clones[i], cells[i], mapping);\n\t\t}\n\t}\n\t\n\treturn clones;\n};\n\t\t\t\n/**\n * Function: cloneCellImpl\n * \n * Inner helper method for cloning cells recursively.\n */\nmxGraphModel.prototype.cloneCellImpl = function(cell, mapping, includeChildren)\n{\n\tvar ident = mxObjectIdentity.get(cell);\n\tvar clone = mapping[ident];\n\t\n\tif (clone == null)\n\t{\n\t\tclone = this.cellCloned(cell);\n\t\tmapping[ident] = clone;\n\n\t\tif (includeChildren)\n\t\t{\n\t\t\tvar childCount = this.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar cloneChild = this.cloneCellImpl(\n\t\t\t\t\tthis.getChildAt(cell, i), mapping, true);\n\t\t\t\tclone.insert(cloneChild);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn clone;\n};\n\n/**\n * Function: cellCloned\n * \n * Hook for cloning the cell. This returns cell.clone() or\n * any possible exceptions.\n */\nmxGraphModel.prototype.cellCloned = function(cell)\n{\n\treturn cell.clone();\n};\n\n/**\n * Function: restoreClone\n * \n * Inner helper method for restoring the connections in\n * a network of cloned cells.\n */\nmxGraphModel.prototype.restoreClone = function(clone, cell, mapping)\n{\n\tvar source = this.getTerminal(cell, true);\n\t\n\tif (source != null)\n\t{\n\t\tvar tmp = mapping[mxObjectIdentity.get(source)];\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\ttmp.insertEdge(clone, true);\n\t\t}\n\t}\n\t\n\tvar target = this.getTerminal(cell, false);\n\t\n\tif (target != null)\n\t{\n\t\tvar tmp = mapping[mxObjectIdentity.get(target)];\n\t\t\n\t\tif (tmp != null)\n\t\t{\t\n\t\t\ttmp.insertEdge(clone, false);\n\t\t}\n\t}\n\t\n\tvar childCount = this.getChildCount(clone);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.restoreClone(this.getChildAt(clone, i),\n\t\t\tthis.getChildAt(cell, i), mapping);\n\t}\n};\n\n//\n// Atomic changes\n//\n\n/**\n * Class: mxRootChange\n * \n * Action to change the root in a model.\n *\n * Constructor: mxRootChange\n * \n * Constructs a change of the root in the\n * specified model.\n */\nfunction mxRootChange(model, root)\n{\n\tthis.model = model;\n\tthis.root = root;\n\tthis.previous = root;\n};\n\n/**\n * Function: execute\n * \n * Carries out a change of the root using\n * <mxGraphModel.rootChanged>.\n */\nmxRootChange.prototype.execute = function()\n{\n\tthis.root = this.previous;\n\tthis.previous = this.model.rootChanged(this.previous);\n};\n\n/**\n * Class: mxChildChange\n * \n * Action to add or remove a child in a model.\n *\n * Constructor: mxChildChange\n * \n * Constructs a change of a child in the\n * specified model.\n */\nfunction mxChildChange(model, parent, child, index)\n{\n\tthis.model = model;\n\tthis.parent = parent;\n\tthis.previous = parent;\n\tthis.child = child;\n\tthis.index = index;\n\tthis.previousIndex = index;\n};\n\n/**\n * Function: execute\n * \n * Changes the parent of <child> using\n * <mxGraphModel.parentForCellChanged> and\n * removes or restores the cell's\n * connections.\n */\nmxChildChange.prototype.execute = function()\n{\n\tif (this.child != null)\n\t{\n\t\tvar tmp = this.model.getParent(this.child);\n\t\tvar tmp2 = (tmp != null) ? tmp.getIndex(this.child) : 0;\n\t\t\n\t\tif (this.previous == null)\n\t\t{\n\t\t\tthis.connect(this.child, false);\n\t\t}\n\t\t\n\t\ttmp = this.model.parentForCellChanged(\n\t\t\tthis.child, this.previous, this.previousIndex);\n\t\t\t\n\t\tif (this.previous != null)\n\t\t{\n\t\t\tthis.connect(this.child, true);\n\t\t}\n\t\t\n\t\tthis.parent = this.previous;\n\t\tthis.previous = tmp;\n\t\tthis.index = this.previousIndex;\n\t\tthis.previousIndex = tmp2;\n\t}\n};\n\n/**\n * Function: disconnect\n * \n * Disconnects the given cell recursively from its\n * terminals and stores the previous terminal in the\n * cell's terminals.\n */\nmxChildChange.prototype.connect = function(cell, isConnect)\n{\n\tisConnect = (isConnect != null) ? isConnect : true;\n\t\n\tvar source = cell.getTerminal(true);\n\tvar target = cell.getTerminal(false);\n\t\n\tif (source != null)\n\t{\n\t\tif (isConnect)\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, source, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, null, true);\n\t\t}\n\t}\n\t\n\tif (target != null)\n\t{\n\t\tif (isConnect)\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, target, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, null, false);\n\t\t}\n\t}\n\t\n\tcell.setTerminal(source, true);\n\tcell.setTerminal(target, false);\n\t\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i=0; i<childCount; i++)\n\t{\n\t\tthis.connect(this.model.getChildAt(cell, i), isConnect);\n\t}\n};\n\n/**\n * Class: mxTerminalChange\n * \n * Action to change a terminal in a model.\n *\n * Constructor: mxTerminalChange\n * \n * Constructs a change of a terminal in the \n * specified model.\n */\nfunction mxTerminalChange(model, cell, terminal, source)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.terminal = terminal;\n\tthis.previous = terminal;\n\tthis.source = source;\n};\n\n/**\n * Function: execute\n * \n * Changes the terminal of <cell> to <previous> using\n * <mxGraphModel.terminalForCellChanged>.\n */\nmxTerminalChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.terminal = this.previous;\n\t\tthis.previous = this.model.terminalForCellChanged(\n\t\t\tthis.cell, this.previous, this.source);\n\t}\n};\n\n/**\n * Class: mxValueChange\n * \n * Action to change a user object in a model.\n *\n * Constructor: mxValueChange\n * \n * Constructs a change of a user object in the \n * specified model.\n */\nfunction mxValueChange(model, cell, value)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.value = value;\n\tthis.previous = value;\n};\n\n/**\n * Function: execute\n * \n * Changes the value of <cell> to <previous> using\n * <mxGraphModel.valueForCellChanged>.\n */\nmxValueChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.value = this.previous;\n\t\tthis.previous = this.model.valueForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxStyleChange\n * \n * Action to change a cell's style in a model.\n *\n * Constructor: mxStyleChange\n * \n * Constructs a change of a style in the\n * specified model.\n */\nfunction mxStyleChange(model, cell, style)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.style = style;\n\tthis.previous = style;\n};\n\n/**\n * Function: execute\n * \n * Changes the style of <cell> to <previous> using\n * <mxGraphModel.styleForCellChanged>.\n */\nmxStyleChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.style = this.previous;\n\t\tthis.previous = this.model.styleForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxGeometryChange\n * \n * Action to change a cell's geometry in a model.\n *\n * Constructor: mxGeometryChange\n * \n * Constructs a change of a geometry in the\n * specified model.\n */\nfunction mxGeometryChange(model, cell, geometry)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.geometry = geometry;\n\tthis.previous = geometry;\n};\n\n/**\n * Function: execute\n * \n * Changes the geometry of <cell> ro <previous> using\n * <mxGraphModel.geometryForCellChanged>.\n */\nmxGeometryChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.geometry = this.previous;\n\t\tthis.previous = this.model.geometryForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxCollapseChange\n * \n * Action to change a cell's collapsed state in a model.\n *\n * Constructor: mxCollapseChange\n * \n * Constructs a change of a collapsed state in the\n * specified model.\n */\nfunction mxCollapseChange(model, cell, collapsed)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.collapsed = collapsed;\n\tthis.previous = collapsed;\n};\n\n/**\n * Function: execute\n * \n * Changes the collapsed state of <cell> to <previous> using\n * <mxGraphModel.collapsedStateForCellChanged>.\n */\nmxCollapseChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.collapsed = this.previous;\n\t\tthis.previous = this.model.collapsedStateForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxVisibleChange\n * \n * Action to change a cell's visible state in a model.\n *\n * Constructor: mxVisibleChange\n * \n * Constructs a change of a visible state in the\n * specified model.\n */\nfunction mxVisibleChange(model, cell, visible)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.visible = visible;\n\tthis.previous = visible;\n};\n\n/**\n * Function: execute\n * \n * Changes the visible state of <cell> to <previous> using\n * <mxGraphModel.visibleStateForCellChanged>.\n */\nmxVisibleChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.visible = this.previous;\n\t\tthis.previous = this.model.visibleStateForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxCellAttributeChange\n * \n * Action to change the attribute of a cell's user object.\n * There is no method on the graph model that uses this\n * action. To use the action, you can use the code shown\n * in the example below.\n * \n * Example:\n * \n * To change the attributeName in the cell's user object\n * to attributeValue, use the following code:\n * \n * (code)\n * model.beginUpdate();\n * try\n * {\n *   var edit = new mxCellAttributeChange(\n *     cell, attributeName, attributeValue);\n *   model.execute(edit);\n * }\n * finally\n * {\n *   model.endUpdate();\n * } \n * (end)\n *\n * Constructor: mxCellAttributeChange\n * \n * Constructs a change of a attribute of the DOM node\n * stored as the value of the given <mxCell>.\n */\nfunction mxCellAttributeChange(cell, attribute, value)\n{\n\tthis.cell = cell;\n\tthis.attribute = attribute;\n\tthis.value = value;\n\tthis.previous = value;\n};\n\n/**\n * Function: execute\n * \n * Changes the attribute of the cell's user object by\n * using <mxCell.setAttribute>.\n */\nmxCellAttributeChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tvar tmp = this.cell.getAttribute(this.attribute);\n\t\t\n\t\tif (this.previous == null)\n\t\t{\n\t\t\tthis.cell.value.removeAttribute(this.attribute);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.cell.setAttribute(this.attribute, this.previous);\n\t\t}\n\t\t\n\t\tthis.previous = tmp;\n\t}\n};\n\n__mxOutput.mxGraphModel = typeof mxGraphModel !== 'undefined' ? mxGraphModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCell\n *\n * Cells are the elements of the graph model. They represent the state\n * of the groups, vertices and edges in a graph.\n * \n * Custom attributes:\n * \n * For custom attributes we recommend using an XML node as the value of a cell.\n * The following code can be used to create a cell with an XML node as the\n * value:\n * \n * (code)\n * var doc = mxUtils.createXmlDocument();\n * var node = doc.createElement('MyNode')\n * node.setAttribute('label', 'MyLabel');\n * node.setAttribute('attribute1', 'value1');\n * graph.insertVertex(graph.getDefaultParent(), null, node, 40, 40, 80, 30);\n * (end)\n * \n * For the label to work, <mxGraph.convertValueToString> and\n * <mxGraph.cellLabelChanged> should be overridden as follows:\n * \n * (code)\n * graph.convertValueToString = function(cell)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     return cell.getAttribute('label', '')\n *   }\n * };\n * \n * var cellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged = function(cell, newValue, autoSize)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     // Clones the value for correct undo/redo\n *     var elt = cell.value.cloneNode(true);\n *     elt.setAttribute('label', newValue);\n *     newValue = elt;\n *   }\n *   \n *   cellLabelChanged.apply(this, arguments);\n * };\n * (end)\n * \n * Callback: onInit\n *\n * Called from within the constructor.\n * \n * Constructor: mxCell\n *\n * Constructs a new cell to be used in a graph model.\n * This method invokes <onInit> upon completion.\n * \n * Parameters:\n * \n * value - Optional object that represents the cell value.\n * geometry - Optional <mxGeometry> that specifies the geometry.\n * style - Optional formatted string that defines the style.\n */\nfunction mxCell(value, geometry, style)\n{\n\tthis.value = value;\n\tthis.setGeometry(geometry);\n\tthis.setStyle(style);\n\t\n\tif (this.onInit != null)\n\t{\n\t\tthis.onInit();\n\t}\n};\n\n/**\n * Variable: id\n *\n * Holds the Id. Default is null.\n */\nmxCell.prototype.id = null;\n\n/**\n * Variable: value\n *\n * Holds the user object. Default is null.\n */\nmxCell.prototype.value = null;\n\n/**\n * Variable: geometry\n *\n * Holds the <mxGeometry>. Default is null.\n */\nmxCell.prototype.geometry = null;\n\n/**\n * Variable: style\n *\n * Holds the style as a string of the form [(stylename|key=value);]. Default is\n * null.\n */\nmxCell.prototype.style = null;\n\n/**\n * Variable: vertex\n *\n * Specifies whether the cell is a vertex. Default is false.\n */\nmxCell.prototype.vertex = false;\n\n/**\n * Variable: edge\n *\n * Specifies whether the cell is an edge. Default is false.\n */\nmxCell.prototype.edge = false;\n\n/**\n * Variable: connectable\n *\n * Specifies whether the cell is connectable. Default is true.\n */\nmxCell.prototype.connectable = true;\n\n/**\n * Variable: visible\n *\n * Specifies whether the cell is visible. Default is true.\n */\nmxCell.prototype.visible = true;\n\n/**\n * Variable: collapsed\n *\n * Specifies whether the cell is collapsed. Default is false.\n */\nmxCell.prototype.collapsed = false;\n\n/**\n * Variable: parent\n *\n * Reference to the parent cell.\n */\nmxCell.prototype.parent = null;\n\n/**\n * Variable: source\n *\n * Reference to the source terminal.\n */\nmxCell.prototype.source = null;\n\n/**\n * Variable: target\n *\n * Reference to the target terminal.\n */\nmxCell.prototype.target = null;\n\n/**\n * Variable: children\n *\n * Holds the child cells.\n */\nmxCell.prototype.children = null;\n\n/**\n * Variable: edges\n *\n * Holds the edges.\n */\nmxCell.prototype.edges = null;\n\n/**\n * Variable: mxTransient\n *\n * List of members that should not be cloned inside <clone>. This field is\n * passed to <mxUtils.clone> and is not made persistent in <mxCellCodec>.\n * This is not a convention for all classes, it is only used in this class\n * to mark transient fields since transient modifiers are not supported by\n * the language.\n */\nmxCell.prototype.mxTransient = ['id', 'value', 'parent', 'source',\n                                'target', 'children', 'edges'];\n\n/**\n * Function: getId\n *\n * Returns the Id of the cell as a string.\n */\nmxCell.prototype.getId = function()\n{\n\treturn this.id;\n};\n\t\t\n/**\n * Function: setId\n *\n * Sets the Id of the cell to the given string.\n */\nmxCell.prototype.setId = function(id)\n{\n\tthis.id = id;\n};\n\n/**\n * Function: getValue\n *\n * Returns the user object of the cell. The user\n * object is stored in <value>.\n */\nmxCell.prototype.getValue = function()\n{\n\treturn this.value;\n};\n\t\t\n/**\n * Function: setValue\n *\n * Sets the user object of the cell. The user object\n * is stored in <value>.\n */\nmxCell.prototype.setValue = function(value)\n{\n\tthis.value = value;\n};\n\n/**\n * Function: valueChanged\n *\n * Changes the user object after an in-place edit\n * and returns the previous value. This implementation\n * replaces the user object with the given value and\n * returns the old user object.\n */\nmxCell.prototype.valueChanged = function(newValue)\n{\n\tvar previous = this.getValue();\n\tthis.setValue(newValue);\n\t\n\treturn previous;\n};\n\n/**\n * Function: getGeometry\n *\n * Returns the <mxGeometry> that describes the <geometry>.\n */\nmxCell.prototype.getGeometry = function()\n{\n\treturn this.geometry;\n};\n\n/**\n * Function: setGeometry\n *\n * Sets the <mxGeometry> to be used as the <geometry>.\n */\nmxCell.prototype.setGeometry = function(geometry)\n{\n\tthis.geometry = geometry;\n};\n\n/**\n * Function: getStyle\n *\n * Returns a string that describes the <style>.\n */\nmxCell.prototype.getStyle = function()\n{\n\treturn this.style;\n};\n\n/**\n * Function: setStyle\n *\n * Sets the string to be used as the <style>.\n */\nmxCell.prototype.setStyle = function(style)\n{\n\tthis.style = style;\n};\n\n/**\n * Function: isVertex\n *\n * Returns true if the cell is a vertex.\n */\nmxCell.prototype.isVertex = function()\n{\n\treturn this.vertex != 0;\n};\n\n/**\n * Function: setVertex\n *\n * Specifies if the cell is a vertex. This should only be assigned at\n * construction of the cell and not be changed during its lifecycle.\n * \n * Parameters:\n * \n * vertex - Boolean that specifies if the cell is a vertex.\n */\nmxCell.prototype.setVertex = function(vertex)\n{\n\tthis.vertex = vertex;\n};\n\n/**\n * Function: isEdge\n *\n * Returns true if the cell is an edge.\n */\nmxCell.prototype.isEdge = function()\n{\n\treturn this.edge != 0;\n};\n\t\n/**\n * Function: setEdge\n * \n * Specifies if the cell is an edge. This should only be assigned at\n * construction of the cell and not be changed during its lifecycle.\n * \n * Parameters:\n * \n * edge - Boolean that specifies if the cell is an edge.\n */\nmxCell.prototype.setEdge = function(edge)\n{\n\tthis.edge = edge;\n};\n\n/**\n * Function: isConnectable\n *\n * Returns true if the cell is connectable.\n */\nmxCell.prototype.isConnectable = function()\n{\n\treturn this.connectable != 0;\n};\n\n/**\n * Function: setConnectable\n *\n * Sets the connectable state.\n * \n * Parameters:\n * \n * connectable - Boolean that specifies the new connectable state.\n */\nmxCell.prototype.setConnectable = function(connectable)\n{\n\tthis.connectable = connectable;\n};\n\n/**\n * Function: isVisible\n *\n * Returns true if the cell is visibile.\n */\nmxCell.prototype.isVisible = function()\n{\n\treturn this.visible != 0;\n};\n\n/**\n * Function: setVisible\n *\n * Specifies if the cell is visible.\n * \n * Parameters:\n * \n * visible - Boolean that specifies the new visible state.\n */\nmxCell.prototype.setVisible = function(visible)\n{\n\tthis.visible = visible;\n};\n\n/**\n * Function: isCollapsed\n *\n * Returns true if the cell is collapsed.\n */\nmxCell.prototype.isCollapsed = function()\n{\n\treturn this.collapsed != 0;\n};\n\n/**\n * Function: setCollapsed\n *\n * Sets the collapsed state.\n * \n * Parameters:\n * \n * collapsed - Boolean that specifies the new collapsed state.\n */\nmxCell.prototype.setCollapsed = function(collapsed)\n{\n\tthis.collapsed = collapsed;\n};\n\n/**\n * Function: getParent\n *\n * Returns the cell's parent.\n */\nmxCell.prototype.getParent = function()\n{\n\treturn this.parent;\n};\n\n/**\n * Function: setParent\n *\n * Sets the parent cell.\n * \n * Parameters:\n * \n * parent - <mxCell> that represents the new parent.\n */\nmxCell.prototype.setParent = function(parent)\n{\n\tthis.parent = parent;\n};\n\n/**\n * Function: getTerminal\n *\n * Returns the source or target terminal.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source terminal should be\n * returned.\n */\nmxCell.prototype.getTerminal = function(source)\n{\n\treturn (source) ? this.source : this.target;\n};\n\n/**\n * Function: setTerminal\n *\n * Sets the source or target terminal and returns the new terminal.\n * \n * Parameters:\n * \n * terminal - <mxCell> that represents the new source or target terminal.\n * isSource - Boolean that specifies if the source or target terminal\n * should be set.\n */\nmxCell.prototype.setTerminal = function(terminal, isSource)\n{\n\tif (isSource)\n\t{\n\t\tthis.source = terminal;\n\t}\n\telse\n\t{\n\t\tthis.target = terminal;\n\t}\n\t\n\treturn terminal;\n};\n\n/**\n * Function: getChildCount\n *\n * Returns the number of child cells.\n */\nmxCell.prototype.getChildCount = function()\n{\n\treturn (this.children == null) ? 0 : this.children.length;\n};\n\n/**\n * Function: getIndex\n *\n * Returns the index of the specified child in the child array.\n * \n * Parameters:\n * \n * child - Child whose index should be returned.\n */\nmxCell.prototype.getIndex = function(child)\n{\n\treturn mxUtils.indexOf(this.children, child);\n};\n\n/**\n * Function: getChildAt\n *\n * Returns the child at the specified index.\n * \n * Parameters:\n * \n * index - Integer that specifies the child to be returned.\n */\nmxCell.prototype.getChildAt = function(index)\n{\n\treturn (this.children == null) ? null : this.children[index];\n};\n\n/**\n * Function: insert\n *\n * Inserts the specified child into the child array at the specified index\n * and updates the parent reference of the child. If not childIndex is\n * specified then the child is appended to the child array. Returns the\n * inserted child.\n * \n * Parameters:\n * \n * child - <mxCell> to be inserted or appended to the child array.\n * index - Optional integer that specifies the index at which the child\n * should be inserted into the child array.\n */\nmxCell.prototype.insert = function(child, index)\n{\n\tif (child != null)\n\t{\n\t\tif (index == null)\n\t\t{\n\t\t\tindex = this.getChildCount();\n\t\t\t\n\t\t\tif (child.getParent() == this)\n\t\t\t{\n\t\t\t\tindex--;\n\t\t\t}\n\t\t}\n\n\t\tchild.removeFromParent();\n\t\tchild.setParent(this);\n\t\t\n\t\tif (this.children == null)\n\t\t{\n\t\t\tthis.children = [];\n\t\t\tthis.children.push(child);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.children.splice(index, 0, child);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: remove\n *\n * Removes the child at the specified index from the child array and\n * returns the child that was removed. Will remove the parent reference of\n * the child.\n * \n * Parameters:\n * \n * index - Integer that specifies the index of the child to be\n * removed.\n */\nmxCell.prototype.remove = function(index)\n{\n\tvar child = null;\n\t\n\tif (this.children != null && index >= 0)\n\t{\n\t\tchild = this.getChildAt(index);\n\t\t\n\t\tif (child != null)\n\t\t{\n\t\t\tthis.children.splice(index, 1);\n\t\t\tchild.setParent(null);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: removeFromParent\n *\n * Removes the cell from its parent.\n */\nmxCell.prototype.removeFromParent = function()\n{\n\tif (this.parent != null)\n\t{\n\t\tvar index = this.parent.getIndex(this);\n\t\tthis.parent.remove(index);\n\t}\n};\n\n/**\n * Function: getEdgeCount\n *\n * Returns the number of edges in the edge array.\n */\nmxCell.prototype.getEdgeCount = function()\n{\n\treturn (this.edges == null) ? 0 : this.edges.length;\n};\n\n/**\n * Function: getEdgeIndex\n *\n * Returns the index of the specified edge in <edges>.\n * \n * Parameters:\n * \n * edge - <mxCell> whose index in <edges> should be returned.\n */\nmxCell.prototype.getEdgeIndex = function(edge)\n{\n\treturn mxUtils.indexOf(this.edges, edge);\n};\n\n/**\n * Function: getEdgeAt\n *\n * Returns the edge at the specified index in <edges>.\n * \n * Parameters:\n * \n * index - Integer that specifies the index of the edge to be returned.\n */\nmxCell.prototype.getEdgeAt = function(index)\n{\n\treturn (this.edges == null) ? null : this.edges[index];\n};\n\n/**\n * Function: insertEdge\n *\n * Inserts the specified edge into the edge array and returns the edge.\n * Will update the respective terminal reference of the edge.\n * \n * Parameters:\n * \n * edge - <mxCell> to be inserted into the edge array.\n * isOutgoing - Boolean that specifies if the edge is outgoing.\n */\nmxCell.prototype.insertEdge = function(edge, isOutgoing)\n{\n\tif (edge != null)\n\t{\n\t\tedge.removeFromTerminal(isOutgoing);\n\t\tedge.setTerminal(this, isOutgoing);\n\t\t\n\t\tif (this.edges == null ||\n\t\t\tedge.getTerminal(!isOutgoing) != this ||\n\t\t\tmxUtils.indexOf(this.edges, edge) < 0)\n\t\t{\n\t\t\tif (this.edges == null)\n\t\t\t{\n\t\t\t\tthis.edges = [];\n\t\t\t}\n\t\t\t\n\t\t\tthis.edges.push(edge);\n\t\t}\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: removeEdge\n *\n * Removes the specified edge from the edge array and returns the edge.\n * Will remove the respective terminal reference from the edge.\n * \n * Parameters:\n * \n * edge - <mxCell> to be removed from the edge array.\n * isOutgoing - Boolean that specifies if the edge is outgoing.\n */\nmxCell.prototype.removeEdge = function(edge, isOutgoing)\n{\n\tif (edge != null)\n\t{\n\t\tif (edge.getTerminal(!isOutgoing) != this &&\n\t\t\tthis.edges != null)\n\t\t{\n\t\t\tvar index = this.getEdgeIndex(edge);\n\t\t\t\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\tthis.edges.splice(index, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\tedge.setTerminal(null, isOutgoing);\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: removeFromTerminal\n *\n * Removes the edge from its source or target terminal.\n * \n * Parameters:\n * \n * isSource - Boolean that specifies if the edge should be removed from its\n * source or target terminal.\n */\nmxCell.prototype.removeFromTerminal = function(isSource)\n{\n\tvar terminal = this.getTerminal(isSource);\n\t\n\tif (terminal != null)\n\t{\n\t\tterminal.removeEdge(this, isSource);\n\t}\n};\n\n/**\n * Function: hasAttribute\n * \n * Returns true if the user object is an XML node that contains the given\n * attribute.\n * \n * Parameters:\n * \n * name - Name of the attribute.\n */\nmxCell.prototype.hasAttribute = function(name)\n{\n\tvar userObject = this.getValue();\n\t\n\treturn (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT && userObject.hasAttribute) ?\n\t\tuserObject.hasAttribute(name) : userObject.getAttribute(name) != null;\n};\n\n/**\n * Function: getAttribute\n *\n * Returns the specified attribute from the user object if it is an XML\n * node.\n * \n * Parameters:\n * \n * name - Name of the attribute whose value should be returned.\n * defaultValue - Optional default value to use if the attribute has no\n * value.\n */\nmxCell.prototype.getAttribute = function(name, defaultValue)\n{\n\tvar userObject = this.getValue();\n\t\n\tvar val = (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT) ?\n\t\tuserObject.getAttribute(name) : null;\n\t\t\n\treturn (val != null) ? val : defaultValue;\n};\n\n/**\n * Function: setAttribute\n *\n * Sets the specified attribute on the user object if it is an XML node.\n * \n * Parameters:\n * \n * name - Name of the attribute whose value should be set.\n * value - New value of the attribute.\n */\nmxCell.prototype.setAttribute = function(name, value)\n{\n\tvar userObject = this.getValue();\n\t\n\tif (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tuserObject.setAttribute(name, value);\n\t}\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of the cell. Uses <cloneValue> to clone\n * the user object. All fields in <mxTransient> are ignored\n * during the cloning.\n */\nmxCell.prototype.clone = function()\n{\n\tvar clone = mxUtils.clone(this, this.mxTransient);\n\tclone.setValue(this.cloneValue());\n\t\n\treturn clone;\n};\n\n/**\n * Function: cloneValue\n *\n * Returns a clone of the cell's user object.\n */\nmxCell.prototype.cloneValue = function()\n{\n\tvar value = this.getValue();\n\t\n\tif (value != null)\n\t{\n\t\tif (typeof(value.clone) == 'function')\n\t\t{\n\t\t\tvalue = value.clone();\n\t\t}\n\t\telse if (!isNaN(value.nodeType))\n\t\t{\n\t\t\tvalue = value.cloneNode(true);\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n__mxOutput.mxCell = typeof mxCell !== 'undefined' ? mxCell : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGeometry\n * \n * Extends <mxRectangle> to represent the geometry of a cell.\n * \n * For vertices, the geometry consists of the x- and y-location, and the width\n * and height. For edges, the geometry consists of the optional terminal- and\n * control points. The terminal points are only required if an edge is\n * unconnected, and are stored in the <sourcePoint> and <targetPoint>\n * variables, respectively.\n * \n * Example:\n * \n * If an edge is unconnected, that is, it has no source or target terminal,\n * then a geometry with terminal points for a new edge can be defined as\n * follows.\n * \n * (code)\n * geometry.setTerminalPoint(new mxPoint(x1, y1), true);\n * geometry.points = [new mxPoint(x2, y2)];\n * geometry.setTerminalPoint(new mxPoint(x3, y3), false);\n * (end)\n * \n * Control points are used regardless of the connected state of an edge and may\n * be ignored or interpreted differently depending on the edge's <mxEdgeStyle>.\n * \n * To disable automatic reset of control points after a cell has been moved or\n * resized, the the <mxGraph.resizeEdgesOnMove> and\n * <mxGraph.resetEdgesOnResize> may be used.\n *\n * Edge Labels:\n * \n * Using the x- and y-coordinates of a cell's geometry, it is possible to\n * position the label on edges on a specific location on the actual edge shape\n * as it appears on the screen. The x-coordinate of an edge's geometry is used\n * to describe the distance from the center of the edge from -1 to 1 with 0\n * being the center of the edge and the default value. The y-coordinate of an\n * edge's geometry is used to describe the absolute, orthogonal distance in\n * pixels from that point. In addition, the <mxGeometry.offset> is used as an\n * absolute offset vector from the resulting point.\n * \n * This coordinate system is applied if <relative> is true, otherwise the\n * offset defines the absolute vector from the edge's center point to the\n * label and the values for <x> and <y> are ignored.\n * \n * The width and height parameter for edge geometries can be used to set the\n * label width and height (eg. for word wrapping).\n * \n * Ports:\n * \n * The term \"port\" refers to a relatively positioned, connectable child cell,\n * which is used to specify the connection between the parent and another cell\n * in the graph. Ports are typically modeled as vertices with relative\n * geometries.\n * \n * Offsets:\n * \n * The <offset> field is interpreted in 3 different ways, depending on the cell\n * and the geometry. For edges, the offset defines the absolute offset for the\n * edge label. For relative geometries, the offset defines the absolute offset\n * for the origin (top, left corner) of the vertex, otherwise the offset\n * defines the absolute offset for the label inside the vertex or group.\n * \n * Constructor: mxGeometry\n *\n * Constructs a new object to describe the size and location of a vertex or\n * the control points of an edge.\n */\nfunction mxGeometry(x, y, width, height)\n{\n\tmxRectangle.call(this, x, y, width, height);\n};\n\n/**\n * Extends mxRectangle.\n */\nmxGeometry.prototype = new mxRectangle();\nmxGeometry.prototype.constructor = mxGeometry;\n\n/**\n * Variable: TRANSLATE_CONTROL_POINTS\n * \n * Global switch to translate the points in translate. Default is true.\n */\nmxGeometry.prototype.TRANSLATE_CONTROL_POINTS = true;\n\n/**\n * Variable: alternateBounds\n *\n * Stores alternate values for x, y, width and height in a rectangle. See\n * <swap> to exchange the values. Default is null.\n */\nmxGeometry.prototype.alternateBounds = null;\n\n/**\n * Variable: sourcePoint\n *\n * Defines the source <mxPoint> of the edge. This is used if the\n * corresponding edge does not have a source vertex. Otherwise it is\n * ignored. Default is  null.\n */\nmxGeometry.prototype.sourcePoint = null;\n\n/**\n * Variable: targetPoint\n *\n * Defines the target <mxPoint> of the edge. This is used if the\n * corresponding edge does not have a target vertex. Otherwise it is\n * ignored. Default is null.\n */\nmxGeometry.prototype.targetPoint = null;\n\n/**\n * Variable: points\n *\n * Array of <mxPoints> which specifies the control points along the edge.\n * These points are the intermediate points on the edge, for the endpoints\n * use <targetPoint> and <sourcePoint> or set the terminals of the edge to\n * a non-null value. Default is null.\n */\nmxGeometry.prototype.points = null;\n\n/**\n * Variable: offset\n *\n * For edges, this holds the offset (in pixels) from the position defined\n * by <x> and <y> on the edge. For relative geometries (for vertices), this\n * defines the absolute offset from the point defined by the relative\n * coordinates. For absolute geometries (for vertices), this defines the\n * offset for the label. Default is null.\n */\nmxGeometry.prototype.offset = null;\n\n/**\n * Variable: relative\n *\n * Specifies if the coordinates in the geometry are to be interpreted as\n * relative coordinates. For edges, this is used to define the location of\n * the edge label relative to the edge as rendered on the display. For\n * vertices, this specifies the relative location inside the bounds of the\n * parent cell.\n * \n * If this is false, then the coordinates are relative to the origin of the\n * parent cell or, for edges, the edge label position is relative to the\n * center of the edge as rendered on screen.\n * \n * Default is false.\n */\nmxGeometry.prototype.relative = false;\n\n/**\n * Function: swap\n * \n * Swaps the x, y, width and height with the values stored in\n * <alternateBounds> and puts the previous values into <alternateBounds> as\n * a rectangle. This operation is carried-out in-place, that is, using the\n * existing geometry instance. If this operation is called during a graph\n * model transactional change, then the geometry should be cloned before\n * calling this method and setting the geometry of the cell using\n * <mxGraphModel.setGeometry>.\n */\nmxGeometry.prototype.swap = function()\n{\n\tif (this.alternateBounds != null)\n\t{\n\t\tvar old = new mxRectangle(\n\t\t\tthis.x, this.y, this.width, this.height);\n\n\t\tthis.x = this.alternateBounds.x;\n\t\tthis.y = this.alternateBounds.y;\n\t\tthis.width = this.alternateBounds.width;\n\t\tthis.height = this.alternateBounds.height;\n\n\t\tthis.alternateBounds = old;\n\t}\n};\n\n/**\n * Function: getTerminalPoint\n * \n * Returns the <mxPoint> representing the source or target point of this\n * edge. This is only used if the edge has no source or target vertex.\n * \n * Parameters:\n * \n * isSource - Boolean that specifies if the source or target point\n * should be returned.\n */\nmxGeometry.prototype.getTerminalPoint = function(isSource)\n{\n\treturn (isSource) ? this.sourcePoint : this.targetPoint;\n};\n\n/**\n * Function: setTerminalPoint\n * \n * Sets the <sourcePoint> or <targetPoint> to the given <mxPoint> and\n * returns the new point.\n * \n * Parameters:\n * \n * point - Point to be used as the new source or target point.\n * isSource - Boolean that specifies if the source or target point\n * should be set.\n */\nmxGeometry.prototype.setTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tthis.sourcePoint = point;\n\t}\n\telse\n\t{\n\t\tthis.targetPoint = point;\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: rotate\n * \n * Rotates the geometry by the given angle around the given center. That is,\n * <x> and <y> of the geometry, the <sourcePoint>, <targetPoint> and all\n * <points> are translated by the given amount. <x> and <y> are only\n * translated if <relative> is false.\n * \n * Parameters:\n * \n * angle - Number that specifies the rotation angle in degrees.\n * cx - <mxPoint> that specifies the center of the rotation.\n */\nmxGeometry.prototype.rotate = function(angle, cx)\n{\n\tvar rad = mxUtils.toRadians(angle);\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(rad);\n\t\n\t// Rotates the geometry\n\tif (!this.relative)\n\t{\n\t\tvar ct = new mxPoint(this.getCenterX(), this.getCenterY());\n\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\t\t\n\t\tthis.x = Math.round(pt.x - this.width / 2);\n\t\tthis.y = Math.round(pt.y - this.height / 2);\n\t}\n\n\t// Rotates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tvar pt = mxUtils.getRotatedPoint(this.sourcePoint, cos, sin, cx);\n\t\tthis.sourcePoint.x = Math.round(pt.x);\n\t\tthis.sourcePoint.y = Math.round(pt.y);\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tvar pt = mxUtils.getRotatedPoint(this.targetPoint, cos, sin, cx);\n\t\tthis.targetPoint.x = Math.round(pt.x);\n\t\tthis.targetPoint.y = Math.round(pt.y);\t\n\t}\n\t\n\t// Translate the control points\n\tif (this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(this.points[i], cos, sin, cx);\n\t\t\t\tthis.points[i].x = Math.round(pt.x);\n\t\t\t\tthis.points[i].y = Math.round(pt.y);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: translate\n * \n * Translates the geometry by the specified amount. That is, <x> and <y> of the\n * geometry, the <sourcePoint>, <targetPoint> and all <points> are translated\n * by the given amount. <x> and <y> are only translated if <relative> is false.\n * If <TRANSLATE_CONTROL_POINTS> is false, then <points> are not modified by\n * this function.\n * \n * Parameters:\n * \n * dx - Number that specifies the x-coordinate of the translation.\n * dy - Number that specifies the y-coordinate of the translation.\n */\nmxGeometry.prototype.translate = function(dx, dy)\n{\n\tdx = parseFloat(dx);\n\tdy = parseFloat(dy);\n\t\n\t// Translates the geometry\n\tif (!this.relative)\n\t{\n\t\tthis.x = parseFloat(this.x) + dx;\n\t\tthis.y = parseFloat(this.y) + dy;\n\t}\n\n\t// Translates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tthis.sourcePoint.x = parseFloat(this.sourcePoint.x) + dx;\n\t\tthis.sourcePoint.y = parseFloat(this.sourcePoint.y) + dy;\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tthis.targetPoint.x = parseFloat(this.targetPoint.x) + dx;\n\t\tthis.targetPoint.y = parseFloat(this.targetPoint.y) + dy;\t\t\n\t}\n\n\t// Translate the control points\n\tif (this.TRANSLATE_CONTROL_POINTS && this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tthis.points[i].x = parseFloat(this.points[i].x) + dx;\n\t\t\t\tthis.points[i].y = parseFloat(this.points[i].y) + dy;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: scale\n * \n * Scales the geometry by the given amount. That is, <x> and <y> of the\n * geometry, the <sourcePoint>, <targetPoint> and all <points> are scaled\n * by the given amount. <x>, <y>, <width> and <height> are only scaled if\n * <relative> is false. If <fixedAspect> is true, then the smaller value\n * is used to scale the width and the height.\n * \n * Parameters:\n * \n * sx - Number that specifies the horizontal scale factor.\n * sy - Number that specifies the vertical scale factor.\n * fixedAspect - Optional boolean to keep the aspect ratio fixed.\n */\nmxGeometry.prototype.scale = function(sx, sy, fixedAspect)\n{\n\tsx = parseFloat(sx);\n\tsy = parseFloat(sy);\n\n\t// Translates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tthis.sourcePoint.x = parseFloat(this.sourcePoint.x) * sx;\n\t\tthis.sourcePoint.y = parseFloat(this.sourcePoint.y) * sy;\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tthis.targetPoint.x = parseFloat(this.targetPoint.x) * sx;\n\t\tthis.targetPoint.y = parseFloat(this.targetPoint.y) * sy;\t\t\n\t}\n\n\t// Translate the control points\n\tif (this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tthis.points[i].x = parseFloat(this.points[i].x) * sx;\n\t\t\t\tthis.points[i].y = parseFloat(this.points[i].y) * sy;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Translates the geometry\n\tif (!this.relative)\n\t{\n\t\tthis.x = parseFloat(this.x) * sx;\n\t\tthis.y = parseFloat(this.y) * sy;\n\n\t\tif (fixedAspect)\n\t\t{\n\t\t\tsy = sx = Math.min(sx, sy);\n\t\t}\n\t\t\n\t\tthis.width = parseFloat(this.width) * sx;\n\t\tthis.height = parseFloat(this.height) * sy;\n\t}\n};\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this geometry.\n */\nmxGeometry.prototype.equals = function(obj)\n{\n\treturn mxRectangle.prototype.equals.apply(this, arguments) &&\n\t\tthis.relative == obj.relative &&\n\t\t((this.sourcePoint == null && obj.sourcePoint == null) || (this.sourcePoint != null && this.sourcePoint.equals(obj.sourcePoint))) &&\n\t\t((this.targetPoint == null && obj.targetPoint == null) || (this.targetPoint != null && this.targetPoint.equals(obj.targetPoint))) &&\n\t\t((this.points == null && obj.points == null) || (this.points != null && mxUtils.equalPoints(this.points, obj.points))) &&\n\t\t((this.alternateBounds == null && obj.alternateBounds == null) || (this.alternateBounds != null && this.alternateBounds.equals(obj.alternateBounds))) &&\n\t\t((this.offset == null && obj.offset == null) || (this.offset != null && this.offset.equals(obj.offset)));\n};\n\n__mxOutput.mxGeometry = typeof mxGeometry !== 'undefined' ? mxGeometry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCellPath =\n{\n\n\t/**\n\t * Class: mxCellPath\n\t * \n\t * Implements a mechanism for temporary cell Ids.\n\t * \n\t * Variable: PATH_SEPARATOR\n\t * \n\t * Defines the separator between the path components. Default is \".\".\n\t */\n\tPATH_SEPARATOR: '.',\n\t\n\t/**\n\t * Function: create\n\t * \n\t * Creates the cell path for the given cell. The cell path is a\n\t * concatenation of the indices of all ancestors on the (finite) path to\n\t * the root, eg. \"0.0.0.1\".\n\t * \n\t * Parameters:\n\t * \n\t * cell - Cell whose path should be returned.\n\t */\n\tcreate: function(cell)\n\t{\n\t\tvar result = '';\n\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tvar parent = cell.getParent();\n\t\t\t\n\t\t\twhile (parent != null)\n\t\t\t{\n\t\t\t\tvar index = parent.getIndex(cell);\n\t\t\t\tresult = index + mxCellPath.PATH_SEPARATOR + result;\n\t\t\t\t\n\t\t\t\tcell = parent;\n\t\t\t\tparent = cell.getParent();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes trailing separator\n\t\tvar n = result.length;\n\t\t\n\t\tif (n > 1)\n\t\t{\n\t\t\tresult = result.substring(0, n - 1);\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: getParentPath\n\t * \n\t * Returns the path for the parent of the cell represented by the given\n\t * path. Returns null if the given path has no parent.\n\t * \n\t * Parameters:\n\t * \n\t * path - Path whose parent path should be returned.\n\t */\n\tgetParentPath: function(path)\n\t{\n\t\tif (path != null)\n\t\t{\n\t\t\tvar index = path.lastIndexOf(mxCellPath.PATH_SEPARATOR);\n\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\treturn path.substring(0, index);\n\t\t\t}\n\t\t\telse if (path.length > 0)\n\t\t\t{\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: resolve\n\t * \n\t * Returns the cell for the specified cell path using the given root as the\n\t * root of the path.\n\t * \n\t * Parameters:\n\t * \n\t * root - Root cell of the path to be resolved.\n\t * path - String that defines the path.\n\t */\n\tresolve: function(root, path)\n\t{\n\t\tvar parent = root;\n\t\t\n\t\tif (path != null)\n\t\t{\n\t\t\tvar tokens = path.split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\n\t\t\tfor (var i=0; i<tokens.length; i++)\n\t\t\t{\n\t\t\t\tparent = parent.getChildAt(parseInt(tokens[i]));\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn parent;\n\t},\n\t\n\t/**\n\t * Function: compare\n\t * \n\t * Compares the given cell paths and returns -1 if p1 is smaller, 0 if\n\t * p1 is equal and 1 if p1 is greater than p2.\n\t */\n\tcompare: function(p1, p2)\n\t{\n\t\tvar min = Math.min(p1.length, p2.length);\n\t\tvar comp = 0;\n\t\t\n\t\tfor (var i = 0; i < min; i++)\n\t\t{\n\t\t\tif (p1[i] != p2[i])\n\t\t\t{\n\t\t\t\tif (p1[i].length == 0 ||\n\t\t\t\t\tp2[i].length == 0)\n\t\t\t\t{\n\t\t\t\t\tcomp = (p1[i] == p2[i]) ? 0 : ((p1[i] > p2[i]) ? 1 : -1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar t1 = parseInt(p1[i]);\n\t\t\t\t\tvar t2 = parseInt(p2[i]);\n\t\t\t\t\t\n\t\t\t\t\tcomp = (t1 == t2) ? 0 : ((t1 > t2) ? 1 : -1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Compares path length if both paths are equal to this point\n\t\tif (comp == 0)\n\t\t{\n\t\t\tvar t1 = p1.length;\n\t\t\tvar t2 = p2.length;\n\t\t\t\n\t\t\tif (t1 != t2)\n\t\t\t{\n\t\t\t\tcomp = (t1 > t2) ? 1 : -1;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn comp;\n\t}\n\n};\n\n__mxOutput.mxCellPath = typeof mxCellPath !== 'undefined' ? mxCellPath : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxPerimeter =\n{\n\t/**\n\t * Class: mxPerimeter\n\t * \n\t * Provides various perimeter functions to be used in a style\n\t * as the value of <mxConstants.STYLE_PERIMETER>. Perimeters for\n\t * rectangle, circle, rhombus and triangle are available.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t * (end)\n\t * \n\t * Or programmatically:\n\t * \n\t * (code)\n\t * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\t * (end)\n\t * \n\t * When adding new perimeter functions, it is recommended to use the \n\t * mxPerimeter-namespace as follows:\n\t * \n\t * (code)\n\t * mxPerimeter.CustomPerimeter = function (bounds, vertex, next, orthogonal)\n\t * {\n\t *   var x = 0; // Calculate x-coordinate\n\t *   var y = 0; // Calculate y-coordainte\n\t *   \n\t *   return new mxPoint(x, y);\n\t * }\n\t * (end)\n\t * \n\t * The new perimeter should then be registered in the <mxStyleRegistry> as follows:\n\t * (code)\n\t * mxStyleRegistry.putValue('customPerimeter', mxPerimeter.CustomPerimeter);\n\t * (end)\n\t * \n\t * The custom perimeter above can now be used in a specific vertex as follows:\n\t * \n\t * (code)\n\t * model.setStyle(vertex, 'perimeter=customPerimeter');\n\t * (end)\n\t * \n\t * Note that the key of the <mxStyleRegistry> entry for the function should\n\t * be used in string values, unless <mxGraphView.allowEval> is true, in\n\t * which case you can also use mxPerimeter.CustomPerimeter for the value in\n\t * the cell style above.\n\t * \n\t * Or it can be used for all vertices in the graph as follows:\n\t * \n\t * (code)\n\t * var style = graph.getStylesheet().getDefaultVertexStyle();\n\t * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.CustomPerimeter;\n\t * (end)\n\t * \n\t * Note that the object can be used directly when programmatically setting\n\t * the value, but the key in the <mxStyleRegistry> should be used when\n\t * setting the value via a key, value pair in a cell style.\n\t * \n\t * The parameters are explained in <RectanglePerimeter>.\n\t * \n\t * Function: RectanglePerimeter\n\t * \n\t * Describes a rectangular perimeter for the given bounds.\n\t *\n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the absolute bounds of the\n\t * vertex.\n\t * vertex - <mxCellState> that represents the vertex.\n\t * next - <mxPoint> that represents the nearest neighbour point on the\n\t * given edge.\n\t * orthogonal - Boolean that specifies if the orthogonal projection onto\n\t * the perimeter should be returned. If this is false then the intersection\n\t * of the perimeter and the line between the next and the center point is\n\t * returned.\n\t */\n\tRectanglePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar cx = bounds.getCenterX();\n\t\tvar cy = bounds.getCenterY();\n\t\tvar dx = next.x - cx;\n\t\tvar dy = next.y - cy;\n\t\tvar alpha = Math.atan2(dy, dx);\n\t\tvar p = new mxPoint(0, 0);\n\t\tvar pi = Math.PI;\n\t\tvar pi2 = Math.PI/2;\n\t\tvar beta = pi2 - alpha;\n\t\tvar t = Math.atan2(bounds.height, bounds.width);\n\t\t\n\t\tif (alpha < -pi + t || alpha > pi - t)\n\t\t{\n\t\t\t// Left edge\n\t\t\tp.x = bounds.x;\n\t\t\tp.y = cy - bounds.width * Math.tan(alpha) / 2;\n\t\t}\n\t\telse if (alpha < -t)\n\t\t{\n\t\t\t// Top Edge\n\t\t\tp.y = bounds.y;\n\t\t\tp.x = cx - bounds.height * Math.tan(beta) / 2;\n\t\t}\n\t\telse if (alpha < t)\n\t\t{\n\t\t\t// Right Edge\n\t\t\tp.x = bounds.x + bounds.width;\n\t\t\tp.y = cy + bounds.width * Math.tan(alpha) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Bottom Edge\n\t\t\tp.y = bounds.y + bounds.height;\n\t\t\tp.x = cx + bounds.height * Math.tan(beta) / 2;\n\t\t}\n\t\t\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (next.x >= bounds.x &&\n\t\t\t\tnext.x <= bounds.x + bounds.width)\n\t\t\t{\n\t\t\t\tp.x = next.x;\n\t\t\t}\n\t\t\telse if (next.y >= bounds.y &&\n\t\t\t\t\t   next.y <= bounds.y + bounds.height)\n\t\t\t{\n\t\t\t\tp.y = next.y;\n\t\t\t}\n\t\t\tif (next.x < bounds.x)\n\t\t\t{\n\t\t\t\tp.x = bounds.x;\n\t\t\t}\n\t\t\telse if (next.x > bounds.x + bounds.width)\n\t\t\t{\n\t\t\t\tp.x = bounds.x + bounds.width;\n\t\t\t}\n\t\t\tif (next.y < bounds.y)\n\t\t\t{\n\t\t\t\tp.y = bounds.y;\n\t\t\t}\n\t\t\telse if (next.y > bounds.y + bounds.height)\n\t\t\t{\n\t\t\t\tp.y = bounds.y + bounds.height;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn p;\n\t},\n\n\t/**\n\t * Function: EllipsePerimeter\n\t * \n\t * Describes an elliptic perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tEllipsePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar a = bounds.width / 2;\n\t\tvar b = bounds.height / 2;\n\t\tvar cx = x + a;\n\t\tvar cy = y + b;\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\t\t\n\t\t// Calculates straight line equation through\n\t\t// point and ellipse center y = d * x + h\n\t\tvar dx = parseInt(px - cx);\n\t\tvar dy = parseInt(py - cy);\n\t\t\n\t\tif (dx == 0 && dy != 0)\n\t\t{\n\t\t\treturn new mxPoint(cx, cy + b * dy / Math.abs(dy));\n\t\t}\n\t\telse if (dx == 0 && dy == 0)\n\t\t{\n\t\t\treturn new mxPoint(px, py);\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (py >= y && py <= y + bounds.height)\n\t\t\t{\n\t\t\t\tvar ty = py - cy;\n\t\t\t\tvar tx = Math.sqrt(a*a*(1-(ty*ty)/(b*b))) || 0;\n\t\t\t\t\n\t\t\t\tif (px <= x)\n\t\t\t\t{\n\t\t\t\t\ttx = -tx;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxPoint(cx+tx, py);\n\t\t\t}\n\t\t\t\n\t\t\tif (px >= x && px <= x + bounds.width)\n\t\t\t{\n\t\t\t\tvar tx = px - cx;\n\t\t\t\tvar ty = Math.sqrt(b*b*(1-(tx*tx)/(a*a))) || 0;\n\t\t\t\t\n\t\t\t\tif (py <= y)\n\t\t\t\t{\n\t\t\t\t\tty = -ty;\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxPoint(px, cy+ty);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Calculates intersection\n\t\tvar d = dy / dx;\n\t\tvar h = cy - d * cx;\n\t\tvar e = a * a * d * d + b * b;\n\t\tvar f = -2 * cx * e;\n\t\tvar g = a * a * d * d * cx * cx +\n\t\t\t\tb * b * cx * cx -\n\t\t\t\ta * a * b * b;\n\t\tvar det = Math.sqrt(f * f - 4 * e * g);\n\t\t\n\t\t// Two solutions (perimeter points)\n\t\tvar xout1 = (-f + det) / (2 * e);\n\t\tvar xout2 = (-f - det) / (2 * e);\n\t\tvar yout1 = d * xout1 + h;\n\t\tvar yout2 = d * xout2 + h;\n\t\tvar dist1 = Math.sqrt(Math.pow((xout1 - px), 2)\n\t\t\t\t\t+ Math.pow((yout1 - py), 2));\n\t\tvar dist2 = Math.sqrt(Math.pow((xout2 - px), 2)\n\t\t\t\t\t+ Math.pow((yout2 - py), 2));\n\t\t\t\t\t\n\t\t// Correct solution\n\t\tvar xout = 0;\n\t\tvar yout = 0;\n\t\t\n\t\tif (dist1 < dist2)\n\t\t{\n\t\t\txout = xout1;\n\t\t\tyout = yout1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\txout = xout2;\n\t\t\tyout = yout2;\n\t\t}\n\t\t\n\t\treturn new mxPoint(xout, yout);\n\t},\n\n\t/**\n\t * Function: RhombusPerimeter\n\t * \n\t * Describes a rhombus (aka diamond) perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tRhombusPerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\t\t\n\t\tvar cx = x + w / 2;\n\t\tvar cy = y + h / 2;\n\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\n\t\t// Special case for intersecting the diamond's corners\n\t\tif (cx == px)\n\t\t{\n\t\t\tif (cy > py)\n\t\t\t{\n\t\t\t\treturn new mxPoint(cx, y); // top\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new mxPoint(cx, y + h); // bottom\n\t\t\t}\n\t\t}\n\t\telse if (cy == py)\n\t\t{\n\t\t\tif (cx > px)\n\t\t\t{\n\t\t\t\treturn new mxPoint(x, cy); // left\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new mxPoint(x + w, cy); // right\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar tx = cx;\n\t\tvar ty = cy;\n\t\t\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (px >= x && px <= x + w)\n\t\t\t{\n\t\t\t\ttx = px;\n\t\t\t}\n\t\t\telse if (py >= y && py <= y + h)\n\t\t\t{\n\t\t\t\tty = py;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// In which quadrant will the intersection be?\n\t\t// set the slope and offset of the border line accordingly\n\t\tif (px < cx)\n\t\t{\n\t\t\tif (py < cy)\n\t\t\t{\n\t\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y, x, cy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y + h, x, cy);\n\t\t\t}\n\t\t}\n\t\telse if (py < cy)\n\t\t{\n\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y, x + w, cy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y + h, x + w, cy);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: TrianglePerimeter\n\t * \n\t * Describes a triangle perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tTrianglePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar direction = (vertex != null) ?\n\t\t\tvertex.style[mxConstants.STYLE_DIRECTION] : null;\n\t\tvar vertical = direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tdirection == mxConstants.DIRECTION_SOUTH;\n\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\t\t\n\t\tvar cx = x + w / 2;\n\t\tvar cy = y + h / 2;\n\t\t\n\t\tvar start = new mxPoint(x, y);\n\t\tvar corner = new mxPoint(x + w, cy);\n\t\tvar end = new mxPoint(x, y + h);\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tstart = end;\n\t\t\tcorner = new mxPoint(cx, y);\n\t\t\tend = new mxPoint(x + w, y + h);\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tcorner = new mxPoint(cx, y + h);\n\t\t\tend = new mxPoint(x + w, y);\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tstart = new mxPoint(x + w, y);\n\t\t\tcorner = new mxPoint(x, cy);\n\t\t\tend = new mxPoint(x + w, y + h);\n\t\t}\n\n\t\tvar dx = next.x - cx;\n\t\tvar dy = next.y - cy;\n\n\t\tvar alpha = (vertical) ? Math.atan2(dx, dy) : Math.atan2(dy, dx);\n\t\tvar t = (vertical) ? Math.atan2(w, h) : Math.atan2(h, w);\n\t\t\n\t\tvar base = false;\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tdirection == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tbase = alpha > -t && alpha < t;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbase = alpha < -Math.PI + t || alpha > Math.PI - t;\t\n\t\t}\n\n\t\tvar result = null;\t\t\t\n\n\t\tif (base)\n\t\t{\n\t\t\tif (orthogonal && ((vertical && next.x >= start.x && next.x <= end.x) ||\n\t\t\t\t(!vertical && next.y >= start.y && next.y <= end.y)))\n\t\t\t{\n\t\t\t\tif (vertical)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(next.x, start.y);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(start.x, next.y);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w / 2 + h * Math.tan(alpha) / 2,\n\t\t\t\t\t\ty + h);\n\t\t\t\t}\n\t\t\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w / 2 - h * Math.tan(alpha) / 2,\n\t\t\t\t\t\ty);\n\t\t\t\t}\n\t\t\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w, y + h / 2 +\n\t\t\t\t\t\tw * Math.tan(alpha) / 2);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x, y + h / 2 -\n\t\t\t\t\t\tw * Math.tan(alpha) / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (orthogonal)\n\t\t\t{\n\t\t\t\tvar pt = new mxPoint(cx, cy);\n\t\t\n\t\t\t\tif (next.y >= y && next.y <= y + h)\n\t\t\t\t{\n\t\t\t\t\tpt.x = (vertical) ? cx : (\n\t\t\t\t\t\t(direction == mxConstants.DIRECTION_WEST) ?\n\t\t\t\t\t\t\tx + w : x);\n\t\t\t\t\tpt.y = next.y;\n\t\t\t\t}\n\t\t\t\telse if (next.x >= x && next.x <= x + w)\n\t\t\t\t{\n\t\t\t\t\tpt.x = next.x;\n\t\t\t\t\tpt.y = (!vertical) ? cy : (\n\t\t\t\t\t\t(direction == mxConstants.DIRECTION_NORTH) ?\n\t\t\t\t\t\t\ty + h : y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Compute angle\n\t\t\t\tdx = next.x - pt.x;\n\t\t\t\tdy = next.y - pt.y;\n\t\t\t\t\n\t\t\t\tcx = pt.x;\n\t\t\t\tcy = pt.y;\n\t\t\t}\n\n\t\t\tif ((vertical && next.x <= x + w / 2) ||\n\t\t\t\t(!vertical && next.y <= y + h / 2))\n\t\t\t{\n\t\t\t\tresult = mxUtils.intersection(next.x, next.y, cx, cy,\n\t\t\t\t\tstart.x, start.y, corner.x, corner.y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = mxUtils.intersection(next.x, next.y, cx, cy,\n\t\t\t\t\tcorner.x, corner.y, end.x, end.y);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (result == null)\n\t\t{\n\t\t\tresult = new mxPoint(cx, cy);\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: HexagonPerimeter\n\t * \n\t * Describes a hexagon perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tHexagonPerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\n\t\tvar cx = bounds.getCenterX();\n\t\tvar cy = bounds.getCenterY();\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\t\tvar dx = px - cx;\n\t\tvar dy = py - cy;\n\t\tvar alpha = -Math.atan2(dy, dx);\n\t\tvar pi = Math.PI;\n\t\tvar pi2 = Math.PI / 2;\n\n\t\tvar result = new mxPoint(cx, cy);\n\n\t\tvar direction = (vertex != null) ? mxUtils.getValue(\n\t\t\t\tvertex.style, mxConstants.STYLE_DIRECTION,\n\t\t\t\tmxConstants.DIRECTION_EAST) : mxConstants.DIRECTION_EAST;\n\t\tvar vertical = direction == mxConstants.DIRECTION_NORTH\n\t\t\t\t|| direction == mxConstants.DIRECTION_SOUTH;\n\t\tvar a = new mxPoint();\n\t\tvar b = new mxPoint();\n\n\t\t//Only consider corrects quadrants for the orthogonal case.\n\t\tif ((px < x) && (py < y) || (px < x) && (py > y + h)\n\t\t\t\t|| (px > x + w) && (py < y) || (px > x + w) && (py > y + h))\n\t\t{\n\t\t\torthogonal = false;\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (vertical)\n\t\t\t{\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (px == cx)\n\t\t\t\t{\n\t\t\t\t\tif (py <= y)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(cx, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py >= y + h)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(cx, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px < x)\n\t\t\t\t{\n\t\t\t\t\tif (py == y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py == y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px > x + w)\n\t\t\t\t{\n\t\t\t\t\tif (py == y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py == y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px == x)\n\t\t\t\t{\n\t\t\t\t\tif (py < cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px == x + w)\n\t\t\t\t{\n\t\t\t\t\tif (py < cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (py == y)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(cx, y);\n\t\t\t\t}\n\t\t\t\telse if (py == y + h)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(cx, y + h);\n\t\t\t\t}\n\n\t\t\t\tif (px < cx)\n\t\t\t\t{\n\t\t\t\t\tif ((py > y + h / 4) && (py < y + 3 * h / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\t\tb = new mxPoint(x, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py < y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + w, y - Math.floor(0.25 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + w, y + Math.floor(1.25 * h));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px > cx)\n\t\t\t\t{\n\t\t\t\t\tif ((py > y + h / 4) && (py < y + 3 * h / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + w, y);\n\t\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py < y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y - Math.floor(0.25 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x, y + Math.floor(1.25 * h));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (py == cy)\n\t\t\t\t{\n\t\t\t\t\tif (px <= x)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 2);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px >= x + w)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py < y)\n\t\t\t\t{\n\t\t\t\t\tif (px == x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px == x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py > y + h)\n\t\t\t\t{\n\t\t\t\t\tif (px == x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px == x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py == y)\n\t\t\t\t{\n\t\t\t\t\tif (px < cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py == y + h)\n\t\t\t\t{\n\t\t\t\t\tif (px < cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (px == x)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, cy);\n\t\t\t\t}\n\t\t\t\telse if (px == x + w)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, cy);\n\t\t\t\t}\n\n\t\t\t\tif (py < cy)\n\t\t\t\t{\n\t\t\t\t\tif ((px > x + w / 4) && (px < x + 3 * w / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\t\tb = new mxPoint(x + w, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px < x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y + h);\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py > cy)\n\t\t\t\t{\n\t\t\t\t\tif ((px > x + w / 4) && (px < x + 3 * w / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y + h);\n\t\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px < x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y);\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tx = cx;\n\t\t\tvar ty = cy;\n\n\t\t\tif (px >= x && px <= x + w)\n\t\t\t{\n\t\t\t\ttx = px;\n\t\t\t\t\n\t\t\t\tif (py < cy)\n\t\t\t\t{\n\t\t\t\t\tty = y + h;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tty = y;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (py >= y && py <= y + h)\n\t\t\t{\n\t\t\t\tty = py;\n\t\t\t\t\n\t\t\t\tif (px < cx)\n\t\t\t\t{\n\t\t\t\t\ttx = x + w;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttx = x;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = mxUtils.intersection(tx, ty, next.x, next.y, a.x, a.y, b.x, b.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (vertical)\n\t\t\t{\n\t\t\t\tvar beta = Math.atan2(h / 4, w / 2);\n\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (alpha == beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == pi2)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.5 * w), y);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (pi - beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == -beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.75 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi2))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.5 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi + beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.75 * h));\n\t\t\t\t}\n\n\t\t\t\tif ((alpha < beta) && (alpha > -beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + w, y);\n\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > beta) && (alpha < pi2))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y - Math.floor(0.25 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha > pi2) && (alpha < (pi - beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + w, y - Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (((alpha > (pi - beta)) && (alpha <= pi))\n\t\t\t\t\t\t|| ((alpha < (-pi + beta)) && (alpha >= -pi)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\tb = new mxPoint(x, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -beta) && (alpha > -pi2))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x, y + Math.floor(1.25 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -pi2) && (alpha > (-pi + beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + w, y + Math.floor(1.25 * h));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar beta = Math.atan2(h / 2, w / 4);\n\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (alpha == beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.75 * w), y);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (pi - beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.25 * w), y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha == pi) || (alpha == -pi))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == 0)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == -beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.75 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi + beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.25 * w), y + h);\n\t\t\t\t}\n\n\t\t\t\tif ((alpha > 0) && (alpha < beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > beta) && (alpha < (pi - beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\tb = new mxPoint(x + w, y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > (pi - beta)) && (alpha < pi))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y + h);\n\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha < 0) && (alpha > -beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -beta) && (alpha > (-pi + beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y + h);\n\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < (-pi + beta)) && (alpha > -pi))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y);\n\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = mxUtils.intersection(cx, cy, next.x, next.y, a.x, a.y, b.x, b.y);\n\t\t}\n\t\t\n\t\tif (result == null)\n\t\t{\n\t\t\treturn new mxPoint(cx, cy);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n__mxOutput.mxPerimeter = typeof mxPerimeter !== 'undefined' ? mxPerimeter : undefined;\n\n/**\n * Copyright (c) 2006-2019, JGraph Ltd\n * Copyright (c) 2006-2017, draw.io AG\n */\n/**\n * Class: mxPrintPreview\n * \n * Implements printing of a diagram across multiple pages. The following opens\n * a print preview for an existing graph:\n * \n * (code)\n * var preview = new mxPrintPreview(graph);\n * preview.open();\n * (end)\n * \n * Use <mxUtils.getScaleForPageCount> as follows in order to print the graph\n * across a given number of pages:\n * \n * (code)\n * var pageCount = mxUtils.prompt('Enter page count', '1');\n * \n * if (pageCount != null)\n * {\n *   var scale = mxUtils.getScaleForPageCount(pageCount, graph);\n *   var preview = new mxPrintPreview(graph, scale);\n *   preview.open();\n * }\n * (end)\n * \n * Additional pages:\n * \n * To add additional pages before and after the output, <getCoverPages> and\n * <getAppendices> can be used, respectively.\n * \n * (code)\n * var preview = new mxPrintPreview(graph, 1);\n * \n * preview.getCoverPages = function(w, h)\n * {\n *   return [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n *   {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Cover Page</p>'\n *   }))];\n * };\n * \n * preview.getAppendices = function(w, h)\n * {\n *   return [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n *   {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Appendix</p>'\n *   }))];\n * };\n * \n * preview.open();\n * (end)\n * \n * CSS:\n * \n * The CSS from the original page is not carried over to the print preview.\n * To add CSS to the page, use the css argument in the <open> function or\n * override <writeHead> to add the respective link tags as follows:\n * \n * (code)\n * var writeHead = preview.writeHead;\n * preview.writeHead = function(doc, css)\n * {\n *   writeHead.apply(this, arguments);\n *   doc.writeln('<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">');\n * };\n * (end)\n * \n * Padding:\n * \n * To add a padding to the page in the preview (but not the print output), use\n * the following code:\n * \n * (code)\n * preview.writeHead = function(doc)\n * {\n *   writeHead.apply(this, arguments);\n *   \n *   doc.writeln('<style type=\"text/css\">');\n *   doc.writeln('@media screen {');\n *   doc.writeln('  body > div { padding-top:30px;padding-left:40px;box-sizing:content-box; }');\n *   doc.writeln('}');\n *   doc.writeln('</style>');\n * };\n * (end)\n * \n * Headers:\n * \n * Apart from setting the title argument in the mxPrintPreview constructor you\n * can override <renderPage> as follows to add a header to any page:\n * \n * (code)\n * var oldRenderPage = mxPrintPreview.prototype.renderPage;\n * mxPrintPreview.prototype.renderPage = function(w, h, x, y, content, pageNumber)\n * {\n *   var div = oldRenderPage.apply(this, arguments);\n *   \n *   var header = document.createElement('div');\n *   header.style.position = 'absolute';\n *   header.style.top = '0px';\n *   header.style.width = '100%';\n *   header.style.textAlign = 'right';\n *   mxUtils.write(header, 'Your header here');\n *   div.firstChild.appendChild(header);\n *   \n *   return div;\n * };\n * (end)\n * \n * The pageNumber argument contains the number of the current page, starting at\n * 1. To display a header on the first page only, check pageNumber and add a\n * vertical offset in the constructor call for the height of the header.\n * \n * Page Format:\n * \n * For landscape printing, use <mxConstants.PAGE_FORMAT_A4_LANDSCAPE> as\n * the pageFormat in <mxUtils.getScaleForPageCount> and <mxPrintPreview>.\n * Keep in mind that one can not set the defaults for the print dialog\n * of the operating system from JavaScript so the user must manually choose\n * a page format that matches this setting.\n * \n * You can try passing the following CSS directive to <open> to set the\n * page format in the print dialog to landscape. However, this CSS\n * directive seems to be ignored in most major browsers, including IE.\n * \n * (code)\n * @page {\n *   size: landscape;\n * }\n * (end)\n * \n * Note that the print preview behaves differently in IE when used from the\n * filesystem or via HTTP so printing should always be tested via HTTP.\n * \n * If you are using a DOCTYPE in the source page you can override <getDoctype>\n * and provide the same DOCTYPE for the print preview if required. Here is\n * an example for IE8 standards mode.\n * \n * (code)\n * var preview = new mxPrintPreview(graph);\n * preview.getDoctype = function()\n * {\n *   return '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=5,IE=8\" ><![endif]-->';\n * };\n * preview.open();\n * (end)\n * \n * Constructor: mxPrintPreview\n *\n * Constructs a new print preview for the given parameters.\n * \n * Parameters:\n * \n * graph - <mxGraph> to be previewed.\n * scale - Optional scale of the output. Default is 1 / <mxGraph.pageScale>.\n * pageFormat - <mxRectangle> that specifies the page format (in pixels).\n * border - Border in pixels along each side of every page. Note that the\n * actual print function in the browser will add another border for\n * printing.\n * This should match the page format of the printer. Default uses the\n * <mxGraph.pageFormat> of the given graph.\n * x0 - Optional left offset of the output. Default is 0.\n * y0 - Optional top offset of the output. Default is 0.\n * borderColor - Optional color of the page border. Default is no border.\n * Note that a border is sometimes useful to highlight the printed page\n * border in the print preview of the browser.\n * title - Optional string that is used for the window title. Default\n * is 'Printer-friendly version'.\n * pageSelector - Optional boolean that specifies if the page selector\n * should appear in the window with the print preview. Default is true.\n */\nfunction mxPrintPreview(graph, scale, pageFormat, border, x0, y0, borderColor, title, pageSelector)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.border = (border != null) ? border : 0;\n\tthis.pageFormat = mxRectangle.fromRectangle((pageFormat != null) ? pageFormat : graph.pageFormat);\n\tthis.title = (title != null) ? title : 'Printer-friendly version';\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.borderColor = borderColor;\n\tthis.pageSelector = (pageSelector != null) ? pageSelector : true;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the <mxGraph> that should be previewed.\n */\nmxPrintPreview.prototype.graph = null;\n\n/**\n * Variable: pageFormat\n *\n * Holds the <mxRectangle> that defines the page format.\n */\nmxPrintPreview.prototype.pageFormat = null;\n\n/**\n * Variable: scale\n * \n * Holds the scale of the print preview.\n */\nmxPrintPreview.prototype.scale = null;\n\n/**\n * Variable: border\n * \n * The border inset around each side of every page in the preview. This is set\n * to 0 if autoOrigin is false.\n */\nmxPrintPreview.prototype.border = 0;\n\n/**\n * Variable: marginTop\n * \n * The margin at the top of the page (number). Default is 0.\n */\nmxPrintPreview.prototype.marginTop = 0;\n\n/**\n * Variable: marginBottom\n * \n * The margin at the bottom of the page (number). Default is 0.\n */\nmxPrintPreview.prototype.marginBottom = 0;\n\n/**\n * Variable: x0\n * \n * Holds the horizontal offset of the output.\n */\nmxPrintPreview.prototype.x0 = 0;\n\n/**\n * Variable: y0\n *\n * Holds the vertical offset of the output.\n */\nmxPrintPreview.prototype.y0 = 0;\n\n/**\n * Variable: autoOrigin\n * \n * Specifies if the origin should be automatically computed based on the top,\n * left corner of the actual diagram contents. The required offset will be added\n * to <x0> and <y0> in <open>. Default is true.\n */\nmxPrintPreview.prototype.autoOrigin = true;\n\n/**\n * Variable: printOverlays\n * \n * Specifies if overlays should be printed. Default is false.\n */\nmxPrintPreview.prototype.printOverlays = false;\n\n/**\n * Variable: printControls\n * \n * Specifies if controls (such as folding icons) should be printed. Default is\n * false.\n */\nmxPrintPreview.prototype.printControls = false;\n\n/**\n * Variable: printBackgroundImage\n * \n * Specifies if the background image should be printed. Default is false.\n */\nmxPrintPreview.prototype.printBackgroundImage = false;\n\n/**\n * Variable: backgroundColor\n * \n * Holds the color value for the page background color. Default is #ffffff.\n */\nmxPrintPreview.prototype.backgroundColor = '#ffffff';\n\n/**\n * Variable: borderColor\n * \n * Holds the color value for the page border.\n */\nmxPrintPreview.prototype.borderColor = null;\n\n/**\n * Variable: title\n * \n * Holds the title of the preview window.\n */\nmxPrintPreview.prototype.title = null;\n\n/**\n * Variable: pageSelector\n * \n * Boolean that specifies if the page selector should be\n * displayed. Default is true.\n */\nmxPrintPreview.prototype.pageSelector = null;\n\n/**\n * Variable: wnd\n * \n * Reference to the preview window.\n */\nmxPrintPreview.prototype.wnd = null;\n\n/**\n * Variable: targetWindow\n * \n * Assign any window here to redirect the rendering in <open>.\n */\nmxPrintPreview.prototype.targetWindow = null;\n\n/**\n * Variable: pageCount\n * \n * Holds the actual number of pages in the preview.\n */\nmxPrintPreview.prototype.pageCount = 0;\n\n/**\n * Variable: clipping\n * \n * Specifies is clipping should be used to avoid creating too many cell states\n * in large diagrams. The bounding box of the cells in the original diagram is\n * used if this is enabled. Default is true.\n */\nmxPrintPreview.prototype.clipping = true;\n\n/**\n * Function: getWindow\n * \n * Returns <wnd>.\n */\nmxPrintPreview.prototype.getWindow = function()\n{\n\treturn this.wnd;\n};\n\n/**\n * Function: getDocType\n * \n * Returns the string that should go before the HTML tag in the print preview\n * page. This implementation returns an X-UA meta tag for IE5 in quirks mode,\n * IE8 in IE8 standards mode and edge in IE9 standards mode.\n */\nmxPrintPreview.prototype.getDoctype = function()\n{\n\tvar dt = '';\n\t\n\tif (document.documentMode == 5)\n\t{\n\t\tdt = '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=5\">';\n\t}\n\telse if (document.documentMode == 8)\n\t{\n\t\tdt = '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\">';\n\t}\n\telse if (document.documentMode > 8)\n\t{\n\t\t// Comment needed to make standards doctype apply in IE\n\t\tdt = '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><![endif]-->';\n\t}\n\t\n\treturn dt;\n};\n\n/**\n * Function: appendGraph\n * \n * Adds the given graph to the existing print preview.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n * targetWindow - Optional window that should be used for rendering. If\n * this is specified then no HEAD tag, CSS and BODY tag will be written.\n */\nmxPrintPreview.prototype.appendGraph = function(graph, scale, x0, y0, forcePageBreaks, keepOpen)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.x0 = x0;\n\tthis.y0 = y0;\n\tthis.open(null, null, forcePageBreaks, keepOpen);\n};\n\n/**\n * Function: open\n * \n * Shows the print preview window. The window is created here if it does\n * not exist.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n * targetWindow - Optional window that should be used for rendering. If\n * this is specified then no HEAD tag, CSS and BODY tag will be written.\n */\nmxPrintPreview.prototype.open = function(css, targetWindow, forcePageBreaks, keepOpen)\n{\n\t// Closing the window while the page is being rendered may cause an\n\t// exception in IE. This and any other exceptions are simply ignored.\n\tvar previousInitializeOverlay = this.graph.cellRenderer.initializeOverlay;\n\tvar div = null;\n\t\n\ttry\n\t{\n\t\t// Temporarily overrides the method to redirect rendering of overlays\n\t\t// to the draw pane so that they are visible in the printout\n\t\tif (this.printOverlays)\n\t\t{\n\t\t\tthis.graph.cellRenderer.initializeOverlay = function(state, overlay)\n\t\t\t{\n\t\t\t\toverlay.init(state.view.getDrawPane());\n\t\t\t};\n\t\t}\n\t\t\n\t\tif (this.printControls)\n\t\t{\n\t\t\tthis.graph.cellRenderer.initControl = function(state, control, handleEvents, clickHandler)\n\t\t\t{\n\t\t\t\tcontrol.dialect = state.view.graph.dialect;\n\t\t\t\tcontrol.init(state.view.getDrawPane());\n\t\t\t};\n\t\t}\n\t\t\n\t\tthis.wnd = (targetWindow != null) ? targetWindow : this.wnd;\n\t\tvar isNewWindow = false;\n\t\t\n\t\tif (this.wnd == null)\n\t\t{\n\t\t\tisNewWindow = true;\n\t\t\tthis.wnd = window.open();\n\t\t}\n\t\t\n\t\tvar doc = this.wnd.document;\n\t\t\n\t\tif (isNewWindow)\n\t\t{\n\t\t\tvar dt = this.getDoctype();\n\t\t\t\n\t\t\tif (dt != null && dt.length > 0)\n\t\t\t{\n\t\t\t\tdoc.writeln(dt);\n\t\t\t}\n\t\t\t\n\t\t\tif (mxClient.IS_VML)\n\t\t\t{\n\t\t\t\tdoc.writeln('<html xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:o=\"urn:schemas-microsoft-com:office:office\">');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (document.compatMode === 'CSS1Compat')\n\t\t\t\t{\n\t\t\t\t\tdoc.writeln('<!DOCTYPE html>');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdoc.writeln('<html>');\n\t\t\t}\n\t\t\t\n\t\t\tdoc.writeln('<head>');\n\t\t\tthis.writeHead(doc, css);\n\t\t\tdoc.writeln('</head>');\n\t\t\tdoc.writeln('<body class=\"mxPage\">');\n\t\t}\n\n\t\t// Computes the horizontal and vertical page count\n\t\tvar bounds = this.graph.getGraphBounds().clone();\n\t\tvar currentScale = this.graph.getView().getScale();\n\t\tvar sc = currentScale / this.scale;\n\t\tvar tr = this.graph.getView().getTranslate();\n\t\t\n\t\t// Uses the absolute origin with no offset for all printing\n\t\tif (!this.autoOrigin)\n\t\t{\n\t\t\tthis.x0 -= tr.x * this.scale;\n\t\t\tthis.y0 -= tr.y * this.scale;\n\t\t\tbounds.width += bounds.x;\n\t\t\tbounds.height += bounds.y;\n\t\t\tbounds.x = 0;\n\t\t\tbounds.y = 0;\n\t\t\tthis.border = 0;\n\t\t}\n\t\t\n\t\t// Store the available page area\n\t\tvar availableWidth = this.pageFormat.width - (this.border * 2);\n\t\tvar availableHeight = this.pageFormat.height - (this.border * 2);\n\t\n\t\t// Adds margins to page format\n\t\tthis.pageFormat.height += this.marginTop + this.marginBottom;\n\n\t\t// Compute the unscaled, untranslated bounds to find\n\t\t// the number of vertical and horizontal pages\n\t\tbounds.width /= sc;\n\t\tbounds.height /= sc;\n\n\t\tvar hpages = Math.max(1, Math.ceil((bounds.width + this.x0) / availableWidth));\n\t\tvar vpages = Math.max(1, Math.ceil((bounds.height + this.y0) / availableHeight));\n\t\tthis.pageCount = hpages * vpages;\n\t\t\n\t\tvar writePageSelector = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.pageSelector && (vpages > 1 || hpages > 1))\n\t\t\t{\n\t\t\t\tvar table = this.createPageSelector(vpages, hpages);\n\t\t\t\tdoc.body.appendChild(table);\n\t\t\t\t\n\t\t\t\t// Implements position: fixed in IE quirks mode\n\t\t\t\tif (mxClient.IS_IE && doc.documentMode == null || doc.documentMode == 5 || doc.documentMode == 8 || doc.documentMode == 7)\n\t\t\t\t{\n\t\t\t\t\ttable.style.position = 'absolute';\n\t\t\t\t\t\n\t\t\t\t\tvar update = function()\n\t\t\t\t\t{\n\t\t\t\t\t\ttable.style.top = ((doc.body.scrollTop || doc.documentElement.scrollTop) + 10) + 'px';\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tmxEvent.addListener(this.wnd, 'scroll', function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tmxEvent.addListener(this.wnd, 'resize', function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tvar addPage = mxUtils.bind(this, function(div, addBreak)\n\t\t{\n\t\t\t// Border of the DIV (aka page) inside the document\n\t\t\tif (this.borderColor != null)\n\t\t\t{\n\t\t\t\tdiv.style.borderColor = this.borderColor;\n\t\t\t\tdiv.style.borderStyle = 'solid';\n\t\t\t\tdiv.style.borderWidth = '1px';\n\t\t\t}\n\t\t\t\n\t\t\t// Needs to be assigned directly because IE doesn't support\n\t\t\t// child selectors, eg. body > div { background: white; }\n\t\t\tdiv.style.background = this.backgroundColor;\n\t\t\t\n\t\t\tif (forcePageBreaks || addBreak)\n\t\t\t{\n\t\t\t\tdiv.style.pageBreakAfter = 'always';\n\t\t\t}\n\n\t\t\t// NOTE: We are dealing with cross-window DOM here, which\n\t\t\t// is a problem in IE, so we copy the HTML markup instead.\n\t\t\t// The underlying problem is that the graph display markup\n\t\t\t// creation (in mxShape, mxGraphView) is hardwired to using\n\t\t\t// document.createElement and hence we must use this document\n\t\t\t// to create the complete page and then copy it over to the\n\t\t\t// new window.document. This can be fixed later by using the\n\t\t\t// ownerDocument of the container in mxShape and mxGraphView.\n\t\t\tif (isNewWindow && (mxClient.IS_IE || document.documentMode >= 11 || mxClient.IS_EDGE))\n\t\t\t{\n\t\t\t\t// For some obscure reason, removing the DIV from the\n\t\t\t\t// parent before fetching its outerHTML has missing\n\t\t\t\t// fillcolor properties and fill children, so the div\n\t\t\t\t// must be removed afterwards to keep the fillcolors.\n\t\t\t\tdoc.writeln(div.outerHTML);\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t\telse if (mxClient.IS_IE || document.documentMode >= 11 || mxClient.IS_EDGE)\n\t\t\t{\n\t\t\t\tvar clone = doc.createElement('div');\n\t\t\t\tclone.innerHTML = div.outerHTML;\n\t\t\t\tclone = clone.getElementsByTagName('div')[0];\n\t\t\t\tdoc.body.appendChild(clone);\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t}\n\n\t\t\tif (forcePageBreaks || addBreak)\n\t\t\t{\n\t\t\t\tthis.addPageBreak(doc);\n\t\t\t}\n\t\t});\n\t\t\n\t\tvar cov = this.getCoverPages(this.pageFormat.width, this.pageFormat.height);\n\t\t\n\t\tif (cov != null)\n\t\t{\n\t\t\tfor (var i = 0; i < cov.length; i++)\n\t\t\t{\n\t\t\t\taddPage(cov[i], true);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar apx = this.getAppendices(this.pageFormat.width, this.pageFormat.height);\n\t\t\n\t\t// Appends each page to the page output for printing, making\n\t\t// sure there will be a page break after each page (ie. div)\n\t\tfor (var i = 0; i < vpages; i++)\n\t\t{\n\t\t\tvar dy = i * availableHeight / this.scale - this.y0 / this.scale +\n\t\t\t\t\t(bounds.y - tr.y * currentScale) / currentScale;\n\t\t\t\n\t\t\tfor (var j = 0; j < hpages; j++)\n\t\t\t{\n\t\t\t\tif (this.wnd == null)\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar dx = j * availableWidth / this.scale - this.x0 / this.scale +\n\t\t\t\t\t\t(bounds.x - tr.x * currentScale) / currentScale;\n\t\t\t\tvar pageNum = i * hpages + j + 1;\n\t\t\t\tvar clip = new mxRectangle(dx, dy, availableWidth, availableHeight);\n\t\t\t\tdiv = this.renderPage(this.pageFormat.width, this.pageFormat.height, 0, 0, mxUtils.bind(this, function(div)\n\t\t\t\t{\n\t\t\t\t\tthis.addGraphFragment(-dx, -dy, this.scale, pageNum, div, clip);\n\t\t\t\t\t\n\t\t\t\t\tif (this.printBackgroundImage)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.insertBackgroundImage(div, -dx, -dy);\n\t\t\t\t\t}\n\t\t\t\t}), pageNum);\n\n\t\t\t\t// Gives the page a unique ID for later accessing the page\n\t\t\t\tdiv.setAttribute('id', 'mxPage-'+pageNum);\n\n\t\t\t\taddPage(div, apx != null || i < vpages - 1 || j < hpages - 1);\n\t\t\t}\n\t\t}\n\n\t\tif (apx != null)\n\t\t{\n\t\t\tfor (var i = 0; i < apx.length; i++)\n\t\t\t{\n\t\t\t\taddPage(apx[i], i < apx.length - 1);\n\t\t\t}\n\t\t}\n\n\t\tif (isNewWindow && !keepOpen)\n\t\t{\n\t\t\tthis.closeDocument();\n\t\t\twritePageSelector();\n\t\t}\n\t\t\n\t\tthis.wnd.focus();\n\t}\n\tcatch (e)\n\t{\n\t\t// Removes the DIV from the document in case of an error\n\t\tif (div != null && div.parentNode != null)\n\t\t{\n\t\t\tdiv.parentNode.removeChild(div);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.cellRenderer.initializeOverlay = previousInitializeOverlay;\n\t}\n\n\treturn this.wnd;\n};\n\n/**\n * Function: addPageBreak\n * \n * Adds a page break to the given document.\n */\nmxPrintPreview.prototype.addPageBreak = function(doc)\n{\n\tvar hr = doc.createElement('hr');\n\thr.className = 'mxPageBreak';\n\tdoc.body.appendChild(hr);\n};\n\n/**\n * Function: closeDocument\n * \n * Writes the closing tags for body and page after calling <writePostfix>.\n */\nmxPrintPreview.prototype.closeDocument = function()\n{\n\ttry\n\t{\n\t\tif (this.wnd != null && this.wnd.document != null)\n\t\t{\n\t\t\tvar doc = this.wnd.document;\n\t\t\t\n\t\t\tthis.writePostfix(doc);\n\t\t\tdoc.writeln('</body>');\n\t\t\tdoc.writeln('</html>');\n\t\t\tdoc.close();\n\t\t\t\n\t\t\t// Removes all event handlers in the print output\n\t\t\tmxEvent.release(doc.body);\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\t// ignore any errors resulting from wnd no longer being available\n\t}\n};\n\n/**\n * Function: writeHead\n * \n * Writes the HEAD section into the given document, without the opening\n * and closing HEAD tags.\n */\nmxPrintPreview.prototype.writeHead = function(doc, css)\n{\n\tif (this.title != null)\n\t{\n\t\tdoc.writeln('<title>' + this.title + '</title>');\n\t}\n\t\n\t// Adds required namespaces\n\tif (mxClient.IS_VML)\n\t{\n\t\tdoc.writeln('<style type=\"text/css\">v\\\\:*{behavior:url(#default#VML)}o\\\\:*{behavior:url(#default#VML)}</style>');\n\t}\n\n\t// Adds all required stylesheets\n\tmxClient.link('stylesheet', mxClient.basePath + '/css/common.css', doc);\n\n\t// Removes horizontal rules and page selector from print output\n\tdoc.writeln('<style type=\"text/css\">');\n\tdoc.writeln('@media print {');\n\tdoc.writeln('  * { -webkit-print-color-adjust: exact; }');\n\tdoc.writeln('  table.mxPageSelector { display: none; }');\n\tdoc.writeln('  hr.mxPageBreak { display: none; }');\n\tdoc.writeln('}');\n\tdoc.writeln('@media screen {');\n\t\n\t// NOTE: position: fixed is not supported in IE, so the page selector\n\t// position (absolute) needs to be updated in IE (see below)\n\tdoc.writeln('  table.mxPageSelector { position: fixed; right: 10px; top: 10px;' +\n\t\t\t'font-family: Arial; font-size:10pt; border: solid 1px darkgray;' +\n\t\t\t'background: white; border-collapse:collapse; }');\n\tdoc.writeln('  table.mxPageSelector td { border: solid 1px gray; padding:4px; }');\n\tdoc.writeln('  body.mxPage { background: gray; }');\n\tdoc.writeln('}');\n\t\n\tif (css != null)\n\t{\n\t\tdoc.writeln(css);\n\t}\n\t\n\tdoc.writeln('</style>');\n};\n\n/**\n * Function: writePostfix\n * \n * Called before closing the body of the page. This implementation is empty.\n */\nmxPrintPreview.prototype.writePostfix = function(doc)\n{\n\t// empty\n};\n\n/**\n * Function: createPageSelector\n * \n * Creates the page selector table.\n */\nmxPrintPreview.prototype.createPageSelector = function(vpages, hpages)\n{\n\tvar doc = this.wnd.document;\n\tvar table = doc.createElement('table');\n\ttable.className = 'mxPageSelector';\n\ttable.setAttribute('border', '0');\n\n\tvar tbody = doc.createElement('tbody');\n\t\n\tfor (var i = 0; i < vpages; i++)\n\t{\n\t\tvar row = doc.createElement('tr');\n\t\t\n\t\tfor (var j = 0; j < hpages; j++)\n\t\t{\n\t\t\tvar pageNum = i * hpages + j + 1;\n\t\t\tvar cell = doc.createElement('td');\n\t\t\tvar a = doc.createElement('a');\n\t\t\ta.setAttribute('href', '#mxPage-' + pageNum);\n\n\t\t\t// Workaround for FF where the anchor is appended to the URL of the original document\n\t\t\tif (mxClient.IS_NS && !mxClient.IS_SF && !mxClient.IS_GC)\n\t\t\t{\n\t\t\t\tvar js = 'var page = document.getElementById(\\'mxPage-' + pageNum + '\\');page.scrollIntoView(true);event.preventDefault();';\n\t\t\t\ta.setAttribute('onclick', js);\n\t\t\t}\n\t\t\t\n\t\t\tmxUtils.write(a, pageNum, doc);\n\t\t\tcell.appendChild(a);\n\t\t\trow.appendChild(cell);\n\t\t}\n\t\t\n\t\ttbody.appendChild(row);\n\t}\n\t\n\ttable.appendChild(tbody);\n\t\n\treturn table;\n};\n\n/**\n * Function: renderPage\n * \n * Creates a DIV that prints a single page of the given\n * graph using the given scale and returns the DIV that\n * represents the page.\n * \n * Parameters:\n * \n * w - Width of the page in pixels.\n * h - Height of the page in pixels.\n * dx - Optional horizontal page offset in pixels (used internally).\n * dy - Optional vertical page offset in pixels (used internally).\n * content - Callback that adds the HTML content to the inner div of a page.\n * Takes the inner div as the argument.\n * pageNumber - Integer representing the page number.\n */\nmxPrintPreview.prototype.renderPage = function(w, h, dx, dy, content, pageNumber)\n{\n\tvar doc = this.wnd.document;\n\tvar div = document.createElement('div');\n\tvar arg = null;\n\n\ttry\n\t{\n\t\t// Workaround for ignored clipping in IE 9 standards\n\t\t// when printing with page breaks and HTML labels.\n\t\tif (dx != 0 || dy != 0)\n\t\t{\n\t\t\tdiv.style.position = 'relative';\n\t\t\tdiv.style.width = w + 'px';\n\t\t\tdiv.style.height = h + 'px';\n\t\t\tdiv.style.pageBreakInside = 'avoid';\n\t\t\t\n\t\t\tvar innerDiv = document.createElement('div');\n\t\t\tinnerDiv.style.position = 'relative';\n\t\t\tinnerDiv.style.top = this.border + 'px';\n\t\t\tinnerDiv.style.left = this.border + 'px';\n\t\t\tinnerDiv.style.width = (w - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.height = (h - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.overflow = 'hidden';\n\t\t\t\n\t\t\tvar viewport = document.createElement('div');\n\t\t\tviewport.style.position = 'relative';\n\t\t\tviewport.style.marginLeft = dx + 'px';\n\t\t\tviewport.style.marginTop = dy + 'px';\n\n\t\t\t// FIXME: IE8 standards output problems\n\t\t\tif (doc.documentMode == 8)\n\t\t\t{\n\t\t\t\tinnerDiv.style.position = 'absolute';\n\t\t\t\tviewport.style.position = 'absolute';\n\t\t\t}\n\t\t\n\t\t\tif (doc.documentMode == 10)\n\t\t\t{\n\t\t\t\tviewport.style.width = '100%';\n\t\t\t\tviewport.style.height = '100%';\n\t\t\t}\n\t\t\t\n\t\t\tinnerDiv.appendChild(viewport);\n\t\t\tdiv.appendChild(innerDiv);\n\t\t\tdocument.body.appendChild(div);\n\t\t\targ = viewport;\n\t\t}\n\t\t// FIXME: IE10/11 too many pages\n\t\telse\n\t\t{\n\t\t\tdiv.style.width = w + 'px';\n\t\t\tdiv.style.height = h + 'px';\n\t\t\tdiv.style.overflow = 'hidden';\n\t\t\tdiv.style.pageBreakInside = 'avoid';\n\t\t\t\n\t\t\t// IE8 uses above branch currently\n\t\t\tif (doc.documentMode == 8)\n\t\t\t{\n\t\t\t\tdiv.style.position = 'relative';\n\t\t\t}\n\t\t\t\n\t\t\tvar innerDiv = document.createElement('div');\n\t\t\tinnerDiv.style.width = (w - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.height = (h - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.overflow = 'hidden';\n\n\t\t\tif (mxClient.IS_IE && (doc.documentMode == null || doc.documentMode == 5 ||\n\t\t\t\tdoc.documentMode == 8 || doc.documentMode == 7))\n\t\t\t{\n\t\t\t\tinnerDiv.style.marginTop = this.border + 'px';\n\t\t\t\tinnerDiv.style.marginLeft = this.border + 'px';\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinnerDiv.style.top = this.border + 'px';\n\t\t\t\tinnerDiv.style.left = this.border + 'px';\n\t\t\t}\n\t\n\t\t\tif (this.graph.dialect == mxConstants.DIALECT_VML)\n\t\t\t{\n\t\t\t\tinnerDiv.style.position = 'absolute';\n\t\t\t}\n\n\t\t\tdiv.appendChild(innerDiv);\n\t\t\tdocument.body.appendChild(div);\n\t\t\targ = innerDiv;\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\tdiv.parentNode.removeChild(div);\n\t\tdiv = null;\n\t\t\n\t\tthrow e;\n\t}\n\n\tcontent(arg);\n\t \n\treturn div;\n};\n\n/**\n * Function: getRoot\n * \n * Returns the root cell for painting the graph.\n */\nmxPrintPreview.prototype.getRoot = function()\n{\n\tvar root = this.graph.view.currentRoot;\n\t\n\tif (root == null)\n\t{\n\t\troot = this.graph.getModel().getRoot();\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: useCssTransforms\n * \n * Returns true if CSS transforms should be used for scaling content.\n * This returns true if foreignObject is supported and we're not in Safari\n * as it has clipping bugs for transformed CSS content with foreignObjects.\n */\nmxPrintPreview.prototype.useCssTransforms = function()\n{\n\treturn !mxClient.NO_FO && !mxClient.IS_SF;\n};\n\n/**\n * Function: addGraphFragment\n * \n * Adds a graph fragment to the given div.\n * \n * Parameters:\n * \n * dx - Horizontal translation for the diagram.\n * dy - Vertical translation for the diagram.\n * scale - Scale for the diagram.\n * pageNumber - Number of the page to be rendered.\n * div - Div that contains the output.\n * clip - Contains the clipping rectangle as an <mxRectangle>.\n */\nmxPrintPreview.prototype.addGraphFragment = function(dx, dy, scale, pageNumber, div, clip)\n{\n\tvar view = this.graph.getView();\n\tvar previousContainer = this.graph.container;\n\tthis.graph.container = div;\n\t\n\tvar canvas = view.getCanvas();\n\tvar backgroundPane = view.getBackgroundPane();\n\tvar drawPane = view.getDrawPane();\n\tvar overlayPane = view.getOverlayPane();\n\tvar realScale = scale;\n\n\tif (this.graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tview.createSvg();\n\t\t\n\t\t// Uses CSS transform for scaling\n\t\tif (this.useCssTransforms())\n\t\t{\n\t\t\tvar g = view.getDrawPane().parentNode;\n\t\t\tvar prev = g.getAttribute('transform');\n\t\t\tg.setAttribute('transformOrigin', '0 0');\n\t\t\tg.setAttribute('transform', 'scale(' + scale + ',' + scale + ')' +\n\t\t\t\t'translate(' + dx + ',' + dy + ')');\n\t\t\t\n\t\t\tscale = 1;\n\t\t\tdx = 0;\n\t\t\tdy = 0;\n\t\t}\n\t}\n\telse if (this.graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tview.createVml();\n\t}\n\telse\n\t{\n\t\tview.createHtml();\n\t}\n\t\n\t// Disables events on the view\n\tvar eventsEnabled = view.isEventsEnabled();\n\tview.setEventsEnabled(false);\n\t\n\t// Disables the graph to avoid cursors\n\tvar graphEnabled = this.graph.isEnabled();\n\tthis.graph.setEnabled(false);\n\n\t// Resets the translation\n\tvar translate = view.getTranslate();\n\tview.translate = new mxPoint(dx, dy);\n\t\n\t// Redraws only states that intersect the clip\n\tvar redraw = this.graph.cellRenderer.redraw;\n\tvar states = view.states;\n\tvar s = view.scale;\n\n\t// Gets the transformed clip for intersection check below\n\tif (this.clipping)\n\t{\n\t\tvar tempClip = new mxRectangle((clip.x + translate.x) * s, (clip.y + translate.y) * s,\n\t\t\t\tclip.width * s / realScale, clip.height * s / realScale);\n\n\t\t// Checks clipping rectangle for speedup\n\t\t// Must create terminal states for edge clipping even if terminal outside of clip\n\t\tthis.graph.cellRenderer.redraw = function(state, force, rendering)\n\t\t{\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\t// Gets original state from graph to find bounding box\n\t\t\t\tvar orig = states.get(state.cell);\n\t\t\t\t\n\t\t\t\tif (orig != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = view.getBoundingBox(orig, false);\n\t\t\t\t\t\n\t\t\t\t\t// Stops rendering if outside clip for speedup but ignores\n\t\t\t\t\t// edge labels where width and height is set to 0\n\t\t\t\t\tif (bbox != null && bbox.width > 0 && bbox.height > 0 &&\n\t\t\t\t\t\t!mxUtils.intersects(tempClip, bbox))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tredraw.apply(this, arguments);\n\t\t};\n\t}\n\t\n\tvar temp = null;\n\t\n\ttry\n\t{\n\t\t// Creates the temporary cell states in the view and\n\t\t// draws them onto the temporary DOM nodes in the view\n\t\tvar cells = [this.getRoot()];\n\t\ttemp = new mxTemporaryCellStates(view, scale, cells, null, mxUtils.bind(this, function(state)\n\t\t{\n\t\t\treturn this.getLinkForCellState(state);\n\t\t}));\n\t}\n\tfinally\n\t{\n\t\t// Removes overlay pane with selection handles\n\t\t// controls and icons from the print output\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tview.overlayPane.innerHTML = '';\n\t\t\tview.canvas.style.overflow = 'hidden';\n\t\t\tview.canvas.style.position = 'relative';\n\t\t\tview.canvas.style.top = this.marginTop + 'px';\n\t\t\tview.canvas.style.width = clip.width + 'px';\n\t\t\tview.canvas.style.height = clip.height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Removes everything but the SVG node\n\t\t\tvar tmp = div.firstChild;\n\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\tvar next = tmp.nextSibling;\n\t\t\t\tvar name = tmp.nodeName.toLowerCase();\n\n\t\t\t\t// Note: Width and height are required in FF 11\n\t\t\t\tif (name == 'svg')\n\t\t\t\t{\n\t\t\t\t\ttmp.style.overflow = 'hidden';\n\t\t\t\t\ttmp.style.position = 'relative';\n\t\t\t\t\ttmp.style.top = this.marginTop + 'px';\n\t\t\t\t\ttmp.setAttribute('width', clip.width);\n\t\t\t\t\ttmp.setAttribute('height', clip.height);\n\t\t\t\t\ttmp.style.width = '';\n\t\t\t\t\ttmp.style.height = '';\n\t\t\t\t}\n\t\t\t\t// Tries to fetch all text labels and only text labels\n\t\t\t\telse if (tmp.style.cursor != 'default' && name != 'div')\n\t\t\t\t{\n\t\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp = next;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Puts background image behind SVG output\n\t\tif (this.printBackgroundImage)\n\t\t{\n\t\t\tvar svgs = div.getElementsByTagName('svg');\n\t\t\t\n\t\t\tif (svgs.length > 0)\n\t\t\t{\n\t\t\t\tsvgs[0].style.position = 'absolute';\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Completely removes the overlay pane to remove more handles\n\t\tview.overlayPane.parentNode.removeChild(view.overlayPane);\n\n\t\t// Restores the state of the view\n\t\tthis.graph.setEnabled(graphEnabled);\n\t\tthis.graph.container = previousContainer;\n\t\tthis.graph.cellRenderer.redraw = redraw;\n\t\tview.canvas = canvas;\n\t\tview.backgroundPane = backgroundPane;\n\t\tview.drawPane = drawPane;\n\t\tview.overlayPane = overlayPane;\n\t\tview.translate = translate;\n\t\ttemp.destroy();\n\t\tview.setEventsEnabled(eventsEnabled);\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n * \n * Returns the link for the given cell state. This returns null.\n */\nmxPrintPreview.prototype.getLinkForCellState = function(state)\n{\n\treturn this.graph.getLinkForCell(state.cell);\n};\n\n/**\n * Function: insertBackgroundImage\n * \n * Inserts the background image into the given div.\n */\nmxPrintPreview.prototype.insertBackgroundImage = function(div, dx, dy)\n{\n\tvar bg = this.graph.backgroundImage;\n\t\n\tif (bg != null)\n\t{\n\t\tvar img = document.createElement('img');\n\t\timg.style.position = 'absolute';\n\t\timg.style.marginLeft = Math.round(dx * this.scale) + 'px';\n\t\timg.style.marginTop = Math.round(dy * this.scale) + 'px';\n\t\timg.setAttribute('width', Math.round(this.scale * bg.width));\n\t\timg.setAttribute('height', Math.round(this.scale * bg.height));\n\t\timg.src = bg.src;\n\t\t\n\t\tdiv.insertBefore(img, div.firstChild);\n\t}\n};\n\n/**\n * Function: getCoverPages\n * \n * Returns the pages to be added before the print output. This returns null.\n */\nmxPrintPreview.prototype.getCoverPages = function()\n{\n\treturn null;\n};\n\n/**\n * Function: getAppendices\n * \n * Returns the pages to be added after the print output. This returns null.\n */\nmxPrintPreview.prototype.getAppendices = function()\n{\n\treturn null;\n};\n\n/**\n * Function: print\n * \n * Opens the print preview and shows the print dialog.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n */\nmxPrintPreview.prototype.print = function(css)\n{\n\tvar wnd = this.open(css);\n\t\n\tif (wnd != null)\n\t{\n\t\twnd.print();\n\t}\n};\n\n/**\n * Function: close\n * \n * Closes the print preview window.\n */\nmxPrintPreview.prototype.close = function()\n{\n\tif (this.wnd != null)\n\t{\n\t\tthis.wnd.close();\n\t\tthis.wnd = null;\n\t}\n};\n\n__mxOutput.mxPrintPreview = typeof mxPrintPreview !== 'undefined' ? mxPrintPreview : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheet\n *\n * Defines the appearance of the cells in a graph. See <putCellStyle> for an\n * example of creating a new cell style. It is recommended to use objects, not\n * arrays for holding cell styles. Existing styles can be cloned using\n * <mxUtils.clone> and turned into a string for debugging using\n * <mxUtils.toString>.\n *\n * Default Styles:\n *\n * The stylesheet contains two built-in styles, which are used if no style is\n * defined for a cell:\n *\n *   defaultVertex - Default style for vertices\n *   defaultEdge - Default style for edges\n *\n * Example:\n *\n * (code)\n * var vertexStyle = stylesheet.getDefaultVertexStyle();\n * vertexStyle[mxConstants.STYLE_ROUNDED] = true;\n * var edgeStyle = stylesheet.getDefaultEdgeStyle();\n * edgeStyle[mxConstants.STYLE_EDGE] = mxEdgeStyle.EntityRelation;\n * (end)\n *\n * Modifies the built-in default styles.\n *\n * To avoid the default style for a cell, add a leading semicolon\n * to the style definition, eg.\n *\n * (code)\n * ;shadow=1\n * (end)\n *\n * Removing keys:\n *\n * For removing a key in a cell style of the form [stylename;|key=value;] the\n * special value none can be used, eg. highlight;fillColor=none\n *\n * See also the helper methods in mxUtils to modify strings of this format,\n * namely <mxUtils.setStyle>, <mxUtils.indexOfStylename>,\n * <mxUtils.addStylename>, <mxUtils.removeStylename>,\n * <mxUtils.removeAllStylenames> and <mxUtils.setStyleFlag>.\n *\n * Constructor: mxStylesheet\n *\n * Constructs a new stylesheet and assigns default styles.\n */\nfunction mxStylesheet()\n{\n\tthis.styles = new Object();\n\n\tthis.putDefaultVertexStyle(this.createDefaultVertexStyle());\n\tthis.putDefaultEdgeStyle(this.createDefaultEdgeStyle());\n};\n\n/**\n * Function: styles\n *\n * Maps from names to cell styles. Each cell style is a map of key,\n * value pairs.\n */\nmxStylesheet.prototype.styles;\n\n/**\n * Function: createDefaultVertexStyle\n *\n * Creates and returns the default vertex style.\n */\nmxStylesheet.prototype.createDefaultVertexStyle = function()\n{\n\tvar style = new Object();\n\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n\tstyle[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_FILLCOLOR] = '#C3D9FF';\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#774400';\n\n\treturn style;\n};\n\n/**\n * Function: createDefaultEdgeStyle\n *\n * Creates and returns the default edge style.\n */\nmxStylesheet.prototype.createDefaultEdgeStyle = function()\n{\n\tvar style = new Object();\n\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_CONNECTOR;\n\tstyle[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#446299';\n\n\treturn style;\n};\n\n/**\n * Function: putDefaultVertexStyle\n *\n * Sets the default style for vertices using defaultVertex as the\n * stylename.\n *\n * Parameters:\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putDefaultVertexStyle = function(style)\n{\n\tthis.putCellStyle('defaultVertex', style);\n};\n\n/**\n * Function: putDefaultEdgeStyle\n *\n * Sets the default style for edges using defaultEdge as the stylename.\n */\nmxStylesheet.prototype.putDefaultEdgeStyle = function(style)\n{\n\tthis.putCellStyle('defaultEdge', style);\n};\n\n/**\n * Function: getDefaultVertexStyle\n *\n * Returns the default style for vertices.\n */\nmxStylesheet.prototype.getDefaultVertexStyle = function()\n{\n\treturn this.styles['defaultVertex'];\n};\n\n/**\n * Function: getDefaultEdgeStyle\n *\n * Sets the default style for edges.\n */\nmxStylesheet.prototype.getDefaultEdgeStyle = function()\n{\n\treturn this.styles['defaultEdge'];\n};\n\n/**\n * Function: putCellStyle\n *\n * Stores the given map of key, value pairs under the given name in\n * <styles>.\n *\n * Example:\n *\n * The following example adds a new style called 'rounded' into an\n * existing stylesheet:\n *\n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n * style[mxConstants.STYLE_ROUNDED] = true;\n * graph.getStylesheet().putCellStyle('rounded', style);\n * (end)\n *\n * In the above example, the new style is an object. The possible keys of\n * the object are all the constants in <mxConstants> that start with STYLE\n * and the values are either JavaScript objects, such as\n * <mxPerimeter.RightAngleRectanglePerimeter> (which is in fact a function)\n * or expressions, such as true. Note that not all keys will be\n * interpreted by all shapes (eg. the line shape ignores the fill color).\n * The final call to this method associates the style with a name in the\n * stylesheet. The style is used in a cell with the following code:\n *\n * (code)\n * model.setStyle(cell, 'rounded');\n * (end)\n *\n * Parameters:\n *\n * name - Name for the style to be stored.\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putCellStyle = function(name, style)\n{\n\tthis.styles[name] = style;\n};\n\n/**\n * Function: getCellStyle\n *\n * Returns the cell style for the specified stylename or the given\n * defaultStyle if no style can be found for the given stylename.\n *\n * Parameters:\n *\n * name - String of the form [(stylename|key=value);] that represents the\n * style.\n * defaultStyle - Default style to be returned if no style can be found.\n */\nmxStylesheet.prototype.getCellStyle = function(name, defaultStyle)\n{\n\tvar style = defaultStyle;\n\n\tif (name != null && name.length > 0)\n\t{\n\t\tvar pairs = name.split(';');\n\n\t\tif (style != null &&\n\t\t\tname.charAt(0) != ';')\n\t\t{\n\t\t\tstyle = mxUtils.clone(style);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle = new Object();\n\t\t}\n\n\t\t// Parses each key, value pair into the existing style\n\t \tfor (var i = 0; i < pairs.length; i++)\n\t \t{\n\t \t\tvar tmp = pairs[i];\n\t \t\tvar pos = tmp.indexOf('=');\n\n\t \t\tif (pos >= 0)\n\t \t\t{\n\t\t \t\tvar key = tmp.substring(0, pos);\n\t\t \t\tvar value = tmp.substring(pos + 1);\n\n\t\t \t\tif (value == mxConstants.NONE)\n\t\t \t\t{\n\t\t \t\t\tdelete style[key];\n\t\t \t\t}\n\t\t \t\telse if (mxUtils.isNumeric(value))\n\t\t \t\t{\n\t\t \t\t\tstyle[key] = parseFloat(value);\n\t\t \t\t}\n\t\t \t\telse\n\t\t \t\t{\n\t\t\t \t\tstyle[key] = value;\n\t\t \t\t}\n\t\t\t}\n\t \t\telse\n\t \t\t{\n\t \t\t\t// Merges the entries from a named style\n\t\t\t\tvar tmpStyle = this.styles[tmp];\n\n\t\t\t\tif (tmpStyle != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var key in tmpStyle)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle[key] = tmpStyle[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t \t\t}\n\t\t}\n\t}\n\n\treturn style;\n};\n\n__mxOutput.mxStylesheet = typeof mxStylesheet !== 'undefined' ? mxStylesheet : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellState\n * \n * Represents the current state of a cell in a given <mxGraphView>.\n * \n * For edges, the edge label position is stored in <absoluteOffset>.\n * \n * The size for oversize labels can be retrieved using the boundingBox property\n * of the <text> field as shown below.\n * \n * (code)\n * var bbox = (state.text != null) ? state.text.boundingBox : null;\n * (end)\n * \n * Constructor: mxCellState\n * \n * Constructs a new object that represents the current state of the given\n * cell in the specified view.\n * \n * Parameters:\n * \n * view - <mxGraphView> that contains the state.\n * cell - <mxCell> that this state represents.\n * style - Array of key, value pairs that constitute the style.\n */\nfunction mxCellState(view, cell, style)\n{\n\tthis.view = view;\n\tthis.cell = cell;\n\tthis.style = (style != null) ? style : {};\n\t\n\tthis.origin = new mxPoint();\n\tthis.absoluteOffset = new mxPoint();\n};\n\n/**\n * Extends mxRectangle.\n */\nmxCellState.prototype = new mxRectangle();\nmxCellState.prototype.constructor = mxCellState;\n\n/**\n * Variable: view\n * \n * Reference to the enclosing <mxGraphView>.\n */\nmxCellState.prototype.view = null;\n\n/**\n * Variable: cell\n *\n * Reference to the <mxCell> that is represented by this state.\n */\nmxCellState.prototype.cell = null;\n\n/**\n * Variable: style\n * \n * Contains an array of key, value pairs that represent the style of the\n * cell.\n */\nmxCellState.prototype.style = null;\n\n/**\n * Variable: invalidStyle\n * \n * Specifies if the style is invalid. Default is false.\n */\nmxCellState.prototype.invalidStyle = false;\n\n/**\n * Variable: invalid\n * \n * Specifies if the state is invalid. Default is true.\n */\nmxCellState.prototype.invalid = true;\n\n/**\n * Variable: origin\n *\n * <mxPoint> that holds the origin for all child cells. Default is a new\n * empty <mxPoint>.\n */\nmxCellState.prototype.origin = null;\n\n/**\n * Variable: absolutePoints\n * \n * Holds an array of <mxPoints> that represent the absolute points of an\n * edge.\n */\nmxCellState.prototype.absolutePoints = null;\n\n/**\n * Variable: absoluteOffset\n *\n * <mxPoint> that holds the absolute offset. For edges, this is the\n * absolute coordinates of the label position. For vertices, this is the\n * offset of the label relative to the top, left corner of the vertex. \n */\nmxCellState.prototype.absoluteOffset = null;\n\n/**\n * Variable: visibleSourceState\n * \n * Caches the visible source terminal state.\n */\nmxCellState.prototype.visibleSourceState = null;\n\n/**\n * Variable: visibleTargetState\n * \n * Caches the visible target terminal state.\n */\nmxCellState.prototype.visibleTargetState = null;\n\n/**\n * Variable: terminalDistance\n * \n * Caches the distance between the end points for an edge.\n */\nmxCellState.prototype.terminalDistance = 0;\n\n/**\n * Variable: length\n *\n * Caches the length of an edge.\n */\nmxCellState.prototype.length = 0;\n\n/**\n * Variable: segments\n * \n * Array of numbers that represent the cached length of each segment of the\n * edge.\n */\nmxCellState.prototype.segments = null;\n\n/**\n * Variable: shape\n * \n * Holds the <mxShape> that represents the cell graphically.\n */\nmxCellState.prototype.shape = null;\n\n/**\n * Variable: text\n * \n * Holds the <mxText> that represents the label of the cell. Thi smay be\n * null if the cell has no label.\n */\nmxCellState.prototype.text = null;\n\n/**\n * Variable: unscaledWidth\n * \n * Holds the unscaled width of the state.\n */\nmxCellState.prototype.unscaledWidth = null;\n\n/**\n * Variable: unscaledHeight\n * \n * Holds the unscaled height of the state.\n */\nmxCellState.prototype.unscaledHeight = null;\n\n/**\n * Function: getPerimeterBounds\n * \n * Returns the <mxRectangle> that should be used as the perimeter of the\n * cell.\n * \n * Parameters:\n * \n * border - Optional border to be added around the perimeter bounds.\n * bounds - Optional <mxRectangle> to be used as the initial bounds.\n */\nmxCellState.prototype.getPerimeterBounds = function(border, bounds)\n{\n\tborder = border || 0;\n\tbounds = (bounds != null) ? bounds : new mxRectangle(this.x, this.y, this.width, this.height);\n\t\n\tif (this.shape != null && this.shape.stencil != null && this.shape.stencil.aspect == 'fixed')\n\t{\n\t\tvar aspect = this.shape.stencil.computeAspect(this.style, bounds.x, bounds.y, bounds.width, bounds.height);\n\t\t\n\t\tbounds.x = aspect.x;\n\t\tbounds.y = aspect.y;\n\t\tbounds.width = this.shape.stencil.w0 * aspect.width;\n\t\tbounds.height = this.shape.stencil.h0 * aspect.height;\n\t}\n\t\n\tif (border != 0)\n\t{\n\t\tbounds.grow(border);\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: setAbsoluteTerminalPoint\n * \n * Sets the first or last point in <absolutePoints> depending on isSource.\n * \n * Parameters:\n * \n * point - <mxPoint> that represents the terminal point.\n * isSource - Boolean that specifies if the first or last point should\n * be assigned.\n */\nmxCellState.prototype.setAbsoluteTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t}\n\t\t\n\t\tif (this.absolutePoints.length == 0)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[0] = point;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t\tthis.absolutePoints.push(null);\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse if (this.absolutePoints.length == 1)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[this.absolutePoints.length - 1] = point;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n * \n * Sets the given cursor on the shape and text shape.\n */\nmxCellState.prototype.setCursor = function(cursor)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.setCursor(cursor);\n\t}\n\t\n\tif (this.text != null)\n\t{\n\t\tthis.text.setCursor(cursor);\n\t}\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Returns the visible source or target terminal cell.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source or target cell should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminal = function(source)\n{\n\tvar tmp = this.getVisibleTerminalState(source);\n\t\n\treturn (tmp != null) ? tmp.cell : null;\n};\n\n/**\n * Function: getVisibleTerminalState\n * \n * Returns the visible source or target terminal state.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source or target state should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminalState = function(source)\n{\n\treturn (source) ? this.visibleSourceState : this.visibleTargetState;\n};\n\n/**\n * Function: setVisibleTerminalState\n * \n * Sets the visible source or target terminal state.\n * \n * Parameters:\n * \n * terminalState - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the source or target state should be set.\n */\nmxCellState.prototype.setVisibleTerminalState = function(terminalState, source)\n{\n\tif (source)\n\t{\n\t\tthis.visibleSourceState = terminalState;\n\t}\n\telse\n\t{\n\t\tthis.visibleTargetState = terminalState;\n\t}\n};\n\n/**\n * Function: getCellBounds\n * \n * Returns the unscaled, untranslated bounds.\n */\nmxCellState.prototype.getCellBounds = function()\n{\n\treturn this.cellBounds;\n};\n\n/**\n * Function: getPaintBounds\n * \n * Returns the unscaled, untranslated paint bounds. This is the same as\n * <getCellBounds> but with a 90 degree rotation if the shape's\n * isPaintBoundsInverted returns true.\n */\nmxCellState.prototype.getPaintBounds = function()\n{\n\treturn this.paintBounds;\n};\n\n/**\n * Function: updateCachedBounds\n * \n * Updates the cellBounds and paintBounds.\n */\nmxCellState.prototype.updateCachedBounds = function()\n{\n\tvar tr = this.view.translate;\n\tvar s = this.view.scale;\n\tthis.cellBounds = new mxRectangle(this.x / s - tr.x, this.y / s - tr.y, this.width / s, this.height / s);\n\tthis.paintBounds = mxRectangle.fromRectangle(this.cellBounds);\n\t\n\tif (this.shape != null && this.shape.isPaintBoundsInverted())\n\t{\n\t\tthis.paintBounds.rotate90();\n\t}\n};\n\n/**\n * Destructor: setState\n * \n * Copies all fields from the given state to this state.\n */\nmxCellState.prototype.setState = function(state)\n{\n\tthis.view = state.view;\n\tthis.cell = state.cell;\n\tthis.style = state.style;\n\tthis.absolutePoints = state.absolutePoints;\n\tthis.origin = state.origin;\n\tthis.absoluteOffset = state.absoluteOffset;\n\tthis.boundingBox = state.boundingBox;\n\tthis.terminalDistance = state.terminalDistance;\n\tthis.segments = state.segments;\n\tthis.length = state.length;\n\tthis.x = state.x;\n\tthis.y = state.y;\n\tthis.width = state.width;\n\tthis.height = state.height;\n\tthis.unscaledWidth = state.unscaledWidth;\n\tthis.unscaledHeight = state.unscaledHeight;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxCellState.prototype.clone = function()\n{\n \tvar clone = new mxCellState(this.view, this.cell, this.style);\n\n\t// Clones the absolute points\n\tif (this.absolutePoints != null)\n\t{\n\t\tclone.absolutePoints = [];\n\t\t\n\t\tfor (var i = 0; i < this.absolutePoints.length; i++)\n\t\t{\n\t\t\tclone.absolutePoints[i] = this.absolutePoints[i].clone();\n\t\t}\n\t}\n\n\tif (this.origin != null)\n\t{\n\t\tclone.origin = this.origin.clone();\n\t}\n\n\tif (this.absoluteOffset != null)\n\t{\n\t\tclone.absoluteOffset = this.absoluteOffset.clone();\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tclone.boundingBox = this.boundingBox.clone();\n\t}\n\n\tclone.terminalDistance = this.terminalDistance;\n\tclone.segments = this.segments;\n\tclone.length = this.length;\n\tclone.x = this.x;\n\tclone.y = this.y;\n\tclone.width = this.width;\n\tclone.height = this.height;\n\tclone.unscaledWidth = this.unscaledWidth;\n\tclone.unscaledHeight = this.unscaledHeight;\n\t\n\treturn clone;\n};\n\n/**\n * Destructor: destroy\n * \n * Destroys the state and all associated resources.\n */\nmxCellState.prototype.destroy = function()\n{\n\tthis.view.graph.cellRenderer.destroy(this);\n};\n\n__mxOutput.mxCellState = typeof mxCellState !== 'undefined' ? mxCellState : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphSelectionModel\n *\n * Implements the selection model for a graph. Here is a listener that handles\n * all removed selection cells.\n * \n * (code)\n * graph.getSelectionModel().addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var cells = evt.getProperty('added');\n *   \n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     // Handle cells[i]...\n *   }\n * });\n * (end)\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the selection was changed in <changeSelection>. The\n * <code>edit</code> property contains the <mxUndoableEdit> which contains the\n * <mxSelectionChange>.\n * \n * Event: mxEvent.CHANGE\n * \n * Fires after the selection changes by executing an <mxSelectionChange>. The\n * <code>added</code> and <code>removed</code> properties contain arrays of\n * cells that have been added to or removed from the selection, respectively.\n * The names are inverted due to historic reasons. This cannot be changed.\n * \n * Constructor: mxGraphSelectionModel\n *\n * Constructs a new graph selection model for the given <mxGraph>.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphSelectionModel(graph)\n{\n\tthis.graph = graph;\n\tthis.cells = [];\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphSelectionModel.prototype = new mxEventSource();\nmxGraphSelectionModel.prototype.constructor = mxGraphSelectionModel;\n\n/**\n * Variable: doneResource\n * \n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphSelectionModel.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Variable: updatingSelectionResource\n *\n * Specifies the resource key for the status message while the selection is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingSelection'.\n */\nmxGraphSelectionModel.prototype.updatingSelectionResource = (mxClient.language != 'none') ? 'updatingSelection' : '';\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphSelectionModel.prototype.graph = null;\n\n/**\n * Variable: singleSelection\n *\n * Specifies if only one selected item at a time is allowed.\n * Default is false.\n */\nmxGraphSelectionModel.prototype.singleSelection = false;\n\n/**\n * Function: isSingleSelection\n *\n * Returns <singleSelection> as a boolean.\n */\nmxGraphSelectionModel.prototype.isSingleSelection = function()\n{\n\treturn this.singleSelection;\n};\n\n/**\n * Function: setSingleSelection\n *\n * Sets the <singleSelection> flag.\n * \n * Parameters:\n * \n * singleSelection - Boolean that specifies the new value for\n * <singleSelection>.\n */\nmxGraphSelectionModel.prototype.setSingleSelection = function(singleSelection)\n{\n\tthis.singleSelection = singleSelection;\n};\n\n/**\n * Function: isSelected\n *\n * Returns true if the given <mxCell> is selected.\n */\nmxGraphSelectionModel.prototype.isSelected = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\treturn mxUtils.indexOf(this.cells, cell) >= 0;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: isEmpty\n *\n * Returns true if no cells are currently selected.\n */\nmxGraphSelectionModel.prototype.isEmpty = function()\n{\n\treturn this.cells.length == 0;\n};\n\n/**\n * Function: clear\n *\n * Clears the selection and fires a <change> event if the selection was not\n * empty.\n */\nmxGraphSelectionModel.prototype.clear = function()\n{\n\tthis.changeSelection(null, this.cells);\n};\n\n/**\n * Function: setCell\n *\n * Selects the specified <mxCell> using <setCells>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n */\nmxGraphSelectionModel.prototype.setCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.setCells([cell]);\n\t}\n};\n\n/**\n * Function: setCells\n *\n * Selects the given array of <mxCells> and fires a <change> event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n */\nmxGraphSelectionModel.prototype.setCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\t\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\t\n\t\t}\n\n\t\tthis.changeSelection(tmp, this.cells);\n\t}\n};\n\n/**\n * Function: getFirstSelectableCell\n *\n * Returns the first selectable cell in the given array of cells.\n */\nmxGraphSelectionModel.prototype.getFirstSelectableCell = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\treturn cells[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: addCell\n * \n * Adds the given <mxCell> to the selection and fires a <select> event.\n * \n * Parameters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.addCells([cell]);\n\t}\n};\n\n/**\n * Function: addCells\n * \n * Adds the given array of <mxCells> to the selection and fires a <select>\n * event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar remove = null;\n\t\t\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tremove = this.cells;\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (!this.isSelected(cells[i]) &&\n\t\t\t\tthis.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\t\n\t\t}\n\n\t\tthis.changeSelection(tmp, remove);\n\t}\n};\n\n/**\n * Function: removeCell\n *\n * Removes the specified <mxCell> from the selection and fires a <select>\n * event for the remaining cells.\n * \n * Parameters:\n * \n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.removeCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.removeCells([cell]);\n\t}\n};\n\n/**\n * Function: removeCells\n */\nmxGraphSelectionModel.prototype.removeCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSelected(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.changeSelection(null, tmp);\t\n\t}\n};\n\n/**\n * Function: changeSelection\n *\n * Adds/removes the specified arrays of <mxCell> to/from the selection.\n * \n * Parameters:\n * \n * added - Array of <mxCell> to add to the selection.\n * remove - Array of <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.changeSelection = function(added, removed)\n{\n\tif ((added != null &&\n\t\tadded.length > 0 &&\n\t\tadded[0] != null) ||\n\t\t(removed != null &&\n\t\tremoved.length > 0 &&\n\t\tremoved[0] != null))\n\t{\n\t\tvar change = new mxSelectionChange(this, added, removed);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, false);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t}\n};\n\n/**\n * Function: cellAdded\n *\n * Inner callback to add the specified <mxCell> to the selection. No event\n * is fired in this implementation.\n * \n * Paramters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null &&\n\t\t!this.isSelected(cell))\n\t{\n\t\tthis.cells.push(cell);\n\t}\n};\n\n/**\n * Function: cellRemoved\n *\n * Inner callback to remove the specified <mxCell> from the selection. No\n * event is fired in this implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar index = mxUtils.indexOf(this.cells, cell);\n\t\t\n\t\tif (index >= 0)\n\t\t{\n\t\t\tthis.cells.splice(index, 1);\n\t\t}\n\t}\n};\n\n/**\n * Class: mxSelectionChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxSelectionChange(selectionModel, added, removed)\n{\n\tthis.selectionModel = selectionModel;\n\tthis.added = (added != null) ? added.slice() : null;\n\tthis.removed = (removed != null) ? removed.slice() : null;\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxSelectionChange.prototype.execute = function()\n{\n\tvar t0 = mxLog.enter('mxSelectionChange.execute');\n\twindow.status = mxResources.get(\n\t\tthis.selectionModel.updatingSelectionResource) ||\n\t\tthis.selectionModel.updatingSelectionResource;\n\n\tif (this.removed != null)\n\t{\n\t\tfor (var i = 0; i < this.removed.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellRemoved(this.removed[i]);\n\t\t}\n\t}\n\n\tif (this.added != null)\n\t{\n\t\tfor (var i = 0; i < this.added.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellAdded(this.added[i]);\n\t\t}\n\t}\n\t\n\tvar tmp = this.added;\n\tthis.added = this.removed;\n\tthis.removed = tmp;\n\n\twindow.status = mxResources.get(this.selectionModel.doneResource) ||\n\t\tthis.selectionModel.doneResource;\n\tmxLog.leave('mxSelectionChange.execute', t0);\n\t\n\tthis.selectionModel.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'added', this.added, 'removed', this.removed));\n};\n\n__mxOutput.mxGraphSelectionModel = typeof mxGraphSelectionModel !== 'undefined' ? mxGraphSelectionModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellEditor\n *\n * In-place editor for the graph. To control this editor, use\n * <mxGraph.invokesStopCellEditing>, <mxGraph.enterStopsCellEditing> and\n * <mxGraph.escapeEnabled>. If <mxGraph.enterStopsCellEditing> is true then\n * ctrl-enter or shift-enter can be used to create a linefeed. The F2 and\n * escape keys can always be used to stop editing.\n * \n * To customize the location of the textbox in the graph, override\n * <getEditorBounds> as follows:\n * \n * (code)\n * graph.cellEditor.getEditorBounds = function(state)\n * {\n *   var result = mxCellEditor.prototype.getEditorBounds.apply(this, arguments);\n *   \n *   if (this.graph.getModel().isEdge(state.cell))\n *   {\n *     result.x = state.getCenterX() - result.width / 2;\n *     result.y = state.getCenterY() - result.height / 2;\n *   }\n *   \n *   return result;\n * };\n * (end)\n * \n * Note that this hook is only called if <autoSize> is false. If <autoSize> is true,\n * then <mxShape.getLabelBounds> is used to compute the current bounds of the textbox.\n * \n * The textarea uses the mxCellEditor CSS class. You can modify this class in\n * your custom CSS. Note: You should modify the CSS after loading the client\n * in the page.\n *\n * Example:\n * \n * To only allow numeric input in the in-place editor, use the following code.\n *\n * (code)\n * var text = graph.cellEditor.textarea;\n * \n * mxEvent.addListener(text, 'keydown', function (evt)\n * {\n *   if (!(evt.keyCode >= 48 && evt.keyCode <= 57) &&\n *       !(evt.keyCode >= 96 && evt.keyCode <= 105))\n *   {\n *     mxEvent.consume(evt);\n *   }\n * }); \n * (end)\n * \n * Placeholder:\n * \n * To implement a placeholder for cells without a label, use the\n * <emptyLabelText> variable.\n * \n * Resize in Chrome:\n * \n * Resize of the textarea is disabled by default. If you want to enable\n * this feature extend <init> and set this.textarea.style.resize = ''.\n * \n * To start editing on a key press event, the container of the graph\n * should have focus or a focusable parent should be used to add the\n * key press handler as follows.\n * \n * (code)\n * mxEvent.addListener(graph.container, 'keypress', mxUtils.bind(this, function(evt)\n * {\n *   if (!graph.isEditing() && !graph.isSelectionEmpty() && evt.which !== 0 &&\n *       !mxEvent.isAltDown(evt) && !mxEvent.isControlDown(evt) && !mxEvent.isMetaDown(evt))\n *   {\n *     graph.startEditing();\n *     \n *     if (mxClient.IS_FF)\n *     {\n *       graph.cellEditor.textarea.value = String.fromCharCode(evt.which);\n *     }\n *   }\n * }));\n * (end)\n * \n * To allow focus for a DIV, and hence to receive key press events, some browsers\n * require it to have a valid tabindex attribute. In this case the following\n * code may be used to keep the container focused.\n * \n * (code)\n * var graphFireMouseEvent = graph.fireMouseEvent;\n * graph.fireMouseEvent = function(evtName, me, sender)\n * {\n *   if (evtName == mxEvent.MOUSE_DOWN)\n *   {\n *     this.container.focus();\n *   }\n *   \n *   graphFireMouseEvent.apply(this, arguments);\n * };\n * (end)\n *\n * Constructor: mxCellEditor\n *\n * Constructs a new in-place editor for the specified graph.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellEditor(graph)\n{\n\tthis.graph = graph;\n\t\n\t// Stops editing after zoom changes\n\tthis.zoomHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (this.graph.isEditing())\n\t\t{\n\t\t\tthis.resize();\n\t\t}\n\t});\n\t\n\tthis.graph.view.addListener(mxEvent.SCALE, this.zoomHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE_AND_TRANSLATE, this.zoomHandler);\n\t\n\t// Adds handling of deleted cells while editing\n\tthis.changeHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.editingCell != null && this.graph.getView().getState(this.editingCell) == null)\n\t\t{\n\t\t\tthis.stopEditing(true);\n\t\t}\n\t});\n\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellEditor.prototype.graph = null;\n\n/**\n * Variable: textarea\n *\n * Holds the DIV that is used for text editing. Note that this may be null before the first\n * edit. Instantiated in <init>.\n */\nmxCellEditor.prototype.textarea = null;\n\n/**\n * Variable: editingCell\n * \n * Reference to the <mxCell> that is currently being edited.\n */\nmxCellEditor.prototype.editingCell = null;\n\n/**\n * Variable: trigger\n * \n * Reference to the event that was used to start editing.\n */\nmxCellEditor.prototype.trigger = null;\n\n/**\n * Variable: modified\n * \n * Specifies if the label has been modified.\n */\nmxCellEditor.prototype.modified = false;\n\n/**\n * Variable: autoSize\n * \n * Specifies if the textarea should be resized while the text is being edited.\n * Default is true.\n */\nmxCellEditor.prototype.autoSize = true;\n\n/**\n * Variable: selectText\n * \n * Specifies if the text should be selected when editing starts. Default is\n * true.\n */\nmxCellEditor.prototype.selectText = true;\n\n/**\n * Variable: emptyLabelText\n * \n * Text to be displayed for empty labels. Default is '' or '<br>' in Firefox as\n * a workaround for the missing cursor bug for empty content editable. This can\n * be set to eg. \"[Type Here]\" to easier visualize editing of empty labels. The\n * value is only displayed before the first keystroke and is never used as the\n * actual editing value.\n */\nmxCellEditor.prototype.emptyLabelText = (mxClient.IS_FF) ? '<br>' : '';\n\n/**\n * Variable: escapeCancelsEditing\n * \n * If true, pressing the escape key will stop editing and not accept the new\n * value. Change this to false to accept the new value on escape, and cancel\n * editing on Shift+Escape instead. Default is true.\n */\nmxCellEditor.prototype.escapeCancelsEditing = true;\n\n/**\n * Variable: textNode\n * \n * Reference to the label DOM node that has been hidden.\n */\nmxCellEditor.prototype.textNode = '';\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the textarea. Default is 5.\n */\nmxCellEditor.prototype.zIndex = 5;\n\n/**\n * Variable: minResize\n * \n * Defines the minimum width and height to be used in <resize>. Default is 0x20px.\n */\nmxCellEditor.prototype.minResize = new mxRectangle(0, 20);\n\n/**\n * Variable: wordWrapPadding\n * \n * Correction factor for word wrapping width. Default is 2 in quirks, 0 in IE\n * 11 and 1 in all other browsers and modes.\n */\nmxCellEditor.prototype.wordWrapPadding = (mxClient.IS_QUIRKS) ? 2 : (!mxClient.IS_IE11) ? 1 : 0;\n\n/**\n * Variable: blurEnabled\n *\n * If <focusLost> should be called if <textarea> loses the focus. Default is false.\n */\nmxCellEditor.prototype.blurEnabled = false;\n\n/**\n * Variable: initialValue\n * \n * Holds the initial editing value to check if the current value was modified.\n */\nmxCellEditor.prototype.initialValue = null;\n\n/**\n * Variable: align\n * \n * Holds the current temporary horizontal alignment for the cell style. If this\n * is modified then the current text alignment is changed and the cell style is\n * updated when the value is applied.\n */\nmxCellEditor.prototype.align = null;\n\n/**\n * Function: init\n *\n * Creates the <textarea> and installs the event listeners. The key handler\n * updates the <modified> state.\n */\nmxCellEditor.prototype.init = function ()\n{\n\tthis.textarea = document.createElement('div');\n\tthis.textarea.className = 'mxCellEditor mxPlainTextEditor';\n\tthis.textarea.contentEditable = true;\n\t\n\t// Workaround for selection outside of DIV if height is 0\n\tif (mxClient.IS_GC)\n\t{\n\t\tthis.textarea.style.minHeight = '1em';\n\t}\n\n\tthis.textarea.style.position = ((this.isLegacyEditor())) ? 'absolute' : 'relative';\n\tthis.installListeners(this.textarea);\n};\n\n/**\n * Function: applyValue\n * \n * Called in <stopEditing> if cancel is false to invoke <mxGraph.labelChanged>.\n */\nmxCellEditor.prototype.applyValue = function(state, value)\n{\n\tthis.graph.labelChanged(state.cell, value, this.trigger);\n};\n\n/**\n * Function: setAlign\n * \n * Sets the temporary horizontal alignment for the current editing session.\n */\nmxCellEditor.prototype.setAlign = function (align)\n{\n\tif (this.textarea != null)\n\t{\n\t\tthis.textarea.style.textAlign = align;\n\t}\n\t\n\tthis.align = align;\n\tthis.resize();\n};\n\n/**\n * Function: getInitialValue\n * \n * Gets the initial editing value for the given cell.\n */\nmxCellEditor.prototype.getInitialValue = function(state, trigger)\n{\n\tvar result = mxUtils.htmlEntities(this.graph.getEditingValue(state.cell, trigger), false);\n\t\n    // Workaround for trailing line breaks being ignored in the editor\n\tif (!mxClient.IS_QUIRKS && document.documentMode != 8 && document.documentMode != 9 &&\n\t\tdocument.documentMode != 10)\n\t{\n\t\tresult = mxUtils.replaceTrailingNewlines(result, '<div><br></div>');\n\t}\n    \n    return result.replace(/\\n/g, '<br>');\n};\n\n/**\n * Function: getCurrentValue\n * \n * Returns the current editing value.\n */\nmxCellEditor.prototype.getCurrentValue = function(state)\n{\n\treturn mxUtils.extractTextWithWhitespace(this.textarea.childNodes);\n};\n\n/**\n * Function: isCancelEditingKeyEvent\n * \n * Returns true if <escapeCancelsEditing> is true and shift, control and meta\n * are not pressed.\n */\nmxCellEditor.prototype.isCancelEditingKeyEvent = function(evt)\n{\n\treturn this.escapeCancelsEditing || mxEvent.isShiftDown(evt) || mxEvent.isControlDown(evt) || mxEvent.isMetaDown(evt);\n};\n\n/**\n * Function: installListeners\n * \n * Installs listeners for focus, change and standard key event handling.\n */\nmxCellEditor.prototype.installListeners = function(elt)\n{\n\t// Applies value if text is dragged\n\t// LATER: Gesture mouse events ignored for starting move\n\tmxEvent.addListener(elt, 'dragstart', mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.graph.stopEditing(false);\n\t\tmxEvent.consume(evt);\n\t}));\n\n\t// Applies value if focus is lost\n\tmxEvent.addListener(elt, 'blur', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.blurEnabled)\n\t\t{\n\t\t\tthis.focusLost(evt);\n\t\t}\n\t}));\n\n\t// Updates modified state and handles placeholder text\n\tmxEvent.addListener(elt, 'keydown', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt))\n\t\t{\n\t\t\tif (this.isStopEditingEvent(evt))\n\t\t\t{\n\t\t\t\tthis.graph.stopEditing(false);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t\telse if (evt.keyCode == 27 /* Escape */)\n\t\t\t{\n\t\t\t\tthis.graph.stopEditing(this.isCancelEditingKeyEvent(evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}));\n\n\t// Keypress only fires if printable key was pressed and handles removing the empty placeholder\n\tvar keypressHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null)\n\t\t{\n\t\t\t// Clears the initial empty label on the first keystroke\n\t\t\t// and workaround for FF which fires keypress for delete and backspace\n\t\t\tif (this.clearOnChange && elt.innerHTML == this.getEmptyLabelText() &&\n\t\t\t\t(!mxClient.IS_FF || (evt.keyCode != 8 /* Backspace */ && evt.keyCode != 46 /* Delete */)))\n\t\t\t{\n\t\t\t\tthis.clearOnChange = false;\n\t\t\t\telt.innerHTML = '';\n\t\t\t}\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, 'keypress', keypressHandler);\n\tmxEvent.addListener(elt, 'paste', keypressHandler);\n\t\n\t// Handler for updating the empty label text value after a change\n\tvar keyupHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null)\n\t\t{\n\t\t\t// Uses an optional text value for sempty labels which is cleared\n\t\t\t// when the first keystroke appears. This makes it easier to see\n\t\t\t// that a label is being edited even if the label is empty.\n\t\t\t// In Safari and FF, an empty text is represented by <BR> which isn't enough to force a valid size\n\t\t\tif (this.textarea.innerHTML.length == 0 || this.textarea.innerHTML == '<br>')\n\t\t\t{\n\t\t\t\tthis.textarea.innerHTML = this.getEmptyLabelText();\n\t\t\t\tthis.clearOnChange = this.textarea.innerHTML.length > 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.clearOnChange = false;\n\t\t\t}\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, (!mxClient.IS_IE11 && !mxClient.IS_IE) ? 'input' : 'keyup', keyupHandler);\n\tmxEvent.addListener(elt, 'cut', keyupHandler);\n\tmxEvent.addListener(elt, 'paste', keyupHandler);\n\n\t// Adds automatic resizing of the textbox while typing using input, keyup and/or DOM change events\n\tvar evtName = (!mxClient.IS_IE11 && !mxClient.IS_IE) ? 'input' : 'keydown';\n\t\n\tvar resizeHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null && this.autoSize && !mxEvent.isConsumed(evt))\n\t\t{\n\t\t\t// Asynchronous is needed for keydown and shows better results for input events overall\n\t\t\t// (ie non-blocking and cases where the offsetWidth/-Height was wrong at this time)\n\t\t\tif (this.resizeThread != null)\n\t\t\t{\n\t\t\t\twindow.clearTimeout(this.resizeThread);\n\t\t\t}\n\t\t\t\n\t\t\tthis.resizeThread = window.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.resizeThread = null;\n\t\t\t\tthis.resize();\n\t\t\t}), 0);\n\t\t}\n\t});\n\t\n\tmxEvent.addListener(elt, evtName, resizeHandler);\n\tmxEvent.addListener(window, 'resize', resizeHandler);\n\n\tif (document.documentMode >= 9)\n\t{\n\t\tmxEvent.addListener(elt, 'DOMNodeRemoved', resizeHandler);\n\t\tmxEvent.addListener(elt, 'DOMNodeInserted', resizeHandler);\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(elt, 'cut', resizeHandler);\n\t\tmxEvent.addListener(elt, 'paste', resizeHandler);\n\t}\n};\n\n/**\n * Function: isStopEditingEvent\n * \n * Returns true if the given keydown event should stop cell editing. This\n * returns true if F2 is pressed of if <mxGraph.enterStopsCellEditing> is true\n * and enter is pressed without control or shift.\n */\nmxCellEditor.prototype.isStopEditingEvent = function(evt)\n{\n\treturn evt.keyCode == 113 /* F2 */ || (this.graph.isEnterStopsCellEditing() &&\n\t\tevt.keyCode == 13 /* Enter */ && !mxEvent.isControlDown(evt) &&\n\t\t!mxEvent.isShiftDown(evt));\n};\n\n/**\n * Function: isEventSource\n * \n * Returns true if this editor is the source for the given native event.\n */\nmxCellEditor.prototype.isEventSource = function(evt)\n{\n\treturn mxEvent.getSource(evt) == this.textarea;\n};\n\n/**\n * Function: resize\n * \n * Returns <modified>.\n */\nmxCellEditor.prototype.resize = function()\n{\n\tvar state = this.graph.getView().getState(this.editingCell);\n\t\n\tif (state == null)\n\t{\n\t\tthis.stopEditing(true);\n\t}\n\telse if (this.textarea != null)\n\t{\n\t\tvar isEdge = this.graph.getModel().isEdge(state.cell);\n \t\tvar scale = this.graph.getView().scale;\n \t\tvar m = null;\n\t\t\n\t\tif (!this.autoSize || (state.style[mxConstants.STYLE_OVERFLOW] == 'fill'))\n\t\t{\n\t\t\t// Specifies the bounds of the editor box\n\t\t\tthis.bounds = this.getEditorBounds(state);\n\t\t\tthis.textarea.style.width = Math.round(this.bounds.width / scale) + 'px';\n\t\t\tthis.textarea.style.height = Math.round(this.bounds.height / scale) + 'px';\n\t\t\t\n\t\t\t// FIXME: Offset when scaled\n\t\t\tif (document.documentMode == 8 || mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.round(this.bounds.x) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.round(this.bounds.y) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.round(this.bounds.x + 1)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.round(this.bounds.y + 1)) + 'px';\n\t\t\t}\n\t\t\t\n\t\t\t// Installs native word wrapping and avoids word wrap for empty label placeholder\n\t\t\tif (this.graph.isWrapping(state.cell) && (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n\t\t\t\tthis.textarea.innerHTML != this.getEmptyLabelText())\n\t\t\t{\n\t\t\t\tthis.textarea.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tthis.textarea.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t\t\tif (state.style[mxConstants.STYLE_OVERFLOW] != 'fill')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = Math.round(this.bounds.width / scale) + this.wordWrapPadding + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.whiteSpace = 'nowrap';\n\t\t\t\t\n\t\t\t\tif (state.style[mxConstants.STYLE_OVERFLOW] != 'fill')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t \t{\n\t \t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\tm = (state.text != null && this.align == null) ? state.text.margin : null;\n\t\t\t\n\t\t\tif (m == null)\n\t\t\t{\n\t\t\t\tm = mxUtils.getAlignmentAsPoint(this.align || mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER),\n\t\t\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE));\n\t\t\t}\n\t\t\t\n\t \t\tif (isEdge)\n\t\t\t{\n\t\t\t\tthis.bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y, 0, 0);\n\t\t\t\t\n\t\t\t\tif (lw != null)\n\t\t\t \t{\n\t\t\t\t\tvar tmp = (parseFloat(lw) + 2) * scale;\n\t\t\t\t\tthis.bounds.width = tmp;\n\t\t\t\t\tthis.bounds.x += m.x * tmp;\n\t\t\t \t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar bds = mxRectangle.fromRectangle(state);\n\t\t\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\t\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\t\tbds = (state.shape != null && hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE) ? state.shape.getLabelBounds(bds) : bds;\n\t\t\t \t\n\t\t\t \tif (lw != null)\n\t\t\t \t{\n\t\t\t \t\tbds.width = parseFloat(lw) * scale;\n\t\t\t \t}\n\t\t\t \t\n\t\t\t \tif (!state.view.graph.cellRenderer.legacySpacing || state.style[mxConstants.STYLE_OVERFLOW] != 'width')\n\t\t\t \t{\n\t\t\t\t\tvar spacing = parseInt(state.style[mxConstants.STYLE_SPACING] || 2) * scale;\n\t\t\t\t\tvar spacingTop = (parseInt(state.style[mxConstants.STYLE_SPACING_TOP] || 0) + mxText.prototype.baseSpacingTop) * scale + spacing;\n\t\t\t\t\tvar spacingRight = (parseInt(state.style[mxConstants.STYLE_SPACING_RIGHT] || 0) + mxText.prototype.baseSpacingRight) * scale + spacing;\n\t\t\t\t\tvar spacingBottom = (parseInt(state.style[mxConstants.STYLE_SPACING_BOTTOM] || 0) + mxText.prototype.baseSpacingBottom) * scale + spacing;\n\t\t\t\t\tvar spacingLeft = (parseInt(state.style[mxConstants.STYLE_SPACING_LEFT] || 0) + mxText.prototype.baseSpacingLeft) * scale + spacing;\n\t\t\t\t\t\n\t\t\t\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\t\t\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\t\t\tbds = new mxRectangle(bds.x + spacingLeft, bds.y + spacingTop,\n\t\t\t\t\t\tbds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (spacingLeft + spacingRight) : 0),\n\t\t\t\t\t\tbds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (spacingTop + spacingBottom) : 0));\n\t\t\t \t}\n\n\t\t\t\tthis.bounds = new mxRectangle(bds.x + state.absoluteOffset.x, bds.y + state.absoluteOffset.y, bds.width, bds.height);\n\t\t\t}\n\n\t\t\t// Needed for word wrap inside text blocks with oversize lines to match the final result where\n\t \t\t// the width of the longest line is used as the reference for text alignment in the cell\n\t \t\t// TODO: Fix word wrapping preview for edge labels in helloworld.html\n\t\t\tif (this.graph.isWrapping(state.cell) && (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n\t\t\t\tthis.textarea.innerHTML != this.getEmptyLabelText())\n\t\t\t{\n\t\t\t\tthis.textarea.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tthis.textarea.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t \t\t// Forces automatic reflow if text is removed from an oversize label and normal word wrap\n\t\t\t\tvar tmp = Math.round(this.bounds.width / ((document.documentMode == 8) ? scale : scale)) + this.wordWrapPadding;\n\n\t\t\t\tif (this.textarea.style.position != 'relative')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = tmp + 'px';\n\t\t\t\t\t\n\t\t\t\t\tif (this.textarea.scrollWidth > tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.textarea.style.width = this.textarea.scrollWidth + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.maxWidth = tmp + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// KNOWN: Trailing cursor in IE9 quirks mode is not visible\n\t\t\t\tthis.textarea.style.whiteSpace = 'nowrap';\n\t\t\t\tthis.textarea.style.width = '';\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Keep in visible area, add fine tuning for pixel precision\n\t\t\t// Workaround for wrong measuring in IE8 standards\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\tthis.textarea.style.zoom = '1';\n\t\t\t\tthis.textarea.style.height = 'auto';\n\t\t\t}\n\t\t\t\n\t\t\tvar ow = this.textarea.scrollWidth;\n\t\t\tvar oh = this.textarea.scrollHeight;\n\t\t\t\n\t\t\t// TODO: Update CSS width and height if smaller than minResize or remove minResize\n\t\t\t//if (this.minResize != null)\n\t\t\t//{\n\t\t\t//\tow = Math.max(ow, this.minResize.width);\n\t\t\t//\toh = Math.max(oh, this.minResize.height);\n\t\t\t//}\n\t\t\t\n\t\t\t// LATER: Keep in visible area, add fine tuning for pixel precision\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\t// LATER: Scaled wrapping and position is wrong in IE8\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.ceil((this.bounds.x - m.x * (this.bounds.width - (ow + 1) * scale) + ow * (scale - 1) * 0 + (m.x + 0.5) * 2) / scale)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.ceil((this.bounds.y - m.y * (this.bounds.height - (oh + 0.5) * scale) + oh * (scale - 1) * 0 + Math.abs(m.y + 0.5) * 1) / scale)) + 'px';\n\t\t\t\t// Workaround for wrong event handling width and height\n\t\t\t\tthis.textarea.style.width = Math.round(ow * scale) + 'px';\n\t\t\t\tthis.textarea.style.height = Math.round(oh * scale) + 'px';\n\t\t\t}\n\t\t\telse if (mxClient.IS_QUIRKS)\n\t\t\t{\t\t\t\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.ceil(this.bounds.x - m.x * (this.bounds.width - (ow + 1) * scale) + ow * (scale - 1) * 0 + (m.x + 0.5) * 2)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.ceil(this.bounds.y - m.y * (this.bounds.height - (oh + 0.5) * scale) + oh * (scale - 1) * 0 + Math.abs(m.y + 0.5) * 1)) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.round(this.bounds.x - m.x * (this.bounds.width - 2)) + 1) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.round(this.bounds.y - m.y * (this.bounds.height - 4) + ((m.y == -1) ? 3 : 0)) + 1) + 'px';\n\t\t\t}\n\t \t}\n\n\t\tif (mxClient.IS_VML)\n\t\t{\n\t\t\tthis.textarea.style.zoom = scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.setPrefixedStyle(this.textarea.style, 'transformOrigin', '0px 0px');\n\t\t\tmxUtils.setPrefixedStyle(this.textarea.style, 'transform',\n\t\t\t\t'scale(' + scale + ',' + scale + ')' + ((m == null) ? '' :\n\t\t\t\t' translate(' + (m.x * 100) + '%,' + (m.y * 100) + '%)'));\n\t\t}\n\t}\n};\n\n/**\n * Function: focusLost\n *\n * Called if the textarea has lost focus.\n */\nmxCellEditor.prototype.focusLost = function()\n{\n\tthis.stopEditing(!this.graph.isInvokesStopCellEditing());\n};\n\n/**\n * Function: getBackgroundColor\n * \n * Returns the background color for the in-place editor. This implementation\n * always returns null.\n */\nmxCellEditor.prototype.getBackgroundColor = function(state)\n{\n\treturn null;\n};\n\n/**\n * Function: isLegacyEditor\n * \n * Returns true if max-width is not supported or if the SVG root element in\n * in the graph does not have CSS position absolute. In these cases the text\n * editor must use CSS position absolute to avoid an offset but it will have\n * a less accurate line wrapping width during the text editing preview. This\n * implementation returns true for IE8- and quirks mode or if the CSS position\n * of the SVG element is not absolute.\n */\nmxCellEditor.prototype.isLegacyEditor = function()\n{\n\tif (mxClient.IS_VML)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\tvar absoluteRoot = false;\n\t\t\n\t\tif (mxClient.IS_SVG)\n\t\t{\n\t\t\tvar root = this.graph.view.getDrawPane().ownerSVGElement;\n\t\t\t\n\t\t\tif (root != null)\n\t\t\t{\n\t\t\t\tvar css = mxUtils.getCurrentStyle(root);\n\t\t\t\t\n\t\t\t\tif (css != null)\n\t\t\t\t{\t\t\t\t\n\t\t\t\t\tabsoluteRoot = css.position == 'absolute';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn !absoluteRoot;\n\t}\n};\n\n/**\n * Function: startEditing\n *\n * Starts the editor for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> to start editing.\n * trigger - Optional mouse event that triggered the editor.\n */\nmxCellEditor.prototype.startEditing = function(cell, trigger)\n{\n\tthis.stopEditing(true);\n\tthis.align = null;\n\t\n\t// Creates new textarea instance\n\tif (this.textarea == null)\n\t{\n\t\tthis.init();\n\t}\n\t\n\tif (this.graph.tooltipHandler != null)\n\t{\n\t\tthis.graph.tooltipHandler.hideTooltip();\n\t}\n\t\n\tvar state = this.graph.getView().getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\t// Configures the style of the in-place editor\n\t\tvar scale = this.graph.getView().scale;\n\t\tvar size = mxUtils.getValue(state.style, mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE);\n\t\tvar family = mxUtils.getValue(state.style, mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY);\n\t\tvar color = mxUtils.getValue(state.style, mxConstants.STYLE_FONTCOLOR, 'black');\n\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_LEFT);\n\t\tvar bold = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_BOLD) == mxConstants.FONT_BOLD;\n\t\tvar italic = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC;\n\t\tvar txtDecor = [];\n\t\t\n\t\tif ((mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t{\n\t\t\ttxtDecor.push('underline');\n\t\t}\n\t\t\n\t\tif ((mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t\t{\n\t\t\ttxtDecor.push('line-through');\n\t\t}\n\t\t\n\t\tthis.textarea.style.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? Math.round(size * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\t\tthis.textarea.style.backgroundColor = this.getBackgroundColor(state);\n\t\tthis.textarea.style.textDecoration = txtDecor.join(' ');\n\t\tthis.textarea.style.fontWeight = (bold) ? 'bold' : 'normal';\n\t\tthis.textarea.style.fontStyle = (italic) ? 'italic' : '';\n\t\tthis.textarea.style.fontSize = Math.round(size) + 'px';\n\t\tthis.textarea.style.zIndex = this.zIndex;\n\t\tthis.textarea.style.fontFamily = family;\n\t\tthis.textarea.style.textAlign = align;\n\t\tthis.textarea.style.outline = 'none';\n\t\tthis.textarea.style.color = color;\n\t\t\n\t\tvar dir = this.textDirection = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n\t\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO)\n\t\t{\n\t\t\tif (state != null && state.text != null && state.text.dialect != mxConstants.DIALECT_STRICTHTML &&\n\t\t\t\t!mxUtils.isNode(state.text.value))\n\t\t\t{\n\t\t\t\tdir = state.text.getAutoDirection();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_LTR || dir == mxConstants.TEXT_DIRECTION_RTL)\n\t\t{\n\t\t\tthis.textarea.setAttribute('dir', dir);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.textarea.removeAttribute('dir');\n\t\t}\n\n\t\t// Sets the initial editing value\n\t\tthis.textarea.innerHTML = this.getInitialValue(state, trigger) || '';\n\t\tthis.initialValue = this.textarea.innerHTML;\n\n\t\t// Uses an optional text value for empty labels which is cleared\n\t\t// when the first keystroke appears. This makes it easier to see\n\t\t// that a label is being edited even if the label is empty.\n\t\tif (this.textarea.innerHTML.length == 0 || this.textarea.innerHTML == '<br>')\n\t\t{\n\t\t\tthis.textarea.innerHTML = this.getEmptyLabelText();\n\t\t\tthis.clearOnChange = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.clearOnChange = this.textarea.innerHTML == this.getEmptyLabelText();\n\t\t}\n\n\t\tthis.graph.container.appendChild(this.textarea);\n\t\t\n\t\t// Update this after firing all potential events that could update the cleanOnChange flag\n\t\tthis.editingCell = cell;\n\t\tthis.trigger = trigger;\n\t\tthis.textNode = null;\n\n\t\tif (state.text != null && this.isHideLabel(state))\n\t\t{\n\t\t\tthis.textNode = state.text.node;\n\t\t\tthis.textNode.style.visibility = 'hidden';\n\t\t}\n\n\t\t// Workaround for initial offsetHeight not ready for heading in markup\n\t\tif (this.autoSize && (this.graph.model.isEdge(state.cell) || state.style[mxConstants.STYLE_OVERFLOW] != 'fill'))\n\t\t{\n\t\t\twindow.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.resize();\n\t\t\t}), 0);\n\t\t}\n\t\t\n\t\tthis.resize();\n\t\t\n\t\t// Workaround for NS_ERROR_FAILURE in FF\n\t\ttry\n\t\t{\n\t\t\t// Prefers blinking cursor over no selected text if empty\n\t\t\tthis.textarea.focus();\n\t\t\t\n\t\t\tif (this.isSelectText() && this.textarea.innerHTML.length > 0 &&\n\t\t\t\t(this.textarea.innerHTML != this.getEmptyLabelText() || !this.clearOnChange))\n\t\t\t{\n\t\t\t\tdocument.execCommand('selectAll', false, null);\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\t// ignore\n\t\t}\n\t}\n};\n\n/**\n * Function: isSelectText\n * \n * Returns <selectText>.\n */\nmxCellEditor.prototype.isSelectText = function()\n{\n\treturn this.selectText;\n};\n\n/**\n * Function: clearSelection\n * \n * Clears the selection.\n */\nmxCellEditor.prototype.clearSelection = function()\n{\n\tvar selection = null;\n\t\n\tif (window.getSelection)\n\t{\n\t\tselection = window.getSelection();\n\t}\n\telse if (document.selection)\n\t{\n\t\tselection = document.selection;\n\t}\n\t\n\tif (selection != null)\n\t{\n\t\tif (selection.empty)\n\t\t{\n\t\t\tselection.empty();\n\t\t}\n\t\telse if (selection.removeAllRanges)\n\t\t{\n\t\t\tselection.removeAllRanges();\n\t\t}\n\t}\n};\n\n/**\n * Function: stopEditing\n *\n * Stops the editor and applies the value if cancel is false.\n */\nmxCellEditor.prototype.stopEditing = function(cancel)\n{\n\tcancel = cancel || false;\n\t\n\tif (this.editingCell != null)\n\t{\n\t\tif (this.textNode != null)\n\t\t{\n\t\t\tthis.textNode.style.visibility = 'visible';\n\t\t\tthis.textNode = null;\n\t\t}\n\n\t\tvar state = (!cancel) ? this.graph.view.getState(this.editingCell) : null;\n\n\t\tvar initial = this.initialValue;\n\t\tthis.initialValue = null;\n\t\tthis.editingCell = null;\n\t\tthis.trigger = null;\n\t\tthis.bounds = null;\n\t\tthis.textarea.blur();\n\t\tthis.clearSelection();\n\t\t\n\t\tif (this.textarea.parentNode != null)\n\t\t{\n\t\t\tthis.textarea.parentNode.removeChild(this.textarea);\n\t\t}\n\t\t\n\t\tif (this.clearOnChange && this.textarea.innerHTML == this.getEmptyLabelText())\n\t\t{\n\t\t\tthis.textarea.innerHTML = '';\n\t\t\tthis.clearOnChange = false;\n\t\t}\n\n\t\tif (state != null && (this.textarea.innerHTML != initial || this.align != null))\n\t\t{\n\t\t\tthis.prepareTextarea();\n\t\t\tvar value = this.getCurrentValue(state);\n\t\t\t\n\t\t\tthis.graph.getModel().beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (value != null)\n\t\t\t\t{\n\t\t\t\t\tthis.applyValue(state, value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.align != null)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.setCellStyles(mxConstants.STYLE_ALIGN, this.align, [state.cell]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.graph.getModel().endUpdate();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Forces new instance on next edit for undo history reset\n\t\tmxEvent.release(this.textarea);\n\t\tthis.textarea = null;\n\t\tthis.align = null;\n\t}\n};\n\n/**\n * Function: prepareTextarea\n * \n * Prepares the textarea for getting its value in <stopEditing>.\n * This implementation removes the extra trailing linefeed in Firefox.\n */\nmxCellEditor.prototype.prepareTextarea = function()\n{\n\tif (this.textarea.lastChild != null &&\n\t\tthis.textarea.lastChild.nodeName == 'BR')\n\t{\n\t\tthis.textarea.removeChild(this.textarea.lastChild);\n\t}\n};\n\n/**\n * Function: isHideLabel\n * \n * Returns true if the label should be hidden while the cell is being\n * edited.\n */\nmxCellEditor.prototype.isHideLabel = function(state)\n{\n\treturn true;\n};\n\n/**\n * Function: getMinimumSize\n * \n * Returns the minimum width and height for editing the given state.\n */\nmxCellEditor.prototype.getMinimumSize = function(state)\n{\n\tvar scale = this.graph.getView().scale;\n\t\n\treturn new mxRectangle(0, 0, (state.text == null) ? 30 : state.text.size * scale + 20,\n\t\t\t(this.textarea.style.textAlign == 'left') ? 120 : 40);\n};\n\n/**\n * Function: getEditorBounds\n * \n * Returns the <mxRectangle> that defines the bounds of the editor.\n */\nmxCellEditor.prototype.getEditorBounds = function(state)\n{\n\tvar isEdge = this.graph.getModel().isEdge(state.cell);\n\tvar scale = this.graph.getView().scale;\n\tvar minSize = this.getMinimumSize(state);\n\tvar minWidth = minSize.width;\n \tvar minHeight = minSize.height;\n \tvar result = null;\n \t\n \tif (!isEdge && state.view.graph.cellRenderer.legacySpacing && state.style[mxConstants.STYLE_OVERFLOW] == 'fill')\n \t{\n \t\tresult = state.shape.getLabelBounds(mxRectangle.fromRectangle(state));\n \t}\n \telse\n \t{\n\t\tvar spacing = parseInt(state.style[mxConstants.STYLE_SPACING] || 0) * scale;\n\t\tvar spacingTop = (parseInt(state.style[mxConstants.STYLE_SPACING_TOP] || 0) + mxText.prototype.baseSpacingTop) * scale + spacing;\n\t\tvar spacingRight = (parseInt(state.style[mxConstants.STYLE_SPACING_RIGHT] || 0) + mxText.prototype.baseSpacingRight) * scale + spacing;\n\t\tvar spacingBottom = (parseInt(state.style[mxConstants.STYLE_SPACING_BOTTOM] || 0) + mxText.prototype.baseSpacingBottom) * scale + spacing;\n\t\tvar spacingLeft = (parseInt(state.style[mxConstants.STYLE_SPACING_LEFT] || 0) + mxText.prototype.baseSpacingLeft) * scale + spacing;\n\t\n\t \tresult = new mxRectangle(state.x, state.y,\n\t \t\t Math.max(minWidth, state.width - spacingLeft - spacingRight),\n\t \t\t Math.max(minHeight, state.height - spacingTop - spacingBottom));\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\t\n\t\tresult = (state.shape != null && hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE) ? state.shape.getLabelBounds(result) : result;\n\t\n\t\tif (isEdge)\n\t\t{\n\t\t\tresult.x = state.absoluteOffset.x;\n\t\t\tresult.y = state.absoluteOffset.y;\n\t\n\t\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t\t{\n\t\t\t\t// Workaround for label containing just spaces in which case\n\t\t\t\t// the bounding box location contains negative numbers \n\t\t\t\tif (state.text.boundingBox.x > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.x = state.text.boundingBox.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.y > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.y = state.text.boundingBox.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tresult.x = Math.min(result.x, state.text.boundingBox.x);\n\t\t\tresult.y = Math.min(result.y, state.text.boundingBox.y);\n\t\t}\n\t\n\t\tresult.x += spacingLeft;\n\t\tresult.y += spacingTop;\n\t\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (!isEdge)\n\t\t\t{\n\t\t\t\tresult.width = Math.max(result.width, state.text.boundingBox.width);\n\t\t\t\tresult.height = Math.max(result.height, state.text.boundingBox.height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.width = Math.max(minWidth, state.text.boundingBox.width);\n\t\t\t\tresult.height = Math.max(minHeight, state.text.boundingBox.height);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Applies the horizontal and vertical label positions\n\t\tif (this.graph.getModel().isVertex(state.cell))\n\t\t{\n\t\t\tvar horizontal = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\n\t\t\tif (horizontal == mxConstants.ALIGN_LEFT)\n\t\t\t{\n\t\t\t\tresult.x -= state.width;\n\t\t\t}\n\t\t\telse if (horizontal == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tresult.x += state.width;\n\t\t\t}\n\t\n\t\t\tvar vertical = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\n\t\t\tif (vertical == mxConstants.ALIGN_TOP)\n\t\t\t{\n\t\t\t\tresult.y -= state.height;\n\t\t\t}\n\t\t\telse if (vertical == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tresult.y += state.height;\n\t\t\t}\n\t\t}\n \t}\n \t\n \treturn new mxRectangle(Math.round(result.x), Math.round(result.y), Math.round(result.width), Math.round(result.height));\n};\n\n/**\n * Function: getEmptyLabelText\n *\n * Returns the initial label value to be used of the label of the given\n * cell is empty. This label is displayed and cleared on the first keystroke.\n * This implementation returns <emptyLabelText>.\n * \n * Parameters:\n * \n * cell - <mxCell> for which a text for an empty editing box should be\n * returned.\n */\nmxCellEditor.prototype.getEmptyLabelText = function (cell)\n{\n\treturn this.emptyLabelText;\n};\n\n/**\n * Function: getEditingCell\n *\n * Returns the cell that is currently being edited or null if no cell is\n * being edited.\n */\nmxCellEditor.prototype.getEditingCell = function ()\n{\n\treturn this.editingCell;\n};\n\n/**\n * Function: destroy\n *\n * Destroys the editor and removes all associated resources.\n */\nmxCellEditor.prototype.destroy = function ()\n{\n\tif (this.textarea != null)\n\t{\n\t\tmxEvent.release(this.textarea);\n\t\t\n\t\tif (this.textarea.parentNode != null)\n\t\t{\n\t\t\tthis.textarea.parentNode.removeChild(this.textarea);\n\t\t}\n\t\t\n\t\tthis.textarea = null;\n\n\t}\n\t\t\t\n\tif (this.changeHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t\tthis.changeHandler = null;\n\t}\n\n\tif (this.zoomHandler)\n\t{\n\t\tthis.graph.view.removeListener(this.zoomHandler);\n\t\tthis.zoomHandler = null;\n\t}\n};\n\n__mxOutput.mxCellEditor = typeof mxCellEditor !== 'undefined' ? mxCellEditor : undefined;\n\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxCellRenderer\n * \n * Renders cells into a document object model. The <defaultShapes> is a global\n * map of shapename, constructor pairs that is used in all instances. You can\n * get a list of all available shape names using the following code.\n * \n * In general the cell renderer is in charge of creating, redrawing and\n * destroying the shape and label associated with a cell state, as well as\n * some other graphical objects, namely controls and overlays. The shape\n * hieararchy in the display (ie. the hierarchy in which the DOM nodes\n * appear in the document) does not reflect the cell hierarchy. The shapes\n * are a (flat) sequence of shapes and labels inside the draw pane of the\n * graph view, with some exceptions, namely the HTML labels being placed\n * directly inside the graph container for certain browsers.\n * \n * (code)\n * mxLog.show();\n * for (var i in mxCellRenderer.defaultShapes)\n * {\n *   mxLog.debug(i);\n * }\n * (end)\n *\n * Constructor: mxCellRenderer\n * \n * Constructs a new cell renderer with the following built-in shapes:\n * arrow, rectangle, ellipse, rhombus, image, line, label, cylinder,\n * swimlane, connector, actor and cloud.\n */\nfunction mxCellRenderer() { };\n\n/**\n * Variable: defaultShapes\n * \n * Static array that contains the globally registered shapes which are\n * known to all instances of this class. For adding new shapes you should\n * use the static <mxCellRenderer.registerShape> function.\n */\nmxCellRenderer.defaultShapes = new Object();\n\n/**\n * Variable: defaultEdgeShape\n * \n * Defines the default shape for edges. Default is <mxConnector>.\n */\nmxCellRenderer.prototype.defaultEdgeShape = mxConnector;\n\n/**\n * Variable: defaultVertexShape\n * \n * Defines the default shape for vertices. Default is <mxRectangleShape>.\n */\nmxCellRenderer.prototype.defaultVertexShape = mxRectangleShape;\n\n/**\n * Variable: defaultTextShape\n * \n * Defines the default shape for labels. Default is <mxText>.\n */\nmxCellRenderer.prototype.defaultTextShape = mxText;\n\n/**\n * Variable: legacyControlPosition\n * \n * Specifies if the folding icon should ignore the horizontal\n * orientation of a swimlane. Default is true.\n */\nmxCellRenderer.prototype.legacyControlPosition = true;\n\n/**\n * Variable: legacySpacing\n * \n * Specifies if spacing and label position should be ignored if overflow is\n * fill or width. Default is true for backwards compatiblity.\n */\nmxCellRenderer.prototype.legacySpacing = true;\n\n/**\n * Variable: antiAlias\n * \n * Anti-aliasing option for new shapes. Default is true.\n */\nmxCellRenderer.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n * \n * Minimum stroke width for SVG output.\n */\nmxCellRenderer.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: forceControlClickHandler\n * \n * Specifies if the enabled state of the graph should be ignored in the control\n * click handler (to allow folding in disabled graphs). Default is false.\n */\nmxCellRenderer.prototype.forceControlClickHandler = false;\n\n/**\n * Function: registerShape\n * \n * Registers the given constructor under the specified key in this instance\n * of the renderer.\n * \n * Example:\n * \n * (code)\n * mxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\n * (end)\n * \n * Parameters:\n * \n * key - String representing the shape name.\n * shape - Constructor of the <mxShape> subclass.\n */\nmxCellRenderer.registerShape = function(key, shape)\n{\n\tmxCellRenderer.defaultShapes[key] = shape;\n};\n\n// Adds default shapes into the default shapes array\nmxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ELLIPSE, mxEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_RHOMBUS, mxRhombus);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CYLINDER, mxCylinder);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CONNECTOR, mxConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ACTOR, mxActor);\nmxCellRenderer.registerShape(mxConstants.SHAPE_TRIANGLE, mxTriangle);\nmxCellRenderer.registerShape(mxConstants.SHAPE_HEXAGON, mxHexagon);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CLOUD, mxCloud);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LINE, mxLine);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW, mxArrow);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW_CONNECTOR, mxArrowConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_DOUBLE_ELLIPSE, mxDoubleEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_SWIMLANE, mxSwimlane);\nmxCellRenderer.registerShape(mxConstants.SHAPE_IMAGE, mxImageShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LABEL, mxLabel);\n\n/**\n * Function: initializeShape\n * \n * Initializes the shape in the given state by calling its init method with\n * the correct container after configuring it using <configureShape>.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be initialized.\n */\nmxCellRenderer.prototype.initializeShape = function(state)\n{\n\tstate.shape.dialect = state.view.graph.dialect;\n\tthis.configureShape(state);\n\tstate.shape.init(state.view.getDrawPane());\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be created.\n */\nmxCellRenderer.prototype.createShape = function(state)\n{\n\tvar shape = null;\n\t\n\tif (state.style != null)\n\t{\n\t\t// Checks if there is a stencil for the name and creates\n\t\t// a shape instance for the stencil if one exists\n\t\tvar stencil = mxStencilRegistry.getStencil(state.style[mxConstants.STYLE_SHAPE]);\n\t\t\n\t\tif (stencil != null)\n\t\t{\n\t\t\tshape = new mxShape(stencil);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar ctor = this.getShapeConstructor(state);\n\t\t\tshape = new ctor();\n\t\t}\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: createIndicatorShape\n * \n * Creates the indicator shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the indicator shape should be created.\n */\nmxCellRenderer.prototype.createIndicatorShape = function(state)\n{\n\tstate.shape.indicatorShape = this.getShape(state.view.graph.getIndicatorShape(state));\n};\n\n/**\n * Function: getShape\n * \n * Returns the shape for the given name from <defaultShapes>.\n */\nmxCellRenderer.prototype.getShape = function(name)\n{\n\treturn (name != null) ? mxCellRenderer.defaultShapes[name] : null;\n};\n\n/**\n * Function: getShapeConstructor\n * \n * Returns the constructor to be used for creating the shape.\n */\nmxCellRenderer.prototype.getShapeConstructor = function(state)\n{\n\tvar ctor = this.getShape(state.style[mxConstants.STYLE_SHAPE]);\n\t\n\tif (ctor == null)\n\t{\n\t\tctor = (state.view.graph.getModel().isEdge(state.cell)) ?\n\t\t\tthis.defaultEdgeShape : this.defaultVertexShape;\n\t}\n\t\n\treturn ctor;\n};\n\n/**\n * Function: configureShape\n * \n * Configures the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be configured.\n */\nmxCellRenderer.prototype.configureShape = function(state)\n{\n\tstate.shape.apply(state);\n\tstate.shape.image = state.view.graph.getImage(state);\n\tstate.shape.indicatorColor = state.view.graph.getIndicatorColor(state);\n\tstate.shape.indicatorStrokeColor = state.style[mxConstants.STYLE_INDICATOR_STROKECOLOR];\n\tstate.shape.indicatorGradientColor = state.view.graph.getIndicatorGradientColor(state);\n\tstate.shape.indicatorDirection = state.style[mxConstants.STYLE_INDICATOR_DIRECTION];\n\tstate.shape.indicatorImage = state.view.graph.getIndicatorImage(state);\n\n\tthis.postConfigureShape(state);\n};\n\n/**\n * Function: postConfigureShape\n * \n * Replaces any reserved words used for attributes, eg. inherit,\n * indicated or swimlane for colors in the shape for the given state.\n * This implementation resolves these keywords on the fill, stroke\n * and gradient color keys.\n */\nmxCellRenderer.prototype.postConfigureShape = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tthis.resolveColor(state, 'indicatorGradientColor', mxConstants.STYLE_GRADIENTCOLOR);\n\t\tthis.resolveColor(state, 'indicatorColor', mxConstants.STYLE_FILLCOLOR);\n\t\tthis.resolveColor(state, 'gradient', mxConstants.STYLE_GRADIENTCOLOR);\n\t\tthis.resolveColor(state, 'stroke', mxConstants.STYLE_STROKECOLOR);\n\t\tthis.resolveColor(state, 'fill', mxConstants.STYLE_FILLCOLOR);\n\t}\n};\n\n/**\n * Function: checkPlaceholderStyles\n * \n * Checks if the style of the given <mxCellState> contains 'inherit',\n * 'indicated' or 'swimlane' for colors that support those keywords.\n */\nmxCellRenderer.prototype.checkPlaceholderStyles = function(state)\n{\n\t// LATER: Check if the color has actually changed\n\tif (state.style != null)\n\t{\n\t\tvar values = ['inherit', 'swimlane', 'indicated'];\n\t\tvar styles = [mxConstants.STYLE_FILLCOLOR, mxConstants.STYLE_STROKECOLOR,\n\t\t\tmxConstants.STYLE_GRADIENTCOLOR, mxConstants.STYLE_FONTCOLOR];\n\t\t\n\t\tfor (var i = 0; i < styles.length; i++)\n\t\t{\n\t\t\tif (mxUtils.indexOf(values, state.style[styles[i]]) >= 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: resolveColor\n * \n * Resolves special keywords 'inherit', 'indicated' and 'swimlane' and sets\n * the respective color on the shape.\n */\nmxCellRenderer.prototype.resolveColor = function(state, field, key)\n{\n\tvar shape = (key == mxConstants.STYLE_FONTCOLOR) ?\n\t\tstate.text : state.shape;\n\t\n\tif (shape != null)\n\t{\n\t\tvar graph = state.view.graph;\n\t\tvar value = shape[field];\n\t\tvar referenced = null;\n\t\t\n\t\tif (value == 'inherit')\n\t\t{\n\t\t\treferenced = graph.model.getParent(state.cell);\n\t\t}\n\t\telse if (value == 'swimlane')\n\t\t{\n\t\t\tshape[field] = (key == mxConstants.STYLE_STROKECOLOR ||\n\t\t\t\tkey == mxConstants.STYLE_FONTCOLOR) ?\n\t\t\t\t'#000000' : '#ffffff';\n\t\t\t\n\t\t\tif (graph.model.getTerminal(state.cell, false) != null)\n\t\t\t{\n\t\t\t\treferenced = graph.model.getTerminal(state.cell, false);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treferenced = state.cell;\n\t\t\t}\n\t\t\t\n\t\t\treferenced = graph.getSwimlane(referenced);\n\t\t\tkey = graph.swimlaneIndicatorColorAttribute;\n\t\t}\n\t\telse if (value == 'indicated' && state.shape != null)\n\t\t{\n\t\t\tshape[field] = state.shape.indicatorColor;\n\t\t}\n\t\telse if (key != mxConstants.STYLE_FILLCOLOR &&\n\t\t\tvalue == mxConstants.STYLE_FILLCOLOR &&\n\t\t\tstate.shape != null)\n\t\t{\n\t\t\tshape[field] = state.style[mxConstants.STYLE_FILLCOLOR];\n\t\t}\n\t\telse if (key != mxConstants.STYLE_STROKECOLOR &&\n\t\t\tvalue == mxConstants.STYLE_STROKECOLOR &&\n\t\t\tstate.shape != null)\n\t\t{\n\t\t\tshape[field] = state.style[mxConstants.STYLE_STROKECOLOR];\n\t\t}\n\t\n\t\tif (referenced != null)\n\t\t{\n\t\t\tvar rstate = graph.getView().getState(referenced);\n\t\t\tshape[field] = null;\n\t\t\t\n\t\t\tif (rstate != null)\n\t\t\t{\n\t\t\t\tvar rshape = (key == mxConstants.STYLE_FONTCOLOR) ? rstate.text : rstate.shape;\n\t\t\t\t\n\t\t\t\tif (rshape != null && field != 'indicatorColor')\n\t\t\t\t{\n\t\t\t\t\tshape[field] = rshape[field];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tshape[field] = rstate.style[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelValue\n * \n * Returns the value to be used for the label.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.getLabelValue = function(state)\n{\n\treturn state.view.graph.getLabel(state.cell);\n};\n\n/**\n * Function: createLabel\n * \n * Creates the label for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.createLabel = function(state, value)\n{\n\tvar graph = state.view.graph;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\t\n\tif (state.style[mxConstants.STYLE_FONTSIZE] > 0 || state.style[mxConstants.STYLE_FONTSIZE] == null)\n\t{\n\t\t// Avoids using DOM node for empty labels\n\t\tvar isForceHtml = (graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\n\t\tstate.text = new this.defaultTextShape(value, new mxRectangle(),\n\t\t\t\t(state.style[mxConstants.STYLE_ALIGN] || mxConstants.ALIGN_CENTER),\n\t\t\t\tgraph.getVerticalAlign(state),\n\t\t\t\tstate.style[mxConstants.STYLE_FONTCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTFAMILY],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSIZE],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSTYLE],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_TOP],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_RIGHT],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_BOTTOM],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_LEFT],\n\t\t\t\tstate.style[mxConstants.STYLE_HORIZONTAL],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BORDERCOLOR],\n\t\t\t\tgraph.isWrapping(state.cell) && graph.isHtmlLabel(state.cell),\n\t\t\t\tgraph.isLabelClipped(state.cell),\n\t\t\t\tstate.style[mxConstants.STYLE_OVERFLOW],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_PADDING],\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION));\n\t\tstate.text.opacity = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tstate.text.dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\t\tstate.text.style = state.style;\n\t\tstate.text.state = state;\n\t\tthis.initializeLabel(state, state.text);\n\t\t\n\t\t// Workaround for touch devices routing all events for a mouse gesture\n\t\t// (down, move, up) via the initial DOM node. IE additionally redirects\n\t\t// the event via the initial DOM node but the event source is the node\n\t\t// under the mouse, so we need to check if this is the case and force\n\t\t// getCellAt for the subsequent mouseMoves and the final mouseUp.\n\t\tvar forceGetCell = false;\n\t\t\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar result = state;\n\n\t\t\tif (mxClient.IS_TOUCH || forceGetCell)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\t\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t};\n\t\t\n\t\t// TODO: Add handling for special touch device gestures\n\t\tmxEvent.addGestureListeners(state.text.node,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\t\tforceGetCell = graph.dialect != mxConstants.DIALECT_SVG &&\n\t\t\t\t\t\tmxEvent.getSource(evt).nodeName == 'IMG';\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t\tforceGetCell = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\t// Uses double click timeout in mxGraph for quirks mode\n\t\tif (graph.nativeDblClickEnabled)\n\t\t{\n\t\t\tmxEvent.addListener(state.text.node, 'dblclick',\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Function: initializeLabel\n * \n * Initiailzes the label with a suitable container.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be initialized.\n */\nmxCellRenderer.prototype.initializeLabel = function(state, shape)\n{\n\tif (mxClient.IS_SVG && mxClient.NO_FO && shape.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.init(state.view.graph.container);\n\t}\n\telse\n\t{\n\t\tshape.init(state.view.getDrawPane());\n\t}\n};\n\n/**\n * Function: createCellOverlays\n * \n * Creates the actual shape for showing the overlay for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the overlay should be created.\n */\nmxCellRenderer.prototype.createCellOverlays = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar overlays = graph.getCellOverlays(state.cell);\n\tvar dict = null;\n\t\n\tif (overlays != null)\n\t{\n\t\tdict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tvar shape = (state.overlays != null) ? state.overlays.remove(overlays[i]) : null;\n\t\t\t\n\t\t\tif (shape == null)\n\t\t\t{\n\t\t\t\tvar tmp = new mxImageShape(new mxRectangle(), overlays[i].image.src);\n\t\t\t\ttmp.dialect = state.view.graph.dialect;\n\t\t\t\ttmp.preserveImageAspect = false;\n\t\t\t\ttmp.overlay = overlays[i];\n\t\t\t\tthis.initializeOverlay(state, tmp);\n\t\t\t\tthis.installCellOverlayListeners(state, overlays[i], tmp);\n\t\n\t\t\t\tif (overlays[i].cursor != null)\n\t\t\t\t{\n\t\t\t\t\ttmp.node.style.cursor = overlays[i].cursor;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdict.put(overlays[i], tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdict.put(overlays[i], shape);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Removes unused\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tshape.destroy();\n\t\t});\n\t}\n\t\n\tstate.overlays = dict;\n};\n\n/**\n * Function: initializeOverlay\n * \n * Initializes the given overlay.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the overlay should be created.\n * overlay - <mxImageShape> that represents the overlay.\n */\nmxCellRenderer.prototype.initializeOverlay = function(state, overlay)\n{\n\toverlay.init(state.view.getOverlayPane());\n};\n\n/**\n * Function: installOverlayListeners\n * \n * Installs the listeners for the given <mxCellState>, <mxCellOverlay> and\n * <mxShape> that represents the overlay.\n */\nmxCellRenderer.prototype.installCellOverlayListeners = function(state, overlay, shape)\n{\n\tvar graph  = state.view.graph;\n\t\n\tmxEvent.addListener(shape.node, 'click', function (evt)\n\t{\n\t\tif (graph.isEditing())\n\t\t{\n\t\t\tgraph.stopEditing(!graph.isInvokesStopCellEditing());\n\t\t}\n\t\t\n\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t'event', evt, 'cell', state.cell));\n\t});\n\t\n\tmxEvent.addGestureListeners(shape.node,\n\t\tfunction (evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE,\n\t\t\t\tnew mxMouseEvent(evt, state));\n\t\t});\n\t\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tmxEvent.addListener(shape.node, 'touchend', function (evt)\n\t\t{\n\t\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t\t'event', evt, 'cell', state.cell));\n\t\t});\n\t}\n};\n\n/**\n * Function: createControl\n * \n * Creates the control for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the control should be created.\n */\nmxCellRenderer.prototype.createControl = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar image = graph.getFoldingImage(state);\n\t\n\tif (graph.foldingEnabled && image != null)\n\t{\n\t\tif (state.control == null)\n\t\t{\n\t\t\tvar b = new mxRectangle(0, 0, image.width, image.height);\n\t\t\tstate.control = new mxImageShape(b, image.src);\n\t\t\tstate.control.preserveImageAspect = false;\n\t\t\tstate.control.dialect = graph.dialect;\n\n\t\t\tthis.initControl(state, state.control, true, this.createControlClickHandler(state));\n\t\t}\n\t}\n\telse if (state.control != null)\n\t{\n\t\tstate.control.destroy();\n\t\tstate.control = null;\n\t}\n};\n\n/**\n * Function: createControlClickHandler\n * \n * Hook for creating the click handler for the folding icon.\n * \n * Parameters:\n * \n * state - <mxCellState> whose control click handler should be returned.\n */\nmxCellRenderer.prototype.createControlClickHandler = function(state)\n{\n\tvar graph = state.view.graph;\n\t\n\treturn mxUtils.bind(this, function (evt)\n\t{\n\t\tif (this.forceControlClickHandler || graph.isEnabled())\n\t\t{\n\t\t\tvar collapse = !graph.isCellCollapsed(state.cell);\n\t\t\tgraph.foldCells(collapse, false, [state.cell], null, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n};\n\n/**\n * Function: initControl\n * \n * Initializes the given control and returns the corresponding DOM node.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the control should be initialized.\n * control - <mxShape> to be initialized.\n * handleEvents - Boolean indicating if mousedown and mousemove should fire events via the graph.\n * clickHandler - Optional function to implement clicks on the control.\n */\nmxCellRenderer.prototype.initControl = function(state, control, handleEvents, clickHandler)\n{\n\tvar graph = state.view.graph;\n\t\n\t// In the special case where the label is in HTML and the display is SVG the image\n\t// should go into the graph container directly in order to be clickable. Otherwise\n\t// it is obscured by the HTML label that overlaps the cell.\n\tvar isForceHtml = graph.isHtmlLabel(state.cell) && mxClient.NO_FO &&\n\t\tgraph.dialect == mxConstants.DIALECT_SVG;\n\n\tif (isForceHtml)\n\t{\n\t\tcontrol.dialect = mxConstants.DIALECT_PREFERHTML;\n\t\tcontrol.init(graph.container);\n\t\tcontrol.node.style.zIndex = 1;\n\t}\n\telse\n\t{\n\t\tcontrol.init(state.view.getOverlayPane());\n\t}\n\n\tvar node = control.innerNode || control.node;\n\t\n\t// Workaround for missing click event on iOS is to check tolerance below\n\tif (clickHandler != null && !mxClient.IS_IOS)\n\t{\n\t\tif (graph.isEnabled())\n\t\t{\n\t\t\tnode.style.cursor = 'pointer';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(node, 'click', clickHandler);\n\t}\n\t\n\tif (handleEvents)\n\t{\n\t\tvar first = null;\n\n\t\tmxEvent.addGestureListeners(node,\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tfirst = new mxPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, state));\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\n\t\t// Uses capture phase for event interception to stop bubble phase\n\t\tif (clickHandler != null && mxClient.IS_IOS)\n\t\t{\n\t\t\tnode.addEventListener('touchend', function(evt)\n\t\t\t{\n\t\t\t\tif (first != null)\n\t\t\t\t{\n\t\t\t\t\tvar tol = graph.tolerance;\n\t\t\t\t\t\n\t\t\t\t\tif (Math.abs(first.x - mxEvent.getClientX(evt)) < tol &&\n\t\t\t\t\t\tMath.abs(first.y - mxEvent.getClientY(evt)) < tol)\n\t\t\t\t\t{\n\t\t\t\t\t\tclickHandler.call(clickHandler, evt);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, true);\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: isShapeEvent\n * \n * Returns true if the event is for the shape of the given state. This\n * implementation always returns true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose shape fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isShapeEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: isLabelEvent\n * \n * Returns true if the event is for the label of the given state. This\n * implementation always returns true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isLabelEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: installListeners\n * \n * Installs the event listeners for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the event listeners should be isntalled.\n */\nmxCellRenderer.prototype.installListeners = function(state)\n{\n\tvar graph = state.view.graph;\n\n\t// Workaround for touch devices routing all events for a mouse\n\t// gesture (down, move, up) via the initial DOM node. Same for\n\t// HTML images in all IE versions (VML images are working).\n\tvar getState = function(evt)\n\t{\n\t\tvar result = state;\n\t\t\n\t\tif ((graph.dialect != mxConstants.DIALECT_SVG && mxEvent.getSource(evt).nodeName == 'IMG') || mxClient.IS_TOUCH)\n\t\t{\n\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\n\t\t\t// Dispatches the drop event to the graph which\n\t\t\t// consumes and executes the source function\n\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\tmxEvent.addGestureListeners(state.shape.node,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t})\n\t);\n\t\n\t// Uses double click timeout in mxGraph for quirks mode\n\tif (graph.nativeDblClickEnabled)\n\t{\n\t\tmxEvent.addListener(state.shape.node, 'dblclick',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n};\n\n/**\n * Function: redrawLabel\n * \n * Redraws the label for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawLabel = function(state, forced)\n{\n\tvar graph = state.view.graph;\n\tvar value = this.getLabelValue(state);\n\tvar wrapping = graph.isWrapping(state.cell);\n\tvar clipping = graph.isLabelClipped(state.cell);\n\tvar isForceHtml = (state.view.graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\tvar dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\tvar overflow = state.style[mxConstants.STYLE_OVERFLOW] || 'visible';\n\n\tif (state.text != null && (state.text.wrap != wrapping || state.text.clipped != clipping ||\n\t\tstate.text.overflow != overflow || state.text.dialect != dialect))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\t\n\tif (state.text == null && value != null && (mxUtils.isNode(value) || value.length > 0))\n\t{\n\t\tthis.createLabel(state, value);\n\t}\n\telse if (state.text != null && (value == null || value.length == 0))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\n\tif (state.text != null)\n\t{\n\t\t// Forced is true if the style has changed, so to get the updated\n\t\t// result in getLabelBounds we apply the new style to the shape\n\t\tif (forced)\n\t\t{\n\t\t\t// Checks if a full repaint is needed\n\t\t\tif (state.text.lastValue != null && this.isTextShapeInvalid(state, state.text))\n\t\t\t{\n\t\t\t\t// Forces a full repaint\n\t\t\t\tstate.text.lastValue = null;\n\t\t\t}\n\t\t\t\n\t\t\tstate.text.resetStyles();\n\t\t\tstate.text.apply(state);\n\t\t\t\n\t\t\t// Special case where value is obtained via hook in graph\n\t\t\tstate.text.valign = graph.getVerticalAlign(state);\n\t\t}\n\t\t\n\t\tvar bounds = this.getLabelBounds(state);\n\t\tvar nextScale = this.getTextScale(state);\n\t\tthis.resolveColor(state, 'color', mxConstants.STYLE_FONTCOLOR);\n\t\t\n\t\tif (forced || state.text.value != value || state.text.isWrapping != wrapping ||\n\t\t\tstate.text.overflow != overflow || state.text.isClipping != clipping ||\n\t\t\tstate.text.scale != nextScale || state.text.dialect != dialect ||\n\t\t\tstate.text.bounds == null || !state.text.bounds.equals(bounds))\n\t\t{\n\t\t\tstate.text.dialect = dialect;\n\t\t\tstate.text.value = value;\n\t\t\tstate.text.bounds = bounds;\n\t\t\tstate.text.scale = nextScale;\n\t\t\tstate.text.wrap = wrapping;\n\t\t\tstate.text.clipped = clipping;\n\t\t\tstate.text.overflow = overflow;\n\t\t\t\n\t\t\t// Preserves visible state\n\t\t\tvar vis = state.text.node.style.visibility;\n\t\t\tthis.redrawLabelShape(state.text);\n\t\t\tstate.text.node.style.visibility = vis;\n\t\t}\n\t}\n};\n\n/**\n * Function: isTextShapeInvalid\n * \n * Returns true if the style for the text shape has changed.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be checked.\n * shape - <mxText> shape to be checked.\n */\nmxCellRenderer.prototype.isTextShapeInvalid = function(state, shape)\n{\n\tfunction check(property, stylename, defaultValue)\n\t{\n\t\tvar result = false;\n\t\t\n\t\t// Workaround for spacing added to directional spacing\n\t\tif (stylename == 'spacingTop' || stylename == 'spacingRight' ||\n\t\t\tstylename == 'spacingBottom' || stylename == 'spacingLeft')\n\t\t{\n\t\t\tresult = parseFloat(shape[property]) - parseFloat(shape.spacing) !=\n\t\t\t\t(state.style[stylename] || defaultValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = shape[property] != (state.style[stylename] || defaultValue);\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\treturn check('fontStyle', mxConstants.STYLE_FONTSTYLE, mxConstants.DEFAULT_FONTSTYLE) ||\n\t\tcheck('family', mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY) ||\n\t\tcheck('size', mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE) ||\n\t\tcheck('color', mxConstants.STYLE_FONTCOLOR, 'black') ||\n\t\tcheck('align', mxConstants.STYLE_ALIGN, '') ||\n\t\tcheck('valign', mxConstants.STYLE_VERTICAL_ALIGN, '') ||\n\t\tcheck('spacing', mxConstants.STYLE_SPACING, 2) ||\n\t\tcheck('spacingTop', mxConstants.STYLE_SPACING_TOP, 0) ||\n\t\tcheck('spacingRight', mxConstants.STYLE_SPACING_RIGHT, 0) ||\n\t\tcheck('spacingBottom', mxConstants.STYLE_SPACING_BOTTOM, 0) ||\n\t\tcheck('spacingLeft', mxConstants.STYLE_SPACING_LEFT, 0) ||\n\t\tcheck('horizontal', mxConstants.STYLE_HORIZONTAL, true) ||\n\t\tcheck('background', mxConstants.STYLE_LABEL_BACKGROUNDCOLOR) ||\n\t\tcheck('border', mxConstants.STYLE_LABEL_BORDERCOLOR) ||\n\t\tcheck('opacity', mxConstants.STYLE_TEXT_OPACITY, 100) ||\n\t\tcheck('textDirection', mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n};\n\n/**\n * Function: redrawLabelShape\n * \n * Called to invoked redraw on the given text shape.\n * \n * Parameters:\n * \n * shape - <mxText> shape to be redrawn.\n */\nmxCellRenderer.prototype.redrawLabelShape = function(shape)\n{\n\tshape.redraw();\n};\n\n/**\n * Function: getTextScale\n * \n * Returns the scaling used for the label of the given state\n * \n * Parameters:\n * \n * state - <mxCellState> whose label scale should be returned.\n */\nmxCellRenderer.prototype.getTextScale = function(state)\n{\n\treturn state.view.scale;\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounds to be used to draw the label of the given state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label bounds should be returned.\n */\nmxCellRenderer.prototype.getLabelBounds = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar scale = state.view.scale;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\tvar bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y);\n\n\tif (isEdge)\n\t{\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * scale;\n\t\tbounds.y += spacing.y * scale;\n\t\t\n\t\tvar geo = graph.getCellGeometry(state.cell);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tbounds.width = Math.max(0, geo.width * scale);\n\t\t\tbounds.height = Math.max(0, geo.height * scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Inverts label position\n\t\tif (state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = bounds.x;\n\t\t\tbounds.x = bounds.y;\n\t\t\tbounds.y = tmp;\n\t\t}\n\t\t\n\t\tbounds.x += state.x;\n\t\tbounds.y += state.y;\n\t\t\n\t\t// Minimum of 1 fixes alignment bug in HTML labels\n\t\tbounds.width = Math.max(1, state.width);\n\t\tbounds.height = Math.max(1, state.height);\n\t}\n\n\tif (state.text.isPaintBoundsInverted())\n\t{\n\t\t// Rotates around center of state\n\t\tvar t = (state.width - state.height) / 2;\n\t\tbounds.x += t;\n\t\tbounds.y -= t;\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\t\n\t// Shape can modify its label bounds\n\tif (state.shape != null)\n\t{\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\t\n\t\tif (hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tbounds = state.shape.getLabelBounds(bounds);\n\t\t}\n\t}\n\t\n\t// Label width style overrides actual label width\n\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\n\tif (lw != null)\n\t{\n\t\tbounds.width = parseFloat(lw) * scale;\n\t}\n\t\n\tif (!isEdge)\n\t{\n\t\tthis.rotateLabelBounds(state, bounds);\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: rotateLabelBounds\n * \n * Adds the shape rotation to the given label bounds and\n * applies the alignment and offsets.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label bounds should be rotated.\n * bounds - <mxRectangle> the rectangle to be rotated.\n */\nmxCellRenderer.prototype.rotateLabelBounds = function(state, bounds)\n{\n\tbounds.y -= state.text.margin.y * bounds.height;\n\tbounds.x -= state.text.margin.x * bounds.width;\n\t\n\tif (!this.legacySpacing || (state.style[mxConstants.STYLE_OVERFLOW] != 'fill' && state.style[mxConstants.STYLE_OVERFLOW] != 'width'))\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * s;\n\t\tbounds.y += spacing.y * s;\n\t\t\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tbounds.width = Math.max(0, bounds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (state.text.spacingLeft * s + state.text.spacingRight * s) : 0));\n\t\tbounds.height = Math.max(0, bounds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (state.text.spacingTop * s + state.text.spacingBottom * s) : 0));\n\t}\n\n\tvar theta = state.text.getTextRotation();\n\n\t// Only needed if rotated around another center\n\tif (theta != 0 && state != null && state.view.graph.model.isVertex(state.cell))\n\t{\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\t\t\n\t\tif (bounds.x != cx || bounds.y != cy)\n\t\t{\n\t\t\tvar rad = theta * (Math.PI / 180);\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(bounds.x, bounds.y),\n\t\t\t\t\tMath.cos(rad), Math.sin(rad), new mxPoint(cx, cy));\n\t\t\t\n\t\t\tbounds.x = pt.x;\n\t\t\tbounds.y = pt.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawCellOverlays\n * \n * Redraws the overlays for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose overlays should be redrawn.\n */\nmxCellRenderer.prototype.redrawCellOverlays = function(state, forced)\n{\n\tthis.createCellOverlays(state);\n\n\tif (state.overlays != null)\n\t{\n\t\tvar rot = mxUtils.mod(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0), 90);\n        var rad = mxUtils.toRadians(rot);\n        var cos = Math.cos(rad);\n        var sin = Math.sin(rad);\n\t\t\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tvar bounds = shape.overlay.getBounds(state);\n\t\t\n\t\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t\t{\n\t\t\t\tif (state.shape != null && rot != 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = bounds.getCenterX();\n\t\t\t\t\tvar cy = bounds.getCenterY();\n\n\t\t\t\t\tvar point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t        bounds.x = Math.round(cx - bounds.width / 2);\n\t\t\t        bounds.y = Math.round(cy - bounds.height / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (forced || shape.bounds == null || shape.scale != state.view.scale ||\n\t\t\t\t!shape.bounds.equals(bounds))\n\t\t\t{\n\t\t\t\tshape.bounds = bounds;\n\t\t\t\tshape.scale = state.view.scale;\n\t\t\t\tshape.redraw();\n\t\t\t}\n\t\t});\n\t}\n};\n\n/**\n * Function: redrawControl\n * \n * Redraws the control for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose control should be redrawn.\n */\nmxCellRenderer.prototype.redrawControl = function(state, forced)\n{\n\tvar image = state.view.graph.getFoldingImage(state);\n\t\n\tif (state.control != null && image != null)\n\t{\n\t\tvar bounds = this.getControlBounds(state, image.width, image.height);\n\t\tvar r = (this.legacyControlPosition) ?\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0) :\n\t\t\t\tstate.shape.getTextRotation();\n\t\tvar s = state.view.scale;\n\t\t\n\t\tif (forced || state.control.scale != s || !state.control.bounds.equals(bounds) ||\n\t\t\tstate.control.rotation != r)\n\t\t{\n\t\t\tstate.control.rotation = r;\n\t\t\tstate.control.bounds = bounds;\n\t\t\tstate.control.scale = s;\n\t\t\t\n\t\t\tstate.control.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getControlBounds\n * \n * Returns the bounds to be used to draw the control (folding icon) of the\n * given state.\n */\nmxCellRenderer.prototype.getControlBounds = function(state, w, h)\n{\n\tif (state.control != null)\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\t\n\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t{\n\t\t\tcx = state.x + w * s;\n\t\t\tcy = state.y + h * s;\n\t\t\t\n\t\t\tif (state.shape != null)\n\t\t\t{\n\t\t\t\t// TODO: Factor out common code\n\t\t\t\tvar rot = state.shape.getShapeRotation();\n\t\t\t\t\n\t\t\t\tif (this.legacyControlPosition)\n\t\t\t\t{\n\t\t\t\t\trot = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (state.shape.isPaintBoundsInverted())\n\t\t\t\t\t{\n\t\t\t\t\t\tvar t = (state.width - state.height) / 2;\n\t\t\t\t\t\tcx += t;\n\t\t\t\t\t\tcy -= t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (rot != 0)\n\t\t\t\t{\n\t\t\t        var rad = mxUtils.toRadians(rot);\n\t\t\t        var cos = Math.cos(rad);\n\t\t\t        var sin = Math.sin(rad);\n\t\t\t        \n\t\t\t        var point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (state.view.graph.getModel().isEdge(state.cell)) ? \n\t\t\tnew mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s))\n\t\t\t: new mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s));\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: insertStateAfter\n * \n * Inserts the given array of <mxShapes> after the given nodes in the DOM.\n * \n * Parameters:\n * \n * shapes - Array of <mxShapes> to be inserted.\n * node - Node in <drawPane> after which the shapes should be inserted.\n * htmlNode - Node in the graph container after which the shapes should be inserted that\n * will not go into the <drawPane> (eg. HTML labels without foreignObjects).\n */\nmxCellRenderer.prototype.insertStateAfter = function(state, node, htmlNode)\n{\n\tvar shapes = this.getShapesForState(state);\n\t\n\tfor (var i = 0; i < shapes.length; i++)\n\t{\n\t\tif (shapes[i] != null && shapes[i].node != null)\n\t\t{\n\t\t\tvar html = shapes[i].node.parentNode != state.view.getDrawPane() &&\n\t\t\t\tshapes[i].node.parentNode != state.view.getOverlayPane();\n\t\t\tvar temp = (html) ? htmlNode : node;\n\t\t\t\n\t\t\tif (temp != null && temp.nextSibling != shapes[i].node)\n\t\t\t{\n\t\t\t\tif (temp.nextSibling == null)\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.appendChild(shapes[i].node);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.insertBefore(shapes[i].node, temp.nextSibling);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (temp == null)\n\t\t\t{\n\t\t\t\t// Special case: First HTML node should be first sibling after canvas\n\t\t\t\tif (shapes[i].node.parentNode == state.view.graph.container)\n\t\t\t\t{\n\t\t\t\t\tvar canvas = state.view.canvas;\n\t\t\t\t\t\n\t\t\t\t\twhile (canvas != null && canvas.parentNode != state.view.graph.container)\n\t\t\t\t\t{\n\t\t\t\t\t\tcanvas = canvas.parentNode;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (canvas != null && canvas.nextSibling != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (canvas.nextSibling != shapes[i].node)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, canvas.nextSibling);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tshapes[i].node.parentNode.appendChild(shapes[i].node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (shapes[i].node.parentNode != null &&\n\t\t\t\t\tshapes[i].node.parentNode.firstChild != null &&\n\t\t\t\t\tshapes[i].node.parentNode.firstChild != shapes[i].node)\n\t\t\t\t{\n\t\t\t\t\t// Inserts the node as the first child of the parent to implement the order\n\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, shapes[i].node.parentNode.firstChild);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (html)\n\t\t\t{\n\t\t\t\thtmlNode = shapes[i].node;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode = shapes[i].node;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [node, htmlNode];\n};\n\n/**\n * Function: getShapesForState\n * \n * Returns the <mxShapes> for the given cell state in the order in which they should\n * appear in the DOM.\n * \n * Parameters:\n * \n * state - <mxCellState> whose shapes should be returned.\n */\nmxCellRenderer.prototype.getShapesForState = function(state)\n{\n\treturn [state.shape, state.text, state.control];\n};\n\n/**\n * Function: redraw\n * \n * Updates the bounds or points and scale of the shapes for the given cell\n * state. This is called in mxGraphView.validatePoints as the last step of\n * updating all cells.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shapes should be updated.\n * force - Optional boolean that specifies if the cell should be reconfiured\n * and redrawn without any additional checks.\n * rendering - Optional boolean that specifies if the cell should actually\n * be drawn into the DOM. If this is false then redraw and/or reconfigure\n * will not be called on the shape.\n */\nmxCellRenderer.prototype.redraw = function(state, force, rendering)\n{\n\tvar shapeChanged = this.redrawShape(state, force, rendering);\n\n\tif (state.shape != null && (rendering == null || rendering))\n\t{\n\t\tthis.redrawLabel(state, shapeChanged);\n\t\tthis.redrawCellOverlays(state, shapeChanged);\n\t\tthis.redrawControl(state, shapeChanged);\n\t}\n};\n\n/**\n * Function: redrawShape\n * \n * Redraws the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawShape = function(state, force, rendering)\n{\n\tvar model = state.view.graph.model;\n\tvar shapeChanged = false;\n\n\t// Forces creation of new shape if shape style has changed\n\tif (state.shape != null && state.shape.style != null && state.style != null &&\n\t\tstate.shape.style[mxConstants.STYLE_SHAPE] != state.style[mxConstants.STYLE_SHAPE])\n\t{\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n\t\n\tif (state.shape == null && state.view.graph.container != null &&\n\t\tstate.cell != state.view.currentRoot &&\n\t\t(model.isVertex(state.cell) || model.isEdge(state.cell)))\n\t{\n\t\tstate.shape = this.createShape(state);\n\t\t\n\t\tif (state.shape != null)\n\t\t{\n\t\t\tstate.shape.minSvgStrokeWidth = this.minSvgStrokeWidth;\n\t\t\tstate.shape.antiAlias = this.antiAlias;\n\t\n\t\t\tthis.createIndicatorShape(state);\n\t\t\tthis.initializeShape(state);\n\t\t\tthis.createCellOverlays(state);\n\t\t\tthis.installListeners(state);\n\t\t\t\n\t\t\t// Forces a refresh of the handler if one exists\n\t\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\t}\n\t}\n\telse if (!force && state.shape != null && (!mxUtils.equalEntries(state.shape.style,\n\t\tstate.style) || this.checkPlaceholderStyles(state)))\n\t{\n\t\tstate.shape.resetStyles();\n\t\tthis.configureShape(state);\n\t\t// LATER: Ignore update for realtime to fix reset of current gesture\n\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\tforce = true;\n\t}\n\t\n\t// Updates indicator shape\n\tif (state.shape != null && state.shape.indicatorShape !=\n\t\tthis.getShape(state.view.graph.getIndicatorShape(state)))\n\t{\n\t\tif (state.shape.indicator != null)\n\t\t{\n\t\t\tstate.shape.indicator.destroy();\n\t\t\tstate.shape.indicator = null;\n\t\t}\n\t\t\n\t\tthis.createIndicatorShape(state);\n\t\t\n\t\tif (state.shape.indicatorShape != null)\n\t\t{\n\t\t\tstate.shape.indicator = new state.shape.indicatorShape();\n\t\t\tstate.shape.indicator.dialect = state.shape.dialect;\n\t\t\tstate.shape.indicator.init(state.node);\n\t\t\tforce = true;\n\t\t}\n\t}\n\n\tif (state.shape != null)\n\t{\n\t\t// Handles changes of the collapse icon\n\t\tthis.createControl(state);\n\t\t\n\t\t// Redraws the cell if required, ignores changes to bounds if points are\n\t\t// defined as the bounds are updated for the given points inside the shape\n\t\tif (force || this.isShapeInvalid(state, state.shape))\n\t\t{\n\t\t\tif (state.absolutePoints != null)\n\t\t\t{\n\t\t\t\tstate.shape.points = state.absolutePoints.slice();\n\t\t\t\tstate.shape.bounds = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.points = null;\n\t\t\t\tstate.shape.bounds = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\t}\n\n\t\t\tstate.shape.scale = state.view.scale;\n\t\t\t\n\t\t\tif (rendering == null || rendering)\n\t\t\t{\n\t\t\t\tthis.doRedrawShape(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.updateBoundingBox();\n\t\t\t}\n\t\t\t\n\t\t\tshapeChanged = true;\n\t\t}\n\t}\n\n\treturn shapeChanged;\n};\n\n/**\n * Function: doRedrawShape\n * \n * Invokes redraw on the shape of the given state.\n */\nmxCellRenderer.prototype.doRedrawShape = function(state)\n{\n\tstate.shape.redraw();\n};\n\n/**\n * Function: isShapeInvalid\n * \n * Returns true if the given shape must be repainted.\n */\nmxCellRenderer.prototype.isShapeInvalid = function(state, shape)\n{\n\treturn shape.bounds == null || shape.scale != state.view.scale ||\n\t\t(state.absolutePoints == null && !shape.bounds.equals(state)) ||\n\t\t(state.absolutePoints != null && !mxUtils.equalPoints(shape.points, state.absolutePoints))\n};\n\n/**\n * Function: destroy\n * \n * Destroys the shapes associated with the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shapes should be destroyed.\n */\nmxCellRenderer.prototype.destroy = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tif (state.text != null)\n\t\t{\t\t\n\t\t\tstate.text.destroy();\n\t\t\tstate.text = null;\n\t\t}\n\t\t\n\t\tif (state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\tshape.destroy();\n\t\t\t});\n\t\t\t\n\t\t\tstate.overlays = null;\n\t\t}\n\n\t\tif (state.control != null)\n\t\t{\n\t\t\tstate.control.destroy();\n\t\t\tstate.control = null;\n\t\t}\n\t\t\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n};\n\n__mxOutput.mxCellRenderer = typeof mxCellRenderer !== 'undefined' ? mxCellRenderer : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEdgeStyle =\n{\n\t/**\n\t * Class: mxEdgeStyle\n\t * \n\t * Provides various edge styles to be used as the values for\n\t * <mxConstants.STYLE_EDGE> in a cell style.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * var style = stylesheet.getDefaultEdgeStyle();\n\t * style[mxConstants.STYLE_EDGE] = mxEdgeStyle.ElbowConnector;\n\t * (end)\n\t * \n\t * Sets the default edge style to <ElbowConnector>.\n\t * \n\t * Custom edge style:\n\t * \n\t * To write a custom edge style, a function must be added to the mxEdgeStyle\n\t * object as follows:\n\t * \n\t * (code)\n\t * mxEdgeStyle.MyStyle = function(state, source, target, points, result)\n\t * {\n\t *   if (source != null && target != null)\n\t *   {\n\t *     var pt = new mxPoint(target.getCenterX(), source.getCenterY());\n\t * \n\t *     if (mxUtils.contains(source, pt.x, pt.y))\n\t *     {\n\t *       pt.y = source.y + source.height;\n\t *     }\n\t * \n\t *     result.push(pt);\n\t *   }\n\t * };\n\t * (end)\n\t * \n\t * In the above example, a right angle is created using a point on the\n\t * horizontal center of the target vertex and the vertical center of the source\n\t * vertex. The code checks if that point intersects the source vertex and makes\n\t * the edge straight if it does. The point is then added into the result array,\n\t * which acts as the return value of the function.\n\t *\n\t * The new edge style should then be registered in the <mxStyleRegistry> as follows:\n\t * (code)\n\t * mxStyleRegistry.putValue('myEdgeStyle', mxEdgeStyle.MyStyle);\n\t * (end)\n\t * \n\t * The custom edge style above can now be used in a specific edge as follows:\n\t * \n\t * (code)\n\t * model.setStyle(edge, 'edgeStyle=myEdgeStyle');\n\t * (end)\n\t * \n\t * Note that the key of the <mxStyleRegistry> entry for the function should\n\t * be used in string values, unless <mxGraphView.allowEval> is true, in\n\t * which case you can also use mxEdgeStyle.MyStyle for the value in the\n\t * cell style above.\n\t * \n\t * Or it can be used for all edges in the graph as follows:\n\t * \n\t * (code)\n\t * var style = graph.getStylesheet().getDefaultEdgeStyle();\n\t * style[mxConstants.STYLE_EDGE] = mxEdgeStyle.MyStyle;\n\t * (end)\n\t * \n\t * Note that the object can be used directly when programmatically setting\n\t * the value, but the key in the <mxStyleRegistry> should be used when\n\t * setting the value via a key, value pair in a cell style.\n\t * \n\t * Function: EntityRelation\n\t * \n\t * Implements an entity relation style for edges (as used in database\n\t * schema diagrams). At the time the function is called, the result\n\t * array contains a placeholder (null) for the first absolute point,\n\t * that is, the point where the edge and source terminal are connected.\n\t * The implementation of the style then adds all intermediate waypoints\n\t * except for the last point, that is, the connection point between the\n\t * edge and the target terminal. The first ant the last point in the\n\t * result array are then replaced with mxPoints that take into account\n\t * the terminal's perimeter and next point on the edge.\n\t *\n\t * Parameters:\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * source - <mxCellState> that represents the source terminal.\n\t * target - <mxCellState> that represents the target terminal.\n\t * points - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t */\n\t EntityRelation: function(state, source, target, points, result)\n\t {\n\t\tvar view = state.view;\n\t \tvar graph = view.graph;\n\t \tvar segment = mxUtils.getValue(state.style,\n\t \t\t\tmxConstants.STYLE_SEGMENT,\n\t \t\t\tmxConstants.ENTITY_SEGMENT) * view.scale;\n\t \t\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t \tvar isSourceLeft = false;\n\t \t\n\t \tif (source != null)\n\t \t{\n \t\t\tvar sourceGeometry = graph.getCellGeometry(source.cell);\n\t\n\t\t \tif (sourceGeometry.relative)\n\t\t \t{\n\t\t \t\tisSourceLeft = sourceGeometry.x <= 0.5;\n\t\t \t}\n\t\t \telse if (target != null)\n\t\t \t{\n\t\t \t\tisSourceLeft = ((pe != null) ? pe.x : target.x + target.width) < ((p0 != null) ? p0.x : source.x);\n\t\t \t}\n\t \t}\n\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\telse if (source != null)\n\t\t{\n\t\t\tvar constraint = mxUtils.getPortConstraints(source, state, true, mxConstants.DIRECTION_MASK_NONE);\n\t\t\t\n\t\t\tif (constraint != mxConstants.DIRECTION_MASK_NONE && constraint != mxConstants.DIRECTION_MASK_WEST +\n\t\t\t\tmxConstants.DIRECTION_MASK_EAST)\n\t\t\t{\n\t\t\t\tisSourceLeft = constraint == mxConstants.DIRECTION_MASK_WEST;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn;\n\t\t}\n\t \t\n\t \tvar isTargetLeft = true;\n\t \t\n\t \tif (target != null)\n\t \t{\n\t\t \tvar targetGeometry = graph.getCellGeometry(target.cell);\n\t\n\t\t \tif (targetGeometry.relative)\n\t\t \t{\n\t\t \t\tisTargetLeft = targetGeometry.x <= 0.5;\n\t\t \t}\n\t\t \telse if (source != null)\n\t\t \t{\n\t\t \t\tisTargetLeft = ((p0 != null) ? p0.x : source.x + source.width) < ((pe != null) ? pe.x : target.x);\n\t\t \t}\n\t \t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\t\telse if (target != null)\n\t \t{\n\t\t\tvar constraint = mxUtils.getPortConstraints(target, state, false, mxConstants.DIRECTION_MASK_NONE);\n\n\t\t\tif (constraint != mxConstants.DIRECTION_MASK_NONE && constraint != mxConstants.DIRECTION_MASK_WEST +\n\t\t\t\tmxConstants.DIRECTION_MASK_EAST)\n\t\t\t{\n\t\t\t\tisTargetLeft = constraint == mxConstants.DIRECTION_MASK_WEST;\n\t\t\t}\n\t \t}\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar x0 = (isSourceLeft) ? source.x : source.x + source.width;\n\t\t\tvar y0 = view.getRoutingCenterY(source);\n\t\t\t\n\t\t\tvar xe = (isTargetLeft) ? target.x : target.x + target.width;\n\t\t\tvar ye = view.getRoutingCenterY(target);\n\t\n\t\t\tvar seg = segment;\n\t\n\t\t\tvar dx = (isSourceLeft) ? -seg : seg;\n\t\t\tvar dep = new mxPoint(x0 + dx, y0);\n\t\t\t\t\t\n\t\t\tdx = (isTargetLeft) ? -seg : seg;\n\t\t\tvar arr = new mxPoint(xe + dx, ye);\n\t\t\t\n\t\t\t// Adds intermediate points if both go out on same side\n\t\t\tif (isSourceLeft == isTargetLeft)\n\t\t\t{\n\t\t\t\tvar x = (isSourceLeft) ?\n\t\t\t\t\tMath.min(x0, xe)-segment :\n\t\t\t\t\tMath.max(x0, xe)+segment;\n\t\n\t\t\t\tresult.push(new mxPoint(x, y0));\n\t\t\t\tresult.push(new mxPoint(x, ye));\n\t\t\t}\n\t\t\telse if ((dep.x < arr.x) == isSourceLeft)\n\t\t\t{\n\t\t\t\tvar midY = y0 + (ye - y0) / 2;\n\t\n\t\t\t\tresult.push(dep);\n\t\t\t\tresult.push(new mxPoint(dep.x, midY));\n\t\t\t\tresult.push(new mxPoint(arr.x, midY));\n\t\t\t\tresult.push(arr);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(dep);\n\t\t\t\tresult.push(arr);\n\t\t\t}\n\t\t}\n\t },\n\n\t /**\n\t * Function: Loop\n\t * \n\t * Implements a self-reference, aka. loop.\n\t */\n\tLoop: function(state, source, target, points, result)\n\t{\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tif (points != null && points.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar pt = points[i];\n\t\t\t\t\tpt = state.view.transformControlPoint(state, pt);\n\t\t\t\t\tresult.push(new mxPoint(pt.x, pt.y));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tvar view = state.view;\n\t\t\tvar graph = view.graph;\n\t\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t\t\t\t\n\t\t\t\tif (mxUtils.contains(source, pt.x, pt.y))\n\t\t\t\t{\n\t\t\t\t\tpt = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = 0;\n\t\t\tvar dx = 0;\n\t\t\tvar y = 0;\n\t\t\tvar dy = 0;\n\t\t\t\n\t\t \tvar seg = mxUtils.getValue(state.style, mxConstants.STYLE_SEGMENT,\n\t\t \t\tgraph.gridSize) * view.scale;\n\t\t\tvar dir = mxUtils.getValue(state.style, mxConstants.STYLE_DIRECTION,\n\t\t\t\tmxConstants.DIRECTION_WEST);\n\t\t\t\n\t\t\tif (dir == mxConstants.DIRECTION_NORTH ||\n\t\t\t\tdir == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(source);\n\t\t\t\tdx = seg;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ty = view.getRoutingCenterY(source);\n\t\t\t\tdy = seg;\n\t\t\t}\n\t\t\t\n\t\t\tif (pt == null ||\n\t\t\t\tpt.x < source.x ||\n\t\t\t\tpt.x > source.x + source.width)\n\t\t\t{\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tx = pt.x;\n\t\t\t\t\tdy = Math.max(Math.abs(y - pt.y), dy);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (dir == mxConstants.DIRECTION_NORTH)\n\t\t\t\t\t{\n\t\t\t\t\t\ty = source.y - 2 * dx;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dir == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t\t{\n\t\t\t\t\t\ty = source.y + source.height + 2 * dx;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dir == mxConstants.DIRECTION_EAST)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = source.x - 2 * dy;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = source.x + source.width + 2 * dy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (pt != null)\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(source);\n\t\t\t\tdx = Math.max(Math.abs(x - pt.x), dy);\n\t\t\t\ty = pt.y;\n\t\t\t\tdy = 0;\n\t\t\t}\n\t\t\t\n\t\t\tresult.push(new mxPoint(x - dx, y - dy));\n\t\t\tresult.push(new mxPoint(x + dx, y + dy));\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: ElbowConnector\n\t * \n\t * Uses either <SideToSide> or <TopToBottom> depending on the horizontal\n\t * flag in the cell style. <SideToSide> is used if horizontal is true or\n\t * unspecified. See <EntityRelation> for a description of the\n\t * parameters.\n\t */\n\tElbowConnector: function(state, source, target, points, result)\n\t{\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\n\t\tvar vertical = false;\n\t\tvar horizontal = false;\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar left = Math.min(source.x, target.x);\n\t\t\t\tvar right = Math.max(source.x + source.width,\n\t\t\t\t\ttarget.x + target.width);\n\t\n\t\t\t\tvar top = Math.min(source.y, target.y);\n\t\t\t\tvar bottom = Math.max(source.y + source.height,\n\t\t\t\t\ttarget.y + target.height);\n\n\t\t\t\tpt = state.view.transformControlPoint(state, pt);\n\t\t\t\t\t\n\t\t\t\tvertical = pt.y < top || pt.y > bottom;\n\t\t\t\thorizontal = pt.x < left || pt.x > right;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar left = Math.max(source.x, target.x);\n\t\t\t\tvar right = Math.min(source.x + source.width,\n\t\t\t\t\ttarget.x + target.width);\n\t\t\t\t\t\n\t\t\t\tvertical = left == right;\n\t\t\t\t\n\t\t\t\tif (!vertical)\n\t\t\t\t{\n\t\t\t\t\tvar top = Math.max(source.y, target.y);\n\t\t\t\t\tvar bottom = Math.min(source.y + source.height,\n\t\t\t\t\t\ttarget.y + target.height);\n\t\t\t\t\t\t\n\t\t\t\t\thorizontal = top == bottom;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!horizontal && (vertical ||\n\t\t\tstate.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL))\n\t\t{\n\t\t\tmxEdgeStyle.TopToBottom(state, source, target, points, result);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxEdgeStyle.SideToSide(state, source, target, points, result);\n\t\t}\n\t},\n\n\t/**\n\t * Function: SideToSide\n\t * \n\t * Implements a vertical elbow edge. See <EntityRelation> for a description\n\t * of the parameters.\n\t */\n\tSideToSide: function(state, source, target, points, result)\n\t{\n\t\tvar view = state.view;\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t}\n\t\t\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar l = Math.max(source.x, target.x);\n\t\t\tvar r = Math.min(source.x + source.width,\n\t\t\t\t\t\t\t target.x + target.width);\n\t\n\t\t\tvar x = (pt != null) ? pt.x : Math.round(r + (l - r) / 2);\n\t\n\t\t\tvar y1 = view.getRoutingCenterY(source);\n\t\t\tvar y2 = view.getRoutingCenterY(target);\n\t\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tif (pt.y >= source.y && pt.y <= source.y + source.height)\n\t\t\t\t{\n\t\t\t\t\ty1 = pt.y;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (pt.y >= target.y && pt.y <= target.y + target.height)\n\t\t\t\t{\n\t\t\t\t\ty2 = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y1) &&\n\t\t\t\t!mxUtils.contains(source, x, y1))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x,  y1));\n\t\t\t}\n\t\n\t\t\tif (!mxUtils.contains(target, x, y2) &&\n\t\t\t\t!mxUtils.contains(source, x, y2))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y2));\n\t\t\t}\n\t\n\t\t\tif (result.length == 1)\n\t\t\t{\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.contains(target, x, pt.y) &&\n\t\t\t\t\t\t!mxUtils.contains(source, x, pt.y))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(new mxPoint(x, pt.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t\n\t\t\t\t\tvar t = Math.max(source.y, target.y);\n\t\t\t\t\tvar b = Math.min(source.y + source.height,\n\t\t\t\t\t\t\t target.y + target.height);\n\t\t\t\t\t\t \n\t\t\t\t\tresult.push(new mxPoint(x, t + (b - t) / 2));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: TopToBottom\n\t * \n\t * Implements a horizontal elbow edge. See <EntityRelation> for a\n\t * description of the parameters.\n\t */\n\tTopToBottom: function(state, source, target, points, result)\n\t{\n\t\tvar view = state.view;\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t}\n\t\t\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar t = Math.max(source.y, target.y);\n\t\t\tvar b = Math.min(source.y + source.height,\n\t\t\t\t\t\t\t target.y + target.height);\n\t\n\t\t\tvar x = view.getRoutingCenterX(source);\n\t\t\t\n\t\t\tif (pt != null &&\n\t\t\t\tpt.x >= source.x &&\n\t\t\t\tpt.x <= source.x + source.width)\n\t\t\t{\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\t\n\t\t\tvar y = (pt != null) ? pt.y : Math.round(b + (t - b) / 2);\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y) &&\n\t\t\t\t!mxUtils.contains(source, x, y))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y));\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (pt != null &&\n\t\t\t\tpt.x >= target.x &&\n\t\t\t\tpt.x <= target.x + target.width)\n\t\t\t{\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(target);\n\t\t\t}\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y) &&\n\t\t\t\t!mxUtils.contains(source, x, y))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y));\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (result.length == 1)\n\t\t\t{\n\t\t\t\tif (pt != null && result.length == 1)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.contains(target, pt.x, y) &&\n\t\t\t\t\t\t!mxUtils.contains(source, pt.x, y))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(new mxPoint(pt.x, y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar l = Math.max(source.x, target.x);\n\t\t\t\t\tvar r = Math.min(source.x + source.width,\n\t\t\t\t\t\t\t target.x + target.width);\n\t\t\t\t\t\t \n\t\t\t\t\tresult.push(new mxPoint(l + (r - l) / 2, y));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: SegmentConnector\n\t * \n\t * Implements an orthogonal edge style. Use <mxEdgeSegmentHandler>\n\t * as an interactive handler for this style.\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * sourceScaled - <mxCellState> that represents the source terminal.\n\t * targetScaled - <mxCellState> that represents the target terminal.\n\t * controlHints - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t *\n\t */\n\tSegmentConnector: function(state, sourceScaled, targetScaled, controlHints, result)\n\t{\n\t\t// Creates array of all way- and terminalpoints\n\t\tvar pts = mxEdgeStyle.scalePointArray(state.absolutePoints, state.view.scale);\n\t\tvar source = mxEdgeStyle.scaleCellState(sourceScaled, state.view.scale);\n\t\tvar target = mxEdgeStyle.scaleCellState(targetScaled, state.view.scale);\n\t\tvar tol = 1;\n\t\t\n\t\t// Whether the first segment outgoing from the source end is horizontal\n\t\tvar lastPushed = (result.length > 0) ? result[0] : null;\n\t\tvar horizontal = true;\n\t\tvar hint = null;\n\t\t\n\t\t// Adds waypoints only if outside of tolerance\n\t\tfunction pushPoint(pt)\n\t\t{\n\t\t\tpt.x = Math.round(pt.x * state.view.scale * 10) / 10;\n\t\t\tpt.y = Math.round(pt.y * state.view.scale * 10) / 10;\n\n\t\t\tif (lastPushed == null || Math.abs(lastPushed.x - pt.x) >= tol || Math.abs(lastPushed.y - pt.y) >= Math.max(1, state.view.scale))\n\t\t\t{\n\t\t\t\tresult.push(pt);\n\t\t\t\tlastPushed = pt;\n\t\t\t}\n\t\t\t\n\t\t\treturn lastPushed;\n\t\t};\n\n\t\t// Adds the first point\n\t\tvar pt = pts[0];\n\t\t\n\t\tif (pt == null && source != null)\n\t\t{\n\t\t\tpt = new mxPoint(state.view.getRoutingCenterX(source), state.view.getRoutingCenterY(source));\n\t\t}\n\t\telse if (pt != null)\n\t\t{\n\t\t\tpt = pt.clone();\n\t\t}\n\t\t\n\t\tvar lastInx = pts.length - 1;\n\n\t\t// Adds the waypoints\n\t\tif (controlHints != null && controlHints.length > 0)\n\t\t{\n\t\t\t// Converts all hints and removes nulls\n\t\t\tvar hints = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < controlHints.length; i++)\n\t\t\t{\n\t\t\t\tvar tmp = state.view.transformControlPoint(state, controlHints[i], true);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\thints.push(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (hints.length == 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Aligns source and target hint to fixed points\n\t\t\tif (pt != null && hints[0] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(hints[0].x - pt.x) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[0].x = pt.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(hints[0].y - pt.y) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[0].y = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar pe = pts[lastInx];\n\t\t\t\n\t\t\tif (pe != null && hints[hints.length - 1] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(hints[hints.length - 1].x - pe.x) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[hints.length - 1].x = pe.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(hints[hints.length - 1].y - pe.y) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[hints.length - 1].y = pe.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\thint = hints[0];\n\n\t\t\tvar currentTerm = source;\n\t\t\tvar currentPt = pts[0];\n\t\t\tvar hozChan = false;\n\t\t\tvar vertChan = false;\n\t\t\tvar currentHint = hint;\n\t\t\t\n\t\t\tif (currentPt != null)\n\t\t\t{\n\t\t\t\tcurrentTerm = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Check for alignment with fixed points and with channels\n\t\t\t// at source and target segments only\n\t\t\tfor (var i = 0; i < 2; i++)\n\t\t\t{\n\t\t\t\tvar fixedVertAlign = currentPt != null && currentPt.x == currentHint.x;\n\t\t\t\tvar fixedHozAlign = currentPt != null && currentPt.y == currentHint.y;\n\t\t\t\t\n\t\t\t\tvar inHozChan = currentTerm != null && (currentHint.y >= currentTerm.y &&\n\t\t\t\t\t\tcurrentHint.y <= currentTerm.y + currentTerm.height);\n\t\t\t\tvar inVertChan = currentTerm != null && (currentHint.x >= currentTerm.x &&\n\t\t\t\t\t\tcurrentHint.x <= currentTerm.x + currentTerm.width);\n\n\t\t\t\thozChan = fixedHozAlign || (currentPt == null && inHozChan);\n\t\t\t\tvertChan = fixedVertAlign || (currentPt == null && inVertChan);\n\t\t\t\t\n\t\t\t\t// If the current hint falls in both the hor and vert channels in the case\n\t\t\t\t// of a floating port, or if the hint is exactly co-incident with a \n\t\t\t\t// fixed point, ignore the source and try to work out the orientation\n\t\t\t\t// from the target end\n\t\t\t\tif (i==0 && ((hozChan && vertChan) || (fixedVertAlign && fixedHozAlign)))\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (currentPt != null && (!fixedHozAlign && !fixedVertAlign) && (inHozChan || inVertChan)) \n\t\t\t\t\t{\n\t\t\t\t\t\thorizontal = inHozChan ? false : true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\tif (vertChan || hozChan)\n\t\t\t\t\t{\n\t\t\t\t\t\thorizontal = hozChan;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (i == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Work back from target end\n\t\t\t\t\t\t\thorizontal = hints.length % 2 == 0 ? hozChan : vertChan;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrentTerm = target;\n\t\t\t\tcurrentPt = pts[lastInx];\n\t\t\t\t\n\t\t\t\tif (currentPt != null)\n\t\t\t\t{\n\t\t\t\t\tcurrentTerm = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrentHint = hints[hints.length - 1];\n\t\t\t\t\n\t\t\t\tif (fixedVertAlign && fixedHozAlign)\n\t\t\t\t{\n\t\t\t\t\thints = hints.slice(1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (horizontal && ((pts[0] != null && pts[0].y != hint.y) ||\n\t\t\t\t(pts[0] == null && source != null &&\n\t\t\t\t(hint.y < source.y || hint.y > source.y + source.height))))\n\t\t\t{\n\t\t\t\tpushPoint(new mxPoint(pt.x, hint.y));\n\t\t\t}\n\t\t\telse if (!horizontal && ((pts[0] != null && pts[0].x != hint.x) ||\n\t\t\t\t\t(pts[0] == null && source != null &&\n\t\t\t\t\t(hint.x < source.x || hint.x > source.x + source.width))))\n\t\t\t{\n\t\t\t\tpushPoint(new mxPoint(hint.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\tif (horizontal)\n\t\t\t{\n\t\t\t\tpt.y = hint.y;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpt.x = hint.x;\n\t\t\t}\n\t\t\n\t\t\tfor (var i = 0; i < hints.length; i++)\n\t\t\t{\n\t\t\t\thorizontal = !horizontal;\n\t\t\t\thint = hints[i];\n\t\t\t\t\n//\t\t\t\tmxLog.show();\n//\t\t\t\tmxLog.debug('hint', i, hint.x, hint.y);\n\t\t\t\t\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tpt.y = hint.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpt.x = hint.x;\n\t\t\t\t}\n\t\t\n\t\t\t\tpushPoint(pt.clone());\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\thint = pt;\n\t\t\t// FIXME: First click in connect preview toggles orientation\n\t\t\thorizontal = true;\n\t\t}\n\n\t\t// Adds the last point\n\t\tpt = pts[lastInx];\n\n\t\tif (pt == null && target != null)\n\t\t{\n\t\t\tpt = new mxPoint(state.view.getRoutingCenterX(target), state.view.getRoutingCenterY(target));\n\t\t}\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tif (hint != null)\n\t\t\t{\n\t\t\t\tif (horizontal && ((pts[lastInx] != null && pts[lastInx].y != hint.y) ||\n\t\t\t\t\t(pts[lastInx] == null && target != null &&\n\t\t\t\t\t(hint.y < target.y || hint.y > target.y + target.height))))\n\t\t\t\t{\n\t\t\t\t\tpushPoint(new mxPoint(pt.x, hint.y));\n\t\t\t\t}\n\t\t\t\telse if (!horizontal && ((pts[lastInx] != null && pts[lastInx].x != hint.x) ||\n\t\t\t\t\t\t(pts[lastInx] == null && target != null &&\n\t\t\t\t\t\t(hint.x < target.x || hint.x > target.x + target.width))))\n\t\t\t\t{\n\t\t\t\t\tpushPoint(new mxPoint(hint.x, pt.y));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes bends inside the source terminal for floating ports\n\t\tif (pts[0] == null && source != null)\n\t\t{\n\t\t\twhile (result.length > 1 && result[1] != null &&\n\t\t\t\tmxUtils.contains(source, result[1].x, result[1].y))\n\t\t\t{\n\t\t\t\tresult.splice(1, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes bends inside the target terminal\n\t\tif (pts[lastInx] == null && target != null)\n\t\t{\n\t\t\twhile (result.length > 1 && result[result.length - 1] != null &&\n\t\t\t\tmxUtils.contains(target, result[result.length - 1].x, result[result.length - 1].y))\n\t\t\t{\n\t\t\t\tresult.splice(result.length - 1, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes last point if inside tolerance with end point\n\t\tif (pe != null && result[result.length - 1] != null &&\n\t\t\tMath.abs(pe.x - result[result.length - 1].x) <= tol &&\n\t\t\tMath.abs(pe.y - result[result.length - 1].y) <= tol)\n\t\t{\n\t\t\tresult.splice(result.length - 1, 1);\n\t\t\t\n\t\t\t// Lines up second last point in result with end point\n\t\t\tif (result[result.length - 1] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(result[result.length - 1].x - pe.x) < tol)\n\t\t\t\t{\n\t\t\t\t\tresult[result.length - 1].x = pe.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(result[result.length - 1].y - pe.y) < tol)\n\t\t\t\t{\n\t\t\t\t\tresult[result.length - 1].y = pe.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\n\torthBuffer: 10,\n\t\n\torthPointsFallback: true,\n\n\tdirVectors: [ [ -1, 0 ],\n\t\t\t[ 0, -1 ], [ 1, 0 ], [ 0, 1 ], [ -1, 0 ], [ 0, -1 ], [ 1, 0 ] ],\n\n\twayPoints1: [ [ 0, 0], [ 0, 0],  [ 0, 0], [ 0, 0], [ 0, 0],  [ 0, 0],\n\t              [ 0, 0],  [ 0, 0], [ 0, 0],  [ 0, 0], [ 0, 0],  [ 0, 0] ],\n\n\troutePatterns: [\n\t\t[ [ 513, 2308, 2081, 2562 ], [ 513, 1090, 514, 2184, 2114, 2561 ],\n\t\t\t[ 513, 1090, 514, 2564, 2184, 2562 ],\n\t\t\t[ 513, 2308, 2561, 1090, 514, 2568, 2308 ] ],\n\t[ [ 514, 1057, 513, 2308, 2081, 2562 ], [ 514, 2184, 2114, 2561 ],\n\t\t\t[ 514, 2184, 2562, 1057, 513, 2564, 2184 ],\n\t\t\t[ 514, 1057, 513, 2568, 2308, 2561 ] ],\n\t[ [ 1090, 514, 1057, 513, 2308, 2081, 2562 ], [ 2114, 2561 ],\n\t\t\t[ 1090, 2562, 1057, 513, 2564, 2184 ],\n\t\t\t[ 1090, 514, 1057, 513, 2308, 2561, 2568 ] ],\n\t[ [ 2081, 2562 ], [ 1057, 513, 1090, 514, 2184, 2114, 2561 ],\n\t\t\t[ 1057, 513, 1090, 514, 2184, 2562, 2564 ],\n\t\t\t[ 1057, 2561, 1090, 514, 2568, 2308 ] ] ],\n\t\n\tinlineRoutePatterns: [\n\t\t\t[ null, [ 2114, 2568 ], null, null ],\n\t\t\t[ null, [ 514, 2081, 2114, 2568 ] , null, null ],\n\t\t\t[ null, [ 2114, 2561 ], null, null ],\n\t\t\t[ [ 2081, 2562 ], [ 1057, 2114, 2568 ],\n\t\t\t\t\t[ 2184, 2562 ],\n\t\t\t\t\tnull ] ],\n\tvertexSeperations: [],\n\n\tlimits: [\n\t       [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n\t       [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ],\n\n\tLEFT_MASK: 32,\n\n\tTOP_MASK: 64,\n\n\tRIGHT_MASK: 128,\n\n\tBOTTOM_MASK: 256,\n\n\tLEFT: 1,\n\n\tTOP: 2,\n\n\tRIGHT: 4,\n\n\tBOTTOM: 8,\n\n\t// TODO remove magic numbers\n\tSIDE_MASK: 480,\n\t//mxEdgeStyle.LEFT_MASK | mxEdgeStyle.TOP_MASK | mxEdgeStyle.RIGHT_MASK\n\t//| mxEdgeStyle.BOTTOM_MASK,\n\n\tCENTER_MASK: 512,\n\n\tSOURCE_MASK: 1024,\n\n\tTARGET_MASK: 2048,\n\n\tVERTEX_MASK: 3072,\n\t// mxEdgeStyle.SOURCE_MASK | mxEdgeStyle.TARGET_MASK,\n\t\n\tgetJettySize: function(state, isSource)\n\t{\n\t\tvar value = mxUtils.getValue(state.style, (isSource) ? mxConstants.STYLE_SOURCE_JETTY_SIZE :\n\t\t\tmxConstants.STYLE_TARGET_JETTY_SIZE, mxUtils.getValue(state.style,\n\t\t\t\t\tmxConstants.STYLE_JETTY_SIZE, mxEdgeStyle.orthBuffer));\n\t\t\n\t\tif (value == 'auto')\n\t\t{\n\t\t\t// Computes the automatic jetty size\n\t\t\tvar type = mxUtils.getValue(state.style, (isSource) ? mxConstants.STYLE_STARTARROW : mxConstants.STYLE_ENDARROW, mxConstants.NONE);\n\t\t\t\n\t\t\tif (type != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tvar size = mxUtils.getNumber(state.style, (isSource) ? mxConstants.STYLE_STARTSIZE : mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE);\n\t\t\t\tvalue = Math.max(2, Math.ceil((size + mxEdgeStyle.orthBuffer) / mxEdgeStyle.orthBuffer)) * mxEdgeStyle.orthBuffer;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvalue = 2 * mxEdgeStyle.orthBuffer;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\t\n\t/**\n\t * Function: scalePointArray\n\t * \n\t * Scales an array of <mxPoint>\n\t * \n\t * Parameters:\n\t * \n\t * points - array of <mxPoint> to scale\n\t * scale - the scaling to divide by\n\t * \n\t */\n\tscalePointArray: function(points, scale)\n\t{\n\t\tvar result = [];\n\n\t\tif (points != null)\n\t\t{\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tif (points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tvar pt = new mxPoint(Math.round(points[i].x / scale * 10) / 10,\n\t\t\t\t\t\t\t\t\t\tMath.round(points[i].y / scale * 10) / 10);\n\t\t\t\t\tresult[i] = pt;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult[i] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = null;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: scaleCellState\n\t * \n\t * Scales an <mxCellState>\n\t * \n\t * Parameters:\n\t * \n\t * state - <mxCellState> to scale\n\t * scale - the scaling to divide by\n\t * \n\t */\n\tscaleCellState: function(state, scale)\n\t{\n\t\tvar result = null;\n\n\t\tif (state != null)\n\t\t{\n\t\t\tresult = state.clone();\n\t\t\tresult.setRect(Math.round(state.x / scale * 10) / 10,\n\t\t\t\t\t\t\tMath.round(state.y / scale * 10) / 10,\n\t\t\t\t\t\t\tMath.round(state.width / scale * 10) / 10,\n\t\t\t\t\t\t\tMath.round(state.height / scale * 10) / 10);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = null;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: OrthConnector\n\t * \n\t * Implements a local orthogonal router between the given\n\t * cells.\n\t * \n\t * Parameters:\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * sourceScaled - <mxCellState> that represents the source terminal.\n\t * targetScaled - <mxCellState> that represents the target terminal.\n\t * controlHints - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t * \n\t */\n\tOrthConnector: function(state, sourceScaled, targetScaled, controlHints, result)\n\t{\n\t\tvar graph = state.view.graph;\n\t\tvar sourceEdge = source == null ? false : graph.getModel().isEdge(source.cell);\n\t\tvar targetEdge = target == null ? false : graph.getModel().isEdge(target.cell);\n\n\t\tvar pts = mxEdgeStyle.scalePointArray(state.absolutePoints, state.view.scale);\n\t\tvar source = mxEdgeStyle.scaleCellState(sourceScaled, state.view.scale);\n\t\tvar target = mxEdgeStyle.scaleCellState(targetScaled, state.view.scale);\n\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tvar sourceX = source != null ? source.x : p0.x;\n\t\tvar sourceY = source != null ? source.y : p0.y;\n\t\tvar sourceWidth = source != null ? source.width : 0;\n\t\tvar sourceHeight = source != null ? source.height : 0;\n\t\t\n\t\tvar targetX = target != null ? target.x : pe.x;\n\t\tvar targetY = target != null ? target.y : pe.y;\n\t\tvar targetWidth = target != null ? target.width : 0;\n\t\tvar targetHeight = target != null ? target.height : 0;\n\n\t\tvar sourceBuffer = mxEdgeStyle.getJettySize(state, true);\n\t\tvar targetBuffer = mxEdgeStyle.getJettySize(state, false);\n\t\t\n\t\t//console.log('sourceBuffer', sourceBuffer);\n\t\t//console.log('targetBuffer', targetBuffer);\n\t\t// Workaround for loop routing within buffer zone\n\t\tif (source != null && target == source)\n\t\t{\n\t\t\ttargetBuffer = Math.max(sourceBuffer, targetBuffer);\n\t\t\tsourceBuffer = targetBuffer;\n\t\t}\n\t\t\n\t\tvar totalBuffer = targetBuffer + sourceBuffer;\n\t\t// console.log('totalBuffer', totalBuffer);\n\t\tvar tooShort = false;\n\t\t\n\t\t// Checks minimum distance for fixed points and falls back to segment connector\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\t\t\t\n\t\t\ttooShort = dx * dx + dy * dy < totalBuffer * totalBuffer;\n\t\t}\n\n\t\tif (tooShort || (mxEdgeStyle.orthPointsFallback && (controlHints != null &&\n\t\t\t\tcontrolHints.length > 0)) || sourceEdge || targetEdge)\n\t\t{\n\t\t\tmxEdgeStyle.SegmentConnector(state, sourceScaled, targetScaled, controlHints, result);\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine the side(s) of the source and target vertices\n\t\t// that the edge may connect to\n\t\t// portConstraint [source, target]\n\t\tvar portConstraint = [mxConstants.DIRECTION_MASK_ALL, mxConstants.DIRECTION_MASK_ALL];\n\t\tvar rotation = 0;\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tportConstraint[0] = mxUtils.getPortConstraints(source, state, true, \n\t\t\t\t\tmxConstants.DIRECTION_MASK_ALL);\n\t\t\trotation = mxUtils.getValue(source.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\n\t\t\t//console.log('source rotation', rotation);\n\t\t\t\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\tvar newRect = mxUtils.getBoundingBox(new mxRectangle(sourceX, sourceY, sourceWidth, sourceHeight), rotation);\n\t\t\t\tsourceX = newRect.x; \n\t\t\t\tsourceY = newRect.y;\n\t\t\t\tsourceWidth = newRect.width;\n\t\t\t\tsourceHeight = newRect.height;\n\t\t\t}\n\t\t}\n\n\t\tif (target != null)\n\t\t{\n\t\t\tportConstraint[1] = mxUtils.getPortConstraints(target, state, false,\n\t\t\t\tmxConstants.DIRECTION_MASK_ALL);\n\t\t\trotation = mxUtils.getValue(target.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\n\t\t\t//console.log('target rotation', rotation);\n\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\tvar newRect = mxUtils.getBoundingBox(new mxRectangle(targetX, targetY, targetWidth, targetHeight), rotation);\n\t\t\t\ttargetX = newRect.x;\n\t\t\t\ttargetY = newRect.y;\n\t\t\t\ttargetWidth = newRect.width;\n\t\t\t\ttargetHeight = newRect.height;\n\t\t\t}\n\t\t}\n\n\t\t//console.log('source' , sourceX, sourceY, sourceWidth, sourceHeight);\n\t\t//console.log('targetX' , targetX, targetY, targetWidth, targetHeight);\n\n\t\tvar dir = [0, 0];\n\n\t\t// Work out which faces of the vertices present against each other\n\t\t// in a way that would allow a 3-segment connection if port constraints\n\t\t// permitted.\n\t\t// geo -> [source, target] [x, y, width, height]\n\t\tvar geo = [ [sourceX, sourceY, sourceWidth, sourceHeight] ,\n\t\t            [targetX, targetY, targetWidth, targetHeight] ];\n\t\tvar buffer = [sourceBuffer, targetBuffer];\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tmxEdgeStyle.limits[i][1] = geo[i][0] - buffer[i];\n\t\t\tmxEdgeStyle.limits[i][2] = geo[i][1] - buffer[i];\n\t\t\tmxEdgeStyle.limits[i][4] = geo[i][0] + geo[i][2] + buffer[i];\n\t\t\tmxEdgeStyle.limits[i][8] = geo[i][1] + geo[i][3] + buffer[i];\n\t\t}\n\t\t\n\t\t// Work out which quad the target is in\n\t\tvar sourceCenX = geo[0][0] + geo[0][2] / 2.0;\n\t\tvar sourceCenY = geo[0][1] + geo[0][3] / 2.0;\n\t\tvar targetCenX = geo[1][0] + geo[1][2] / 2.0;\n\t\tvar targetCenY = geo[1][1] + geo[1][3] / 2.0;\n\t\t\n\t\tvar dx = sourceCenX - targetCenX;\n\t\tvar dy = sourceCenY - targetCenY;\n\n\t\tvar quad = 0;\n\n\t\t// 0 | 1\n\t\t// -----\n\t\t// 3 | 2\n\t\t\n\t\tif (dx < 0)\n\t\t{\n\t\t\tif (dy < 0)\n\t\t\t{\n\t\t\t\tquad = 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tquad = 1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (dy <= 0)\n\t\t\t{\n\t\t\t\tquad = 3;\n\t\t\t\t\n\t\t\t\t// Special case on x = 0 and negative y\n\t\t\t\tif (dx == 0)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//console.log('quad', quad);\n\n\t\t// Check for connection constraints\n\t\tvar currentTerm = null;\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tcurrentTerm = p0;\n\t\t}\n\n\t\tvar constraint = [ [0.5, 0.5] , [0.5, 0.5] ];\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (currentTerm != null)\n\t\t\t{\n\t\t\t\tconstraint[i][0] = (currentTerm.x - geo[i][0]) / geo[i][2];\n\t\t\t\t\n\t\t\t\tif (Math.abs(currentTerm.x - geo[i][0]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(currentTerm.x - geo[i][0] - geo[i][2]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t}\n\n\t\t\t\tconstraint[i][1] = (currentTerm.y - geo[i][1]) / geo[i][3];\n\n\t\t\t\tif (Math.abs(currentTerm.y - geo[i][1]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(currentTerm.y - geo[i][1] - geo[i][3]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcurrentTerm = null;\n\t\t\t\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tcurrentTerm = pe;\n\t\t\t}\n\t\t}\n\n\t\tvar sourceTopDist = geo[0][1] - (geo[1][1] + geo[1][3]);\n\t\tvar sourceLeftDist = geo[0][0] - (geo[1][0] + geo[1][2]);\n\t\tvar sourceBottomDist = geo[1][1] - (geo[0][1] + geo[0][3]);\n\t\tvar sourceRightDist = geo[1][0] - (geo[0][0] + geo[0][2]);\n\n\t\tmxEdgeStyle.vertexSeperations[1] = Math.max(sourceLeftDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[2] = Math.max(sourceTopDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[4] = Math.max(sourceBottomDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[3] = Math.max(sourceRightDist - totalBuffer, 0);\n\t\t\t\t\n\t\t//==============================================================\n\t\t// Start of source and target direction determination\n\n\t\t// Work through the preferred orientations by relative positioning\n\t\t// of the vertices and list them in preferred and available order\n\t\t\n\t\tvar dirPref = [];\n\t\tvar horPref = [];\n\t\tvar vertPref = [];\n\n\t\thorPref[0] = (sourceLeftDist >= sourceRightDist) ? mxConstants.DIRECTION_MASK_WEST\n\t\t\t\t: mxConstants.DIRECTION_MASK_EAST;\n\t\tvertPref[0] = (sourceTopDist >= sourceBottomDist) ? mxConstants.DIRECTION_MASK_NORTH\n\t\t\t\t: mxConstants.DIRECTION_MASK_SOUTH;\n\n\t\thorPref[1] = mxUtils.reversePortConstraints(horPref[0]);\n\t\tvertPref[1] = mxUtils.reversePortConstraints(vertPref[0]);\n\t\t\n\t\tvar preferredHorizDist = sourceLeftDist >= sourceRightDist ? sourceLeftDist\n\t\t\t\t: sourceRightDist;\n\t\tvar preferredVertDist = sourceTopDist >= sourceBottomDist ? sourceTopDist\n\t\t\t\t: sourceBottomDist;\n\n\t\tvar prefOrdering = [ [0, 0] , [0, 0] ];\n\t\tvar preferredOrderSet = false;\n\n\t\t// If the preferred port isn't available, switch it\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (dir[i] != 0x0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ((horPref[i] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\thorPref[i] = mxUtils.reversePortConstraints(horPref[i]);\n\t\t\t}\n\n\t\t\tif ((vertPref[i] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\tvertPref[i] = mxUtils\n\t\t\t\t\t\t.reversePortConstraints(vertPref[i]);\n\t\t\t}\n\n\t\t\tprefOrdering[i][0] = vertPref[i];\n\t\t\tprefOrdering[i][1] = horPref[i];\n\t\t}\n\n\t\tif (preferredVertDist > 0\n\t\t\t\t&& preferredHorizDist > 0)\n\t\t{\n\t\t\t// Possibility of two segment edge connection\n\t\t\tif (((horPref[0] & portConstraint[0]) > 0)\n\t\t\t\t\t&& ((vertPref[1] & portConstraint[1]) > 0))\n\t\t\t{\n\t\t\t\tprefOrdering[0][0] = horPref[0];\n\t\t\t\tprefOrdering[0][1] = vertPref[0];\n\t\t\t\tprefOrdering[1][0] = vertPref[1];\n\t\t\t\tprefOrdering[1][1] = horPref[1];\n\t\t\t\tpreferredOrderSet = true;\n\t\t\t}\n\t\t\telse if (((vertPref[0] & portConstraint[0]) > 0)\n\t\t\t\t\t&& ((horPref[1] & portConstraint[1]) > 0))\n\t\t\t{\n\t\t\t\tprefOrdering[0][0] = vertPref[0];\n\t\t\t\tprefOrdering[0][1] = horPref[0];\n\t\t\t\tprefOrdering[1][0] = horPref[1];\n\t\t\t\tprefOrdering[1][1] = vertPref[1];\n\t\t\t\tpreferredOrderSet = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (preferredVertDist > 0 && !preferredOrderSet)\n\t\t{\n\t\t\tprefOrdering[0][0] = vertPref[0];\n\t\t\tprefOrdering[0][1] = horPref[0];\n\t\t\tprefOrdering[1][0] = vertPref[1];\n\t\t\tprefOrdering[1][1] = horPref[1];\n\t\t\tpreferredOrderSet = true;\n\n\t\t}\n\t\t\n\t\tif (preferredHorizDist > 0 && !preferredOrderSet)\n\t\t{\n\t\t\tprefOrdering[0][0] = horPref[0];\n\t\t\tprefOrdering[0][1] = vertPref[0];\n\t\t\tprefOrdering[1][0] = horPref[1];\n\t\t\tprefOrdering[1][1] = vertPref[1];\n\t\t\tpreferredOrderSet = true;\n\t\t}\n\n\t\t// The source and target prefs are now an ordered list of\n\t\t// the preferred port selections\n\t\t// If the list contains gaps, compact it\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (dir[i] != 0x0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ((prefOrdering[i][0] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\tprefOrdering[i][0] = prefOrdering[i][1];\n\t\t\t}\n\n\t\t\tdirPref[i] = prefOrdering[i][0] & portConstraint[i];\n\t\t\tdirPref[i] |= (prefOrdering[i][1] & portConstraint[i]) << 8;\n\t\t\tdirPref[i] |= (prefOrdering[1 - i][i] & portConstraint[i]) << 16;\n\t\t\tdirPref[i] |= (prefOrdering[1 - i][1 - i] & portConstraint[i]) << 24;\n\n\t\t\tif ((dirPref[i] & 0xF) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = dirPref[i] << 8;\n\t\t\t}\n\t\t\t\n\t\t\tif ((dirPref[i] & 0xF00) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = (dirPref[i] & 0xF) | dirPref[i] >> 8;\n\t\t\t}\n\t\t\t\n\t\t\tif ((dirPref[i] & 0xF0000) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = (dirPref[i] & 0xFFFF)\n\t\t\t\t\t\t| ((dirPref[i] & 0xF000000) >> 8);\n\t\t\t}\n\n\t\t\tdir[i] = dirPref[i] & 0xF;\n\n\t\t\tif (portConstraint[i] == mxConstants.DIRECTION_MASK_WEST\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_NORTH\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_EAST\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_SOUTH)\n\t\t\t{\n\t\t\t\tdir[i] = portConstraint[i];\n\t\t\t}\n\t\t}\n\n\t\t//==============================================================\n\t\t// End of source and target direction determination\n\n\t\tvar sourceIndex = dir[0] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[0];\n\t\tvar targetIndex = dir[1] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[1];\n\n\t\tsourceIndex -= quad;\n\t\ttargetIndex -= quad;\n\n\t\tif (sourceIndex < 1)\n\t\t{\n\t\t\tsourceIndex += 4;\n\t\t}\n\t\t\n\t\tif (targetIndex < 1)\n\t\t{\n\t\t\ttargetIndex += 4;\n\t\t}\n\n\t\tvar routePattern = mxEdgeStyle.routePatterns[sourceIndex - 1][targetIndex - 1];\n\t\t\n\t\t//console.log('routePattern', routePattern);\n\n\t\tmxEdgeStyle.wayPoints1[0][0] = geo[0][0];\n\t\tmxEdgeStyle.wayPoints1[0][1] = geo[0][1];\n\n\t\tswitch (dir[0])\n\t\t{\n\t\t\tcase mxConstants.DIRECTION_MASK_WEST:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] -= sourceBuffer;\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_SOUTH:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += geo[0][3] + sourceBuffer;\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_EAST:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += geo[0][2] + sourceBuffer;\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_NORTH:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] -= sourceBuffer;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tvar currentIndex = 0;\n\n\t\t// Orientation, 0 horizontal, 1 vertical\n\t\tvar lastOrientation = (dir[0] & (mxConstants.DIRECTION_MASK_EAST | mxConstants.DIRECTION_MASK_WEST)) > 0 ? 0\n\t\t\t\t: 1;\n\t\tvar initialOrientation = lastOrientation;\n\t\tvar currentOrientation = 0;\n\n\t\tfor (var i = 0; i < routePattern.length; i++)\n\t\t{\n\t\t\tvar nextDirection = routePattern[i] & 0xF;\n\n\t\t\t// Rotate the index of this direction by the quad\n\t\t\t// to get the real direction\n\t\t\tvar directionIndex = nextDirection == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t\t: nextDirection;\n\n\t\t\tdirectionIndex += quad;\n\n\t\t\tif (directionIndex > 4)\n\t\t\t{\n\t\t\t\tdirectionIndex -= 4;\n\t\t\t}\n\n\t\t\tvar direction = mxEdgeStyle.dirVectors[directionIndex - 1];\n\n\t\t\tcurrentOrientation = (directionIndex % 2 > 0) ? 0 : 1;\n\t\t\t// Only update the current index if the point moved\n\t\t\t// in the direction of the current segment move,\n\t\t\t// otherwise the same point is moved until there is \n\t\t\t// a segment direction change\n\t\t\tif (currentOrientation != lastOrientation)\n\t\t\t{\n\t\t\t\tcurrentIndex++;\n\t\t\t\t// Copy the previous way point into the new one\n\t\t\t\t// We can't base the new position on index - 1\n\t\t\t\t// because sometime elbows turn out not to exist,\n\t\t\t\t// then we'd have to rewind.\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] = mxEdgeStyle.wayPoints1[currentIndex - 1][0];\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] = mxEdgeStyle.wayPoints1[currentIndex - 1][1];\n\t\t\t}\n\n\t\t\tvar tar = (routePattern[i] & mxEdgeStyle.TARGET_MASK) > 0;\n\t\t\tvar sou = (routePattern[i] & mxEdgeStyle.SOURCE_MASK) > 0;\n\t\t\tvar side = (routePattern[i] & mxEdgeStyle.SIDE_MASK) >> 5;\n\t\t\tside = side << quad;\n\n\t\t\tif (side > 0xF)\n\t\t\t{\n\t\t\t\tside = side >> 4;\n\t\t\t}\n\n\t\t\tvar center = (routePattern[i] & mxEdgeStyle.CENTER_MASK) > 0;\n\n\t\t\tif ((sou || tar) && side < 9)\n\t\t\t{\n\t\t\t\tvar limit = 0;\n\t\t\t\tvar souTar = sou ? 0 : 1;\n\n\t\t\t\tif (center && currentOrientation == 0)\n\t\t\t\t{\n\t\t\t\t\tlimit = geo[souTar][0] + constraint[souTar][0] * geo[souTar][2];\n\t\t\t\t}\n\t\t\t\telse if (center)\n\t\t\t\t{\n\t\t\t\t\tlimit = geo[souTar][1] + constraint[souTar][1] * geo[souTar][3];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlimit = mxEdgeStyle.limits[souTar][side];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (currentOrientation == 0)\n\t\t\t\t{\n\t\t\t\t\tvar lastX = mxEdgeStyle.wayPoints1[currentIndex][0];\n\t\t\t\t\tvar deltaX = (limit - lastX) * direction[0];\n\n\t\t\t\t\tif (deltaX > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] += direction[0]\n\t\t\t\t\t\t\t\t* deltaX;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar lastY = mxEdgeStyle.wayPoints1[currentIndex][1];\n\t\t\t\t\tvar deltaY = (limit - lastY) * direction[1];\n\n\t\t\t\t\tif (deltaY > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] += direction[1]\n\t\t\t\t\t\t\t\t* deltaY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if (center)\n\t\t\t{\n\t\t\t\t// Which center we're travelling to depend on the current direction\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] += direction[0]\n\t\t\t\t\t\t* Math.abs(mxEdgeStyle.vertexSeperations[directionIndex] / 2);\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] += direction[1]\n\t\t\t\t\t\t* Math.abs(mxEdgeStyle.vertexSeperations[directionIndex] / 2);\n\t\t\t}\n\n\t\t\tif (currentIndex > 0\n\t\t\t\t\t&& mxEdgeStyle.wayPoints1[currentIndex][currentOrientation] == mxEdgeStyle.wayPoints1[currentIndex - 1][currentOrientation])\n\t\t\t{\n\t\t\t\tcurrentIndex--;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlastOrientation = currentOrientation;\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0; i <= currentIndex; i++)\n\t\t{\n\t\t\tif (i == currentIndex)\n\t\t\t{\n\t\t\t\t// Last point can cause last segment to be in\n\t\t\t\t// same direction as jetty/approach. If so,\n\t\t\t\t// check the number of points is consistent\n\t\t\t\t// with the relative orientation of source and target\n\t\t\t\t// jx. Same orientation requires an even\n\t\t\t\t// number of turns (points), different requires\n\t\t\t\t// odd.\n\t\t\t\tvar targetOrientation = (dir[1] & (mxConstants.DIRECTION_MASK_EAST | mxConstants.DIRECTION_MASK_WEST)) > 0 ? 0\n\t\t\t\t\t\t: 1;\n\t\t\t\tvar sameOrient = targetOrientation == initialOrientation ? 0 : 1;\n\n\t\t\t\t// (currentIndex + 1) % 2 is 0 for even number of points,\n\t\t\t\t// 1 for odd\n\t\t\t\tif (sameOrient != (currentIndex + 1) % 2)\n\t\t\t\t{\n\t\t\t\t\t// The last point isn't required\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult.push(new mxPoint(Math.round(mxEdgeStyle.wayPoints1[i][0] * state.view.scale * 10) / 10,\n\t\t\t\t\t\t\t\t\tMath.round(mxEdgeStyle.wayPoints1[i][1] * state.view.scale * 10) / 10));\n\t\t}\n\t\t\n\t\t//console.log(result);\n\n\t\t// Removes duplicates\n\t\tvar index = 1;\n\t\t\n\t\twhile (index < result.length)\n\t\t{\n\t\t\tif (result[index - 1] == null || result[index] == null ||\n\t\t\t\tresult[index - 1].x != result[index].x ||\n\t\t\t\tresult[index - 1].y != result[index].y)\n\t\t\t{\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.splice(index, 1);\n\t\t\t}\n\t\t}\n\t},\n\t\n\tgetRoutePattern: function(dir, quad, dx, dy)\n\t{\n\t\tvar sourceIndex = dir[0] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[0];\n\t\tvar targetIndex = dir[1] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[1];\n\n\t\tsourceIndex -= quad;\n\t\ttargetIndex -= quad;\n\n\t\tif (sourceIndex < 1)\n\t\t{\n\t\t\tsourceIndex += 4;\n\t\t}\n\t\tif (targetIndex < 1)\n\t\t{\n\t\t\ttargetIndex += 4;\n\t\t}\n\n\t\tvar result = routePatterns[sourceIndex - 1][targetIndex - 1];\n\n\t\tif (dx == 0 || dy == 0)\n\t\t{\n\t\t\tif (inlineRoutePatterns[sourceIndex - 1][targetIndex - 1] != null)\n\t\t\t{\n\t\t\t\tresult = inlineRoutePatterns[sourceIndex - 1][targetIndex - 1];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n__mxOutput.mxEdgeStyle = typeof mxEdgeStyle !== 'undefined' ? mxEdgeStyle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxStyleRegistry =\n{\n\t/**\n\t * Class: mxStyleRegistry\n\t *\n\t * Singleton class that acts as a global converter from string to object values\n\t * in a style. This is currently only used to perimeters and edge styles.\n\t * \n\t * Variable: values\n\t *\n\t * Maps from strings to objects.\n\t */\n\tvalues: [],\n\n\t/**\n\t * Function: putValue\n\t *\n\t * Puts the given object into the registry under the given name.\n\t */\n\tputValue: function(name, obj)\n\t{\n\t\tmxStyleRegistry.values[name] = obj;\n\t},\n\n\t/**\n\t * Function: getValue\n\t *\n\t * Returns the value associated with the given name.\n\t */\n\tgetValue: function(name)\n\t{\n\t\treturn mxStyleRegistry.values[name];\n\t},\n\t\n\t/**\n\t * Function: getName\n\t * \n\t * Returns the name for the given value.\n\t */\n\tgetName: function(value)\n\t{\n\t\tfor (var key in mxStyleRegistry.values)\n\t\t{\n\t\t\tif (mxStyleRegistry.values[key] == value)\n\t\t\t{\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\n};\n\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ELBOW, mxEdgeStyle.ElbowConnector);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ENTITY_RELATION, mxEdgeStyle.EntityRelation);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_LOOP, mxEdgeStyle.Loop);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_SIDETOSIDE, mxEdgeStyle.SideToSide);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_TOPTOBOTTOM, mxEdgeStyle.TopToBottom);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ORTHOGONAL, mxEdgeStyle.OrthConnector);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_SEGMENT, mxEdgeStyle.SegmentConnector);\n\nmxStyleRegistry.putValue(mxConstants.PERIMETER_ELLIPSE, mxPerimeter.EllipsePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_RECTANGLE, mxPerimeter.RectanglePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_RHOMBUS, mxPerimeter.RhombusPerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_TRIANGLE, mxPerimeter.TrianglePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_HEXAGON, mxPerimeter.HexagonPerimeter);\n\n__mxOutput.mxStyleRegistry = typeof mxStyleRegistry !== 'undefined' ? mxStyleRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphView\n *\n * Extends <mxEventSource> to implement a view for a graph. This class is in\n * charge of computing the absolute coordinates for the relative child\n * geometries, the points for perimeters and edge styles and keeping them\n * cached in <mxCellStates> for faster retrieval. The states are updated\n * whenever the model or the view state (translate, scale) changes. The scale\n * and translate are honoured in the bounds.\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the root was changed in <setCurrentRoot>. The <code>edit</code>\n * property contains the <mxUndoableEdit> which contains the\n * <mxCurrentRootChange>.\n * \n * Event: mxEvent.SCALE_AND_TRANSLATE\n * \n * Fires after the scale and translate have been changed in <scaleAndTranslate>.\n * The <code>scale</code>, <code>previousScale</code>, <code>translate</code>\n * and <code>previousTranslate</code> properties contain the new and previous\n * scale and translate, respectively.\n * \n * Event: mxEvent.SCALE\n * \n * Fires after the scale was changed in <setScale>. The <code>scale</code> and\n * <code>previousScale</code> properties contain the new and previous scale.\n * \n * Event: mxEvent.TRANSLATE\n * \n * Fires after the translate was changed in <setTranslate>. The\n * <code>translate</code> and <code>previousTranslate</code> properties contain\n * the new and previous value for translate.\n * \n * Event: mxEvent.DOWN and mxEvent.UP\n * \n * Fire if the current root is changed by executing an <mxCurrentRootChange>.\n * The event name depends on the location of the root in the cell hierarchy\n * with respect to the current root. The <code>root</code> and\n * <code>previous</code> properties contain the new and previous root,\n * respectively.\n * \n * Constructor: mxGraphView\n *\n * Constructs a new view for the given <mxGraph>.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphView(graph)\n{\n\tthis.graph = graph;\n\tthis.translate = new mxPoint();\n\tthis.graphBounds = new mxRectangle();\n\tthis.states = new mxDictionary();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphView.prototype = new mxEventSource();\nmxGraphView.prototype.constructor = mxGraphView;\n\n/**\n *\n */\nmxGraphView.prototype.EMPTY_POINT = new mxPoint();\n\n/**\n * Variable: doneResource\n * \n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphView.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Function: updatingDocumentResource\n *\n * Specifies the resource key for the status message while the document is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingDocument'.\n */\nmxGraphView.prototype.updatingDocumentResource = (mxClient.language != 'none') ? 'updatingDocument' : '';\n\n/**\n * Variable: allowEval\n * \n * Specifies if string values in cell styles should be evaluated using\n * <mxUtils.eval>. This will only be used if the string values can't be mapped\n * to objects using <mxStyleRegistry>. Default is false. NOTE: Enabling this\n * switch carries a possible security risk.\n */\nmxGraphView.prototype.allowEval = false;\n\n/**\n * Variable: captureDocumentGesture\n * \n * Specifies if a gesture should be captured when it goes outside of the\n * graph container. Default is true.\n */\nmxGraphView.prototype.captureDocumentGesture = true;\n\n/**\n * Variable: optimizeVmlReflows\n * \n * Specifies if the <canvas> should be hidden while rendering in IE8 standards\n * mode and quirks mode. This will significantly improve rendering performance.\n * Default is true.\n */\nmxGraphView.prototype.optimizeVmlReflows = true;\n\n/**\n * Variable: rendering\n * \n * Specifies if shapes should be created, updated and destroyed using the\n * methods of <mxCellRenderer> in <graph>. Default is true.\n */\nmxGraphView.prototype.rendering = true;\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxGraphView.prototype.graph = null;\n\n/**\n * Variable: currentRoot\n *\n * <mxCell> that acts as the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.currentRoot = null;\n\n/**\n * Variable: graphBounds\n *\n * <mxRectangle> that caches the scales, translated bounds of the current view.\n */\nmxGraphView.prototype.graphBounds = null;\n\n/**\n * Variable: scale\n * \n * Specifies the scale. Default is 1 (100%).\n */\nmxGraphView.prototype.scale = 1;\n\t\n/**\n * Variable: translate\n *\n * <mxPoint> that specifies the current translation. Default is a new\n * empty <mxPoint>.\n */\nmxGraphView.prototype.translate = null;\n\n/**\n * Variable: states\n * \n * <mxDictionary> that maps from cell IDs to <mxCellStates>.\n */\nmxGraphView.prototype.states = null;\n\n/**\n * Variable: updateStyle\n * \n * Specifies if the style should be updated in each validation step. If this\n * is false then the style is only updated if the state is created or if the\n * style of the cell was changed. Default is false.\n */\nmxGraphView.prototype.updateStyle = false;\n\n/**\n * Variable: lastNode\n * \n * During validation, this contains the last DOM node that was processed.\n */\nmxGraphView.prototype.lastNode = null;\n\n/**\n * Variable: lastHtmlNode\n * \n * During validation, this contains the last HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastHtmlNode = null;\n\n/**\n * Variable: lastForegroundNode\n * \n * During validation, this contains the last edge's DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundNode = null;\n\n/**\n * Variable: lastForegroundHtmlNode\n * \n * During validation, this contains the last edge HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundHtmlNode = null;\n\n/**\n * Function: getGraphBounds\n *\n * Returns <graphBounds>.\n */\nmxGraphView.prototype.getGraphBounds = function()\n{\n\treturn this.graphBounds;\n};\n\n/**\n * Function: setGraphBounds\n *\n * Sets <graphBounds>.\n */\nmxGraphView.prototype.setGraphBounds = function(value)\n{\n\tthis.graphBounds = value;\n};\n\n/**\n * Function: getBounds\n * \n * Returns the union of all <mxCellStates> for the given array of <mxCells>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounds should be returned.\n */\nmxGraphView.prototype.getBounds = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.getState(cells[i]);\n\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(state);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(state);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: setCurrentRoot\n *\n * Sets and returns the current root and fires an <undo> event before\n * calling <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * root - <mxCell> that specifies the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.setCurrentRoot = function(root)\n{\n\tif (this.currentRoot != root)\n\t{\n\t\tvar change = new mxCurrentRootChange(this, root);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, true);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t\tthis.graph.sizeDidChange();\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: scaleAndTranslate\n *\n * Sets the scale and translation and fires a <scale> and <translate> event\n * before calling <revalidate> followed by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * scale - Decimal value that specifies the new scale (1 is 100%).\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.scaleAndTranslate = function(scale, dx, dy)\n{\n\tvar previousScale = this.scale;\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\t\n\tif (this.scale != scale || this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.scale = scale;\n\t\t\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE_AND_TRANSLATE,\n\t\t'scale', scale, 'previousScale', previousScale,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: getScale\n * \n * Returns the <scale>.\n */\nmxGraphView.prototype.getScale = function()\n{\n\treturn this.scale;\n};\n\n/**\n * Function: setScale\n *\n * Sets the scale and fires a <scale> event before calling <revalidate> followed\n * by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * value - Decimal value that specifies the new scale (1 is 100%).\n */\nmxGraphView.prototype.setScale = function (value) {\n\tthis.graph.container.style.display = 'none';\n\tvar previousScale = this.scale;\n\n\tif (this.scale != value) {\n\t\tthis.scale = value;\n\n\t\tif (this.isEventsEnabled()) {\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE,\n\t\t'scale', value, 'previousScale', previousScale));\n\n\tthis.graph.container.style.display = '';\n};\n\n/**\n * Function: getTranslate\n * \n * Returns the <translate>.\n */\nmxGraphView.prototype.getTranslate = function()\n{\n\treturn this.translate;\n};\n\n/**\n * Function: setTranslate\n *\n * Sets the translation and fires a <translate> event before calling\n * <revalidate> followed by <mxGraph.sizeDidChange>. The translation is the\n * negative of the origin.\n *\n * Parameters:\n *\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.setTranslate = function(dx, dy)\n{\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\t\n\tif (this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.TRANSLATE,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: viewStateChanged\n * \n * Invoked after <scale> and/or <translate> has changed.\n */\nmxGraphView.prototype.viewStateChanged = function()\n{\n\tthis.revalidate();\n\tthis.graph.sizeDidChange();\n};\n\n/**\n * Function: refresh\n *\n * Clears the view if <currentRoot> is not null and revalidates.\n */\nmxGraphView.prototype.refresh = function()\n{\n\tif (this.currentRoot != null)\n\t{\n\t\tthis.clear();\n\t}\n\t\n\tthis.revalidate();\n};\n\n/**\n * Function: revalidate\n *\n * Revalidates the complete view with all cell states.\n */\nmxGraphView.prototype.revalidate = function()\n{\n\tthis.invalidate();\n\tthis.validate();\n};\n\n/**\n * Function: clear\n *\n * Removes the state of the given cell and all descendants if the given\n * cell is not the current root.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> for which the state should be removed. Default\n * is the root of the model.\n * force - Boolean indicating if the current root should be ignored for\n * recursion.\n */\nmxGraphView.prototype.clear = function(cell, force, recurse)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\tforce = (force != null) ? force : false;\n\trecurse = (recurse != null) ? recurse : true;\n\t\n\tthis.removeState(cell);\n\t\n\tif (recurse && (force || cell != this.currentRoot))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.clear(model.getChildAt(cell, i), force);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.invalidate(cell);\n\t}\n};\n\n/**\n * Function: invalidate\n * \n * Invalidates the state of the given cell, all its descendants and\n * connected edges.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be invalidated. Default is the root of the\n * model.\n */\nmxGraphView.prototype.invalidate = function(cell, recurse, includeEdges)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\trecurse = (recurse != null) ? recurse : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tvar state = this.getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tstate.invalid = true;\n\t}\n\t\n\t// Avoids infinite loops for invalid graphs\n\tif (!cell.invalidating)\n\t{\n\t\tcell.invalidating = true;\n\t\t\n\t\t// Recursively invalidates all descendants\n\t\tif (recurse)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\tthis.invalidate(child, recurse, includeEdges);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Propagates invalidation to all connected edges\n\t\tif (includeEdges)\n\t\t{\n\t\t\tvar edgeCount = model.getEdgeCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t{\n\t\t\t\tthis.invalidate(model.getEdgeAt(cell, i), recurse, includeEdges);\n\t\t\t}\n\t\t}\n\t\t\n\t\tdelete cell.invalidating;\n\t}\n};\n\n/**\n * Function: validate\n * \n * Calls <validateCell> and <validateCellState> and updates the <graphBounds>\n * using <getBoundingBox>. Finally the background is validated using\n * <validateBackground>.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be used as the root of the validation.\n * Default is <currentRoot> or the root of the model.\n */\nmxGraphView.prototype.validate = function(cell)\n{\n\tvar t0 = mxLog.enter('mxGraphView.validate');\n\twindow.status = mxResources.get(this.updatingDocumentResource) ||\n\t\tthis.updatingDocumentResource;\n\t\n\tthis.resetValidationState();\n\t\n\t// Improves IE rendering speed by minimizing reflows\n\tvar prevDisplay = null;\n\t\n\tif (this.optimizeVmlReflows && this.canvas != null && this.textDiv == null &&\n\t\t((document.documentMode == 8 && !mxClient.IS_EM) || mxClient.IS_QUIRKS))\n\t{\n\t\t// Placeholder keeps scrollbar positions when canvas is hidden\n\t\tthis.placeholder = document.createElement('div');\n\t\tthis.placeholder.style.position = 'absolute';\n\t\tthis.placeholder.style.width = this.canvas.clientWidth + 'px';\n\t\tthis.placeholder.style.height = this.canvas.clientHeight + 'px';\n\t\tthis.canvas.parentNode.appendChild(this.placeholder);\n\n\t\tprevDisplay = this.drawPane.style.display;\n\t\tthis.canvas.style.display = 'none';\n\t\t\n\t\t// Creates temporary DIV used for text measuring in mxText.updateBoundingBox\n\t\tthis.textDiv = document.createElement('div');\n\t\tthis.textDiv.style.position = 'absolute';\n\t\tthis.textDiv.style.whiteSpace = 'nowrap';\n\t\tthis.textDiv.style.visibility = 'hidden';\n\t\tthis.textDiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tthis.textDiv.style.zoom = '1';\n\t\t\n\t\tdocument.body.appendChild(this.textDiv);\n\t}\n\t\n\tvar graphBounds = this.getBoundingBox(this.validateCellState(\n\t\tthis.validateCell(cell || ((this.currentRoot != null) ?\n\t\t\tthis.currentRoot : this.graph.getModel().getRoot()))));\n\tthis.setGraphBounds((graphBounds != null) ? graphBounds : this.getEmptyBounds());\n\tthis.validateBackground();\n\t\n\tif (prevDisplay != null)\n\t{\n\t\tthis.canvas.style.display = prevDisplay;\n\t\tthis.textDiv.parentNode.removeChild(this.textDiv);\n\t\t\n\t\tif (this.placeholder != null)\n\t\t{\n\t\t\tthis.placeholder.parentNode.removeChild(this.placeholder);\n\t\t}\n\t\t\t\t\n\t\t// Textdiv cannot be reused\n\t\tthis.textDiv = null;\n\t}\n\t\n\tthis.resetValidationState();\n\t\n\twindow.status = mxResources.get(this.doneResource) ||\n\t\tthis.doneResource;\n\tmxLog.leave('mxGraphView.validate', t0);\n};\n\n/**\n * Function: getEmptyBounds\n * \n * Returns the bounds for an empty graph. This returns a rectangle at\n * <translate> with the size of 0 x 0.\n */\nmxGraphView.prototype.getEmptyBounds = function()\n{\n\treturn new mxRectangle(this.translate.x * this.scale, this.translate.y * this.scale);\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the bounding box of the shape and the label for the given\n * <mxCellState> and its children if recurse is true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose bounding box should be returned.\n * recurse - Optional boolean indicating if the children should be included.\n * Default is true.\n */\nmxGraphView.prototype.getBoundingBox = function(state, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar bbox = null;\n\t\n\tif (state != null)\n\t{\n\t\tif (state.shape != null && state.shape.boundingBox != null)\n\t\t{\n\t\t\tbbox = state.shape.boundingBox.clone();\n\t\t}\n\t\t\n\t\t// Adds label bounding box to graph bounds\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (bbox != null)\n\t\t\t{\n\t\t\t\tbbox.add(state.text.boundingBox);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox = state.text.boundingBox.clone();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (recurse)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(state.cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar bounds = this.getBoundingBox(this.getState(model.getChildAt(state.cell, i)));\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (bbox == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = bounds;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox.add(bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bbox;\n};\n\n/**\n * Function: createBackgroundPageShape\n *\n * Creates and returns the shape used as the background page.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that represents the bounds of the shape.\n */\nmxGraphView.prototype.createBackgroundPageShape = function(bounds)\n{\n\treturn new mxRectangleShape(bounds, 'white', 'black');\n};\n\n/**\n * Function: validateBackground\n *\n * Calls <validateBackgroundImage> and <validateBackgroundPage>.\n */\nmxGraphView.prototype.validateBackground = function()\n{\n\tthis.validateBackgroundImage();\n\tthis.validateBackgroundPage();\n};\n\n/**\n * Function: validateBackgroundImage\n * \n * Validates the background image.\n */\nmxGraphView.prototype.validateBackgroundImage = function()\n{\n\tvar bg = this.graph.getBackgroundImage();\n\t\n\tif (bg != null)\n\t{\n\t\tif (this.backgroundImage == null || this.backgroundImage.image != bg.src)\n\t\t{\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tthis.backgroundImage.destroy();\n\t\t\t}\n\t\t\t\n\t\t\tvar bounds = new mxRectangle(0, 0, 1, 1);\n\t\t\t\n\t\t\tthis.backgroundImage = new mxImageShape(bounds, bg.src);\n\t\t\tthis.backgroundImage.dialect = this.graph.dialect;\n\t\t\tthis.backgroundImage.init(this.backgroundPane);\n\t\t\tthis.backgroundImage.redraw();\n\n\t\t\t// Workaround for ignored event on background in IE8 standards mode\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tmxEvent.addGestureListeners(this.backgroundImage.node,\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.redrawBackgroundImage(this.backgroundImage, bg);\n\t}\n\telse if (this.backgroundImage != null)\n\t{\n\t\tthis.backgroundImage.destroy();\n\t\tthis.backgroundImage = null;\n\t}\n};\n\n/**\n * Function: validateBackgroundPage\n * \n * Validates the background page.\n */\nmxGraphView.prototype.validateBackgroundPage = function()\n{\n\tif (this.graph.pageVisible)\n\t{\n\t\tvar bounds = this.getBackgroundPageBounds();\n\t\t\n\t\tif (this.backgroundPageShape == null)\n\t\t{\n\t\t\tthis.backgroundPageShape = this.createBackgroundPageShape(bounds);\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.isShadow = true;\n\t\t\tthis.backgroundPageShape.dialect = this.graph.dialect;\n\t\t\tthis.backgroundPageShape.init(this.backgroundPane);\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t\t\n\t\t\t// Adds listener for double click handling on background\n\t\t\tif (this.graph.nativeDblClickEnabled)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(this.backgroundPageShape.node, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.dblClick(evt);\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t\t// container and finishing the handling of a single gesture\n\t\t\tmxEvent.addGestureListeners(this.backgroundPageShape.node,\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\t\t\tif (this.graph.tooltipHandler != null && this.graph.tooltipHandler.isHideOnHover())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.tooltipHandler.hide();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.graph.isMouseDown && !mxEvent.isConsumed(evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.bounds = bounds;\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t}\n\t}\n\telse if (this.backgroundPageShape != null)\n\t{\n\t\tthis.backgroundPageShape.destroy();\n\t\tthis.backgroundPageShape = null;\n\t}\n};\n\n/**\n * Function: getBackgroundPageBounds\n * \n * Returns the bounds for the background page.\n */\nmxGraphView.prototype.getBackgroundPageBounds = function()\n{\n\tvar fmt = this.graph.pageFormat;\n\tvar ps = this.scale * this.graph.pageScale;\n\tvar bounds = new mxRectangle(this.scale * this.translate.x, this.scale * this.translate.y,\n\t\t\tfmt.width * ps, fmt.height * ps);\n\t\n\treturn bounds;\n};\n\n/**\n * Function: redrawBackgroundImage\n *\n * Updates the bounds and redraws the background image.\n * \n * Example:\n * \n * If the background image should not be scaled, this can be replaced with\n * the following.\n * \n * (code)\n * mxGraphView.prototype.redrawBackground = function(backgroundImage, bg)\n * {\n *   backgroundImage.bounds.x = this.translate.x;\n *   backgroundImage.bounds.y = this.translate.y;\n *   backgroundImage.bounds.width = bg.width;\n *   backgroundImage.bounds.height = bg.height;\n *\n *   backgroundImage.redraw();\n * };\n * (end)\n * \n * Parameters:\n * \n * backgroundImage - <mxImageShape> that represents the background image.\n * bg - <mxImage> that specifies the image and its dimensions.\n */\nmxGraphView.prototype.redrawBackgroundImage = function(backgroundImage, bg)\n{\n\tbackgroundImage.scale = this.scale;\n\tbackgroundImage.bounds.x = this.scale * this.translate.x;\n\tbackgroundImage.bounds.y = this.scale * this.translate.y;\n\tbackgroundImage.bounds.width = this.scale * bg.width;\n\tbackgroundImage.bounds.height = this.scale * bg.height;\n\n\tbackgroundImage.redraw();\n};\n\n/**\n * Function: validateCell\n * \n * Recursively creates the cell state for the given cell if visible is true and\n * the given cell is visible. If the cell is not visible but the state exists\n * then it is removed using <removeState>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose <mxCellState> should be created.\n * visible - Optional boolean indicating if the cell should be visible. Default\n * is true.\n */\nmxGraphView.prototype.validateCell = function(cell, visible)\n{\n\tvisible = (visible != null) ? visible : true;\n\t\n\tif (cell != null)\n\t{\n\t\tvisible = visible && this.graph.isCellVisible(cell);\n\t\tvar state = this.getState(cell, visible);\n\t\t\n\t\tif (state != null && !visible)\n\t\t{\n\t\t\tthis.removeState(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tthis.validateCell(model.getChildAt(cell, i), visible &&\n\t\t\t\t\t(!this.isCellCollapsed(cell) || cell == this.currentRoot));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: validateCellState\n * \n * Validates and repaints the <mxCellState> for the given <mxCell>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose <mxCellState> should be validated.\n * recurse - Optional boolean indicating if the children of the cell should be\n * validated. Default is true.\n */\nmxGraphView.prototype.validateCellState = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\t\n\t\t\tif (state.invalid)\n\t\t\t{\n\t\t\t\tstate.invalid = false;\n\t\t\t\t\n\t\t\t\tif (state.style == null || state.invalidStyle)\n\t\t\t\t{\n\t\t\t\t\tstate.style = this.graph.getCellStyle(state.cell);\n\t\t\t\t\tstate.invalidStyle = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (cell != this.currentRoot)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getParent(cell), false);\n\t\t\t\t}\n\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, true), false), true);\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, false), false), false);\n\t\t\t\t\n\t\t\t\tthis.updateCellState(state);\n\t\t\t\t\n\t\t\t\t// Repaint happens immediately after the cell is validated\n\t\t\t\tif (cell != this.currentRoot && !state.invalid)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.cellRenderer.redraw(state, false, this.isRendering());\n\n\t\t\t\t\t// Handles changes to invertex paintbounds after update of rendering shape\n\t\t\t\t\tstate.updateCachedBounds();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (recurse && !state.invalid)\n\t\t\t{\n\t\t\t\t// Updates order in DOM if recursively traversing\n\t\t\t\tif (state.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.stateValidated(state);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: updateCellState\n * \n * Updates the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to be updated.\n */\nmxGraphView.prototype.updateCellState = function(state)\n{\n\tstate.absoluteOffset.x = 0;\n\tstate.absoluteOffset.y = 0;\n\tstate.origin.x = 0;\n\tstate.origin.y = 0;\n\tstate.length = 0;\n\t\n\tif (state.cell != this.currentRoot)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\tvar pState = this.getState(model.getParent(state.cell)); \n\t\t\n\t\tif (pState != null && pState.cell != this.currentRoot)\n\t\t{\n\t\t\tstate.origin.x += pState.origin.x;\n\t\t\tstate.origin.y += pState.origin.y;\n\t\t}\n\t\t\n\t\tvar offset = this.graph.getChildOffsetForCell(state.cell);\n\t\t\n\t\tif (offset != null)\n\t\t{\n\t\t\tstate.origin.x += offset.x;\n\t\t\tstate.origin.y += offset.y;\n\t\t}\n\t\t\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\t\t\t\t\n\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (!model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\toffset = (geo.offset != null) ? geo.offset : this.EMPTY_POINT;\n\t\n\t\t\t\tif (geo.relative && pState != null)\n\t\t\t\t{\n\t\t\t\t\tif (model.isEdge(pState.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar origin = this.getPoint(pState, geo);\n\n\t\t\t\t\t\tif (origin != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.origin.x += (origin.x / this.scale) - pState.origin.x - this.translate.x;\n\t\t\t\t\t\t\tstate.origin.y += (origin.y / this.scale) - pState.origin.y - this.translate.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.origin.x += geo.x * pState.unscaledWidth + offset.x;\n\t\t\t\t\t\tstate.origin.y += geo.y * pState.unscaledHeight + offset.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstate.absoluteOffset.x = this.scale * offset.x;\n\t\t\t\t\tstate.absoluteOffset.y = this.scale * offset.y;\n\t\t\t\t\tstate.origin.x += geo.x;\n\t\t\t\t\tstate.origin.y += geo.y;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tstate.x = this.scale * (this.translate.x + state.origin.x);\n\t\t\tstate.y = this.scale * (this.translate.y + state.origin.y);\n\t\t\tstate.width = this.scale * geo.width;\n\t\t\tstate.unscaledWidth = geo.width;\n\t\t\tstate.height = this.scale * geo.height;\n\t\t\tstate.unscaledHeight = geo.height;\n\t\t\t\n\t\t\tif (model.isVertex(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateVertexState(state, geo);\n\t\t\t}\n\t\t\t\n\t\t\tif (model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(state, geo);\n\t\t\t}\n\t\t}\n\t}\n\n\tstate.updateCachedBounds();\n};\n\n/**\n * Function: isCellCollapsed\n * \n * Returns true if the children of the given cell should not be visible in the\n * view. This implementation uses <mxGraph.isCellVisible> but it can be\n * overidden to use a separate condition.\n */\nmxGraphView.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.graph.isCellCollapsed(cell);\n};\n\n/**\n * Function: updateVertexState\n * \n * Validates the given cell state.\n */\nmxGraphView.prototype.updateVertexState = function(state, geo)\n{\n\tvar model = this.graph.getModel();\n\tvar pState = this.getState(model.getParent(state.cell));\n\t\n\tif (geo.relative && pState != null && !model.isEdge(pState.cell))\n\t{\n\t\tvar alpha = mxUtils.toRadians(pState.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\t\t\tstate.x = pt.x - state.width / 2;\n\t\t\tstate.y = pt.y - state.height / 2;\n\t\t}\n\t}\n\t\n\tthis.updateVertexLabelOffset(state);\n};\n\n/**\n * Function: updateEdgeState\n * \n * Validates the given cell state.\n */\nmxGraphView.prototype.updateEdgeState = function(state, geo)\n{\n\tvar source = state.getVisibleTerminalState(true);\n\tvar target = state.getVisibleTerminalState(false);\n\t\n\t// This will remove edges with no terminals and no terminal points\n\t// as such edges are invalid and produce NPEs in the edge styles.\n\t// Also removes connected edges that have no visible terminals.\n\tif ((this.graph.model.getTerminal(state.cell, true) != null && source == null) ||\n\t\t(source == null && geo.getTerminalPoint(true) == null) ||\n\t\t(this.graph.model.getTerminal(state.cell, false) != null && target == null) ||\n\t\t(target == null && geo.getTerminalPoint(false) == null))\n\t{\n\t\tthis.clear(state.cell, true);\n\t}\n\telse\n\t{\n\t\tthis.updateFixedTerminalPoints(state, source, target);\n\t\tthis.updatePoints(state, geo.points, source, target);\n\t\tthis.updateFloatingTerminalPoints(state, source, target);\n\t\t\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tif (state.cell != this.currentRoot && (pts == null || pts.length < 2 ||\n\t\t\tpts[0] == null || pts[pts.length - 1] == null))\n\t\t{\n\t\t\t// This will remove edges with invalid points from the list of states in the view.\n\t\t\t// Happens if the one of the terminals and the corresponding terminal point is null.\n\t\t\tthis.clear(state.cell, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateEdgeBounds(state);\n\t\t\tthis.updateEdgeLabelOffset(state);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateVertexLabelOffset\n * \n * Updates the absoluteOffset of the given vertex cell state. This takes\n * into account the label position styles.\n * \n * Parameters:\n * \n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateVertexLabelOffset = function(state)\n{\n\tvar h = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\n\tif (h == mxConstants.ALIGN_LEFT)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tif (lw != null)\n\t\t{\n\t\t\tlw *= this.scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlw = state.width;\n\t\t}\n\t\t\n\t\tstate.absoluteOffset.x -= lw;\n\t}\n\telse if (h == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstate.absoluteOffset.x += state.width;\n\t}\n\telse if (h == mxConstants.ALIGN_CENTER)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tif (lw != null)\n\t\t{\n\t\t\t// Aligns text block with given width inside the vertex width\n\t\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER);\n\t\t\tvar dx = 0;\n\t\t\t\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tdx = 0.5;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tdx = 1;\n\t\t\t}\n\t\t\t\n\t\t\tif (dx != 0)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset.x -= (lw * this.scale - state.width) * dx;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar v = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\n\tif (v == mxConstants.ALIGN_TOP)\n\t{\n\t\tstate.absoluteOffset.y -= state.height;\n\t}\n\telse if (v == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tstate.absoluteOffset.y += state.height;\n\t}\n};\n\n/**\n * Function: resetValidationState\n *\n * Resets the current validation state.\n */\nmxGraphView.prototype.resetValidationState = function()\n{\n\tthis.lastNode = null;\n\tthis.lastHtmlNode = null;\n\tthis.lastForegroundNode = null;\n\tthis.lastForegroundHtmlNode = null;\n};\n\n/**\n * Function: stateValidated\n * \n * Invoked when a state has been processed in <validatePoints>. This is used\n * to update the order of the DOM nodes of the shape.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the cell state.\n */\nmxGraphView.prototype.stateValidated = function(state)\n{\n\tvar fg = (this.graph.getModel().isEdge(state.cell) && this.graph.keepEdgesInForeground) ||\n\t\t(this.graph.getModel().isVertex(state.cell) && this.graph.keepEdgesInBackground);\n\tvar htmlNode = (fg) ? this.lastForegroundHtmlNode || this.lastHtmlNode : this.lastHtmlNode;\n\tvar node = (fg) ? this.lastForegroundNode || this.lastNode : this.lastNode;\n\tvar result = this.graph.cellRenderer.insertStateAfter(state, node, htmlNode);\n\n\tif (fg)\n\t{\n\t\tthis.lastForegroundHtmlNode = result[1];\n\t\tthis.lastForegroundNode = result[0];\n\t}\n\telse\n\t{\n\t\tthis.lastHtmlNode = result[1];\n\t\tthis.lastNode = result[0];\n\t}\n};\n\n/**\n * Function: updateFixedTerminalPoints\n *\n * Sets the initial absolute terminal points in the given state before the edge\n * style is computed.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose initial terminal points should be updated.\n * source - <mxCellState> which represents the source terminal.\n * target - <mxCellState> which represents the target terminal.\n */\nmxGraphView.prototype.updateFixedTerminalPoints = function(edge, source, target)\n{\n\tthis.updateFixedTerminalPoint(edge, source, true,\n\t\tthis.graph.getConnectionConstraint(edge, source, true));\n\tthis.updateFixedTerminalPoint(edge, target, false,\n\t\tthis.graph.getConnectionConstraint(edge, target, false));\n};\n\n/**\n * Function: updateFixedTerminalPoint\n *\n * Sets the fixed source or target terminal point on the given edge.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be updated.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.updateFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFixedTerminalPoint(edge, terminal, source, constraint), source);\n};\n\n/**\n * Function: getFixedTerminalPoint\n *\n * Returns the fixed source or target terminal point for the given edge.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be returned.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.getFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tvar pt = null;\n\t\n\tif (constraint != null)\n\t{\n\t\tpt = this.graph.getConnectionPoint(terminal, constraint, false); // FIXME Rounding introduced bugs when calculating label positions -> , this.graph.isOrthogonal(edge));\n\t}\n\t\n\tif (pt == null && terminal == null)\n\t{\n\t\tvar s = this.scale;\n\t\tvar tr = this.translate;\n\t\tvar orig = edge.origin;\n\t\tvar geo = this.graph.getCellGeometry(edge.cell);\n\t\tpt = geo.getTerminalPoint(source);\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = new mxPoint(s * (tr.x + pt.x + orig.x),\n\t\t\t\t\t\t\t s * (tr.y + pt.y + orig.y));\n\t\t}\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: updateBoundsFromStencil\n * \n * Updates the bounds of the given cell state to reflect the bounds of the stencil\n * if it has a fixed aspect and returns the previous bounds as an <mxRectangle> if\n * the bounds have been modified or null otherwise.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateBoundsFromStencil = function(state)\n{\n\tvar previous = null;\n\t\n\tif (state != null && state.shape != null && state.shape.stencil != null && state.shape.stencil.aspect == 'fixed')\n\t{\n\t\tprevious = mxRectangle.fromRectangle(state);\n\t\tvar asp = state.shape.stencil.computeAspect(state.style, state.x, state.y, state.width, state.height);\n\t\tstate.setRect(asp.x, asp.y, state.shape.stencil.w0 * asp.width, state.shape.stencil.h0 * asp.height);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: updatePoints\n *\n * Updates the absolute points in the given state using the specified array\n * of <mxPoints> as the relative points.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose absolute points should be updated.\n * points - Array of <mxPoints> that constitute the relative points.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updatePoints = function(edge, points, source, target)\n{\n\tif (edge != null)\n\t{\n\t\tvar pts = [];\n\t\tpts.push(edge.absolutePoints[0]);\n\t\tvar edgeStyle = this.getEdgeStyle(edge, points, source, target);\n\t\t\n\t\tif (edgeStyle != null)\n\t\t{\n\t\t\tvar src = this.getTerminalPort(edge, source, true);\n\t\t\tvar trg = this.getTerminalPort(edge, target, false);\n\t\t\t\n\t\t\t// Uses the stencil bounds for routing and restores after routing\n\t\t\tvar srcBounds = this.updateBoundsFromStencil(src);\n\t\t\tvar trgBounds = this.updateBoundsFromStencil(trg);\n\n\t\t\tedgeStyle(edge, src, trg, points, pts);\n\t\t\t\n\t\t\t// Restores previous bounds\n\t\t\tif (srcBounds != null)\n\t\t\t{\n\t\t\t\tsrc.setRect(srcBounds.x, srcBounds.y, srcBounds.width, srcBounds.height);\n\t\t\t}\n\t\t\t\n\t\t\tif (trgBounds != null)\n\t\t\t{\n\t\t\t\ttrg.setRect(trgBounds.x, trgBounds.y, trgBounds.width, trgBounds.height);\n\t\t\t}\n\t\t}\n\t\telse if (points != null)\n\t\t{\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tif (points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tvar pt = mxUtils.clone(points[i]);\n\t\t\t\t\tpts.push(this.transformControlPoint(edge, pt));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar tmp = edge.absolutePoints;\n\t\tpts.push(tmp[tmp.length-1]);\n\n\t\tedge.absolutePoints = pts;\n\t}\n};\n\n/**\n * Function: transformControlPoint\n *\n * Transforms the given control point to an absolute point.\n */\nmxGraphView.prototype.transformControlPoint = function(state, pt, ignoreScale)\n{\n\tif (state != null && pt != null)\n\t{\n\t\tvar orig = state.origin;\n\t\tvar scale = ignoreScale ? 1 : this.scale\n\t\t\n\t    return new mxPoint(scale * (pt.x + this.translate.x + orig.x),\n\t    \t\tscale * (pt.y + this.translate.y + orig.y));\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: isLoopStyleEnabled\n * \n * Returns true if the given edge should be routed with <mxGraph.defaultLoopStyle>\n * or the <mxConstants.STYLE_LOOP> defined for the given edge. This implementation\n * returns true if the given edge is a loop and does not have connections constraints\n * associated.\n */\nmxGraphView.prototype.isLoopStyleEnabled = function(edge, points, source, target)\n{\n\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\t\n\tif ((points == null || points.length < 2) &&\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_ORTHOGONAL_LOOP, false) ||\n\t\t((sc == null || sc.point == null) && (tc == null || tc.point == null))))\n\t{\n\t\treturn source != null && source == target;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getEdgeStyle\n * \n * Returns the edge style function to be used to render the given edge state.\n */\nmxGraphView.prototype.getEdgeStyle = function(edge, points, source, target)\n{\n\tvar edgeStyle = this.isLoopStyleEnabled(edge, points, source, target) ?\n\t\tmxUtils.getValue(edge.style, mxConstants.STYLE_LOOP, this.graph.defaultLoopStyle) :\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_NOEDGESTYLE, false) ?\n\t\tedge.style[mxConstants.STYLE_EDGE] : null);\n\n\t// Converts string values to objects\n\tif (typeof(edgeStyle) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(edgeStyle);\n\t\t\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(edgeStyle);\n\t\t}\n\t\t\n\t\tedgeStyle = tmp;\n\t}\n\t\n\tif (typeof(edgeStyle) == \"function\")\n\t{\n\t\treturn edgeStyle;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: updateFloatingTerminalPoints\n *\n * Updates the terminal points in the given state after the edge style was\n * computed for the edge.\n * \n * Parameters:\n * \n * state - <mxCellState> whose terminal points should be updated.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updateFloatingTerminalPoints = function(state, source, target)\n{\n\tvar pts = state.absolutePoints;\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\n\tif (pe == null && target != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, target, source, false);\n\t}\n\t\n\tif (p0 == null && source != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, source, target, true);\n\t}\n};\n\n/**\n * Function: updateFloatingTerminalPoint\n *\n * Updates the absolute terminal point in the given state for the given\n * start and end state, where start is the source if source is true.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be updated.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.updateFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFloatingTerminalPoint(edge, start, end, source), source);\n};\n\n/**\n * Function: getFloatingTerminalPoint\n * \n * Returns the floating terminal point for the given edge, start and end\n * state, where start is the source if source is true.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be returned.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.getFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tstart = this.getTerminalPort(edge, start, source);\n\tvar next = this.getNextPoint(edge, end, source);\n\t\n\tvar orth = this.graph.isOrthogonal(edge);\n\tvar alpha = mxUtils.toRadians(Number(start.style[mxConstants.STYLE_ROTATION] || '0'));\n\tvar center = new mxPoint(start.getCenterX(), start.getCenterY());\n\t\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(-alpha);\n\t\tvar sin = Math.sin(-alpha);\n\t\tnext = mxUtils.getRotatedPoint(next, cos, sin, center);\n\t}\n\t\n\tvar border = parseFloat(edge.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\tborder += parseFloat(edge.style[(source) ?\n\t\tmxConstants.STYLE_SOURCE_PERIMETER_SPACING :\n\t\tmxConstants.STYLE_TARGET_PERIMETER_SPACING] || 0);\n\tvar pt = this.getPerimeterPoint(start, next, alpha == 0 && orth, border);\n\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, center);\n\t}\n\n\treturn pt;\n};\n\n/**\n * Function: getTerminalPort\n * \n * Returns an <mxCellState> that represents the source or target terminal or\n * port for the given edge.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the given terminal is the source terminal.\n */\nmxGraphView.prototype.getTerminalPort = function(state, terminal, source)\n{\n\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\tmxConstants.STYLE_TARGET_PORT;\n\tvar id = mxUtils.getValue(state.style, key);\n\t\n\tif (id != null)\n\t{\n\t\tvar tmp = this.getState(this.graph.getModel().getCell(id));\n\t\t\n\t\t// Only uses ports where a cell state exists\n\t\tif (tmp != null)\n\t\t{\n\t\t\tterminal = tmp;\n\t\t}\n\t}\n\t\n\treturn terminal;\n};\n\n/**\n * Function: getPerimeterPoint\n *\n * Returns an <mxPoint> that defines the location of the intersection point between\n * the perimeter and the line between the center of the shape and the given point.\n * \n * Parameters:\n * \n * terminal - <mxCellState> for the source or target terminal.\n * next - <mxPoint> that lies outside of the given terminal.\n * orthogonal - Boolean that specifies if the orthogonal projection onto\n * the perimeter should be returned. If this is false then the intersection\n * of the perimeter and the line between the next and the center point is\n * returned.\n * border - Optional border between the perimeter and the shape.\n */\nmxGraphView.prototype.getPerimeterPoint = function(terminal, next, orthogonal, border)\n{\n\tvar point = null;\n\t\n\tif (terminal != null)\n\t{\n\t\tvar perimeter = this.getPerimeterFunction(terminal);\n\t\t\n\t\tif (perimeter != null && next != null)\n\t\t{\n\t\t\tvar bounds = this.getPerimeterBounds(terminal, border);\n\n\t\t\tif (bounds.width > 0 || bounds.height > 0)\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(next.x, next.y);\n\t\t\t\tvar flipH = false;\n\t\t\t\tvar flipV = false;\t\n\t\t\t\t\n\t\t\t\tif (this.graph.model.isVertex(terminal.cell))\n\t\t\t\t{\n\t\t\t\t\tflipH = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tflipV = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\n\t\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\t\tif (terminal.shape != null && terminal.shape.stencil != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tflipH = (mxUtils.getValue(terminal.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\t\tflipV = (mxUtils.getValue(terminal.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpoint = perimeter(bounds, terminal, point, orthogonal);\n\n\t\t\t\tif (point != null)\n\t\t\t\t{\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (point == null)\n\t\t{\n\t\t\tpoint = this.getPoint(terminal);\n\t\t}\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getRoutingCenterX\n * \n * Returns the x-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterX = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_X]) || 0 : 0;\n\n\treturn state.getCenterX() + f * state.width;\n};\n\n/**\n * Function: getRoutingCenterY\n * \n * Returns the y-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterY = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_Y]) || 0 : 0;\n\n\treturn state.getCenterY() + f * state.height;\n};\n\n/**\n * Function: getPerimeterBounds\n *\n * Returns the perimeter bounds for the given terminal, edge pair as an\n * <mxRectangle>.\n * \n * If you have a model where each terminal has a relative child that should\n * act as the graphical endpoint for a connection from/to the terminal, then\n * this method can be replaced as follows:\n * \n * (code)\n * var oldGetPerimeterBounds = mxGraphView.prototype.getPerimeterBounds;\n * mxGraphView.prototype.getPerimeterBounds = function(terminal, edge, isSource)\n * {\n *   var model = this.graph.getModel();\n *   var childCount = model.getChildCount(terminal.cell);\n * \n *   if (childCount > 0)\n *   {\n *     var child = model.getChildAt(terminal.cell, 0);\n *     var geo = model.getGeometry(child);\n *\n *     if (geo != null &&\n *         geo.relative)\n *     {\n *       var state = this.getState(child);\n *       \n *       if (state != null)\n *       {\n *         terminal = state;\n *       }\n *     }\n *   }\n *   \n *   return oldGetPerimeterBounds.apply(this, arguments);\n * };\n * (end)\n * \n * Parameters:\n * \n * terminal - <mxCellState> that represents the terminal.\n * border - Number that adds a border between the shape and the perimeter.\n */\nmxGraphView.prototype.getPerimeterBounds = function(terminal, border)\n{\n\tborder = (border != null) ? border : 0;\n\n\tif (terminal != null)\n\t{\n\t\tborder += parseFloat(terminal.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\t}\n\n\treturn terminal.getPerimeterBounds(border * this.scale);\n};\n\n/**\n * Function: getPerimeterFunction\n *\n * Returns the perimeter function for the given state.\n */\nmxGraphView.prototype.getPerimeterFunction = function(state)\n{\n\tvar perimeter = state.style[mxConstants.STYLE_PERIMETER];\n\n\t// Converts string values to objects\n\tif (typeof(perimeter) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(perimeter);\n\t\t\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(perimeter);\n\t\t}\n\n\t\tperimeter = tmp;\n\t}\n\t\n\tif (typeof(perimeter) == \"function\")\n\t{\n\t\treturn perimeter;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getNextPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n * opposite - <mxCellState> that represents the opposite terminal.\n * source - Boolean indicating if the next point for the source or target\n * should be returned.\n */\nmxGraphView.prototype.getNextPoint = function(edge, opposite, source)\n{\n\tvar pts = edge.absolutePoints;\n\tvar point = null;\n\t\n\tif (pts != null && pts.length >= 2)\n\t{\n\t\tvar count = pts.length;\n\t\tpoint = pts[(source) ? Math.min(1, count - 1) : Math.max(0, count - 2)];\n\t}\n\t\n\tif (point == null && opposite != null)\n\t{\n\t\tpoint = new mxPoint(opposite.getCenterX(), opposite.getCenterY());\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getVisibleTerminal\n *\n * Returns the nearest ancestor terminal that is visible. The edge appears\n * to be connected to this terminal on the display. The result of this method\n * is cached in <mxCellState.getVisibleTerminalState>.\n * \n * Parameters:\n * \n * edge - <mxCell> whose visible terminal should be returned.\n * source - Boolean that specifies if the source or target terminal\n * should be returned.\n */\nmxGraphView.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar model = this.graph.getModel();\n\tvar result = model.getTerminal(edge, source);\n\tvar best = result;\n\t\n\twhile (result != null && result != this.currentRoot)\n\t{\n\t\tif (!this.graph.isCellVisible(best) || this.isCellCollapsed(result))\n\t\t{\n\t\t\tbest = result;\n\t\t}\n\t\t\n\t\tresult = model.getParent(result);\n\t}\n\n\t// Checks if the result is valid for the current view state\n\tif (best != null && (!model.contains(best) ||\n\t\tmodel.getParent(best) == model.getRoot() ||\n\t\tbest == this.currentRoot))\n\t{\n\t\tbest = null;\n\t}\n\t\n\treturn best;\n};\n\n/**\n * Function: updateEdgeBounds\n *\n * Updates the given state using the bounding box of t\n * he absolute points.\n * Also updates <mxCellState.terminalDistance>, <mxCellState.length> and\n * <mxCellState.segments>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateEdgeBounds = function(state)\n{\n\tvar points = state.absolutePoints;\n\tvar p0 = points[0];\n\tvar pe = points[points.length - 1];\n\t\n\tif (p0.x != pe.x || p0.y != pe.y)\n\t{\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\t\tstate.terminalDistance = Math.sqrt(dx * dx + dy * dy);\n\t}\n\telse\n\t{\n\t\tstate.terminalDistance = 0;\n\t}\n\t\n\tvar length = 0;\n\tvar segments = [];\n\tvar pt = p0;\n\t\n\tif (pt != null)\n\t{\n\t\tvar minX = pt.x;\n\t\tvar minY = pt.y;\n\t\tvar maxX = minX;\n\t\tvar maxY = minY;\n\t\t\n\t\tfor (var i = 1; i < points.length; i++)\n\t\t{\n\t\t\tvar tmp = points[i];\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar dx = pt.x - tmp.x;\n\t\t\t\tvar dy = pt.y - tmp.y;\n\t\t\t\t\n\t\t\t\tvar segment = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tsegments.push(segment);\n\t\t\t\tlength += segment;\n\t\t\t\t\n\t\t\t\tpt = tmp;\n\t\t\t\t\n\t\t\t\tminX = Math.min(pt.x, minX);\n\t\t\t\tminY = Math.min(pt.y, minY);\n\t\t\t\tmaxX = Math.max(pt.x, maxX);\n\t\t\t\tmaxY = Math.max(pt.y, maxY);\n\t\t\t}\n\t\t}\n\t\t\n\t\tstate.length = length;\n\t\tstate.segments = segments;\n\t\t\n\t\tvar markerSize = 1; // TODO: include marker size\n\t\t\n\t\tstate.x = minX;\n\t\tstate.y = minY;\n\t\tstate.width = Math.max(markerSize, maxX - minX);\n\t\tstate.height = Math.max(markerSize, maxY - minY);\n\t}\n};\n\n/**\n * Function: getPoint\n *\n * Returns the absolute point on the edge for the given relative\n * <mxGeometry> as an <mxPoint>. The edge is represented by the given\n * <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the parent edge.\n * geometry - <mxGeometry> that represents the relative location.\n */\nmxGraphView.prototype.getPoint = function(state, geometry)\n{\n\tvar x = state.getCenterX();\n\tvar y = state.getCenterY();\n\t\n\tif (state.segments != null && (geometry == null || geometry.relative))\n\t{\n\t\tvar gx = (geometry != null) ? geometry.x / 2 : 0;\n\t\tvar pointCount = state.absolutePoints.length;\n\t\tvar dist = Math.round((gx + 0.5) * state.length);\n\t\tvar segment = state.segments[0];\n\t\tvar length = 0;\t\t\t\t\n\t\tvar index = 1;\n\n\t\twhile (dist >= Math.round(length + segment) && index < pointCount - 1)\n\t\t{\n\t\t\tlength += segment;\n\t\t\tsegment = state.segments[index++];\n\t\t}\n\n\t\tvar factor = (segment == 0) ? 0 : (dist - length) / segment;\n\t\tvar p0 = state.absolutePoints[index-1];\n\t\tvar pe = state.absolutePoints[index];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar gy = 0;\n\t\t\tvar offsetX = 0;\n\t\t\tvar offsetY = 0;\n\n\t\t\tif (geometry != null)\n\t\t\t{\n\t\t\t\tgy = geometry.y;\n\t\t\t\tvar offset = geometry.offset;\n\t\t\t\t\n\t\t\t\tif (offset != null)\n\t\t\t\t{\n\t\t\t\t\toffsetX = offset.x;\n\t\t\t\t\toffsetY = offset.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\t\t\tvar nx = (segment == 0) ? 0 : dy / segment;\n\t\t\tvar ny = (segment == 0) ? 0 : dx / segment;\n\t\t\t\n\t\t\tx = p0.x + dx * factor + (nx * gy + offsetX) * this.scale;\n\t\t\ty = p0.y + dy * factor - (ny * gy - offsetY) * this.scale;\n\t\t}\n\t}\n\telse if (geometry != null)\n\t{\n\t\tvar offset = geometry.offset;\n\t\t\n\t\tif (offset != null)\n\t\t{\n\t\t\tx += offset.x;\n\t\t\ty += offset.y;\n\t\t}\n\t}\n\t\n\treturn new mxPoint(x, y);\t\t\n};\n\n/**\n * Function: getRelativePoint\n *\n * Gets the relative point that describes the given, absolute label\n * position for the given edge state.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the parent edge.\n * x - Specifies the x-coordinate of the absolute label location.\n * y - Specifies the y-coordinate of the absolute label location.\n */\nmxGraphView.prototype.getRelativePoint = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\t\n\tif (geometry != null)\n\t{\n\t\tvar pointCount = edgeState.absolutePoints.length;\n\t\t\n\t\tif (geometry.relative && pointCount > 1)\n\t\t{\n\t\t\tvar totalLength = edgeState.length;\n\t\t\tvar segments = edgeState.segments;\n\n\t\t\t// Works out which line segment the point of the label is closest to\n\t\t\tvar p0 = edgeState.absolutePoints[0];\n\t\t\tvar pe = edgeState.absolutePoints[1];\n\t\t\tvar minDist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\t\t\tvar length = 0;\n\t\t\tvar index = 0;\n\t\t\tvar tmp = 0;\n\t\t\t\n\t\t\tfor (var i = 2; i < pointCount; i++)\n\t\t\t{\n\t\t\t\tp0 = pe;\n\t\t\t\tpe = edgeState.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\t\t\t\ttmp += segments[i - 2];\n\t\t\t\t\n\t\t\t\tif (dist <= minDist)\n\t\t\t\t{\n\t\t\t\t\tminDist = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t\tlength = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar seg = segments[index];\n\t\t\tp0 = edgeState.absolutePoints[index];\n\t\t\tpe = edgeState.absolutePoints[index + 1];\n\t\t\t\n\t\t\tvar x2 = p0.x;\n\t\t\tvar y2 = p0.y;\n\t\t\t\n\t\t\tvar x1 = pe.x;\n\t\t\tvar y1 = pe.y;\n\t\t\t\n\t\t\tvar px = x;\n\t\t\tvar py = y;\n\t\t\t\n\t\t\tvar xSegment = x2 - x1;\n\t\t\tvar ySegment = y2 - y1;\n\t\t\t\n\t\t\tpx -= x1;\n\t\t\tpy -= y1;\n\t\t\tvar projlenSq = 0;\n\t\t\t\n\t\t\tpx = xSegment - px;\n\t\t\tpy = ySegment - py;\n\t\t\tvar dotprod = px * xSegment + py * ySegment;\n\n\t\t\tif (dotprod <= 0.0)\n\t\t\t{\n\t\t\t\tprojlenSq = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprojlenSq = dotprod * dotprod\n\t\t\t\t\t\t/ (xSegment * xSegment + ySegment * ySegment);\n\t\t\t}\n\n\t\t\tvar projlen = Math.sqrt(projlenSq);\n\n\t\t\tif (projlen > seg)\n\t\t\t{\n\t\t\t\tprojlen = seg;\n\t\t\t}\n\n\t\t\tvar yDistance = Math.sqrt(mxUtils.ptSegDistSq(p0.x, p0.y, pe\n\t\t\t\t\t.x, pe.y, x, y));\n\t\t\tvar direction = mxUtils.relativeCcw(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tif (direction == -1)\n\t\t\t{\n\t\t\t\tyDistance = -yDistance;\n\t\t\t}\n\n\t\t\t// Constructs the relative point for the label\n\t\t\treturn new mxPoint(((totalLength / 2 - length - projlen) / totalLength) * -2,\n\t\t\t\t\t\tyDistance / this.scale);\n\t\t}\n\t}\n\t\n\treturn new mxPoint();\n};\n\n/**\n * Function: updateEdgeLabelOffset\n *\n * Updates <mxCellState.absoluteOffset> for the given state. The absolute\n * offset is normally used for the position of the edge label. Is is\n * calculated from the geometry as an absolute offset from the center\n * between the two endpoints if the geometry is absolute, or as the\n * relative distance between the center along the line and the absolute\n * orthogonal distance if the geometry is relative.\n * \n * Parameters:\n * \n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateEdgeLabelOffset = function(state)\n{\n\tvar points = state.absolutePoints;\n\t\n\tstate.absoluteOffset.x = state.getCenterX();\n\tstate.absoluteOffset.y = state.getCenterY();\n\n\tif (points != null && points.length > 0 && state.segments != null)\n\t{\n\t\tvar geometry = this.graph.getCellGeometry(state.cell);\n\t\t\n\t\tif (geometry.relative)\n\t\t{\n\t\t\tvar offset = this.getPoint(state, geometry);\n\t\t\t\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset = offset;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\t\t\t\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar dx = pe.x - p0.x;\n\t\t\t\tvar dy = pe.y - p0.y;\n\t\t\t\tvar x0 = 0;\n\t\t\t\tvar y0 = 0;\n\n\t\t\t\tvar off = geometry.offset;\n\t\t\t\t\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tx0 = off.x;\n\t\t\t\t\ty0 = off.y;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar x = p0.x + dx / 2 + x0 * this.scale;\n\t\t\t\tvar y = p0.y + dy / 2 + y0 * this.scale;\n\t\t\t\t\n\t\t\t\tstate.absoluteOffset.x = x;\n\t\t\t\tstate.absoluteOffset.y = y;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getState\n *\n * Returns the <mxCellState> for the given cell. If create is true, then\n * the state is created if it does not yet exist.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the <mxCellState> should be returned.\n * create - Optional boolean indicating if a new state should be created\n * if it does not yet exist. Default is false.\n */\nmxGraphView.prototype.getState = function(cell, create)\n{\n\tcreate = create || false;\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.states.get(cell);\n\t\t\n\t\tif (create && (state == null || this.updateStyle) && this.graph.isCellVisible(cell))\n\t\t{\n\t\t\tif (state == null)\n\t\t\t{\n\t\t\t\tstate = this.createState(cell);\n\t\t\t\tthis.states.put(cell, state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.style = this.graph.getCellStyle(cell);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn state;\n};\n\n/**\n * Function: isRendering\n *\n * Returns <rendering>.\n */\nmxGraphView.prototype.isRendering = function()\n{\n\treturn this.rendering;\n};\n\n/**\n * Function: setRendering\n *\n * Sets <rendering>.\n */\nmxGraphView.prototype.setRendering = function(value)\n{\n\tthis.rendering = value;\n};\n\n/**\n * Function: isAllowEval\n *\n * Returns <allowEval>.\n */\nmxGraphView.prototype.isAllowEval = function()\n{\n\treturn this.allowEval;\n};\n\n/**\n * Function: setAllowEval\n *\n * Sets <allowEval>.\n */\nmxGraphView.prototype.setAllowEval = function(value)\n{\n\tthis.allowEval = value;\n};\n\n/**\n * Function: getStates\n *\n * Returns <states>.\n */\nmxGraphView.prototype.getStates = function()\n{\n\treturn this.states;\n};\n\n/**\n * Function: setStates\n *\n * Sets <states>.\n */\nmxGraphView.prototype.setStates = function(value)\n{\n\tthis.states = value;\n};\n\n/**\n * Function: getCellStates\n *\n * Returns the <mxCellStates> for the given array of <mxCells>. The array\n * contains all states that are not null, that is, the returned array may\n * have less elements than the given array. If no argument is given, then\n * this returns <states>.\n */\nmxGraphView.prototype.getCellStates = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\treturn this.states;\n\t}\n\telse\n\t{\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar state = this.getState(cells[i]);\n\t\t\t\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tresult.push(state);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: removeState\n *\n * Removes and returns the <mxCellState> for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the <mxCellState> should be removed.\n */\nmxGraphView.prototype.removeState = function(cell)\n{\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.states.remove(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.graph.cellRenderer.destroy(state);\n\t\t\tstate.invalid = true;\n\t\t\tstate.destroy();\n\t\t}\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: createState\n *\n * Creates and returns an <mxCellState> for the given cell and initializes\n * it using <mxCellRenderer.initialize>.\n * \n * Parameters:\n * \n * cell - <mxCell> for which a new <mxCellState> should be created.\n */\nmxGraphView.prototype.createState = function(cell)\n{\n\treturn new mxCellState(this, cell, this.graph.getCellStyle(cell));\n};\n\n/**\n * Function: getCanvas\n *\n * Returns the DOM node that contains the background-, draw- and\n * overlay- and decoratorpanes.\n */\nmxGraphView.prototype.getCanvas = function()\n{\n\treturn this.canvas;\n};\n\n/**\n * Function: getBackgroundPane\n *\n * Returns the DOM node that represents the background layer.\n */\nmxGraphView.prototype.getBackgroundPane = function()\n{\n\treturn this.backgroundPane;\n};\n\n/**\n * Function: getDrawPane\n *\n * Returns the DOM node that represents the main drawing layer.\n */\nmxGraphView.prototype.getDrawPane = function()\n{\n\treturn this.drawPane;\n};\n\n/**\n * Function: getOverlayPane\n *\n * Returns the DOM node that represents the layer above the drawing layer.\n */\nmxGraphView.prototype.getOverlayPane = function()\n{\n\treturn this.overlayPane;\n};\n\n/**\n * Function: getDecoratorPane\n *\n * Returns the DOM node that represents the topmost drawing layer.\n */\nmxGraphView.prototype.getDecoratorPane = function()\n{\n\treturn this.decoratorPane;\n};\n\n/**\n * Function: isContainerEvent\n * \n * Returns true if the event origin is one of the drawing panes or\n * containers of the view.\n */\nmxGraphView.prototype.isContainerEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\n\treturn (source == this.graph.container ||\n\t\tsource.parentNode == this.backgroundPane ||\n\t\t(source.parentNode != null &&\n\t\tsource.parentNode.parentNode == this.backgroundPane) ||\n\t\tsource == this.canvas.parentNode ||\n\t\tsource == this.canvas ||\n\t\tsource == this.backgroundPane ||\n\t\tsource == this.drawPane ||\n\t\tsource == this.overlayPane ||\n\t\tsource == this.decoratorPane);\n};\n\n/**\n * Function: isScrollEvent\n * \n * Returns true if the event origin is one of the scrollbars of the\n * container in IE. Such events are ignored.\n */\n mxGraphView.prototype.isScrollEvent = function(evt)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar pt = new mxPoint(evt.clientX - offset.x, evt.clientY - offset.y);\n\n\tvar outWidth = this.graph.container.offsetWidth;\n\tvar inWidth = this.graph.container.clientWidth;\n\n\tif (outWidth > inWidth && pt.x > inWidth + 2 && pt.x <= outWidth)\n\t{\n\t\treturn true;\n\t}\n\n\tvar outHeight = this.graph.container.offsetHeight;\n\tvar inHeight = this.graph.container.clientHeight;\n\t\n\tif (outHeight > inHeight && pt.y > inHeight + 2 && pt.y <= outHeight)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: init\n *\n * Initializes the graph event dispatch loop for the specified container\n * and invokes <create> to create the required DOM nodes for the display.\n */\nmxGraphView.prototype.init = function()\n{\n\tthis.installListeners();\n\t\n\t// Creates the DOM nodes for the respective display dialect\n\tvar graph = this.graph;\n\t\n\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tthis.createSvg();\n\t}\n\telse if (graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tthis.createVml();\n\t}\n\telse\n\t{\n\t\tthis.createHtml();\n\t}\n};\n\n/**\n * Function: installListeners\n *\n * Installs the required listeners in the container.\n */\nmxGraphView.prototype.installListeners = function()\n{\n\tvar graph = this.graph;\n\tvar container = graph.container;\n\t\n\tif (container != null)\n\t{\n\t\t// Support for touch device gestures (eg. pinch to zoom)\n\t\t// Double-tap handling is implemented in mxGraph.fireMouseEvent\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(container, 'gesturestart', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t\t\n\t\t\tmxEvent.addListener(container, 'gesturechange', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\n\t\t\tmxEvent.addListener(container, 'gestureend', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t}\n\t\t\n\t\t// Fires event only for one pointer per gesture\n\t\tvar pointerId = null;\n\t\t\n\t\t// Adds basic listeners for graph event dispatching\n\t\tmxEvent.addGestureListeners(container, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Condition to avoid scrollbar events starting a rubberband selection\n\t\t\tif (this.isContainerEvent(evt) && ((!mxClient.IS_IE && !mxClient.IS_IE11 && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_OP && !mxClient.IS_SF) || !this.isScrollEvent(evt)))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\tpointerId = evt.pointerId;\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt) && (pointerId == null || evt.pointerId == pointerId))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t\t\n\t\t\tpointerId = null;\n\t\t}));\n\t\t\n\t\t// Adds listener for double click handling on background, this does always\n\t\t// use native event handler, we assume that the DOM of the background\n\t\t// does not change during the double click\n\t\tmxEvent.addListener(container, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.dblClick(evt);\n\t\t\t}\n\t\t}));\n\n\t\t// Workaround for touch events which started on some DOM node\n\t\t// on top of the container, in which case the cells under the\n\t\t// mouse for the move and up events are not detected.\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar state = null;\n\t\t\t\n\t\t\t// Workaround for touch events which started on some DOM node\n\t\t\t// on top of the container, in which case the cells under the\n\t\t\t// mouse for the move and up events are not detected.\n\t\t\tif (mxClient.IS_TOUCH)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\t\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(container, x, y);\n\t\t\t\tstate = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\treturn state;\n\t\t};\n\t\t\n\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t// container and finishing the handling of a single gesture\n\t\t// Implemented via graph event dispatch loop to avoid duplicate events\n\t\t// in Firefox and Chrome\n\t\tgraph.addMouseListener(\n\t\t{\n\t\t\tmouseDown: function(sender, me)\n\t\t\t{\n\t\t\t\tgraph.popupMenuHandler.hideMenu();\n\t\t\t},\n\t\t\tmouseMove: function() { },\n\t\t\tmouseUp: function() { }\n\t\t});\n\t\t\n\t\tthis.moveHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\tif (graph.tooltipHandler != null && graph.tooltipHandler.isHideOnHover())\n\t\t\t{\n\t\t\t\tgraph.tooltipHandler.hide();\n\t\t\t}\n\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden' && !mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.endHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden')\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t}\n};\n\n/**\n * Function: createHtml\n *\n * Creates the DOM nodes for the HTML display.\n */\nmxGraphView.prototype.createHtml = function()\n{\n\tvar container = this.graph.container;\n\t\n\tif (container != null)\n\t{\n\t\tthis.canvas = this.createHtmlPane('100%', '100%');\n\t\tthis.canvas.style.overflow = 'hidden';\n\t\n\t\t// Uses minimal size for inner DIVs on Canvas. This is required\n\t\t// for correct event processing in IE. If we have an overlapping\n\t\t// DIV then the events on the cells are only fired for labels.\n\t\tthis.backgroundPane = this.createHtmlPane('1px', '1px');\n\t\tthis.drawPane = this.createHtmlPane('1px', '1px');\n\t\tthis.overlayPane = this.createHtmlPane('1px', '1px');\n\t\tthis.decoratorPane = this.createHtmlPane('1px', '1px');\n\t\t\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\n\t\tcontainer.appendChild(this.canvas);\n\t\tthis.updateContainerStyle(container);\n\t\t\n\t\t// Implements minWidth/minHeight in quirks mode\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tvar onResize = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar bounds = this.getGraphBounds();\n\t\t\t\tvar width = bounds.x + bounds.width + this.graph.border;\n\t\t\t\tvar height = bounds.y + bounds.height + this.graph.border;\n\t\t\t\t\n\t\t\t\tthis.updateHtmlCanvasSize(width, height);\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addListener(window, 'resize', onResize);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHtmlCanvasSize\n * \n * Updates the size of the HTML canvas.\n */\nmxGraphView.prototype.updateHtmlCanvasSize = function(width, height)\n{\n\tif (this.graph.container != null)\n\t{\n\t\tvar ow = this.graph.container.offsetWidth;\n\t\tvar oh = this.graph.container.offsetHeight;\n\n\t\tif (ow < width)\n\t\t{\n\t\t\tthis.canvas.style.width = width + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.width = '100%';\n\t\t}\n\n\t\tif (oh < height)\n\t\t{\n\t\t\tthis.canvas.style.height = height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.height = '100%';\n\t\t}\n\t}\n};\n\n/**\n * Function: createHtmlPane\n * \n * Creates and returns a drawing pane in HTML (DIV).\n */\nmxGraphView.prototype.createHtmlPane = function(width, height)\n{\n\tvar pane = document.createElement('DIV');\n\t\n\tif (width != null && height != null)\n\t{\n\t\tpane.style.position = 'absolute';\n\t\tpane.style.left = '0px';\n\t\tpane.style.top = '0px';\n\n\t\tpane.style.width = width;\n\t\tpane.style.height = height;\n\t}\n\telse\n\t{\n\t\tpane.style.position = 'relative';\n\t}\n\t\n\treturn pane;\n};\n\n/**\n * Function: createVml\n *\n * Creates the DOM nodes for the VML display.\n */\nmxGraphView.prototype.createVml = function()\n{\n\tvar container = this.graph.container;\n\n\tif (container != null)\n\t{\n\t\tvar width = container.offsetWidth;\n\t\tvar height = container.offsetHeight;\n\t\tthis.canvas = this.createVmlPane(width, height);\n\t\tthis.canvas.style.overflow = 'hidden';\n\t\t\n\t\tthis.backgroundPane = this.createVmlPane(width, height);\n\t\tthis.drawPane = this.createVmlPane(width, height);\n\t\tthis.overlayPane = this.createVmlPane(width, height);\n\t\tthis.decoratorPane = this.createVmlPane(width, height);\n\t\t\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\t\t\n\t\tcontainer.appendChild(this.canvas);\n\t}\n};\n\n/**\n * Function: createVmlPane\n * \n * Creates a drawing pane in VML (group).\n */\nmxGraphView.prototype.createVmlPane = function(width, height)\n{\n\tvar pane = document.createElement(mxClient.VML_PREFIX + ':group');\n\t\n\t// At this point the width and height are potentially\n\t// uninitialized. That's OK.\n\tpane.style.position = 'absolute';\n\tpane.style.left = '0px';\n\tpane.style.top = '0px';\n\n\tpane.style.width = width + 'px';\n\tpane.style.height = height + 'px';\n\n\tpane.setAttribute('coordsize', width + ',' + height);\n\tpane.setAttribute('coordorigin', '0,0');\n\t\n\treturn pane;\n};\n\n/**\n * Function: createSvg\n *\n * Creates and returns the DOM nodes for the SVG display.\n */\nmxGraphView.prototype.createSvg = function()\n{\n\tvar container = this.graph.container;\n\tthis.canvas = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\n\t// For background image\n\tthis.backgroundPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.backgroundPane);\n\n\t// Adds two layers (background is early feature)\n\tthis.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.drawPane);\n\n\tthis.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.overlayPane);\n\t\n\tthis.decoratorPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.decoratorPane);\n\t\n\tvar root = document.createElementNS(mxConstants.NS_SVG, 'svg');\n\troot.style.left = '0px';\n\troot.style.top = '0px';\n\troot.style.width = '100%';\n\troot.style.height = '100%';\n\t\n\t// NOTE: In standards mode, the SVG must have block layout\n\t// in order for the container DIV to not show scrollbars.\n\troot.style.display = 'block';\n\troot.appendChild(this.canvas);\n\t\n\t// Workaround for scrollbars in IE11 and below\n\tif (mxClient.IS_IE || mxClient.IS_IE11)\n\t{\n\t\troot.style.overflow = 'hidden';\n\t}\n\n\tif (container != null)\n\t{\n\t\tcontainer.appendChild(root);\n\t\tthis.updateContainerStyle(container);\n\t}\n};\n\n/**\n * Function: updateContainerStyle\n * \n * Updates the style of the container after installing the SVG DOM elements.\n */\nmxGraphView.prototype.updateContainerStyle = function(container)\n{\n\t// Workaround for offset of container\n\tvar style = mxUtils.getCurrentStyle(container);\n\t\n\tif (style != null && style.position == 'static')\n\t{\n\t\tcontainer.style.position = 'relative';\n\t}\n\t\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tcontainer.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the view and all its resources.\n */\nmxGraphView.prototype.destroy = function()\n{\n\tvar root = (this.canvas != null) ? this.canvas.ownerSVGElement : null;\n\t\n\tif (root == null)\n\t{\n\t\troot = this.canvas;\n\t}\n\t\n\tif (root != null && root.parentNode != null)\n\t{\n\t\tthis.clear(this.currentRoot, true);\n\t\tmxEvent.removeGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t\tmxEvent.release(this.graph.container);\n\t\troot.parentNode.removeChild(root);\n\t\t\n\t\tthis.moveHandler = null;\n\t\tthis.endHandler = null;\n\t\tthis.canvas = null;\n\t\tthis.backgroundPane = null;\n\t\tthis.drawPane = null;\n\t\tthis.overlayPane = null;\n\t\tthis.decoratorPane = null;\n\t}\n};\n\n/**\n * Class: mxCurrentRootChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxCurrentRootChange(view, root)\n{\n\tthis.view = view;\n\tthis.root = root;\n\tthis.previous = root;\n\tthis.isUp = root == null;\n\t\n\tif (!this.isUp)\n\t{\n\t\tvar tmp = this.view.currentRoot;\n\t\tvar model = this.view.graph.getModel();\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp == root)\n\t\t\t{\n\t\t\t\tthis.isUp = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\ttmp = model.getParent(tmp);\n\t\t}\n\t}\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxCurrentRootChange.prototype.execute = function()\n{\n\tvar tmp = this.view.currentRoot;\n\tthis.view.currentRoot = this.previous;\n\tthis.previous = tmp;\n\n\tvar translate = this.view.graph.getTranslateForRoot(this.view.currentRoot);\n\t\n\tif (translate != null)\n\t{\n\t\tthis.view.translate = new mxPoint(-translate.x, -translate.y);\n\t}\n\n\tif (this.isUp)\n\t{\n\t\tthis.view.clear(this.view.currentRoot, true);\n\t\tthis.view.validate();\n\t}\n\telse\n\t{\n\t\tthis.view.refresh();\n\t}\n\t\n\tvar name = (this.isUp) ? mxEvent.UP : mxEvent.DOWN;\n\tthis.view.fireEvent(new mxEventObject(name,\n\t\t'root', this.view.currentRoot, 'previous', this.previous));\n\tthis.isUp = !this.isUp;\n};\n\n__mxOutput.mxGraphView = typeof mxGraphView !== 'undefined' ? mxGraphView : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraph\n *\n * Extends <mxEventSource> to implement a graph component for\n * the browser. This is the main class of the package. To activate\n * panning and connections use <setPanning> and <setConnectable>.\n * For rubberband selection you must create a new instance of\n * <mxRubberband>. The following listeners are added to\n * <mouseListeners> by default:\n * \n * - <tooltipHandler>: <mxTooltipHandler> that displays tooltips\n * - <panningHandler>: <mxPanningHandler> for panning and popup menus\n * - <connectionHandler>: <mxConnectionHandler> for creating connections\n * - <graphHandler>: <mxGraphHandler> for moving and cloning cells\n * \n * These listeners will be called in the above order if they are enabled.\n *\n * Background Images:\n * \n * To display a background image, set the image, image width and\n * image height using <setBackgroundImage>. If one of the\n * above values has changed then the <view>'s <mxGraphView.validate>\n * should be invoked.\n * \n * Cell Images:\n * \n * To use images in cells, a shape must be specified in the default\n * vertex style (or any named style). Possible shapes are\n * <mxConstants.SHAPE_IMAGE> and <mxConstants.SHAPE_LABEL>.\n * The code to change the shape used in the default vertex style,\n * the following code is used:\n * \n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_IMAGE;\n * (end)\n * \n * For the default vertex style, the image to be displayed can be\n * specified in a cell's style using the <mxConstants.STYLE_IMAGE>\n * key and the image URL as a value, for example:\n * \n * (code)\n * image=http://www.example.com/image.gif\n * (end)\n * \n * For a named style, the the stylename must be the first element\n * of the cell style:\n * \n * (code)\n * stylename;image=http://www.example.com/image.gif\n * (end)\n * \n * A cell style can have any number of key=value pairs added, divided\n * by a semicolon as follows:\n * \n * (code)\n * [stylename;|key=value;]\n * (end)\n *\n * Labels:\n * \n * The cell labels are defined by <getLabel> which uses <convertValueToString>\n * if <labelsVisible> is true. If a label must be rendered as HTML markup, then\n * <isHtmlLabel> should return true for the respective cell. If all labels\n * contain HTML markup, <htmlLabels> can be set to true. NOTE: Enabling HTML\n * labels carries a possible security risk (see the section on security in\n * the manual).\n * \n * If wrapping is needed for a label, then <isHtmlLabel> and <isWrapping> must\n * return true for the cell whose label should be wrapped. See <isWrapping> for\n * an example.\n * \n * If clipping is needed to keep the rendering of a HTML label inside the\n * bounds of its vertex, then <isClipping> should return true for the\n * respective cell.\n * \n * By default, edge labels are movable and vertex labels are fixed. This can be\n * changed by setting <edgeLabelsMovable> and <vertexLabelsMovable>, or by\n * overriding <isLabelMovable>.\n *\n * In-place Editing:\n * \n * In-place editing is started with a doubleclick or by typing F2.\n * Programmatically, <edit> is used to check if the cell is editable\n * (<isCellEditable>) and call <startEditingAtCell>, which invokes\n * <mxCellEditor.startEditing>. The editor uses the value returned\n * by <getEditingValue> as the editing value.\n * \n * After in-place editing, <labelChanged> is called, which invokes\n * <mxGraphModel.setValue>, which in turn calls\n * <mxGraphModel.valueForCellChanged> via <mxValueChange>.\n * \n * The event that triggers in-place editing is passed through to the\n * <cellEditor>, which may take special actions depending on the type of the\n * event or mouse location, and is also passed to <getEditingValue>. The event\n * is then passed back to the event processing functions which can perform\n * specific actions based on the trigger event.\n * \n * Tooltips:\n * \n * Tooltips are implemented by <getTooltip>, which calls <getTooltipForCell>\n * if a cell is under the mousepointer. The default implementation checks if\n * the cell has a getTooltip function and calls it if it exists. Hence, in order\n * to provide custom tooltips, the cell must provide a getTooltip function, or \n * one of the two above functions must be overridden.\n * \n * Typically, for custom cell tooltips, the latter function is overridden as\n * follows:\n * \n * (code)\n * graph.getTooltipForCell = function(cell)\n * {\n *   var label = this.convertValueToString(cell);\n *   return 'Tooltip for '+label;\n * }\n * (end)\n * \n * When using a config file, the function is overridden in the mxGraph section\n * using the following entry:\n * \n * (code)\n * <add as=\"getTooltipForCell\"><![CDATA[\n *   function(cell)\n *   {\n *     var label = this.convertValueToString(cell);\n *     return 'Tooltip for '+label;\n *   }\n * ]]></add>\n * (end)\n * \n * \"this\" refers to the graph in the implementation, so for example to check if \n * a cell is an edge, you use this.getModel().isEdge(cell)\n *\n * For replacing the default implementation of <getTooltipForCell> (rather than \n * replacing the function on a specific instance), the following code should be \n * used after loading the JavaScript files, but before creating a new mxGraph \n * instance using <mxGraph>:\n * \n * (code)\n * mxGraph.prototype.getTooltipForCell = function(cell)\n * {\n *   var label = this.convertValueToString(cell);\n *   return 'Tooltip for '+label;\n * }\n * (end)\n * \n * Shapes & Styles:\n * \n * The implementation of new shapes is demonstrated in the examples. We'll assume\n * that we have implemented a custom shape with the name BoxShape which we want\n * to use for drawing vertices. To use this shape, it must first be registered in\n * the cell renderer as follows:\n * \n * (code)\n * mxCellRenderer.registerShape('box', BoxShape);\n * (end)\n * \n * The code registers the BoxShape constructor under the name box in the cell\n * renderer of the graph. The shape can now be referenced using the shape-key in\n * a style definition. (The cell renderer contains a set of additional shapes,\n * namely one for each constant with a SHAPE-prefix in <mxConstants>.)\n *\n * Styles are a collection of key, value pairs and a stylesheet is a collection\n * of named styles. The names are referenced by the cellstyle, which is stored\n * in <mxCell.style> with the following format: [stylename;|key=value;]. The\n * string is resolved to a collection of key, value pairs, where the keys are\n * overridden with the values in the string.\n *\n * When introducing a new shape, the name under which the shape is registered\n * must be used in the stylesheet. There are three ways of doing this:\n * \n *   - By changing the default style, so that all vertices will use the new\n * \t\tshape\n *   - By defining a new style, so that only vertices with the respective\n * \t\tcellstyle will use the new shape\n *   - By using shape=box in the cellstyle's optional list of key, value pairs\n * \t\tto be overridden\n *\n * In the first case, the code to fetch and modify the default style for\n * vertices is as follows:\n * \n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = 'box';\n * (end)\n * \n * The code takes the default vertex style, which is used for all vertices that\n * do not have a specific cellstyle, and modifies the value for the shape-key\n * in-place to use the new BoxShape for drawing vertices. This is done by\n * assigning the box value in the second line, which refers to the name of the\n * BoxShape in the cell renderer.\n * \n * In the second case, a collection of key, value pairs is created and then\n * added to the stylesheet under a new name. In order to distinguish the\n * shapename and the stylename we'll use boxstyle for the stylename:\n * \n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = 'box';\n * style[mxConstants.STYLE_STROKECOLOR] = '#000000';\n * style[mxConstants.STYLE_FONTCOLOR] = '#000000';\n * graph.getStylesheet().putCellStyle('boxstyle', style);\n * (end)\n * \n * The code adds a new style with the name boxstyle to the stylesheet. To use\n * this style with a cell, it must be referenced from the cellstyle as follows:\n * \n * (code)\n * var vertex = graph.insertVertex(parent, null, 'Hello, World!', 20, 20, 80, 20,\n * \t\t\t\t'boxstyle');\n * (end)\n * \n * To summarize, each new shape must be registered in the <mxCellRenderer> with\n * a unique name. That name is then used as the value of the shape-key in a\n * default or custom style. If there are multiple custom shapes, then there\n * should be a separate style for each shape.\n * \n * Inheriting Styles:\n * \n * For fill-, stroke-, gradient-, font- and indicatorColors special keywords\n * can be used. The inherit keyword for one of these colors will inherit the\n * color for the same key from the parent cell. The swimlane keyword does the\n * same, but inherits from the nearest swimlane in the ancestor hierarchy.\n * Finally, the indicated keyword will use the color of the indicator as the\n * color for the given key.\n * \n * Scrollbars:\n * \n * The <containers> overflow CSS property defines if scrollbars are used to\n * display the graph. For values of 'auto' or 'scroll', the scrollbars will\n * be shown. Note that the <resizeContainer> flag is normally not used\n * together with scrollbars, as it will resize the container to match the\n * size of the graph after each change.\n * \n * Multiplicities and Validation:\n * \n * To control the possible connections in mxGraph, <getEdgeValidationError> is\n * used. The default implementation of the function uses <multiplicities>,\n * which is an array of <mxMultiplicity>. Using this class allows to establish\n * simple multiplicities, which are enforced by the graph.\n * \n * The <mxMultiplicity> uses <mxCell.is> to determine for which terminals it\n * applies. The default implementation of <mxCell.is> works with DOM nodes (XML\n * nodes) and checks if the given type parameter matches the nodeName of the\n * node (case insensitive). Optionally, an attributename and value can be\n * specified which are also checked.\n * \n * <getEdgeValidationError> is called whenever the connectivity of an edge\n * changes. It returns an empty string or an error message if the edge is\n * invalid or null if the edge is valid. If the returned string is not empty\n * then it is displayed as an error message.\n * \n * <mxMultiplicity> allows to specify the multiplicity between a terminal and\n * its possible neighbors. For example, if any rectangle may only be connected\n * to, say, a maximum of two circles you can add the following rule to\n * <multiplicities>:\n * \n * (code)\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only shape targets allowed'));\n * (end)\n * \n * This will display the first error message whenever a rectangle is connected\n * to more than two circles and the second error message if a rectangle is\n * connected to anything but a circle.\n * \n * For certain multiplicities, such as a minimum of 1 connection, which cannot\n * be enforced at cell creation time (unless the cell is created together with\n * the connection), mxGraph offers <validate> which checks all multiplicities\n * for all cells and displays the respective error messages in an overlay icon\n * on the cells.\n * \n * If a cell is collapsed and contains validation errors, a respective warning\n * icon is attached to the collapsed cell.\n * \n * Auto-Layout:\n * \n * For automatic layout, the <getLayout> hook is provided in <mxLayoutManager>.\n * It can be overridden to return a layout algorithm for the children of a\n * given cell.\n * \n * Unconnected edges:\n * \n * The default values for all switches are designed to meet the requirements of\n * general diagram drawing applications. A very typical set of settings to\n * avoid edges that are not connected is the following:\n * \n * (code)\n * graph.setAllowDanglingEdges(false);\n * graph.setDisconnectOnMove(false);\n * (end)\n * \n * Setting the <cloneInvalidEdges> switch to true is optional. This switch\n * controls if edges are inserted after a copy, paste or clone-drag if they are\n * invalid. For example, edges are invalid if copied or control-dragged without \n * having selected the corresponding terminals and allowDanglingEdges is\n * false, in which case the edges will not be cloned if the switch is false.\n * \n * Output:\n * \n * To produce an XML representation for a diagram, the following code can be\n * used.\n * \n * (code)\n * var enc = new mxCodec(mxUtils.createXmlDocument());\n * var node = enc.encode(graph.getModel());\n * (end)\n * \n * This will produce an XML node than can be handled using the DOM API or\n * turned into a string representation using the following code:\n * \n * (code)\n * var xml = mxUtils.getXml(node);\n * (end)\n * \n * To obtain a formatted string, mxUtils.getPrettyXml can be used instead.\n * \n * This string can now be stored in a local persistent storage (for example\n * using Google Gears) or it can be passed to a backend using mxUtils.post as\n * follows. The url variable is the URL of the Java servlet, PHP page or HTTP\n * handler, depending on the server.\n * \n * (code)\n * var xmlString = encodeURIComponent(mxUtils.getXml(node));\n * mxUtils.post(url, 'xml='+xmlString, function(req)\n * {\n *   // Process server response using req of type mxXmlRequest\n * });\n * (end)\n * \n * Input:\n * \n * To load an XML representation of a diagram into an existing graph object\n * mxUtils.load can be used as follows. The url variable is the URL of the Java\n * servlet, PHP page or HTTP handler that produces the XML string.\n * \n * (code)\n * var xmlDoc = mxUtils.load(url).getXml();\n * var node = xmlDoc.documentElement;\n * var dec = new mxCodec(node.ownerDocument);\n * dec.decode(node, graph.getModel());\n * (end)\n * \n * For creating a page that loads the client and a diagram using a single\n * request please refer to the deployment examples in the backends.\n * \n * Functional dependencies:\n * \n * (see images/callgraph.png)\n * \n * Resources:\n *\n * resources/graph - Language resources for mxGraph\n *\n * Group: Events\n * \n * Event: mxEvent.ROOT\n * \n * Fires if the root in the model has changed. This event has no properties.\n * \n * Event: mxEvent.ALIGN_CELLS\n * \n * Fires between begin- and endUpdate in <alignCells>. The <code>cells</code>\n * and <code>align</code> properties contain the respective arguments that were\n * passed to <alignCells>.\n *\n * Event: mxEvent.FLIP_EDGE\n *\n * Fires between begin- and endUpdate in <flipEdge>. The <code>edge</code>\n * property contains the edge passed to <flipEdge>.\n * \n * Event: mxEvent.ORDER_CELLS\n * \n * Fires between begin- and endUpdate in <orderCells>. The <code>cells</code>\n * and <code>back</code> properties contain the respective arguments that were\n * passed to <orderCells>.\n *\n * Event: mxEvent.CELLS_ORDERED\n *\n * Fires between begin- and endUpdate in <cellsOrdered>. The <code>cells</code>\n * and <code>back</code> arguments contain the respective arguments that were\n * passed to <cellsOrdered>.\n * \n * Event: mxEvent.GROUP_CELLS\n * \n * Fires between begin- and endUpdate in <groupCells>. The <code>group</code>,\n * <code>cells</code> and <code>border</code> arguments contain the respective\n * arguments that were passed to <groupCells>.\n * \n * Event: mxEvent.UNGROUP_CELLS\n * \n * Fires between begin- and endUpdate in <ungroupCells>. The <code>cells</code>\n * property contains the array of cells that was passed to <ungroupCells>.\n * \n * Event: mxEvent.REMOVE_CELLS_FROM_PARENT\n * \n * Fires between begin- and endUpdate in <removeCellsFromParent>. The\n * <code>cells</code> property contains the array of cells that was passed to\n * <removeCellsFromParent>.\n * \n * Event: mxEvent.ADD_CELLS\n * \n * Fires between begin- and endUpdate in <addCells>. The <code>cells</code>,\n * <code>parent</code>, <code>index</code>, <code>source</code> and\n * <code>target</code> properties contain the respective arguments that were\n * passed to <addCells>.\n * \n * Event: mxEvent.CELLS_ADDED\n * \n * Fires between begin- and endUpdate in <cellsAdded>. The <code>cells</code>,\n * <code>parent</code>, <code>index</code>, <code>source</code>,\n * <code>target</code> and <code>absolute</code> properties contain the\n * respective arguments that were passed to <cellsAdded>.\n * \n * Event: mxEvent.REMOVE_CELLS\n * \n * Fires between begin- and endUpdate in <removeCells>. The <code>cells</code>\n * and <code>includeEdges</code> arguments contain the respective arguments\n * that were passed to <removeCells>.\n * \n * Event: mxEvent.CELLS_REMOVED\n * \n * Fires between begin- and endUpdate in <cellsRemoved>. The <code>cells</code>\n * argument contains the array of cells that was removed.\n * \n * Event: mxEvent.SPLIT_EDGE\n * \n * Fires between begin- and endUpdate in <splitEdge>. The <code>edge</code>\n * property contains the edge to be splitted, the <code>cells</code>,\n * <code>newEdge</code>, <code>dx</code> and <code>dy</code> properties contain\n * the respective arguments that were passed to <splitEdge>.\n * \n * Event: mxEvent.TOGGLE_CELLS\n * \n * Fires between begin- and endUpdate in <toggleCells>. The <code>show</code>,\n * <code>cells</code> and <code>includeEdges</code> properties contain the\n * respective arguments that were passed to <toggleCells>.\n * \n * Event: mxEvent.FOLD_CELLS\n * \n * Fires between begin- and endUpdate in <foldCells>. The\n * <code>collapse</code>, <code>cells</code> and <code>recurse</code>\n * properties contain the respective arguments that were passed to <foldCells>.\n * \n * Event: mxEvent.CELLS_FOLDED\n * \n * Fires between begin- and endUpdate in cellsFolded. The\n * <code>collapse</code>, <code>cells</code> and <code>recurse</code>\n * properties contain the respective arguments that were passed to\n * <cellsFolded>.\n * \n * Event: mxEvent.UPDATE_CELL_SIZE\n * \n * Fires between begin- and endUpdate in <updateCellSize>. The\n * <code>cell</code> and <code>ignoreChildren</code> properties contain the\n * respective arguments that were passed to <updateCellSize>.\n * \n * Event: mxEvent.RESIZE_CELLS\n * \n * Fires between begin- and endUpdate in <resizeCells>. The <code>cells</code>\n * and <code>bounds</code> properties contain the respective arguments that\n * were passed to <resizeCells>.\n * \n * Event: mxEvent.CELLS_RESIZED\n * \n * Fires between begin- and endUpdate in <cellsResized>. The <code>cells</code>\n * and <code>bounds</code> properties contain the respective arguments that\n * were passed to <cellsResized>.\n * \n * Event: mxEvent.MOVE_CELLS\n * \n * Fires between begin- and endUpdate in <moveCells>. The <code>cells</code>,\n * <code>dx</code>, <code>dy</code>, <code>clone</code>, <code>target</code>\n * and <code>event</code> properties contain the respective arguments that\n * were passed to <moveCells>.\n * \n * Event: mxEvent.CELLS_MOVED\n * \n * Fires between begin- and endUpdate in <cellsMoved>. The <code>cells</code>,\n * <code>dx</code>, <code>dy</code> and <code>disconnect</code> properties\n * contain the respective arguments that were passed to <cellsMoved>.\n * \n * Event: mxEvent.CONNECT_CELL\n * \n * Fires between begin- and endUpdate in <connectCell>. The <code>edge</code>,\n * <code>terminal</code> and <code>source</code> properties contain the\n * respective arguments that were passed to <connectCell>.\n * \n * Event: mxEvent.CELL_CONNECTED\n * \n * Fires between begin- and endUpdate in <cellConnected>. The\n * <code>edge</code>, <code>terminal</code> and <code>source</code> properties\n * contain the respective arguments that were passed to <cellConnected>.\n * \n * Event: mxEvent.REFRESH\n * \n * Fires after <refresh> was executed. This event has no properties.\n *\n * Event: mxEvent.CLICK\n * \n * Fires in <click> after a click event. The <code>event</code> property\n * contains the original mouse event and <code>cell</code> property contains\n * the cell under the mouse or null if the background was clicked.\n * \n * Event: mxEvent.DOUBLE_CLICK\n *\n * Fires in <dblClick> after a double click. The <code>event</code> property\n * contains the original mouse event and the <code>cell</code> property\n * contains the cell under the mouse or null if the background was clicked.\n * \n * Event: mxEvent.GESTURE\n *\n * Fires in <fireGestureEvent> after a touch gesture. The <code>event</code>\n * property contains the original gesture end event and the <code>cell</code>\n * property contains the optional cell associated with the gesture.\n *\n * Event: mxEvent.TAP_AND_HOLD\n *\n * Fires in <tapAndHold> if a tap and hold event was detected. The <code>event</code>\n * property contains the initial touch event and the <code>cell</code> property\n * contains the cell under the mouse or null if the background was clicked.\n *\n * Event: mxEvent.FIRE_MOUSE_EVENT\n *\n * Fires in <fireMouseEvent> before the mouse listeners are invoked. The\n * <code>eventName</code> property contains the event name and the\n * <code>event</code> property contains the <mxMouseEvent>.\n *\n * Event: mxEvent.SIZE\n *\n * Fires after <sizeDidChange> was executed. The <code>bounds</code> property\n * contains the new graph bounds.\n *\n * Event: mxEvent.START_EDITING\n *\n * Fires before the in-place editor starts in <startEditingAtCell>. The\n * <code>cell</code> property contains the cell that is being edited and the\n * <code>event</code> property contains the optional event argument that was\n * passed to <startEditingAtCell>.\n * \n * Event: mxEvent.EDITING_STARTED\n *\n * Fires after the in-place editor starts in <startEditingAtCell>. The\n * <code>cell</code> property contains the cell that is being edited and the\n * <code>event</code> property contains the optional event argument that was\n * passed to <startEditingAtCell>.\n * \n * Event: mxEvent.EDITING_STOPPED\n *\n * Fires after the in-place editor stops in <stopEditing>.\n *\n * Event: mxEvent.LABEL_CHANGED\n *\n * Fires between begin- and endUpdate in <cellLabelChanged>. The\n * <code>cell</code> property contains the cell, the <code>value</code>\n * property contains the new value for the cell, the <code>old</code> property\n * contains the old value and the optional <code>event</code> property contains\n * the mouse event that started the edit.\n * \n * Event: mxEvent.ADD_OVERLAY\n *\n * Fires after an overlay is added in <addCellOverlay>. The <code>cell</code>\n * property contains the cell and the <code>overlay</code> property contains\n * the <mxCellOverlay> that was added.\n *\n * Event: mxEvent.REMOVE_OVERLAY\n *\n * Fires after an overlay is removed in <removeCellOverlay> and\n * <removeCellOverlays>. The <code>cell</code> property contains the cell and\n * the <code>overlay</code> property contains the <mxCellOverlay> that was\n * removed.\n * \n * Constructor: mxGraph\n * \n * Constructs a new mxGraph in the specified container. Model is an optional\n * mxGraphModel. If no model is provided, a new mxGraphModel instance is \n * used as the model. The container must have a valid owner document prior \n * to calling this function in Internet Explorer. RenderHint is a string to\n * affect the display performance and rendering in IE, but not in SVG-based \n * browsers. The parameter is mapped to <dialect>, which may \n * be one of <mxConstants.DIALECT_SVG> for SVG-based browsers, \n * <mxConstants.DIALECT_STRICTHTML> for fastest display mode,\n * <mxConstants.DIALECT_PREFERHTML> for faster display mode,\n * <mxConstants.DIALECT_MIXEDHTML> for fast and <mxConstants.DIALECT_VML> \n * for exact display mode (slowest). The dialects are defined in mxConstants.\n * The default values are DIALECT_SVG for SVG-based browsers and\n * DIALECT_MIXED for IE.\n *\n * The possible values for the renderingHint parameter are explained below:\n * \n * fast - The parameter is based on the fact that the display performance is \n * highly improved in IE if the VML is not contained within a VML group \n * element. The lack of a group element only slightly affects the display while \n * panning, but improves the performance by almost a factor of 2, while keeping \n * the display sufficiently accurate. This also allows to render certain shapes as HTML \n * if the display accuracy is not affected, which is implemented by \n * <mxShape.isMixedModeHtml>. This is the default setting and is mapped to\n * DIALECT_MIXEDHTML.\n * faster - Same as fast, but more expensive shapes are avoided. This is \n * controlled by <mxShape.preferModeHtml>. The default implementation will \n * avoid gradients and rounded rectangles, but more significant shapes, such \n * as rhombus, ellipse, actor and cylinder will be rendered accurately. This \n * setting is mapped to DIALECT_PREFERHTML.\n * fastest - Almost anything will be rendered in Html. This allows for \n * rectangles, labels and images. This setting is mapped to\n * DIALECT_STRICTHTML.\n * exact - If accurate panning is required and if the diagram is small (up\n * to 100 cells), then this value should be used. In this mode, a group is \n * created that contains the VML. This allows for accurate panning and is \n * mapped to DIALECT_VML.\n *\n * Example:\n * \n * To create a graph inside a DOM node with an id of graph:\n * (code)\n * var container = document.getElementById('graph');\n * var graph = new mxGraph(container);\n * (end)\n * \n * Parameters:\n * \n * container - Optional DOM node that acts as a container for the graph.\n * If this is null then the container can be initialized later using\n * <init>.\n * model - Optional <mxGraphModel> that constitutes the graph data.\n * renderHint - Optional string that specifies the display accuracy and\n * performance. Default is mxConstants.DIALECT_MIXEDHTML (for IE).\n * stylesheet - Optional <mxStylesheet> to be used in the graph.\n */\nfunction mxGraph(container, model, renderHint, stylesheet)\n{\n\t// Initializes the variable in case the prototype has been\n\t// modified to hold some listeners (which is possible because\n\t// the createHandlers call is executed regardless of the\n\t// arguments passed into the ctor).\n\tthis.mouseListeners = null;\n\t\n\t// Converts the renderHint into a dialect\n\tthis.renderHint = renderHint;\n\n\tif (mxClient.IS_SVG)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_SVG;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_EXACT && mxClient.IS_VML)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_VML;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_FASTEST)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_STRICTHTML;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_FASTER)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_PREFERHTML;\n\t}\n\telse // default for VML\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_MIXEDHTML;\n\t}\n\t\n\t// Initializes the main members that do not require a container\n\tthis.model = (model != null) ? model : new mxGraphModel();\n\tthis.multiplicities = [];\n\tthis.imageBundles = [];\n\tthis.cellRenderer = this.createCellRenderer();\n\tthis.setSelectionModel(this.createSelectionModel());\n\tthis.setStylesheet((stylesheet != null) ? stylesheet : this.createStylesheet());\n\tthis.view = this.createGraphView();\n\t\n\t// Adds a graph model listener to update the view\n\tthis.graphModelChangeListener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t});\n\t\n\tthis.model.addListener(mxEvent.CHANGE, this.graphModelChangeListener);\n\n\t// Installs basic event handlers with disabled default settings.\n\tthis.createHandlers();\n\t\n\t// Initializes the display if a container was specified\n\tif (container != null)\n\t{\n\t\tthis.init(container);\n\t}\n\t\n\tthis.view.revalidate();\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\n// disable this call which is failing due to CORS error\n// if (mxLoadResources)\n// {\n// \tmxResources.add(mxClient.basePath + '/resources/graph');\n// }\n// else\n// {\n// \tmxClient.defaultBundles.push(mxClient.basePath + '/resources/graph');\n// }\n\n/**\n * Extends mxEventSource.\n */\nmxGraph.prototype = new mxEventSource();\nmxGraph.prototype.constructor = mxGraph;\n\n/**\n * Group: Variables\n */\n\n/**\n * Variable: mouseListeners\n * \n * Holds the mouse event listeners. See <fireMouseEvent>.\n */\nmxGraph.prototype.mouseListeners = null;\n\n/**\n * Variable: isMouseDown\n * \n * Holds the state of the mouse button.\n */\nmxGraph.prototype.isMouseDown = false;\n\n/**\n * Variable: model\n * \n * Holds the <mxGraphModel> that contains the cells to be displayed.\n */\nmxGraph.prototype.model = null;\n\n/**\n * Variable: view\n * \n * Holds the <mxGraphView> that caches the <mxCellStates> for the cells.\n */\nmxGraph.prototype.view = null;\n\n/**\n * Variable: stylesheet\n * \n * Holds the <mxStylesheet> that defines the appearance of the cells.\n * \n * \n * Example:\n * \n * Use the following code to read a stylesheet into an existing graph.\n * \n * (code)\n * var req = mxUtils.load('stylesheet.xml');\n * var root = req.getDocumentElement();\n * var dec = new mxCodec(root.ownerDocument);\n * dec.decode(root, graph.stylesheet);\n * (end)\n */\nmxGraph.prototype.stylesheet = null;\n\t\n/**\n * Variable: selectionModel\n * \n * Holds the <mxGraphSelectionModel> that models the current selection.\n */\nmxGraph.prototype.selectionModel = null;\n\n/**\n * Variable: cellEditor\n * \n * Holds the <mxCellEditor> that is used as the in-place editing.\n */\nmxGraph.prototype.cellEditor = null;\n\n/**\n * Variable: cellRenderer\n * \n * Holds the <mxCellRenderer> for rendering the cells in the graph.\n */\nmxGraph.prototype.cellRenderer = null;\n\n/**\n * Variable: multiplicities\n * \n * An array of <mxMultiplicities> describing the allowed\n * connections in a graph.\n */\nmxGraph.prototype.multiplicities = null;\n\n/**\n * Variable: renderHint\n * \n * RenderHint as it was passed to the constructor.\n */\nmxGraph.prototype.renderHint = null;\n\n/**\n * Variable: dialect\n * \n * Dialect to be used for drawing the graph. Possible values are all\n * constants in <mxConstants> with a DIALECT-prefix.\n */\nmxGraph.prototype.dialect = null;\n\n/**\n * Variable: gridSize\n * \n * Specifies the grid size. Default is 10.\n */\nmxGraph.prototype.gridSize = 10;\n\t\n/**\n * Variable: gridEnabled\n * \n * Specifies if the grid is enabled. This is used in <snap>. Default is\n * true.\n */\nmxGraph.prototype.gridEnabled = true;\n\n/**\n * Variable: portsEnabled\n * \n * Specifies if ports are enabled. This is used in <cellConnected> to update\n * the respective style. Default is true.\n */\nmxGraph.prototype.portsEnabled = true;\n\n/**\n * Variable: nativeDoubleClickEnabled\n * \n * Specifies if native double click events should be detected. Default is true.\n */\nmxGraph.prototype.nativeDblClickEnabled = true;\n\n/**\n * Variable: doubleTapEnabled\n * \n * Specifies if double taps on touch-based devices should be handled as a\n * double click. Default is true.\n */\nmxGraph.prototype.doubleTapEnabled = true;\n\n/**\n * Variable: doubleTapTimeout\n * \n * Specifies the timeout for double taps and non-native double clicks. Default\n * is 500 ms.\n */\nmxGraph.prototype.doubleTapTimeout = 500;\n\n/**\n * Variable: doubleTapTolerance\n * \n * Specifies the tolerance for double taps and double clicks in quirks mode.\n * Default is 25 pixels.\n */\nmxGraph.prototype.doubleTapTolerance = 25;\n\n/**\n * Variable: lastTouchX\n * \n * Holds the x-coordinate of the last touch event for double tap detection.\n */\nmxGraph.prototype.lastTouchY = 0;\n\n/**\n * Variable: lastTouchX\n * \n * Holds the y-coordinate of the last touch event for double tap detection.\n */\nmxGraph.prototype.lastTouchY = 0;\n\n/**\n * Variable: lastTouchTime\n * \n * Holds the time of the last touch event for double click detection.\n */\nmxGraph.prototype.lastTouchTime = 0;\n\n/**\n * Variable: tapAndHoldEnabled\n * \n * Specifies if tap and hold should be used for starting connections on touch-based\n * devices. Default is true.\n */\nmxGraph.prototype.tapAndHoldEnabled = true;\n\n/**\n * Variable: tapAndHoldDelay\n * \n * Specifies the time for a tap and hold. Default is 500 ms.\n */\nmxGraph.prototype.tapAndHoldDelay = 500;\n\n/**\n * Variable: tapAndHoldInProgress\n * \n * True if the timer for tap and hold events is running.\n */\nmxGraph.prototype.tapAndHoldInProgress = false;\n\n/**\n * Variable: tapAndHoldValid\n * \n * True as long as the timer is running and the touch events\n * stay within the given <tapAndHoldTolerance>.\n */\nmxGraph.prototype.tapAndHoldValid = false;\n\n/**\n * Variable: initialTouchX\n * \n * Holds the x-coordinate of the intial touch event for tap and hold.\n */\nmxGraph.prototype.initialTouchX = 0;\n\n/**\n * Variable: initialTouchY\n * \n * Holds the y-coordinate of the intial touch event for tap and hold.\n */\nmxGraph.prototype.initialTouchY = 0;\n\n/**\n * Variable: tolerance\n * \n * Tolerance for a move to be handled as a single click.\n * Default is 4 pixels.\n */\nmxGraph.prototype.tolerance = 4;\n\n/**\n * Variable: defaultOverlap\n * \n * Value returned by <getOverlap> if <isAllowOverlapParent> returns\n * true for the given cell. <getOverlap> is used in <constrainChild> if\n * <isConstrainChild> returns true. The value specifies the\n * portion of the child which is allowed to overlap the parent.\n */\nmxGraph.prototype.defaultOverlap = 0.5;\n\n/**\n * Variable: defaultParent\n * \n * Specifies the default parent to be used to insert new cells.\n * This is used in <getDefaultParent>. Default is null.\n */\nmxGraph.prototype.defaultParent = null;\n\n/**\n * Variable: alternateEdgeStyle\n * \n * Specifies the alternate edge style to be used if the main control point\n * on an edge is being doubleclicked. Default is null.\n */\nmxGraph.prototype.alternateEdgeStyle = null;\n\n/**\n * Variable: backgroundImage\n *\n * Specifies the <mxImage> to be returned by <getBackgroundImage>. Default\n * is null.\n * \n * Example:\n *\n * (code)\n * var img = new mxImage('http://www.example.com/maps/examplemap.jpg', 1024, 768);\n * graph.setBackgroundImage(img);\n * graph.view.validate();\n * (end)\n */\nmxGraph.prototype.backgroundImage = null;\n\n/**\n * Variable: pageVisible\n *\n * Specifies if the background page should be visible. Default is false.\n * Not yet implemented.\n */\nmxGraph.prototype.pageVisible = false;\n\n/**\n * Variable: pageBreaksVisible\n * \n * Specifies if a dashed line should be drawn between multiple pages. Default\n * is false. If you change this value while a graph is being displayed then you\n * should call <sizeDidChange> to force an update of the display.\n */\nmxGraph.prototype.pageBreaksVisible = false;\n\n/**\n * Variable: pageBreakColor\n * \n * Specifies the color for page breaks. Default is 'gray'.\n */\nmxGraph.prototype.pageBreakColor = 'gray';\n\n/**\n * Variable: pageBreakDashed\n * \n * Specifies the page breaks should be dashed. Default is true.\n */\nmxGraph.prototype.pageBreakDashed = true;\n\n/**\n * Variable: minPageBreakDist\n * \n * Specifies the minimum distance for page breaks to be visible. Default is\n * 20 (in pixels).\n */\nmxGraph.prototype.minPageBreakDist = 20;\n\n/**\n * Variable: preferPageSize\n * \n * Specifies if the graph size should be rounded to the next page number in\n * <sizeDidChange>. This is only used if the graph container has scrollbars.\n * Default is false.\n */\nmxGraph.prototype.preferPageSize = false;\n\n/**\n * Variable: pageFormat\n *\n * Specifies the page format for the background page. Default is\n * <mxConstants.PAGE_FORMAT_A4_PORTRAIT>. This is used as the default in\n * <mxPrintPreview> and for painting the background page if <pageVisible> is\n * true and the pagebreaks if <pageBreaksVisible> is true.\n */\nmxGraph.prototype.pageFormat = mxConstants.PAGE_FORMAT_A4_PORTRAIT;\n\n/**\n * Variable: pageScale\n *\n * Specifies the scale of the background page. Default is 1.5.\n * Not yet implemented.\n */\nmxGraph.prototype.pageScale = 1.5;\n\n/**\n * Variable: enabled\n * \n * Specifies the return value for <isEnabled>. Default is true.\n */\nmxGraph.prototype.enabled = true;\n\n/**\n * Variable: escapeEnabled\n * \n * Specifies if <mxKeyHandler> should invoke <escape> when the escape key\n * is pressed. Default is true.\n */\nmxGraph.prototype.escapeEnabled = true;\n\n/**\n * Variable: invokesStopCellEditing\n * \n * If true, when editing is to be stopped by way of selection changing,\n * data in diagram changing or other means stopCellEditing is invoked, and\n * changes are saved. This is implemented in a focus handler in\n * <mxCellEditor>. Default is true.\n */\nmxGraph.prototype.invokesStopCellEditing = true;\n\n/**\n * Variable: enterStopsCellEditing\n * \n * If true, pressing the enter key without pressing control or shift will stop\n * editing and accept the new value. This is used in <mxCellEditor> to stop\n * cell editing. Note: You can always use F2 and escape to stop editing.\n * Default is false.\n */\nmxGraph.prototype.enterStopsCellEditing = false;\n\n/**\n * Variable: useScrollbarsForPanning\n * \n * Specifies if scrollbars should be used for panning in <panGraph> if\n * any scrollbars are available. If scrollbars are enabled in CSS, but no\n * scrollbars appear because the graph is smaller than the container size,\n * then no panning occurs if this is true. Default is true.\n */\nmxGraph.prototype.useScrollbarsForPanning = true;\n\n/**\n * Variable: exportEnabled\n * \n * Specifies the return value for <canExportCell>. Default is true.\n */\nmxGraph.prototype.exportEnabled = true;\n\n/**\n * Variable: importEnabled\n * \n * Specifies the return value for <canImportCell>. Default is true.\n */\nmxGraph.prototype.importEnabled = true;\n\n/**\n * Variable: cellsLocked\n * \n * Specifies the return value for <isCellLocked>. Default is false.\n */\nmxGraph.prototype.cellsLocked = false;\n\n/**\n * Variable: cellsCloneable\n * \n * Specifies the return value for <isCellCloneable>. Default is true.\n */\nmxGraph.prototype.cellsCloneable = true;\n\n/**\n * Variable: foldingEnabled\n * \n * Specifies if folding (collapse and expand via an image icon in the graph\n * should be enabled). Default is true.\n */\nmxGraph.prototype.foldingEnabled = true;\n\n/**\n * Variable: cellsEditable\n * \n * Specifies the return value for <isCellEditable>. Default is true.\n */\nmxGraph.prototype.cellsEditable = true;\n\t\t\n/**\n * Variable: cellsDeletable\n * \n * Specifies the return value for <isCellDeletable>. Default is true.\n */\nmxGraph.prototype.cellsDeletable = true;\n\n/**\n * Variable: cellsMovable\n * \n * Specifies the return value for <isCellMovable>. Default is true.\n */\nmxGraph.prototype.cellsMovable = true;\n\t\n/**\n * Variable: edgeLabelsMovable\n * \n * Specifies the return value for edges in <isLabelMovable>. Default is true.\n */\nmxGraph.prototype.edgeLabelsMovable = true;\n\t\n/**\n * Variable: vertexLabelsMovable\n * \n * Specifies the return value for vertices in <isLabelMovable>. Default is false.\n */\nmxGraph.prototype.vertexLabelsMovable = false;\n\n/**\n * Variable: dropEnabled\n * \n * Specifies the return value for <isDropEnabled>. Default is false.\n */\nmxGraph.prototype.dropEnabled = false;\n\n/**\n * Variable: splitEnabled\n * \n * Specifies if dropping onto edges should be enabled. This is ignored if\n * <dropEnabled> is false. If enabled, it will call <splitEdge> to carry\n * out the drop operation. Default is true.\n */\nmxGraph.prototype.splitEnabled = true;\n\n/**\n * Variable: cellsResizable\n * \n * Specifies the return value for <isCellResizable>. Default is true.\n */\nmxGraph.prototype.cellsResizable = true;\n\n/**\n * Variable: cellsBendable\n * \n * Specifies the return value for <isCellsBendable>. Default is true.\n */\nmxGraph.prototype.cellsBendable = true;\n\n/**\n * Variable: cellsSelectable\n * \n * Specifies the return value for <isCellSelectable>. Default is true.\n */\nmxGraph.prototype.cellsSelectable = true;\n\n/**\n * Variable: cellsDisconnectable\n * \n * Specifies the return value for <isCellDisconntable>. Default is true.\n */\nmxGraph.prototype.cellsDisconnectable = true;\n\n/**\n * Variable: autoSizeCells\n * \n * Specifies if the graph should automatically update the cell size after an\n * edit. This is used in <isAutoSizeCell>. Default is false.\n */\nmxGraph.prototype.autoSizeCells = false;\n\n/**\n * Variable: autoSizeCellsOnAdd\n * \n * Specifies if autoSize style should be applied when cells are added. Default is false.\n */\nmxGraph.prototype.autoSizeCellsOnAdd = false;\n\n/**\n * Variable: autoScroll\n * \n * Specifies if the graph should automatically scroll if the mouse goes near\n * the container edge while dragging. This is only taken into account if the\n * container has scrollbars. Default is true.\n * \n * If you need this to work without scrollbars then set <ignoreScrollbars> to\n * true. Please consult the <ignoreScrollbars> for details. In general, with\n * no scrollbars, the use of <allowAutoPanning> is recommended.\n */\nmxGraph.prototype.autoScroll = true;\n\n/**\n * Variable: ignoreScrollbars\n * \n * Specifies if the graph should automatically scroll regardless of the\n * scrollbars. This will scroll the container using positive values for\n * scroll positions (ie usually only rightwards and downwards). To avoid\n * possible conflicts with panning, set <translateToScrollPosition> to true.\n */\nmxGraph.prototype.ignoreScrollbars = false;\n\n/**\n * Variable: translateToScrollPosition\n * \n * Specifies if the graph should automatically convert the current scroll\n * position to a translate in the graph view when a mouseUp event is received.\n * This can be used to avoid conflicts when using <autoScroll> and\n * <ignoreScrollbars> with no scrollbars in the container.\n */\nmxGraph.prototype.translateToScrollPosition = false;\n\n/**\n * Variable: timerAutoScroll\n * \n * Specifies if autoscrolling should be carried out via mxPanningManager even\n * if the container has scrollbars. This disables <scrollPointToVisible> and\n * uses <mxPanningManager> instead. If this is true then <autoExtend> is\n * disabled. It should only be used with a scroll buffer or when scollbars\n * are visible and scrollable in all directions. Default is false.\n */\nmxGraph.prototype.timerAutoScroll = false;\n\n/**\n * Variable: allowAutoPanning\n * \n * Specifies if panning via <panGraph> should be allowed to implement autoscroll\n * if no scrollbars are available in <scrollPointToVisible>. To enable panning\n * inside the container, near the edge, set <mxPanningManager.border> to a\n * positive value. Default is false.\n */\nmxGraph.prototype.allowAutoPanning = false;\n\n/**\n * Variable: autoExtend\n * \n * Specifies if the size of the graph should be automatically extended if the\n * mouse goes near the container edge while dragging. This is only taken into\n * account if the container has scrollbars. Default is true. See <autoScroll>.\n */\nmxGraph.prototype.autoExtend = true;\n\n/**\n * Variable: maximumGraphBounds\n * \n * <mxRectangle> that specifies the area in which all cells in the diagram\n * should be placed. Uses in <getMaximumGraphBounds>. Use a width or height of\n * 0 if you only want to give a upper, left corner.\n */\nmxGraph.prototype.maximumGraphBounds = null;\n\n/**\n * Variable: minimumGraphSize\n * \n * <mxRectangle> that specifies the minimum size of the graph. This is ignored\n * if the graph container has no scrollbars. Default is null.\n */\nmxGraph.prototype.minimumGraphSize = null;\n\n/**\n * Variable: minimumContainerSize\n * \n * <mxRectangle> that specifies the minimum size of the <container> if\n * <resizeContainer> is true.\n */\nmxGraph.prototype.minimumContainerSize = null;\n\t\t\n/**\n * Variable: maximumContainerSize\n * \n * <mxRectangle> that specifies the maximum size of the container if\n * <resizeContainer> is true.\n */\nmxGraph.prototype.maximumContainerSize = null;\n\n/**\n * Variable: resizeContainer\n * \n * Specifies if the container should be resized to the graph size when\n * the graph size has changed. Default is false.\n */\nmxGraph.prototype.resizeContainer = false;\n\n/**\n * Variable: border\n * \n * Border to be added to the bottom and right side when the container is\n * being resized after the graph has been changed. Default is 0.\n */\nmxGraph.prototype.border = 0;\n\t\t\n/**\n * Variable: keepEdgesInForeground\n * \n * Specifies if edges should appear in the foreground regardless of their order\n * in the model. If <keepEdgesInForeground> and <keepEdgesInBackground> are\n * both true then the normal order is applied. Default is false.\n */\nmxGraph.prototype.keepEdgesInForeground = false;\n\n/**\n * Variable: keepEdgesInBackground\n * \n * Specifies if edges should appear in the background regardless of their order\n * in the model. If <keepEdgesInForeground> and <keepEdgesInBackground> are\n * both true then the normal order is applied. Default is false.\n */\nmxGraph.prototype.keepEdgesInBackground = false;\n\n/**\n * Variable: allowNegativeCoordinates\n * \n * Specifies if negative coordinates for vertices are allowed. Default is true.\n */\nmxGraph.prototype.allowNegativeCoordinates = true;\n\n/**\n * Variable: constrainChildren\n * \n * Specifies if a child should be constrained inside the parent bounds after a\n * move or resize of the child. Default is true.\n */\nmxGraph.prototype.constrainChildren = true;\n\n/**\n * Variable: constrainRelativeChildren\n * \n * Specifies if child cells with relative geometries should be constrained\n * inside the parent bounds, if <constrainChildren> is true, and/or the\n * <maximumGraphBounds>. Default is false.\n */\nmxGraph.prototype.constrainRelativeChildren = false;\n\n/**\n * Variable: extendParents\n * \n * Specifies if a parent should contain the child bounds after a resize of\n * the child. Default is true. This has precedence over <constrainChildren>.\n */\nmxGraph.prototype.extendParents = true;\n\n/**\n * Variable: extendParentsOnAdd\n * \n * Specifies if parents should be extended according to the <extendParents>\n * switch if cells are added. Default is true.\n */\nmxGraph.prototype.extendParentsOnAdd = true;\n\n/**\n * Variable: extendParentsOnAdd\n * \n * Specifies if parents should be extended according to the <extendParents>\n * switch if cells are added. Default is false for backwards compatiblity.\n */\nmxGraph.prototype.extendParentsOnMove = false;\n\n/**\n * Variable: recursiveResize\n * \n * Specifies the return value for <isRecursiveResize>. Default is\n * false for backwards compatiblity.\n */\nmxGraph.prototype.recursiveResize = false;\n\n/**\n * Variable: collapseToPreferredSize\n * \n * Specifies if the cell size should be changed to the preferred size when\n * a cell is first collapsed. Default is true.\n */\nmxGraph.prototype.collapseToPreferredSize = true;\n\n/**\n * Variable: zoomFactor\n * \n * Specifies the factor used for <zoomIn> and <zoomOut>. Default is 1.2\n * (120%).\n */\nmxGraph.prototype.zoomFactor = 1.2;\n\n/**\n * Variable: keepSelectionVisibleOnZoom\n * \n * Specifies if the viewport should automatically contain the selection cells\n * after a zoom operation. Default is false.\n */\nmxGraph.prototype.keepSelectionVisibleOnZoom = false;\n\n/**\n * Variable: centerZoom\n * \n * Specifies if the zoom operations should go into the center of the actual\n * diagram rather than going from top, left. Default is true.\n */\nmxGraph.prototype.centerZoom = true;\n\n/**\n * Variable: resetViewOnRootChange\n * \n * Specifies if the scale and translate should be reset if the root changes in\n * the model. Default is true.\n */\nmxGraph.prototype.resetViewOnRootChange = true;\n\n/**\n * Variable: resetEdgesOnResize\n * \n * Specifies if edge control points should be reset after the resize of a\n * connected cell. Default is false.\n */\nmxGraph.prototype.resetEdgesOnResize = false;\n\n/**\n * Variable: resetEdgesOnMove\n * \n * Specifies if edge control points should be reset after the move of a\n * connected cell. Default is false.\n */\nmxGraph.prototype.resetEdgesOnMove = false;\n\n/**\n * Variable: resetEdgesOnConnect\n * \n * Specifies if edge control points should be reset after the the edge has been\n * reconnected. Default is true.\n */\nmxGraph.prototype.resetEdgesOnConnect = true;\n\n/**\n * Variable: allowLoops\n * \n * Specifies if loops (aka self-references) are allowed. Default is false.\n */\nmxGraph.prototype.allowLoops = false;\n\t\n/**\n * Variable: defaultLoopStyle\n * \n * <mxEdgeStyle> to be used for loops. This is a fallback for loops if the\n * <mxConstants.STYLE_LOOP> is undefined. Default is <mxEdgeStyle.Loop>.\n */\nmxGraph.prototype.defaultLoopStyle = mxEdgeStyle.Loop;\n\n/**\n * Variable: multigraph\n * \n * Specifies if multiple edges in the same direction between the same pair of\n * vertices are allowed. Default is true.\n */\nmxGraph.prototype.multigraph = true;\n\n/**\n * Variable: connectableEdges\n * \n * Specifies if edges are connectable. Default is false. This overrides the\n * connectable field in edges.\n */\nmxGraph.prototype.connectableEdges = false;\n\n/**\n * Variable: allowDanglingEdges\n * \n * Specifies if edges with disconnected terminals are allowed in the graph.\n * Default is true.\n */\nmxGraph.prototype.allowDanglingEdges = true;\n\n/**\n * Variable: cloneInvalidEdges\n * \n * Specifies if edges that are cloned should be validated and only inserted\n * if they are valid. Default is true.\n */\nmxGraph.prototype.cloneInvalidEdges = false;\n\n/**\n * Variable: disconnectOnMove\n * \n * Specifies if edges should be disconnected from their terminals when they\n * are moved. Default is true.\n */\nmxGraph.prototype.disconnectOnMove = true;\n\n/**\n * Variable: labelsVisible\n * \n * Specifies if labels should be visible. This is used in <getLabel>. Default\n * is true.\n */\nmxGraph.prototype.labelsVisible = true;\n\t\n/**\n * Variable: htmlLabels\n * \n * Specifies the return value for <isHtmlLabel>. Default is false.\n */\nmxGraph.prototype.htmlLabels = false;\n\n/**\n * Variable: swimlaneSelectionEnabled\n * \n * Specifies if swimlanes should be selectable via the content if the\n * mouse is released. Default is true.\n */\nmxGraph.prototype.swimlaneSelectionEnabled = true;\n\n/**\n * Variable: swimlaneNesting\n * \n * Specifies if nesting of swimlanes is allowed. Default is true.\n */\nmxGraph.prototype.swimlaneNesting = true;\n\t\n/**\n * Variable: swimlaneIndicatorColorAttribute\n * \n * The attribute used to find the color for the indicator if the indicator\n * color is set to 'swimlane'. Default is <mxConstants.STYLE_FILLCOLOR>.\n */\nmxGraph.prototype.swimlaneIndicatorColorAttribute = mxConstants.STYLE_FILLCOLOR;\n\n/**\n * Variable: imageBundles\n * \n * Holds the list of image bundles.\n */\nmxGraph.prototype.imageBundles = null;\n\n/**\n * Variable: minFitScale\n * \n * Specifies the minimum scale to be applied in <fit>. Default is 0.1. Set this\n * to null to allow any value.\n */\nmxGraph.prototype.minFitScale = 0.1;\n\n/**\n * Variable: maxFitScale\n * \n * Specifies the maximum scale to be applied in <fit>. Default is 8. Set this\n * to null to allow any value.\n */\nmxGraph.prototype.maxFitScale = 8;\n\n/**\n * Variable: panDx\n * \n * Current horizontal panning value. Default is 0.\n */\nmxGraph.prototype.panDx = 0;\n\n/**\n * Variable: panDy\n * \n * Current vertical panning value. Default is 0.\n */\nmxGraph.prototype.panDy = 0;\n\n/**\n * Variable: collapsedImage\n * \n * Specifies the <mxImage> to indicate a collapsed state.\n * Default value is mxClient.imageBasePath + '/collapsed.gif'\n */\nmxGraph.prototype.collapsedImage = new mxImage(mxClient.imageBasePath + '/collapsed.gif', 9, 9);\n\n/**\n * Variable: expandedImage\n * \n * Specifies the <mxImage> to indicate a expanded state.\n * Default value is mxClient.imageBasePath + '/expanded.gif'\n */\nmxGraph.prototype.expandedImage = new mxImage(mxClient.imageBasePath + '/expanded.gif', 9, 9);\n\n/**\n * Variable: warningImage\n * \n * Specifies the <mxImage> for the image to be used to display a warning\n * overlay. See <setCellWarning>. Default value is mxClient.imageBasePath +\n * '/warning'.  The extension for the image depends on the platform. It is\n * '.png' on the Mac and '.gif' on all other platforms.\n */\nmxGraph.prototype.warningImage = new mxImage(mxClient.imageBasePath + '/warning'+\n\t((mxClient.IS_MAC) ? '.png' : '.gif'), 16, 16);\n\n/**\n * Variable: alreadyConnectedResource\n * \n * Specifies the resource key for the error message to be displayed in\n * non-multigraphs when two vertices are already connected. If the resource\n * for this key does not exist then the value is used as the error message.\n * Default is 'alreadyConnected'.\n */\nmxGraph.prototype.alreadyConnectedResource = (mxClient.language != 'none') ? 'alreadyConnected' : '';\n\n/**\n * Variable: containsValidationErrorsResource\n * \n * Specifies the resource key for the warning message to be displayed when\n * a collapsed cell contains validation errors. If the resource for this\n * key does not exist then the value is used as the warning message.\n * Default is 'containsValidationErrors'.\n */\nmxGraph.prototype.containsValidationErrorsResource = (mxClient.language != 'none') ? 'containsValidationErrors' : '';\n\n/**\n * Variable: collapseExpandResource\n * \n * Specifies the resource key for the tooltip on the collapse/expand icon.\n * If the resource for this key does not exist then the value is used as\n * the tooltip. Default is 'collapse-expand'.\n */\nmxGraph.prototype.collapseExpandResource = (mxClient.language != 'none') ? 'collapse-expand' : '';\n\n/**\n * Function: init\n * \n * Initializes the <container> and creates the respective datastructures.\n * \n * Parameters:\n * \n * container - DOM node that will contain the graph display.\n */\nmxGraph.prototype.init = function(container)\n{\n\tthis.container = container;\n\t\n\t// Initializes the in-place editor\n\tthis.cellEditor = this.createCellEditor();\t\n\n\t// Initializes the container using the view\n\tthis.view.init();\n\t\n\t// Updates the size of the container for the current graph\n\tthis.sizeDidChange();\n\t\n\t// Hides tooltips and resets tooltip timer if mouse leaves container\n\tmxEvent.addListener(container, 'mouseleave', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.tooltipHandler != null && this.tooltipHandler.div != null &&\n\t\t\tthis.tooltipHandler.div != evt.relatedTarget)\n\t\t{\n\t\t\t/**\n\t\t\t* {{SQL CARBON EDIT}} commenting out this code as it gets triggered for cells at the edge of the screen.\n\t\t\t*/\n\t\t\t// this.tooltipHandler.hide();\n\t\t}\n\t}));\n\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\t\t\n\t\t// Disable shift-click for text\n\t\tmxEvent.addListener(container, 'selectstart',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\treturn this.isEditing() || (!this.isMouseDown && !mxEvent.isShiftDown(evt));\n\t\t\t})\n\t\t);\n\t}\n\t\n\t// Workaround for missing last shape and connect preview in IE8 standards\n\t// mode if no initial graph displayed or no label for shape defined\n\tif (document.documentMode == 8)\n\t{\n\t\tcontainer.insertAdjacentHTML('beforeend', '<' + mxClient.VML_PREFIX + ':group' +\n\t\t\t' style=\"DISPLAY: none;\"></' + mxClient.VML_PREFIX + ':group>');\n\t}\n};\n\n/**\n * Function: createHandlers\n * \n * Creates the tooltip-, panning-, connection- and graph-handler (in this\n * order). This is called in the constructor before <init> is called.\n */\nmxGraph.prototype.createHandlers = function()\n{\n\tthis.tooltipHandler = this.createTooltipHandler();\n\tthis.tooltipHandler.setEnabled(false);\n\tthis.selectionCellsHandler = this.createSelectionCellsHandler();\n\tthis.connectionHandler = this.createConnectionHandler();\n\tthis.connectionHandler.setEnabled(false);\n\tthis.graphHandler = this.createGraphHandler();\n\tthis.panningHandler = this.createPanningHandler();\n\tthis.panningHandler.panningEnabled = false;\n\tthis.popupMenuHandler = this.createPopupMenuHandler();\n};\n\n/**\n * Function: createTooltipHandler\n * \n * Creates and returns a new <mxTooltipHandler> to be used in this graph.\n */\nmxGraph.prototype.createTooltipHandler = function()\n{\n\treturn new mxTooltipHandler(this);\n};\n\n/**\n * Function: createSelectionCellsHandler\n * \n * Creates and returns a new <mxTooltipHandler> to be used in this graph.\n */\nmxGraph.prototype.createSelectionCellsHandler = function()\n{\n\treturn new mxSelectionCellsHandler(this);\n};\n\n/**\n * Function: createConnectionHandler\n * \n * Creates and returns a new <mxConnectionHandler> to be used in this graph.\n */\nmxGraph.prototype.createConnectionHandler = function()\n{\n\treturn new mxConnectionHandler(this);\n};\n\n/**\n * Function: createGraphHandler\n * \n * Creates and returns a new <mxGraphHandler> to be used in this graph.\n */\nmxGraph.prototype.createGraphHandler = function()\n{\n\treturn new mxGraphHandler(this);\n};\n\n/**\n * Function: createPanningHandler\n * \n * Creates and returns a new <mxPanningHandler> to be used in this graph.\n */\nmxGraph.prototype.createPanningHandler = function()\n{\n\treturn new mxPanningHandler(this);\n};\n\n/**\n * Function: createPopupMenuHandler\n * \n * Creates and returns a new <mxPopupMenuHandler> to be used in this graph.\n */\nmxGraph.prototype.createPopupMenuHandler = function()\n{\n\treturn new mxPopupMenuHandler(this);\n};\n\n/**\n * Function: createSelectionModel\n * \n * Creates a new <mxGraphSelectionModel> to be used in this graph.\n */\nmxGraph.prototype.createSelectionModel = function()\n{\n\treturn new mxGraphSelectionModel(this);\n};\n\n/**\n * Function: createStylesheet\n * \n * Creates a new <mxGraphSelectionModel> to be used in this graph.\n */\nmxGraph.prototype.createStylesheet = function()\n{\n\treturn new mxStylesheet();\n};\n\n/**\n * Function: createGraphView\n * \n * Creates a new <mxGraphView> to be used in this graph.\n */\nmxGraph.prototype.createGraphView = function()\n{\n\treturn new mxGraphView(this);\n};\n \n/**\n * Function: createCellRenderer\n * \n * Creates a new <mxCellRenderer> to be used in this graph.\n */\nmxGraph.prototype.createCellRenderer = function()\n{\n\treturn new mxCellRenderer();\n};\n\n/**\n * Function: createCellEditor\n * \n * Creates a new <mxCellEditor> to be used in this graph.\n */\nmxGraph.prototype.createCellEditor = function()\n{\n\treturn new mxCellEditor(this);\n};\n\n/**\n * Function: getModel\n * \n * Returns the <mxGraphModel> that contains the cells.\n */\nmxGraph.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: getView\n * \n * Returns the <mxGraphView> that contains the <mxCellStates>.\n */\nmxGraph.prototype.getView = function()\n{\n\treturn this.view;\n};\n\n/**\n * Function: getStylesheet\n * \n * Returns the <mxStylesheet> that defines the style.\n */\nmxGraph.prototype.getStylesheet = function()\n{\n\treturn this.stylesheet;\n};\n\n/**\n * Function: setStylesheet\n * \n * Sets the <mxStylesheet> that defines the style.\n */\nmxGraph.prototype.setStylesheet = function(stylesheet)\n{\n\tthis.stylesheet = stylesheet;\n};\n\n/**\n * Function: getSelectionModel\n * \n * Returns the <mxGraphSelectionModel> that contains the selection.\n */\nmxGraph.prototype.getSelectionModel = function()\n{\n\treturn this.selectionModel;\n};\n\n/**\n * Function: setSelectionModel\n * \n * Sets the <mxSelectionModel> that contains the selection.\n */\nmxGraph.prototype.setSelectionModel = function(selectionModel)\n{\n\tthis.selectionModel = selectionModel;\n};\n\n/**\n * Function: getSelectionCellsForChanges\n * \n * Returns the cells to be selected for the given array of changes.\n * \n * Parameters:\n * \n * ignoreFn - Optional function that takes a change and returns true if the\n * change should be ignored.\n * \n */\nmxGraph.prototype.getSelectionCellsForChanges = function(changes, ignoreFn)\n{\n\tvar dict = new mxDictionary();\n\tvar cells = [];\n\t\n\tvar addCell = mxUtils.bind(this, function(cell)\n\t{\n\t\tif (!dict.get(cell) && this.model.contains(cell))\n\t\t{\n\t\t\tif (this.model.isEdge(cell) || this.model.isVertex(cell))\n\t\t\t{\n\t\t\t\tdict.put(cell, true);\n\t\t\t\tcells.push(cell);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\taddCell(this.model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\t\t\n\t\tif (change.constructor != mxRootChange &&\n\t\t\t(ignoreFn == null || !ignoreFn(change)))\n\t\t{\n\t\t\tvar cell = null;\n\n\t\t\tif (change instanceof mxChildChange)\n\t\t\t{\n\t\t\t\tcell = change.child;\n\t\t\t}\n\t\t\telse if (change.cell != null &&\n\t\t\t\tchange.cell instanceof mxCell)\n\t\t\t{\n\t\t\t\tcell = change.cell;\n\t\t\t}\n\t\t\t\n\t\t\tif (cell != null)\n\t\t\t{\n\t\t\t\taddCell(cell);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: graphModelChanged\n * \n * Called when the graph model changes. Invokes <processChange> on each\n * item of the given array to update the view accordingly.\n * \n * Parameters:\n * \n * changes - Array that contains the individual changes.\n */\nmxGraph.prototype.graphModelChanged = function(changes)\n{\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tthis.processChange(changes[i]);\n\t}\n\n\tthis.updateSelection();\n\tthis.view.validate();\n\tthis.sizeDidChange();\n};\n\n/**\n * Function: updateSelection\n * \n * Removes selection cells that are not in the model from the selection.\n */\nmxGraph.prototype.updateSelection = function()\n{\n\tvar cells = this.getSelectionCells();\n\tvar removed = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (!this.model.contains(cells[i]) || !this.isCellVisible(cells[i]))\n\t\t{\n\t\t\tremoved.push(cells[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar par = this.model.getParent(cells[i]);\n\t\t\t\n\t\t\twhile (par != null && par != this.view.currentRoot)\n\t\t\t{\n\t\t\t\tif (this.isCellCollapsed(par) || !this.isCellVisible(par))\n\t\t\t\t{\n\t\t\t\t\tremoved.push(cells[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpar = this.model.getParent(par);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.removeSelectionCells(removed);\n};\n\n/**\n * Function: processChange\n * \n * Processes the given change and invalidates the respective cached data\n * in <view>. This fires a <root> event if the root has changed in the\n * model.\n * \n * Parameters:\n * \n * change - Object that represents the change on the model.\n */\nmxGraph.prototype.processChange = function(change)\n{\n\t// Resets the view settings, removes all cells and clears\n\t// the selection if the root changes.\n\tif (change instanceof mxRootChange)\n\t{\n\t\tthis.clearSelection();\n\t\tthis.setDefaultParent(null);\n\t\tthis.removeStateForCell(change.previous);\n\t\t\n\t\tif (this.resetViewOnRootChange)\n\t\t{\n\t\t\tthis.view.scale = 1;\n\t\t\tthis.view.translate.x = 0;\n\t\t\tthis.view.translate.y = 0;\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t}\n\t\n\t// Adds or removes a child to the view by online invaliding\n\t// the minimal required portions of the cache, namely, the\n\t// old and new parent and the child.\n\telse if (change instanceof mxChildChange)\n\t{\n\t\tvar newParent = this.model.getParent(change.child);\n\t\tthis.view.invalidate(change.child, true, true);\n\t\t\n\t\tif (!this.model.contains(newParent) || this.isCellCollapsed(newParent))\n\t\t{\n\t\t\tthis.view.invalidate(change.child, true, true);\n\t\t\tthis.removeStateForCell(change.child);\n\t\t\t\n\t\t\t// Handles special case of current root of view being removed\n\t\t\tif (this.view.currentRoot == change.child)\n\t\t\t{\n\t\t\t\tthis.home();\n\t\t\t}\n\t\t}\n \n\t\tif (newParent != change.previous)\n\t\t{\n\t\t\t// Refreshes the collapse/expand icons on the parents\n\t\t\tif (newParent != null)\n\t\t\t{\n\t\t\t\tthis.view.invalidate(newParent, false, false);\n\t\t\t}\n\t\t\t\n\t\t\tif (change.previous != null)\n\t\t\t{\n\t\t\t\tthis.view.invalidate(change.previous, false, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handles two special cases where the shape does not need to be\n\t// recreated from scratch, it only needs to be invalidated.\n\telse if (change instanceof mxTerminalChange || change instanceof mxGeometryChange)\n\t{\n\t\t// Checks if the geometry has changed to avoid unnessecary revalidation\n\t\tif (change instanceof mxTerminalChange || ((change.previous == null && change.geometry != null) ||\n\t\t\t(change.previous != null && !change.previous.equals(change.geometry))))\n\t\t{\n\t\t\tthis.view.invalidate(change.cell);\n\t\t}\n\t}\n\n\t// Handles two special cases where only the shape, but no\n\t// descendants need to be recreated\n\telse if (change instanceof mxValueChange)\n\t{\n\t\tthis.view.invalidate(change.cell, false, false);\n\t}\n\t\n\t// Requires a new mxShape in JavaScript\n\telse if (change instanceof mxStyleChange)\n\t{\n\t\tthis.view.invalidate(change.cell, true, true);\n\t\tvar state = this.view.getState(change.cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tstate.invalidStyle = true;\n\t\t}\n\t}\n\t\n\t// Removes the state from the cache by default\n\telse if (change.cell != null && change.cell instanceof mxCell)\n\t{\n\t\tthis.removeStateForCell(change.cell);\n\t}\n};\n\n/**\n * Function: removeStateForCell\n * \n * Removes all cached information for the given cell and its descendants.\n * This is called when a cell was removed from the model.\n * \n * Paramters:\n * \n * cell - <mxCell> that was removed from the model.\n */\nmxGraph.prototype.removeStateForCell = function(cell)\n{\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.removeStateForCell(this.model.getChildAt(cell, i));\n\t}\n\n\tthis.view.invalidate(cell, false, true);\n\tthis.view.removeState(cell);\n};\n\n/**\n * Group: Overlays\n */\n\n/**\n * Function: addCellOverlay\n * \n * Adds an <mxCellOverlay> for the specified cell. This method fires an\n * <addoverlay> event and returns the new <mxCellOverlay>.\n * \n * Parameters:\n * \n * cell - <mxCell> to add the overlay for.\n * overlay - <mxCellOverlay> to be added for the cell.\n */\nmxGraph.prototype.addCellOverlay = function(cell, overlay)\n{\n\tif (cell.overlays == null)\n\t{\n\t\tcell.overlays = [];\n\t}\n\t\n\tcell.overlays.push(overlay);\n\n\tvar state = this.view.getState(cell);\n\n\t// Immediately updates the cell display if the state exists\n\tif (state != null)\n\t{\n\t\tthis.cellRenderer.redraw(state);\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.ADD_OVERLAY,\n\t\t\t'cell', cell, 'overlay', overlay));\n\t\n\treturn overlay;\n};\n\n/**\n * Function: getCellOverlays\n * \n * Returns the array of <mxCellOverlays> for the given cell or null, if\n * no overlays are defined.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlays should be returned.\n */\nmxGraph.prototype.getCellOverlays = function(cell)\n{\n\treturn cell.overlays;\n};\n\n/**\n * Function: removeCellOverlay\n * \n * Removes and returns the given <mxCellOverlay> from the given cell. This\n * method fires a <removeoverlay> event. If no overlay is given, then all\n * overlays are removed using <removeOverlays>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlay should be removed.\n * overlay - Optional <mxCellOverlay> to be removed.\n */\nmxGraph.prototype.removeCellOverlay = function(cell, overlay)\n{\n\tif (overlay == null)\n\t{\n\t\tthis.removeCellOverlays(cell);\n\t}\n\telse\n\t{\n\t\tvar index = mxUtils.indexOf(cell.overlays, overlay);\n\t\t\n\t\tif (index >= 0)\n\t\t{\n\t\t\tcell.overlays.splice(index, 1);\n\t\t\t\n\t\t\tif (cell.overlays.length == 0)\n\t\t\t{\n\t\t\t\tcell.overlays = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Immediately updates the cell display if the state exists\n\t\t\tvar state = this.view.getState(cell);\n\t\t\t\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tthis.cellRenderer.redraw(state);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,\n\t\t\t\t\t'cell', cell, 'overlay', overlay));\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\toverlay = null;\n\t\t}\n\t}\n\t\n\treturn overlay;\n};\n\n/**\n * Function: removeCellOverlays\n * \n * Removes all <mxCellOverlays> from the given cell. This method\n * fires a <removeoverlay> event for each <mxCellOverlay> and returns\n * the array of <mxCellOverlays> that was removed from the cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlays should be removed\n */\nmxGraph.prototype.removeCellOverlays = function(cell)\n{\n\tvar overlays = cell.overlays;\n\t\n\tif (overlays != null)\n\t{\n\t\tcell.overlays = null;\n\t\t\n\t\t// Immediately updates the cell display if the state exists\n\t\tvar state = this.view.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.cellRenderer.redraw(state);\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,\n\t\t\t\t\t'cell', cell, 'overlay', overlays[i]));\n\t\t}\n\t}\n\t\n\treturn overlays;\n};\n\n/**\n * Function: clearCellOverlays\n * \n * Removes all <mxCellOverlays> in the graph for the given cell and all its\n * descendants. If no cell is specified then all overlays are removed from\n * the graph. This implementation uses <removeCellOverlays> to remove the\n * overlays from the individual cells.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> that represents the root of the subtree to\n * remove the overlays from. Default is the root in the model.\n */\nmxGraph.prototype.clearCellOverlays = function(cell)\n{\n\tcell = (cell != null) ? cell : this.model.getRoot();\n\tthis.removeCellOverlays(cell);\n\t\n\t// Recursively removes all overlays from the children\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.model.getChildAt(cell, i);\n\t\tthis.clearCellOverlays(child); // recurse\n\t}\n};\n\n/**\n * Function: setCellWarning\n * \n * Creates an overlay for the given cell using the warning and image or\n * <warningImage> and returns the new <mxCellOverlay>. The warning is\n * displayed as a tooltip in a red font and may contain HTML markup. If\n * the warning is null or a zero length string, then all overlays are\n * removed from the cell.\n * \n * Example:\n * \n * (code)\n * graph.setCellWarning(cell, '<b>Warning:</b>: Hello, World!');\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose warning should be set.\n * warning - String that represents the warning to be displayed.\n * img - Optional <mxImage> to be used for the overlay. Default is\n * <warningImage>.\n * isSelect - Optional boolean indicating if a click on the overlay\n * should select the corresponding cell. Default is false.\n */\nmxGraph.prototype.setCellWarning = function(cell, warning, img, isSelect)\n{\n\tif (warning != null && warning.length > 0)\n\t{\n\t\timg = (img != null) ? img : this.warningImage;\n\t\t\n\t\t// Creates the overlay with the image and warning\n\t\tvar overlay = new mxCellOverlay(img,\n\t\t\t'<font color=red>'+warning+'</font>');\n\t\t\n\t\t// Adds a handler for single mouseclicks to select the cell\n\t\tif (isSelect)\n\t\t{\n\t\t\toverlay.addListener(mxEvent.CLICK,\n\t\t\t\tmxUtils.bind(this, function(sender, evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isEnabled())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setSelectionCell(cell);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\t\n\t\t// Sets and returns the overlay in the graph\n\t\treturn this.addCellOverlay(cell, overlay);\n\t}\n\telse\n\t{\n\t\tthis.removeCellOverlays(cell);\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Group: In-place editing\n */\n\n/**\n * Function: startEditing\n * \n * Calls <startEditingAtCell> using the given cell or the first selection\n * cell.\n * \n * Parameters:\n * \n * evt - Optional mouse event that triggered the editing.\n */\nmxGraph.prototype.startEditing = function(evt)\n{\n\tthis.startEditingAtCell(null, evt);\n};\n\n/**\n * Function: startEditingAtCell\n * \n * Fires a <startEditing> event and invokes <mxCellEditor.startEditing>\n * on <editor>. After editing was started, a <editingStarted> event is\n * fired.\n * \n * Parameters:\n * \n * cell - <mxCell> to start the in-place editor for.\n * evt - Optional mouse event that triggered the editing.\n */\nmxGraph.prototype.startEditingAtCell = function(cell, evt)\n{\n\tif (evt == null || !mxEvent.isMultiTouchEvent(evt))\n\t{\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.getSelectionCell();\n\t\t\t\n\t\t\tif (cell != null && !this.isCellEditable(cell))\n\t\t\t{\n\t\t\t\tcell = null;\n\t\t\t}\n\t\t}\n\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.START_EDITING,\n\t\t\t\t\t'cell', cell, 'event', evt));\n\t\t\tthis.cellEditor.startEditing(cell, evt);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.EDITING_STARTED,\n\t\t\t\t\t'cell', cell, 'event', evt));\n\t\t}\n\t}\n};\n\n/**\n * Function: getEditingValue\n * \n * Returns the initial value for in-place editing. This implementation\n * returns <convertValueToString> for the given cell. If this function is\n * overridden, then <mxGraphModel.valueForCellChanged> should take care\n * of correctly storing the actual new value inside the user object.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the initial editing value should be returned.\n * evt - Optional mouse event that triggered the editor.\n */\nmxGraph.prototype.getEditingValue = function(cell, evt)\n{\n\treturn this.convertValueToString(cell);\n};\n\n/**\n * Function: stopEditing\n * \n * Stops the current editing  and fires a <editingStopped> event.\n * \n * Parameters:\n * \n * cancel - Boolean that specifies if the current editing value\n * should be stored.\n */\nmxGraph.prototype.stopEditing = function(cancel)\n{\n\tthis.cellEditor.stopEditing(cancel);\n\tthis.fireEvent(new mxEventObject(mxEvent.EDITING_STOPPED, 'cancel', cancel));\n};\n\n/**\n * Function: labelChanged\n * \n * Sets the label of the specified cell to the given value using\n * <cellLabelChanged> and fires <mxEvent.LABEL_CHANGED> while the\n * transaction is in progress. Returns the cell whose label was changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be changed.\n * value - New label to be assigned.\n * evt - Optional event that triggered the change.\n */\nmxGraph.prototype.labelChanged = function(cell, value, evt)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar old = cell.value;\n\t\tthis.cellLabelChanged(cell, value, this.isAutoSizeCell(cell));\n\t\tthis.fireEvent(new mxEventObject(mxEvent.LABEL_CHANGED,\n\t\t\t'cell', cell, 'value', value, 'old', old, 'event', evt));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellLabelChanged\n * \n * Sets the new label for a cell. If autoSize is true then\n * <cellSizeUpdated> will be called.\n * \n * In the following example, the function is extended to map changes to\n * attributes in an XML node, as shown in <convertValueToString>.\n * Alternatively, the handling of this can be implemented as shown in\n * <mxGraphModel.valueForCellChanged> without the need to clone the\n * user object.\n * \n * (code)\n * var graphCellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged = function(cell, newValue, autoSize)\n * {\n * \t// Cloned for correct undo/redo\n * \tvar elt = cell.value.cloneNode(true);\n *  elt.setAttribute('label', newValue);\n *  \n *  newValue = elt;\n *  graphCellLabelChanged.apply(this, arguments);\n * };\n * (end) \n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be changed.\n * value - New label to be assigned.\n * autoSize - Boolean that specifies if <cellSizeUpdated> should be called.\n */\nmxGraph.prototype.cellLabelChanged = function(cell, value, autoSize)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.model.setValue(cell, value);\n\t\t\n\t\tif (autoSize)\n\t\t{\n\t\t\tthis.cellSizeUpdated(cell, false);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n};\n\n/**\n * Group: Event processing\n */\n\n/**\n * Function: escape\n * \n * Processes an escape keystroke.\n * \n * Parameters:\n * \n * evt - Mouseevent that represents the keystroke.\n */\nmxGraph.prototype.escape = function(evt)\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n};\n\n/**\n * Function: click\n * \n * Processes a singleclick on an optional cell and fires a <click> event.\n * The click event is fired initially. If the graph is enabled and the\n * event has not been consumed, then the cell is selected using\n * <selectCellForEvent> or the selection is cleared using\n * <clearSelection>. The events consumed state is set to true if the\n * corresponding <mxMouseEvent> has been consumed.\n *\n * To handle a click event, use the following code.\n * \n * (code)\n * graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event'); // mouse event\n *   var cell = evt.getProperty('cell'); // cell may be null\n *   \n *   if (cell != null)\n *   {\n *     // Do something useful with cell and consume the event\n *     evt.consume();\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the single click.\n */\nmxGraph.prototype.click = function(me)\n{\n\tvar evt = me.getEvent();\n\tvar cell = me.getCell();\n\tvar mxe = new mxEventObject(mxEvent.CLICK, 'event', evt, 'cell', cell);\n\t\n\tif (me.isConsumed())\n\t{\n\t\tmxe.consume();\n\t}\n\t\n\tthis.fireEvent(mxe);\n\t\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed())\n\t{\n\t\tif (cell != null)\n\t\t{\n\t\t\tif (this.isTransparentClickEvent(evt))\n\t\t\t{\n\t\t\t\tvar active = false;\n\t\t\t\t\n\t\t\t\tvar tmp = this.getCellAt(me.graphX, me.graphY, null, null, null,\n\t\t\t\t\tmxUtils.bind(this, function(state)\n\t\t\t\t{\n\t\t\t\t\tvar selected = this.isCellSelected(state.cell);\n\t\t\t\t\tactive = active || selected;\n\t\t\t\t\t\n\t\t\t\t\treturn !active || selected || (state.cell != cell &&\n\t\t\t\t\t\tthis.model.isAncestor(state.cell, cell));\n\t\t\t\t}));\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tcell = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.isSwimlaneSelectionEnabled())\n\t\t{\n\t\t\tcell = this.getSwimlaneAt(me.getGraphX(), me.getGraphY());\n\t\t\t\t\n\t\t\tif (cell != null && (!this.isToggleEvent(evt) ||\n\t\t\t\t!mxEvent.isAltDown(evt)))\n\t\t\t{\n\t\t\t\tvar temp = cell;\n\t\t\t\tvar swimlanes = [];\n\t\t\t\t\n\t\t\t\twhile (temp != null)\n\t\t\t\t{\n\t\t\t\t\ttemp = this.model.getParent(temp);\n\t\t\t\t\tvar state = this.view.getState(temp);\n\t\t\t\t\t\n\t\t\t\t\tif (this.isSwimlane(temp) && state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tswimlanes.push(temp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Selects ancestors for selected swimlanes\n\t\t\t\tif (swimlanes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tswimlanes = swimlanes.reverse();\n\t\t\t\t\tswimlanes.splice(0, 0, cell);\n\t\t\t\t\tswimlanes.push(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < swimlanes.length - 1; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.isCellSelected(swimlanes[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcell = swimlanes[(this.isToggleEvent(evt)) ?\n\t\t\t\t\t\t\t\ti : i + 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tthis.selectCellForEvent(cell, evt);\n\t\t}\n\t\telse if (!this.isToggleEvent(evt))\n\t\t{\n\t\t\tthis.clearSelection();\n\t\t}\n\t}\n};\n\n/**\n * Function: isSiblingSelected\n * \n * Returns true if any sibling of the given cell is selected.\n */\nmxGraph.prototype.isSiblingSelected = function(cell)\n{\n\tvar model = this.model;\n\tvar parent = model.getParent(cell);\n\tvar childCount = model.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (cell != child && this.isCellSelected(child))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n\n/**\n * Function: dblClick\n * \n * Processes a doubleclick on an optional cell and fires a <dblclick>\n * event. The event is fired initially. If the graph is enabled and the\n * event has not been consumed, then <edit> is called with the given\n * cell. The event is ignored if no cell was specified.\n *\n * Example for overriding this method.\n *\n * (code)\n * graph.dblClick = function(evt, cell)\n * {\n *   var mxe = new mxEventObject(mxEvent.DOUBLE_CLICK, 'event', evt, 'cell', cell);\n *   this.fireEvent(mxe);\n *   \n *   if (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed())\n *   {\n * \t   mxUtils.alert('Hello, World!');\n *     mxe.consume();\n *   }\n * }\n * (end)\n * \n * Example listener for this event.\n * \n * (code)\n * graph.addListener(mxEvent.DOUBLE_CLICK, function(sender, evt)\n * {\n *   var cell = evt.getProperty('cell');\n *   // do something with the cell and consume the\n *   // event to prevent in-place editing from start\n * });\n * (end) \n * \n * Parameters:\n * \n * evt - Mouseevent that represents the doubleclick.\n * cell - Optional <mxCell> under the mousepointer.\n */\nmxGraph.prototype.dblClick = function(evt, cell)\n{\n\tvar mxe = new mxEventObject(mxEvent.DOUBLE_CLICK, 'event', evt, 'cell', cell);\n\tthis.fireEvent(mxe);\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed() &&\n\t\tcell != null && this.isCellEditable(cell) && !this.isEditing(cell))\n\t{\n\t\tthis.startEditingAtCell(cell, evt);\n\t\tmxEvent.consume(evt);\n\t}\n};\n\n/**\n * Function: tapAndHold\n * \n * Handles the <mxMouseEvent> by highlighting the <mxCellState>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the touch event.\n * state - Optional <mxCellState> that is associated with the event.\n */\nmxGraph.prototype.tapAndHold = function(me)\n{\n\tvar evt = me.getEvent();\n\tvar mxe = new mxEventObject(mxEvent.TAP_AND_HOLD, 'event', evt, 'cell', me.getCell());\n\n\t// LATER: Check if event should be consumed if me is consumed\n\tthis.fireEvent(mxe);\n\n\tif (mxe.isConsumed())\n\t{\n\t\t// Resets the state of the panning handler\n\t\tthis.panningHandler.panningTrigger = false;\n\t}\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed() && this.connectionHandler.isEnabled())\n\t{\n\t\tvar state = this.view.getState(this.connectionHandler.marker.getCell(me));\n\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.connectionHandler.marker.currentColor = this.connectionHandler.marker.validColor;\n\t\t\tthis.connectionHandler.marker.markedState = state;\n\t\t\tthis.connectionHandler.marker.mark();\n\t\t\t\n\t\t\tthis.connectionHandler.first = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\tthis.connectionHandler.edgeState = this.connectionHandler.createEdgeState(me);\n\t\t\tthis.connectionHandler.previous = state;\n\t\t\tthis.connectionHandler.fireEvent(new mxEventObject(mxEvent.START, 'state', this.connectionHandler.previous));\n\t\t}\n\t}\n};\n\n/**\n * Function: scrollPointToVisible\n * \n * Scrolls the graph to the given point, extending the graph container if\n * specified.\n */\nmxGraph.prototype.scrollPointToVisible = function(x, y, extend, border)\n{\n\tif (!this.timerAutoScroll && (this.ignoreScrollbars || mxUtils.hasScrollbars(this.container)))\n\t{\n\t\tvar c = this.container;\n\t\tborder = (border != null) ? border : 20;\n\t\t\n\t\tif (x >= c.scrollLeft && y >= c.scrollTop && x <= c.scrollLeft + c.clientWidth &&\n\t\t\ty <= c.scrollTop + c.clientHeight)\n\t\t{\n\t\t\tvar dx = c.scrollLeft + c.clientWidth - x;\n\t\t\t\n\t\t\tif (dx < border)\n\t\t\t{\n\t\t\t\tvar old = c.scrollLeft;\n\t\t\t\tc.scrollLeft += border - dx;\n\n\t\t\t\t// Automatically extends the canvas size to the bottom, right\n\t\t\t\t// if the event is outside of the canvas and the edge of the\n\t\t\t\t// canvas has been reached. Notes: Needs fix for IE.\n\t\t\t\tif (extend && old == c.scrollLeft)\n\t\t\t\t{\n\t\t\t\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\t\t\tvar width = this.container.scrollWidth + border - dx;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Updates the clipping region. This is an expensive\n\t\t\t\t\t\t// operation that should not be executed too often.\n\t\t\t\t\t\troot.style.width = width + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar width = Math.max(c.clientWidth, c.scrollWidth) + border - dx;\n\t\t\t\t\t\tvar canvas = this.view.getCanvas();\n\t\t\t\t\t\tcanvas.style.width = width + 'px';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tc.scrollLeft += border - dx;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdx = x - c.scrollLeft;\n\t\t\t\t\n\t\t\t\tif (dx < border)\n\t\t\t\t{\n\t\t\t\t\tc.scrollLeft -= border - dx;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar dy = c.scrollTop + c.clientHeight - y;\n\t\t\t\n\t\t\tif (dy < border)\n\t\t\t{\n\t\t\t\tvar old = c.scrollTop;\n\t\t\t\tc.scrollTop += border - dy;\n\n\t\t\t\tif (old == c.scrollTop && extend)\n\t\t\t\t{\n\t\t\t\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\t\t\tvar height = this.container.scrollHeight + border - dy;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Updates the clipping region. This is an expensive\n\t\t\t\t\t\t// operation that should not be executed too often.\n\t\t\t\t\t\troot.style.height = height + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar height = Math.max(c.clientHeight, c.scrollHeight) + border - dy;\n\t\t\t\t\t\tvar canvas = this.view.getCanvas();\n\t\t\t\t\t\tcanvas.style.height = height + 'px';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tc.scrollTop += border - dy;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdy = y - c.scrollTop;\n\t\t\t\t\n\t\t\t\tif (dy < border)\n\t\t\t\t{\n\t\t\t\t\tc.scrollTop -= border - dy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if (this.allowAutoPanning && !this.panningHandler.isActive())\n\t{\n\t\tif (this.panningManager == null)\n\t\t{\n\t\t\tthis.panningManager = this.createPanningManager();\n\t\t}\n\n\t\tthis.panningManager.panTo(x + this.panDx, y + this.panDy);\n\t}\n};\n\n\n/**\n * Function: createPanningManager\n * \n * Creates and returns an <mxPanningManager>.\n */\nmxGraph.prototype.createPanningManager = function()\n{\n\treturn new mxPanningManager(this);\n};\n\n/**\n * Function: getBorderSizes\n * \n * Returns the size of the border and padding on all four sides of the\n * container. The left, top, right and bottom borders are stored in the x, y,\n * width and height of the returned <mxRectangle>, respectively.\n */\nmxGraph.prototype.getBorderSizes = function()\n{\n\tvar css = mxUtils.getCurrentStyle(this.container);\n\t\n\treturn new mxRectangle(mxUtils.parseCssNumber(css.paddingLeft) +\n\t\t\t((css.borderLeftStyle != 'none') ? mxUtils.parseCssNumber(css.borderLeftWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingTop) +\n\t\t\t((css.borderTopStyle != 'none') ? mxUtils.parseCssNumber(css.borderTopWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingRight) +\n\t\t\t((css.borderRightStyle != 'none') ? mxUtils.parseCssNumber(css.borderRightWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingBottom) +\n\t\t\t((css.borderBottomStyle != 'none') ? mxUtils.parseCssNumber(css.borderBottomWidth) : 0));\n};\n\n/**\n * Function: getPreferredPageSize\n * \n * Returns the preferred size of the background page if <preferPageSize> is true.\n */\nmxGraph.prototype.getPreferredPageSize = function(bounds, width, height)\n{\n\tvar scale = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar fmt = this.pageFormat;\n\tvar ps = this.pageScale;\n\tvar page = new mxRectangle(0, 0, Math.ceil(fmt.width * ps), Math.ceil(fmt.height * ps));\n\t\n\tvar hCount = (this.pageBreaksVisible) ? Math.ceil(width / page.width) : 1;\n\tvar vCount = (this.pageBreaksVisible) ? Math.ceil(height / page.height) : 1;\n\t\n\treturn new mxRectangle(0, 0, hCount * page.width + 2 + tr.x, vCount * page.height + 2 + tr.y);\n};\n\n/**\n * Function: fit\n *\n * Scales the graph such that the complete diagram fits into <container> and\n * returns the current scale in the view. To fit an initial graph prior to\n * rendering, set <mxGraphView.rendering> to false prior to changing the model\n * and execute the following after changing the model.\n * \n * (code)\n * graph.fit();\n * graph.view.rendering = true;\n * graph.refresh();\n * (end)\n * \n * To fit and center the graph, the following code can be used.\n * \n * (code)\n * var margin = 2;\n * var max = 3;\n * \n * var bounds = graph.getGraphBounds();\n * var cw = graph.container.clientWidth - margin;\n * var ch = graph.container.clientHeight - margin;\n * var w = bounds.width / graph.view.scale;\n * var h = bounds.height / graph.view.scale;\n * var s = Math.min(max, Math.min(cw / w, ch / h));\n * \n * graph.view.scaleAndTranslate(s,\n *   (margin + cw - w * s) / (2 * s) - bounds.x / graph.view.scale,\n *   (margin + ch - h * s) / (2 * s) - bounds.y / graph.view.scale);\n * (end)\n * \n * Parameters:\n * \n * border - Optional number that specifies the border. Default is <border>.\n * keepOrigin - Optional boolean that specifies if the translate should be\n * changed. Default is false.\n * margin - Optional margin in pixels. Default is 0.\n * enabled - Optional boolean that specifies if the scale should be set or\n * just returned. Default is true.\n * ignoreWidth - Optional boolean that specifies if the width should be\n * ignored. Default is false.\n * ignoreHeight - Optional boolean that specifies if the height should be\n * ignored. Default is false.\n * maxHeight - Optional maximum height.\n */\nmxGraph.prototype.fit = function(border, keepOrigin, margin, enabled, ignoreWidth, ignoreHeight, maxHeight)\n{\n\tif (this.container != null)\n\t{\n\t\tborder = (border != null) ? border : this.getBorder();\n\t\tkeepOrigin = (keepOrigin != null) ? keepOrigin : false;\n\t\tmargin = (margin != null) ? margin : 0;\n\t\tenabled = (enabled != null) ? enabled : true;\n\t\tignoreWidth = (ignoreWidth != null) ? ignoreWidth : false;\n\t\tignoreHeight = (ignoreHeight != null) ? ignoreHeight : false;\n\t\t\n\t\t// Adds spacing and border from css\n\t\tvar cssBorder = this.getBorderSizes();\n\t\tvar w1 = this.container.offsetWidth - cssBorder.x - cssBorder.width - 1;\n\t\tvar h1 = (maxHeight != null) ? maxHeight : this.container.offsetHeight - cssBorder.y - cssBorder.height - 1;\n\t\tvar bounds = this.view.getGraphBounds();\n\t\t\n\t\tif (bounds.width > 0 && bounds.height > 0)\n\t\t{\n\t\t\tif (keepOrigin && bounds.x != null && bounds.y != null)\n\t\t\t{\n\t\t\t\tbounds = bounds.clone();\n\t\t\t\tbounds.width += bounds.x;\n\t\t\t\tbounds.height += bounds.y;\n\t\t\t\tbounds.x = 0;\n\t\t\t\tbounds.y = 0;\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Use unscaled bounding boxes to fix rounding errors\n\t\t\tvar s = this.view.scale;\n\t\t\tvar w2 = bounds.width / s;\n\t\t\tvar h2 = bounds.height / s;\n\t\t\t\n\t\t\t// Fits to the size of the background image if required\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tw2 = Math.max(w2, this.backgroundImage.width - bounds.x / s);\n\t\t\t\th2 = Math.max(h2, this.backgroundImage.height - bounds.y / s);\n\t\t\t}\n\t\t\t\n\t\t\tvar b = ((keepOrigin) ? border : 2 * border) + margin + 1;\n\n\t\t\tw1 -= b;\n\t\t\th1 -= b;\n\t\t\t\n\t\t\tvar s2 = (((ignoreWidth) ? h1 / h2 : (ignoreHeight) ? w1 / w2 :\n\t\t\t\tMath.min(w1 / w2, h1 / h2)));\n\t\t\t\n\t\t\tif (this.minFitScale != null)\n\t\t\t{\n\t\t\t\ts2 = Math.max(s2, this.minFitScale);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.maxFitScale != null)\n\t\t\t{\n\t\t\t\ts2 = Math.min(s2, this.maxFitScale);\n\t\t\t}\n\t\n\t\t\tif (enabled)\n\t\t\t{\n\t\t\t\tif (!keepOrigin)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.hasScrollbars(this.container))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar x0 = (bounds.x != null) ? Math.floor(this.view.translate.x - bounds.x / s + border / s2 + margin / 2) : border;\n\t\t\t\t\t\tvar y0 = (bounds.y != null) ? Math.floor(this.view.translate.y - bounds.y / s + border / s2 + margin / 2) : border;\n\n\t\t\t\t\t\tthis.view.scaleAndTranslate(s2, x0, y0);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.view.setScale(s2);\n\t\t\t\t\t\tvar b2 = this.getGraphBounds();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (b2.x != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.container.scrollLeft = b2.x;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (b2.y != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.container.scrollTop = b2.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.view.scale != s2)\n\t\t\t\t{\n\t\t\t\t\tthis.view.setScale(s2);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn s2;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.view.scale;\n};\n\n/**\n * Function: sizeDidChange\n * \n * Called when the size of the graph has changed. This implementation fires\n * a <size> event after updating the clipping region of the SVG element in\n * SVG-bases browsers.\n */\nmxGraph.prototype.sizeDidChange = function()\n{\n\tvar bounds = this.getGraphBounds();\n\t\n\tif (this.container != null)\n\t{\n\t\tvar border = this.getBorder();\n\t\t\n\t\tvar width = Math.max(0, bounds.x) + bounds.width + 2 * border;\n\t\tvar height = Math.max(0, bounds.y) + bounds.height + 2 * border;\n\t\t\n\t\tif (this.minimumContainerSize != null)\n\t\t{\n\t\t\twidth = Math.max(width, this.minimumContainerSize.width);\n\t\t\theight = Math.max(height, this.minimumContainerSize.height);\n\t\t}\n\n\t\tif (this.resizeContainer)\n\t\t{\n\t\t\tthis.doResizeContainer(width, height);\n\t\t}\n\n\t\tif (this.preferPageSize || (!mxClient.IS_IE && this.pageVisible))\n\t\t{\n\t\t\tvar size = this.getPreferredPageSize(bounds, Math.max(1, width), Math.max(1, height));\n\t\t\t\n\t\t\tif (size != null)\n\t\t\t{\n\t\t\t\twidth = size.width * this.view.scale;\n\t\t\t\theight = size.height * this.view.scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.minimumGraphSize != null)\n\t\t{\n\t\t\twidth = Math.max(width, this.minimumGraphSize.width * this.view.scale);\n\t\t\theight = Math.max(height, this.minimumGraphSize.height * this.view.scale);\n\t\t}\n\n\t\twidth = Math.ceil(width);\n\t\theight = Math.ceil(height);\n\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\n\t\t\tif (root != null)\n\t\t\t{\n\t\t\t\troot.style.minWidth = Math.max(1, width) + 'px';\n\t\t\t\troot.style.minHeight = Math.max(1, height) + 'px';\n\t\t\t\troot.style.width = '100%';\n\t\t\t\troot.style.height = '100%';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\t// Quirks mode does not support minWidth/-Height\n\t\t\t\tthis.view.updateHtmlCanvasSize(Math.max(1, width), Math.max(1, height));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.view.canvas.style.minWidth = Math.max(1, width) + 'px';\n\t\t\t\tthis.view.canvas.style.minHeight = Math.max(1, height) + 'px';\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.updatePageBreaks(this.pageBreaksVisible, width, height);\n\t}\n\n\tthis.fireEvent(new mxEventObject(mxEvent.SIZE, 'bounds', bounds));\n};\n\n/**\n * Function: doResizeContainer\n * \n * Resizes the container for the given graph width and height.\n */\nmxGraph.prototype.doResizeContainer = function(width, height)\n{\n\tif (this.maximumContainerSize != null)\n\t{\n\t\twidth = Math.min(this.maximumContainerSize.width, width);\n\t\theight = Math.min(this.maximumContainerSize.height, height);\n\t}\n\n\tthis.container.style.width = Math.ceil(width) + 'px';\n\tthis.container.style.height = Math.ceil(height) + 'px';\n};\n\n/**\n * Function: updatePageBreaks\n * \n * Invokes from <sizeDidChange> to redraw the page breaks.\n * \n * Parameters:\n * \n * visible - Boolean that specifies if page breaks should be shown.\n * width - Specifies the width of the container in pixels.\n * height - Specifies the height of the container in pixels.\n */\nmxGraph.prototype.updatePageBreaks = function(visible, width, height)\n{\n\tvar scale = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar fmt = this.pageFormat;\n\tvar ps = scale * this.pageScale;\n\tvar bounds = new mxRectangle(0, 0, fmt.width * ps, fmt.height * ps);\n\n\tvar gb = mxRectangle.fromRectangle(this.getGraphBounds());\n\tgb.width = Math.max(1, gb.width);\n\tgb.height = Math.max(1, gb.height);\n\t\n\tbounds.x = Math.floor((gb.x - tr.x * scale) / bounds.width) * bounds.width + tr.x * scale;\n\tbounds.y = Math.floor((gb.y - tr.y * scale) / bounds.height) * bounds.height + tr.y * scale;\n\t\n\tgb.width = Math.ceil((gb.width + (gb.x - bounds.x)) / bounds.width) * bounds.width;\n\tgb.height = Math.ceil((gb.height + (gb.y - bounds.y)) / bounds.height) * bounds.height;\n\t\n\t// Does not show page breaks if the scale is too small\n\tvisible = visible && Math.min(bounds.width, bounds.height) > this.minPageBreakDist;\n\n\tvar horizontalCount = (visible) ? Math.ceil(gb.height / bounds.height) + 1 : 0;\n\tvar verticalCount = (visible) ? Math.ceil(gb.width / bounds.width) + 1 : 0;\n\tvar right = (verticalCount - 1) * bounds.width;\n\tvar bottom = (horizontalCount - 1) * bounds.height;\n\t\n\tif (this.horizontalPageBreaks == null && horizontalCount > 0)\n\t{\n\t\tthis.horizontalPageBreaks = [];\n\t}\n\n\tif (this.verticalPageBreaks == null && verticalCount > 0)\n\t{\n\t\tthis.verticalPageBreaks = [];\n\t}\n\t\n\tvar drawPageBreaks = mxUtils.bind(this, function(breaks)\n\t{\n\t\tif (breaks != null)\n\t\t{\n\t\t\tvar count = (breaks == this.horizontalPageBreaks) ? horizontalCount : verticalCount; \n\t\t\t\n\t\t\tfor (var i = 0; i <= count; i++)\n\t\t\t{\n\t\t\t\tvar pts = (breaks == this.horizontalPageBreaks) ?\n\t\t\t\t\t[new mxPoint(Math.round(bounds.x), Math.round(bounds.y + i * bounds.height)),\n\t\t\t         new mxPoint(Math.round(bounds.x + right), Math.round(bounds.y + i * bounds.height))] :\n\t\t\t        [new mxPoint(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y)),\n\t\t\t         new mxPoint(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y + bottom))];\n\n\t\t\t\tif (breaks[i] != null)\n\t\t\t\t{\n\t\t\t\t\tbreaks[i].points = pts;\n\t\t\t\t\tbreaks[i].redraw();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar pageBreak = new mxPolyline(pts, this.pageBreakColor);\n\t\t\t\t\tpageBreak.dialect = this.dialect;\n\t\t\t\t\tpageBreak.pointerEvents = false;\n\t\t\t\t\tpageBreak.isDashed = this.pageBreakDashed;\n\t\t\t\t\tpageBreak.init(this.view.backgroundPane);\n\t\t\t\t\tpageBreak.redraw();\n\t\t\t\t\t\n\t\t\t\t\tbreaks[i] = pageBreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = count; i < breaks.length; i++)\n\t\t\t{\n\t\t\t\tbreaks[i].destroy();\n\t\t\t}\n\t\t\t\n\t\t\tbreaks.splice(count, breaks.length - count);\n\t\t}\n\t});\n\t\n\tdrawPageBreaks(this.horizontalPageBreaks);\n\tdrawPageBreaks(this.verticalPageBreaks);\n};\n\n/**\n * Group: Cell styles\n */\n\n/**\n * Function: getCurrentCellStyle\n * \n * Returns the style for the given cell from the cell state, if one exists,\n * or using <getCellStyle>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose style should be returned as an array.\n * ignoreState - Optional boolean that specifies if the cell state should be ignored.\n */\nmxGraph.prototype.getCurrentCellStyle = function(cell, ignoreState)\n{\n\tvar state = (ignoreState) ? null : this.view.getState(cell);\n\t\n\treturn (state != null) ? state.style : this.getCellStyle(cell);\n};\n\n/**\n * Function: getCellStyle\n * \n * Returns an array of key, value pairs representing the cell style for the\n * given cell. If no string is defined in the model that specifies the\n * style, then the default style for the cell is returned or an empty object,\n * if no style can be found. Note: You should try and get the cell state\n * for the given cell and use the cached style in the state before using\n * this method.\n * \n * Parameters:\n * \n * cell - <mxCell> whose style should be returned as an array.\n */\nmxGraph.prototype.getCellStyle = function(cell)\n{\n\tvar stylename = this.model.getStyle(cell);\n\tvar style = null;\n\t\n\t// Gets the default style for the cell\n\tif (this.model.isEdge(cell))\n\t{\n\t\tstyle = this.stylesheet.getDefaultEdgeStyle();\n\t}\n\telse\n\t{\n\t\tstyle = this.stylesheet.getDefaultVertexStyle();\n\t}\n\t\n\t// Resolves the stylename using the above as the default\n\tif (stylename != null)\n\t{\n\t\tstyle = this.postProcessCellStyle(this.stylesheet.getCellStyle(stylename, style));\n\t}\n\t\n\t// Returns a non-null value if no style can be found\n\tif (style == null)\n\t{\n\t\tstyle = new Object();\n\t}\n\t\n\treturn style;\n};\n\n/**\n * Function: postProcessCellStyle\n * \n * Tries to resolve the value for the image style in the image bundles and\n * turns short data URIs as defined in mxImageBundle to data URIs as\n * defined in RFC 2397 of the IETF.\n */\nmxGraph.prototype.postProcessCellStyle = function(style)\n{\n\tif (style != null)\n\t{\n\t\tvar key = style[mxConstants.STYLE_IMAGE];\n\t\tvar image = this.getImageFromBundles(key);\n\n\t\tif (image != null)\n\t\t{\n\t\t\tstyle[mxConstants.STYLE_IMAGE] = image;\n\t\t}\n\t\telse\n\t\t{\n\t\t\timage = key;\n\t\t}\n\t\t\n\t\t// Converts short data uris to normal data uris\n\t\tif (image != null && image.substring(0, 11) == 'data:image/')\n\t\t{\n\t\t\tif (image.substring(0, 20) == 'data:image/svg+xml,<')\n\t\t\t{\n\t\t\t\t// Required for FF and IE11\n\t\t\t\timage = image.substring(0, 19) + encodeURIComponent(image.substring(19));\n\t\t\t}\n\t\t\telse if (image.substring(0, 22) != 'data:image/svg+xml,%3C')\n\t\t\t{\n\t\t\t\tvar comma = image.indexOf(',');\n\t\t\t\t\n\t\t\t\t// Adds base64 encoding prefix if needed\n\t\t\t\tif (comma > 0 && image.substring(comma - 7, comma + 1) != ';base64,')\n\t\t\t\t{\n\t\t\t\t\timage = image.substring(0, comma) + ';base64,'\n\t\t\t\t\t\t+ image.substring(comma + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tstyle[mxConstants.STYLE_IMAGE] = image;\n\t\t}\n\t}\n\n\treturn style;\n};\n\n/**\n * Function: setCellStyle\n * \n * Sets the style of the specified cells. If no cells are given, then the\n * selection cells are changed.\n * \n * Parameters:\n * \n * style - String representing the new style of the cells.\n * cells - Optional array of <mxCells> to set the style for. Default is the\n * selection cells.\n */\nmxGraph.prototype.setCellStyle = function(style, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\t\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.model.setStyle(cells[i], style);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: toggleCellStyle\n * \n * Toggles the boolean value for the given key in the style of the given cell\n * and returns the new value as 0 or 1. If no cell is specified then the\n * selection cell is used.\n * \n * Parameter:\n * \n * key - String representing the key for the boolean value to be toggled.\n * defaultValue - Optional boolean default value if no value is defined.\n * Default is false.\n * cell - Optional <mxCell> whose style should be modified. Default is\n * the selection cell.\n */\nmxGraph.prototype.toggleCellStyle = function(key, defaultValue, cell)\n{\n\tcell = cell || this.getSelectionCell();\n\t\n\treturn this.toggleCellStyles(key, defaultValue, [cell]);\n};\n\n/**\n * Function: toggleCellStyles\n * \n * Toggles the boolean value for the given key in the style of the given cells\n * and returns the new value as 0 or 1. If no cells are specified, then the\n * selection cells are used. For example, this can be used to toggle\n * <mxConstants.STYLE_ROUNDED> or any other style with a boolean value.\n * \n * Parameter:\n * \n * key - String representing the key for the boolean value to be toggled.\n * defaultValue - Optional boolean default value if no value is defined.\n * Default is false.\n * cells - Optional array of <mxCells> whose styles should be modified.\n * Default is the selection cells.\n */\nmxGraph.prototype.toggleCellStyles = function(key, defaultValue, cells)\n{\n\tdefaultValue = (defaultValue != null) ? defaultValue : false;\n\tcells = cells || this.getSelectionCells();\n\tvar value = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cells[0]);\n\t\tvalue = (mxUtils.getValue(style, key, defaultValue)) ? 0 : 1;\n\t\tthis.setCellStyles(key, value, cells);\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: setCellStyles\n * \n * Sets the key to value in the styles of the given cells. This will modify\n * the existing cell styles in-place and override any existing assignment\n * for the given key. If no cells are specified, then the selection cells\n * are changed. If no value is specified, then the respective key is\n * removed from the styles.\n * \n * Parameters:\n * \n * key - String representing the key to be assigned.\n * value - String representing the new value for the key.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.setCellStyles = function(key, value, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\tmxUtils.setCellStyles(this.model, cells, key, value);\n};\n\n/**\n * Function: toggleCellStyleFlags\n * \n * Toggles the given bit for the given key in the styles of the specified\n * cells.\n * \n * Parameters:\n * \n * key - String representing the key to toggle the flag in.\n * flag - Integer that represents the bit to be toggled.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.toggleCellStyleFlags = function(key, flag, cells)\n{\n\tthis.setCellStyleFlags(key, flag, null, cells);\n};\n\n/**\n * Function: setCellStyleFlags\n * \n * Sets or toggles the given bit for the given key in the styles of the\n * specified cells.\n * \n * Parameters:\n * \n * key - String representing the key to toggle the flag in.\n * flag - Integer that represents the bit to be toggled.\n * value - Boolean value to be used or null if the value should be toggled.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.setCellStyleFlags = function(key, flag, value, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvar style = this.getCurrentCellStyle(cells[0]);\n\t\t\tvar current = parseInt(style[key] || 0);\n\t\t\tvalue = !((current & flag) == flag);\n\t\t}\n\n\t\tmxUtils.setCellStyleFlags(this.model, cells, key, flag, value);\n\t}\n};\n\n/**\n * Group: Cell alignment and orientation\n */\n\n/**\n * Function: alignCells\n * \n * Aligns the given cells vertically or horizontally according to the given\n * alignment using the optional parameter as the coordinate.\n * \n * Parameters:\n * \n * align - Specifies the alignment. Possible values are all constants in\n * mxConstants with an ALIGN prefix.\n * cells - Array of <mxCells> to be aligned.\n * param - Optional coordinate for the alignment.\n */\nmxGraph.prototype.alignCells = function(align, cells, param)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tif (cells != null && cells.length > 1)\n\t{\n\t\t// Finds the required coordinate for the alignment\n\t\tif (param == null)\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\n\t\t\t\tif (state != null && !this.model.isEdge(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tif (param == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x + state.width / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x + state.width;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y + state.height / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y + state.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.max(param, state.x + state.width);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.min(param, state.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.max(param, state.y + state.height);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.min(param, state.x);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Aligns the cells to the coordinate\n\t\tif (param != null)\n\t\t{\n\t\t\tvar s = this.view.scale;\n\n\t\t\tthis.model.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null && !this.model.isEdge(cells[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x - state.width / 2) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x - state.width) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y - state.height / 2) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y - state.height) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.resizeCell(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ALIGN_CELLS,\n\t\t\t\t\t\t'align', align, 'cells', cells));\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.model.endUpdate();\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: flipEdge\n * \n * Toggles the style of the given edge between null (or empty) and\n * <alternateEdgeStyle>. This method fires <mxEvent.FLIP_EDGE> while the\n * transaction is in progress. Returns the edge that was flipped.\n * \n * Here is an example that overrides this implementation to invert the\n * value of <mxConstants.STYLE_ELBOW> without removing any existing styles.\n * \n * (code)\n * graph.flipEdge = function(edge)\n * {\n *   if (edge != null)\n *   {\n *     var style = this.getCurrentCellStyle(edge);\n *     var elbow = mxUtils.getValue(style, mxConstants.STYLE_ELBOW,\n *         mxConstants.ELBOW_HORIZONTAL);\n *     var value = (elbow == mxConstants.ELBOW_HORIZONTAL) ?\n *         mxConstants.ELBOW_VERTICAL : mxConstants.ELBOW_HORIZONTAL;\n *     this.setCellStyles(mxConstants.STYLE_ELBOW, value, [edge]);\n *   }\n * };\n * (end)\n * \n * Parameters:\n * \n * edge - <mxCell> whose style should be changed.\n */\nmxGraph.prototype.flipEdge = function(edge)\n{\n\tif (edge != null &&\n\t\tthis.alternateEdgeStyle != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar style = this.model.getStyle(edge);\n\n\t\t\tif (style == null || style.length == 0)\n\t\t\t{\n\t\t\t\tthis.model.setStyle(edge, this.alternateEdgeStyle);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.model.setStyle(edge, null);\n\t\t\t}\n\n\t\t\t// Removes all existing control points\n\t\t\tthis.resetEdge(edge);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.FLIP_EDGE, 'edge', edge));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: addImageBundle\n *\n * Adds the specified <mxImageBundle>.\n */\nmxGraph.prototype.addImageBundle = function(bundle)\n{\n\tthis.imageBundles.push(bundle);\n};\n\n/**\n * Function: removeImageBundle\n * \n * Removes the specified <mxImageBundle>.\n */\nmxGraph.prototype.removeImageBundle = function(bundle)\n{\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < this.imageBundles.length; i++)\n\t{\n\t\tif (this.imageBundles[i] != bundle)\n\t\t{\n\t\t\ttmp.push(this.imageBundles[i]);\n\t\t}\n\t}\n\t\n\tthis.imageBundles = tmp;\n};\n\n/**\n * Function: getImageFromBundles\n *\n * Searches all <imageBundles> for the specified key and returns the value\n * for the first match or null if the key is not found.\n */\nmxGraph.prototype.getImageFromBundles = function(key)\n{\n\tif (key != null)\n\t{\n\t\tfor (var i = 0; i < this.imageBundles.length; i++)\n\t\t{\n\t\t\tvar image = this.imageBundles[i].getImage(key);\n\t\t\t\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\treturn image;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Group: Order\n */\n\n/**\n * Function: orderCells\n * \n * Moves the given cells to the front or back. The change is carried out\n * using <cellsOrdered>. This method fires <mxEvent.ORDER_CELLS> while the\n * transaction is in progress.\n * \n * Parameters:\n * \n * back - Boolean that specifies if the cells should be moved to back.\n * cells - Array of <mxCells> to move to the background. If null is\n * specified then the selection cells are used.\n */\nmxGraph.prototype.orderCells = function(back, cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = mxUtils.sortCells(this.getSelectionCells(), true);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsOrdered(cells, back);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ORDER_CELLS,\n\t\t\t\t'back', back, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsOrdered\n * \n * Moves the given cells to the front or back. This method fires\n * <mxEvent.CELLS_ORDERED> while the transaction is in progress.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose order should be changed.\n * back - Boolean that specifies if the cells should be moved to back.\n */\nmxGraph.prototype.cellsOrdered = function(cells, back)\n{\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\n\t\t\t\tif (back)\n\t\t\t\t{\n\t\t\t\t\tthis.model.add(parent, cells[i], i);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.model.add(parent, cells[i],\n\t\t\t\t\t\t\tthis.model.getChildCount(parent) - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_ORDERED,\n\t\t\t\t\t'back', back, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Grouping\n */\n\n/**\n * Function: groupCells\n * \n * Adds the cells into the given group. The change is carried out using\n * <cellsAdded>, <cellsMoved> and <cellsResized>. This method fires\n * <mxEvent.GROUP_CELLS> while the transaction is in progress. Returns the\n * new group. A group is only created if there is at least one entry in the\n * given array of cells.\n * \n * Parameters:\n * \n * group - <mxCell> that represents the target group. If null is specified\n * then a new group is created using <createGroupCell>.\n * border - Optional integer that specifies the border between the child\n * area and the group bounds. Default is 0.\n * cells - Optional array of <mxCells> to be grouped. If null is specified\n * then the selection cells are used.\n */\nmxGraph.prototype.groupCells = function(group, border, cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = mxUtils.sortCells(this.getSelectionCells(), true);\n\t}\n\n\tcells = this.getCellsForGroup(cells);\n\n\tif (group == null)\n\t{\n\t\tgroup = this.createGroupCell(cells);\n\t}\n\n\tvar bounds = this.getBoundsForGroup(group, cells, border);\n\n\tif (cells.length > 1 && bounds != null)\n\t{\n\t\t// Uses parent of group or previous parent of first child\n\t\tvar parent = this.model.getParent(group);\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.model.getParent(cells[0]);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Checks if the group has a geometry and\n\t\t\t// creates one if one does not exist\n\t\t\tif (this.getCellGeometry(group) == null)\n\t\t\t{\n\t\t\t\tthis.model.setGeometry(group, new mxGeometry());\n\t\t\t}\n\n\t\t\t// Adds the group into the parent\n\t\t\tvar index = this.model.getChildCount(parent);\n\t\t\tthis.cellsAdded([group], parent, index, null, null, false, false, false);\n\n\t\t\t// Adds the children into the group and moves\n\t\t\tindex = this.model.getChildCount(group);\n\t\t\tthis.cellsAdded(cells, group, index, null, null, false, false, false);\n\t\t\tthis.cellsMoved(cells, -bounds.x, -bounds.y, false, false, false);\n\n\t\t\t// Resizes the group\n\t\t\tthis.cellsResized([group], [bounds], false);\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.GROUP_CELLS,\n\t\t\t\t\t'group', group, 'border', border, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn group;\n};\n\n/**\n * Function: getCellsForGroup\n * \n * Returns the cells with the same parent as the first cell\n * in the given array.\n */\nmxGraph.prototype.getCellsForGroup = function(cells)\n{\n\tvar result = [];\n\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar parent = this.model.getParent(cells[0]);\n\t\tresult.push(cells[0]);\n\n\t\t// Filters selection cells with the same parent\n\t\tfor (var i = 1; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.getParent(cells[i]) == parent)\n\t\t\t{\n\t\t\t\tresult.push(cells[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getBoundsForGroup\n * \n * Returns the bounds to be used for the given group and children.\n */\nmxGraph.prototype.getBoundsForGroup = function(group, children, border)\n{\n\tvar result = this.getBoundingBoxFromGeometry(children, true);\n\t\n\tif (result != null)\n\t{\n\t\tif (this.isSwimlane(group))\n\t\t{\n\t\t\tvar size = this.getStartSize(group);\n\t\t\t\n\t\t\tresult.x -= size.width;\n\t\t\tresult.y -= size.height;\n\t\t\tresult.width += size.width;\n\t\t\tresult.height += size.height;\n\t\t}\n\t\t\n\t\t// Adds the border\n\t\tif (border != null)\n\t\t{\n\t\t\tresult.x -= border;\n\t\t\tresult.y -= border;\n\t\t\tresult.width += 2 * border;\n\t\t\tresult.height += 2 * border;\n\t\t}\n\t}\t\t\t\n\t\n\treturn result;\n};\n\n/**\n * Function: createGroupCell\n * \n * Hook for creating the group cell to hold the given array of <mxCells> if\n * no group cell was given to the <group> function.\n * \n * The following code can be used to set the style of new group cells.\n * \n * (code)\n * var graphCreateGroupCell = graph.createGroupCell;\n * graph.createGroupCell = function(cells)\n * {\n *   var group = graphCreateGroupCell.apply(this, arguments);\n *   group.setStyle('group');\n *   \n *   return group;\n * };\n */\nmxGraph.prototype.createGroupCell = function(cells)\n{\n\tvar group = new mxCell('');\n\tgroup.setVertex(true);\n\tgroup.setConnectable(false);\n\t\n\treturn group;\n};\n\n/**\n * Function: ungroupCells\n * \n * Ungroups the given cells by moving the children the children to their\n * parents parent and removing the empty groups. Returns the children that\n * have been removed from the groups.\n * \n * Parameters:\n * \n * cells - Array of cells to be ungrouped. If null is specified then the\n * selection cells are used.\n */\nmxGraph.prototype.ungroupCells = function(cells)\n{\n\tvar result = [];\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getCellsForUngroup();\n\t}\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\t\t\n\t\t\t\tif (children != null && children.length > 0)\n\t\t\t\t{\n\t\t\t\t\tchildren = children.slice();\n\t\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\t\t\tvar index = this.model.getChildCount(parent);\n\n\t\t\t\t\tthis.cellsAdded(children, parent, index, null, null, true);\n\t\t\t\t\tresult = result.concat(children);\n\t\t\t\t\t\n\t\t\t\t\t// Fix relative child cells\n\t\t\t\t\tfor (var j = 0; j < children.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(children[j]);\n\t\t\t\t\t\tvar geo = this.getCellGeometry(children[j]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null && geo != null && geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.x = state.origin.x;\n\t\t\t\t\t\t\tgeo.y = state.origin.y;\n\t\t\t\t\t\t\tgeo.relative = false;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.model.setGeometry(children[j], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.removeCellsAfterUngroup(cells);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.UNGROUP_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsForUngroup\n * \n * Returns the selection cells that can be ungrouped.\n */\nmxGraph.prototype.getCellsForUngroup = function()\n{\n\tvar cells = this.getSelectionCells();\n\n\t// Finds the cells with children\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (this.model.isVertex(cells[i]) &&\n\t\t\tthis.model.getChildCount(cells[i]) > 0)\n\t\t{\n\t\t\ttmp.push(cells[i]);\n\t\t}\n\t}\n\n\treturn tmp;\n};\n\n/**\n * Function: removeCellsAfterUngroup\n * \n * Hook to remove the groups after <ungroupCells>.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> that were ungrouped.\n */\nmxGraph.prototype.removeCellsAfterUngroup = function(cells)\n{\n\tthis.cellsRemoved(this.addAllEdges(cells));\n};\n\n/**\n * Function: removeCellsFromParent\n * \n * Removes the specified cells from their parents and adds them to the\n * default parent. Returns the cells that were removed from their parents.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be removed from their parents.\n */\nmxGraph.prototype.removeCellsFromParent = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar parent = this.getDefaultParent();\n\t\tvar index = this.model.getChildCount(parent);\n\n\t\tthis.cellsAdded(cells, parent, index, null, null, true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS_FROM_PARENT, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: updateGroupBounds\n * \n * Updates the bounds of the given groups to include all children and returns\n * the passed-in cells. Call this with the groups in parent to child order,\n * top-most group first, the cells are processed in reverse order and cells\n * with no children are ignored.\n * \n * Parameters:\n * \n * cells - The groups whose bounds should be updated. If this is null, then\n * the selection cells are used.\n * border - Optional border to be added in the group. Default is 0.\n * moveGroup - Optional boolean that allows the group to be moved. Default\n * is false.\n * topBorder - Optional top border to be added in the group. Default is 0.\n * rightBorder - Optional top border to be added in the group. Default is 0.\n * bottomBorder - Optional top border to be added in the group. Default is 0.\n * leftBorder - Optional top border to be added in the group. Default is 0.\n */\nmxGraph.prototype.updateGroupBounds = function(cells, border, moveGroup, topBorder, rightBorder, bottomBorder, leftBorder)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tborder = (border != null) ? border : 0;\n\tmoveGroup = (moveGroup != null) ? moveGroup : false;\n\ttopBorder = (topBorder != null) ? topBorder : 0;\n\trightBorder = (rightBorder != null) ? rightBorder : 0;\n\tbottomBorder = (bottomBorder != null) ? bottomBorder : 0;\n\tleftBorder = (leftBorder != null) ? leftBorder : 0;\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = cells.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar children = this.getChildCells(cells[i]);\n\t\t\t\t\n\t\t\t\tif (children != null && children.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = this.getBoundingBoxFromGeometry(children, true);\n\t\t\t\t\t\n\t\t\t\t\tif (bounds != null && bounds.width > 0 && bounds.height > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Adds the size of the title area for swimlanes\n\t\t\t\t\t\tvar size = (this.isSwimlane(cells[i])) ?\n\t\t\t\t\t\t\tthis.getActualStartSize(cells[i], true) : new mxRectangle();\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (moveGroup)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = Math.round(geo.x + bounds.x - border - size.x - leftBorder);\n\t\t\t\t\t\t\tgeo.y = Math.round(geo.y + bounds.y - border - size.y - topBorder);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tgeo.width = Math.round(bounds.width + 2 * border + size.x + leftBorder + rightBorder + size.width);\n\t\t\t\t\t\tgeo.height = Math.round(bounds.height + 2 * border + size.y + topBorder + bottomBorder + size.height);\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\tthis.moveCells(children, border + size.x - bounds.x + leftBorder,\n\t\t\t\t\t\t\t\tborder + size.y - bounds.y + topBorder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the bounding box for the given array of <mxCells>. The bounding box for\n * each cell and its descendants is computed using <mxGraphView.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraph.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.isVertex(cells[i]) || this.model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar bbox = this.view.getBoundingBox(this.view.getState(cells[i]), true);\n\t\t\t\n\t\t\t\tif (bbox != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Group: Cell cloning, insertion and removal\n */\n\n/**\n * Function: cloneCell\n * \n * Returns the clone for the given cell. Uses <cloneCells>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be cloned.\n * allowInvalidEdges - Optional boolean that specifies if invalid edges\n * should be cloned. Default is true.\n * mapping - Optional mapping for existing clones.\n * keepPosition - Optional boolean indicating if the position of the cells should\n * be updated to reflect the lost parent cell. Default is false.\n */\nmxGraph.prototype.cloneCell = function(cell, allowInvalidEdges, mapping, keepPosition)\n{\n\treturn this.cloneCells([cell], allowInvalidEdges, mapping, keepPosition)[0];\n};\n\n/**\n * Function: cloneCells\n * \n * Returns the clones for the given cells. The clones are created recursively\n * using <mxGraphModel.cloneCells>. If the terminal of an edge is not in the\n * given array, then the respective end is assigned a terminal point and the\n * terminal is removed.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be cloned.\n * allowInvalidEdges - Optional boolean that specifies if invalid edges\n * should be cloned. Default is true.\n * mapping - Optional mapping for existing clones.\n * keepPosition - Optional boolean indicating if the position of the cells should\n * be updated to reflect the lost parent cell. Default is false.\n */\nmxGraph.prototype.cloneCells = function(cells, allowInvalidEdges, mapping, keepPosition)\n{\n\tallowInvalidEdges = (allowInvalidEdges != null) ? allowInvalidEdges : true;\n\tvar clones = null;\n\t\n\tif (cells != null)\n\t{\n\t\t// Creates a dictionary for fast lookups\n\t\tvar dict = new mxDictionary();\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t\ttmp.push(cells[i]);\n\t\t}\n\t\t\n\t\tif (tmp.length > 0)\n\t\t{\n\t\t\tvar scale = this.view.scale;\n\t\t\tvar trans = this.view.translate;\n\t\t\tclones = this.model.cloneCells(cells, true, mapping);\n\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!allowInvalidEdges && this.model.isEdge(clones[i]) &&\n\t\t\t\t\tthis.getEdgeValidationError(clones[i],\n\t\t\t\t\t\tthis.model.getTerminal(clones[i], true),\n\t\t\t\t\t\tthis.model.getTerminal(clones[i], false)) != null)\n\t\t\t\t{\n\t\t\t\t\tclones[i] = null;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar g = this.model.getGeometry(clones[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\tvar pstate = this.view.getState(this.model.getParent(cells[i]));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null && pstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar dx = (keepPosition) ? 0 : pstate.origin.x;\n\t\t\t\t\t\t\tvar dy = (keepPosition) ? 0 : pstate.origin.y;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.model.isEdge(clones[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (pts != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Checks if the source is cloned or sets the terminal point\n\t\t\t\t\t\t\t\t\tvar src = this.model.getTerminal(cells[i], true);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\twhile (src != null && !dict.get(src))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsrc = this.model.getParent(src);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (src == null && pts[0] != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tg.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[0].x / scale - trans.x,\n\t\t\t\t\t\t\t\t\t\t\t\tpts[0].y / scale - trans.y), true);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Checks if the target is cloned or sets the terminal point\n\t\t\t\t\t\t\t\t\tvar trg = this.model.getTerminal(cells[i], false);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\twhile (trg != null && !dict.get(trg))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttrg = this.model.getParent(trg);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tvar n = pts.length - 1;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (trg == null && pts[n] != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tg.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[n].x / scale - trans.x,\n\t\t\t\t\t\t\t\t\t\t\t\tpts[n].y / scale - trans.y), false);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Translates the control points\n\t\t\t\t\t\t\t\t\tvar points = g.points;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (points != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfor (var j = 0; j < points.length; j++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tpoints[j].x += dx;\n\t\t\t\t\t\t\t\t\t\t\tpoints[j].y += dy;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tg.translate(dx, dy);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclones = [];\n\t\t}\n\t}\n\t\n\treturn clones;\n};\n\n/**\n * Function: insertVertex\n * \n * Adds a new vertex into the given parent <mxCell> using value as the user\n * object and the given coordinates as the <mxGeometry> of the new vertex.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * When adding new vertices from a mouse event, one should take into\n * account the offset of the graph container and the scale and translation\n * of the view in order to find the correct unscaled, untranslated\n * coordinates using <mxGraph.getPointForEvent> as follows:\n * \n * (code)\n * var pt = graph.getPointForEvent(evt);\n * var parent = graph.getDefaultParent();\n * graph.insertVertex(parent, null,\n * \t\t\t'Hello, World!', x, y, 220, 30);\n * (end)\n * \n * For adding image cells, the style parameter can be assigned as\n * \n * (code)\n * stylename;image=imageUrl\n * (end)\n * \n * See <mxGraph> for more information on using images.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent of the new vertex.\n * id - Optional string that defines the Id of the new vertex.\n * value - Object to be used as the user object.\n * x - Integer that defines the x coordinate of the vertex.\n * y - Integer that defines the y coordinate of the vertex.\n * width - Integer that defines the width of the vertex.\n * height - Integer that defines the height of the vertex.\n * style - Optional string that defines the cell style.\n * relative - Optional boolean that specifies if the geometry is relative.\n * Default is false.\n */\nmxGraph.prototype.insertVertex = function(parent, id, value,\n\tx, y, width, height, style, relative)\n{\n\tvar vertex = this.createVertex(parent, id, value, x, y, width, height, style, relative);\n\n\treturn this.addCell(vertex, parent);\n};\n\n/**\n * Function: createVertex\n * \n * Hook method that creates the new vertex for <insertVertex>.\n */\nmxGraph.prototype.createVertex = function(parent, id, value,\n\t\tx, y, width, height, style, relative)\n{\n\t// Creates the geometry for the vertex\n\tvar geometry = new mxGeometry(x, y, width, height);\n\tgeometry.relative = (relative != null) ? relative : false;\n\t\n\t// Creates the vertex\n\tvar vertex = new mxCell(value, geometry, style);\n\tvertex.setId(id);\n\tvertex.setVertex(true);\n\tvertex.setConnectable(true);\n\t\n\treturn vertex;\n};\n\t\n/**\n * Function: insertEdge\n * \n * Adds a new edge into the given parent <mxCell> using value as the user\n * object and the given source and target as the terminals of the new edge.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent of the new edge.\n * id - Optional string that defines the Id of the new edge.\n * value - JavaScript object to be used as the user object.\n * source - <mxCell> that defines the source of the edge.\n * target - <mxCell> that defines the target of the edge.\n * style - Optional string that defines the cell style.\n */\nmxGraph.prototype.insertEdge = function(parent, id, value, source, target, style)\n{\n\tvar edge = this.createEdge(parent, id, value, source, target, style);\n\t\n\treturn this.addEdge(edge, parent, source, target);\n};\n\n/**\n * Function: createEdge\n * \n * Hook method that creates the new edge for <insertEdge>. This\n * implementation does not set the source and target of the edge, these\n * are set when the edge is added to the model.\n * \n */\nmxGraph.prototype.createEdge = function(parent, id, value, source, target, style)\n{\n\t// Creates the edge\n\tvar edge = new mxCell(value, new mxGeometry(), style);\n\tedge.setId(id);\n\tedge.setEdge(true);\n\tedge.geometry.relative = true;\n\t\n\treturn edge;\n};\n\n/**\n * Function: addEdge\n * \n * Adds the edge to the parent and connects it to the given source and\n * target terminals. This is a shortcut method. Returns the edge that was\n * added.\n * \n * Parameters:\n * \n * edge - <mxCell> to be inserted into the given parent.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * source - Optional <mxCell> that represents the source terminal.\n * target - Optional <mxCell> that represents the target terminal.\n * index - Optional index to insert the cells at. Default is to append.\n */\nmxGraph.prototype.addEdge = function(edge, parent, source, target, index)\n{\n\treturn this.addCell(edge, parent, index, source, target);\n};\n\n/**\n * Function: addCell\n * \n * Adds the cell to the parent and connects it to the given source and\n * target terminals. This is a shortcut method. Returns the cell that was\n * added.\n * \n * Parameters:\n * \n * cell - <mxCell> to be inserted into the given parent.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * index - Optional index to insert the cells at. Default is to append.\n * source - Optional <mxCell> that represents the source terminal.\n * target - Optional <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.addCell = function(cell, parent, index, source, target)\n{\n\treturn this.addCells([cell], parent, index, source, target)[0];\n};\n\n/**\n * Function: addCells\n * \n * Adds the cells to the parent at the given index, connecting each cell to\n * the optional source and target terminal. The change is carried out using\n * <cellsAdded>. This method fires <mxEvent.ADD_CELLS> while the\n * transaction is in progress. Returns the cells that were added.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be inserted.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * index - Optional index to insert the cells at. Default is to append.\n * source - Optional source <mxCell> for all inserted cells.\n * target - Optional target <mxCell> for all inserted cells.\n * absolute - Optional boolean indicating of cells should be kept at\n * their absolute position. Default is false.\n */\nmxGraph.prototype.addCells = function(cells, parent, index, source, target, absolute)\n{\n\tif (parent == null)\n\t{\n\t\tparent = this.getDefaultParent();\n\t}\n\t\n\tif (index == null)\n\t{\n\t\tindex = this.model.getChildCount(parent);\n\t}\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsAdded(cells, parent, index, source, target, (absolute != null) ? absolute : false, true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_CELLS, 'cells', cells,\n\t\t\t\t'parent', parent, 'index', index, 'source', source, 'target', target));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsAdded\n * \n * Adds the specified cells to the given parent. This method fires\n * <mxEvent.CELLS_ADDED> while the transaction is in progress.\n */\nmxGraph.prototype.cellsAdded = function(cells, parent, index, source, target, absolute, constrain, extend)\n{\n\tif (cells != null && parent != null && index != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar parentState = (absolute) ? this.view.getState(parent) : null;\n\t\t\tvar o1 = (parentState != null) ? parentState.origin : null;\n\t\t\tvar zero = new mxPoint(0, 0);\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] == null)\n\t\t\t\t{\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar previous = this.model.getParent(cells[i]);\n\t\n\t\t\t\t\t// Keeps the cell at its absolute location\n\t\t\t\t\tif (o1 != null && cells[i] != parent && parent != previous)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar oldState = this.view.getState(previous);\n\t\t\t\t\t\tvar o2 = (oldState != null) ? oldState.origin : zero;\n\t\t\t\t\t\tvar geo = this.model.getGeometry(cells[i]);\n\t\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar dx = o2.x - o1.x;\n\t\t\t\t\t\t\tvar dy = o2.y - o1.y;\n\t\n\t\t\t\t\t\t\t// FIXME: Cells should always be inserted first before any other edit\n\t\t\t\t\t\t\t// to avoid forward references in sessions.\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.translate(dx, dy);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!geo.relative && this.model.isVertex(cells[i]) &&\n\t\t\t\t\t\t\t\t!this.isAllowNegativeCoordinates())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x = Math.max(0, geo.x);\n\t\t\t\t\t\t\t\tgeo.y = Math.max(0, geo.y);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Decrements all following indices\n\t\t\t\t\t// if cell is already in parent\n\t\t\t\t\tif (parent == previous && index + i > this.model.getChildCount(parent))\n\t\t\t\t\t{\n\t\t\t\t\t\tindex--;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.add(parent, cells[i], index + i);\n\t\t\t\t\t\n\t\t\t\t\tif (this.autoSizeCellsOnAdd)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.autoSizeCell(cells[i], true);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Extends the parent or constrains the child\n\t\t\t\t\tif ((extend == null || extend) &&\n\t\t\t\t\t\tthis.isExtendParentsOnAdd(cells[i]) && this.isExtendParent(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Additionally constrains the child after extending the parent\n\t\t\t\t\tif (constrain == null || constrain)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Sets the source terminal\n\t\t\t\t\tif (source != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.cellConnected(cells[i], source, true);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Sets the target terminal\n\t\t\t\t\tif (target != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.cellConnected(cells[i], target, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_ADDED, 'cells', cells,\n\t\t\t\t'parent', parent, 'index', index, 'source', source, 'target', target,\n\t\t\t\t'absolute', absolute));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: autoSizeCell\n * \n * Resizes the specified cell to just fit around the its label and/or children\n * \n * Parameters:\n * \n * cell - <mxCells> to be resized.\n * recurse - Optional boolean which specifies if all descendants should be\n * autosized. Default is true.\n */\nmxGraph.prototype.autoSizeCell = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\t\n\tif (recurse)\n\t{\n\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.autoSizeCell(this.model.getChildAt(cell, i));\n\t\t}\n\t}\n\n\tif (this.getModel().isVertex(cell) && this.isAutoSizeCell(cell))\n\t{\n\t\tthis.updateCellSize(cell);\n\t}\n};\n\n/**\n * Function: removeCells\n * \n * Removes the given cells from the graph including all connected edges if\n * includeEdges is true. The change is carried out using <cellsRemoved>.\n * This method fires <mxEvent.REMOVE_CELLS> while the transaction is in\n * progress. The removed cells are returned as an array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to remove. If null is specified then the\n * selection cells which are deletable are used.\n * includeEdges - Optional boolean which specifies if all connected edges\n * should be removed as well. Default is true.\n */\nmxGraph.prototype.removeCells = function(cells, includeEdges)\n{\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getDeletableCells(this.getSelectionCells());\n\t}\n\n\t// Adds all edges to the cells\n\tif (includeEdges)\n\t{\n\t\t// FIXME: Remove duplicate cells in result or do not add if\n\t\t// in cells or descendant of cells\n\t\tcells = this.getDeletableCells(this.addAllEdges(cells));\n\t}\n\telse\n\t{\n\t\tcells = cells.slice();\n\t\t\n\t\t// Removes edges that are currently not\n\t\t// visible as those cannot be updated\n\t\tvar edges = this.getDeletableCells(this.getAllEdges(cells));\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tif (this.view.getState(edges[i]) == null &&\n\t\t\t\t!dict.get(edges[i]))\n\t\t\t{\n\t\t\t\tdict.put(edges[i], true);\n\t\t\t\tcells.push(edges[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsRemoved(cells);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS, \n\t\t\t\t'cells', cells, 'includeEdges', includeEdges));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: cellsRemoved\n * \n * Removes the given cells from the model. This method fires\n * <mxEvent.CELLS_REMOVED> while the transaction is in progress.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to remove.\n */\nmxGraph.prototype.cellsRemoved = function(cells)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar scale = this.view.scale;\n\t\tvar tr = this.view.translate;\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Creates hashtable for faster lookup\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\t// Disconnects edges which are not being removed\n\t\t\t\tvar edges = this.getAllEdges([cells[i]]);\n\t\t\t\t\n\t\t\t\tvar disconnectTerminal = mxUtils.bind(this, function(edge, source)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.model.getGeometry(edge);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Checks if terminal is being removed\n\t\t\t\t\t\tvar terminal = this.model.getTerminal(edge, source);\n\t\t\t\t\t\tvar connected = false;\n\t\t\t\t\t\tvar tmp = terminal;\n\t\t\t\t\t\t\n\t\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (cells[i] == tmp)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconnected = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttmp = this.model.getParent(tmp);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (connected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tvar state = this.view.getState(edge);\n\n\t\t\t\t\t\t\tif (state != null && state.absolutePoints != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\t\t\t\t\t\t\t\tvar n = (source) ? 0 : pts.length - 1;\n\n\t\t\t\t\t\t\t\tgeo.setTerminalPoint(new mxPoint(\n\t\t\t\t\t\t\t\t\tpts[n].x / scale - tr.x - state.origin.x,\n\t\t\t\t\t\t\t\t\tpts[n].y / scale - tr.y - state.origin.y), source);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Fallback to center of terminal if routing\n\t\t\t\t\t\t\t\t// points are not available to add new point\n\t\t\t\t\t\t\t\t// KNOWN: Should recurse to find parent offset\n\t\t\t\t\t\t\t\t// of edge for nested groups but invisible edges\n\t\t\t\t\t\t\t\t// should be removed in removeCells step\n\t\t\t\t\t\t\t\tvar tstate = this.view.getState(terminal);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (tstate != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(new mxPoint(\n\t\t\t\t\t\t\t\t\t\ttstate.getCenterX() / scale - tr.x,\n\t\t\t\t\t\t\t\t\t\ttstate.getCenterY() / scale - tr.y), source);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.model.setGeometry(edge, geo);\n\t\t\t\t\t\t\tthis.model.setTerminal(edge, null, source);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t{\n\t\t\t\t\tif (!dict.get(edges[j]))\n\t\t\t\t\t{\n\t\t\t\t\t\tdict.put(edges[j], true);\n\t\t\t\t\t\tdisconnectTerminal(edges[j], true);\n\t\t\t\t\t\tdisconnectTerminal(edges[j], false);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.model.remove(cells[i]);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_REMOVED, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: splitEdge\n * \n * Splits the given edge by adding the newEdge between the previous source\n * and the given cell and reconnecting the source of the given edge to the\n * given cell. This method fires <mxEvent.SPLIT_EDGE> while the transaction\n * is in progress. Returns the new edge that was inserted.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be splitted.\n * cells - <mxCells> that represents the cells to insert into the edge.\n * newEdge - <mxCell> that represents the edge to be inserted.\n * dx - Optional integer that specifies the vector to move the cells.\n * dy - Optional integer that specifies the vector to move the cells.\n * x - Integer that specifies the x-coordinate of the drop location.\n * y - Integer that specifies the y-coordinate of the drop location.\n * parent - Optional parent to insert the cell. If null the parent of\n * the edge is used.\n */\nmxGraph.prototype.splitEdge = function(edge, cells, newEdge, dx, dy, x, y, parent)\n{\n\tdx = dx || 0;\n\tdy = dy || 0;\n\n\tparent = (parent != null) ? parent : this.model.getParent(edge);\n\tvar source = this.model.getTerminal(edge, true);\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tif (newEdge == null)\n\t\t{\n\t\t\tnewEdge = this.cloneCell(edge);\n\t\t\t\n\t\t\t// Removes waypoints before/after new cell\n\t\t\tvar state = this.view.getState(edge);\n\t\t\tvar geo = this.getCellGeometry(newEdge);\n\t\t\t\n\t\t\tif (geo != null && geo.points != null && state != null)\n\t\t\t{\n\t\t\t\tvar t = this.view.translate;\n\t\t\t\tvar s = this.view.scale;\n\t\t\t\tvar idx = mxUtils.findNearestSegment(state, (dx + t.x) * s, (dy + t.y) * s);\n\t\t\t\tgeo.points = geo.points.slice(0, idx);\n\t\t\t\t\t\t\t\t\n\t\t\t\tgeo = this.getCellGeometry(edge);\n\t\t\t\t\n\t\t\t\tif (geo != null && geo.points != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\tgeo.points = geo.points.slice(idx);\n\t\t\t\t\tthis.model.setGeometry(edge, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.cellsMoved(cells, dx, dy, false, false);\n\t\tthis.cellsAdded(cells, parent, this.model.getChildCount(parent), null, null,\n\t\t\t\ttrue);\n\t\tthis.cellsAdded([newEdge], parent, this.model.getChildCount(parent),\n\t\t\t\tsource, cells[0], false);\n\t\tthis.cellConnected(edge, cells[0], true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SPLIT_EDGE, 'edge', edge,\n\t\t\t\t'cells', cells, 'newEdge', newEdge, 'dx', dx, 'dy', dy));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn newEdge;\n};\n\n/**\n * Group: Cell visibility\n */\n\n/**\n * Function: toggleCells\n * \n * Sets the visible state of the specified cells and all connected edges\n * if includeEdges is true. The change is carried out using <cellsToggled>.\n * This method fires <mxEvent.TOGGLE_CELLS> while the transaction is in\n * progress. Returns the cells whose visible state was changed.\n * \n * Parameters:\n * \n * show - Boolean that specifies the visible state to be assigned.\n * cells - Array of <mxCells> whose visible state should be changed. If\n * null is specified then the selection cells are used.\n * includeEdges - Optional boolean indicating if the visible state of all\n * connected edges should be changed as well. Default is true.\n */\nmxGraph.prototype.toggleCells = function(show, cells, includeEdges)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\n\t// Adds all connected edges recursively\n\tif (includeEdges)\n\t{\n\t\tcells = this.addAllEdges(cells);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsToggled(cells, show);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.TOGGLE_CELLS,\n\t\t\t'show', show, 'cells', cells, 'includeEdges', includeEdges));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsToggled\n * \n * Sets the visible state of the specified cells.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose visible state should be changed.\n * show - Boolean that specifies the visible state to be assigned.\n */\nmxGraph.prototype.cellsToggled = function(cells, show)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.model.setVisible(cells[i], show);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Folding\n */\n\n/**\n * Function: foldCells\n * \n * Sets the collapsed state of the specified cells and all descendants\n * if recurse is true. The change is carried out using <cellsFolded>.\n * This method fires <mxEvent.FOLD_CELLS> while the transaction is in\n * progress. Returns the cells whose collapsed state was changed.\n * \n * Parameters:\n * \n * collapsed - Boolean indicating the collapsed state to be assigned.\n * recurse - Optional boolean indicating if the collapsed state of all\n * descendants should be set. Default is false.\n * cells - Array of <mxCells> whose collapsed state should be set. If\n * null is specified then the foldable selection cells are used.\n * checkFoldable - Optional boolean indicating of isCellFoldable should be\n * checked. Default is false.\n * evt - Optional native event that triggered the invocation.\n */\nmxGraph.prototype.foldCells = function(collapse, recurse, cells, checkFoldable, evt)\n{\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getFoldableCells(this.getSelectionCells(), collapse);\n\t}\n\n\tthis.stopEditing(false);\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsFolded(cells, collapse, recurse, checkFoldable);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.FOLD_CELLS,\n\t\t\t'collapse', collapse, 'recurse', recurse, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\tif(cell?.cellDivs?.body){\n\t\tcell.cellDivs.body.focus();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsFolded\n * \n * Sets the collapsed state of the specified cells. This method fires\n * <mxEvent.CELLS_FOLDED> while the transaction is in progress. Returns the\n * cells whose collapsed state was changed.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose collapsed state should be set.\n * collapsed - Boolean indicating the collapsed state to be assigned.\n * recurse - Boolean indicating if the collapsed state of all descendants\n * should be set.\n * checkFoldable - Optional boolean indicating of isCellFoldable should be\n * checked. Default is false.\n */\nmxGraph.prototype.cellsFolded = function(cells, collapse, recurse, checkFoldable)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif ((!checkFoldable || this.isCellFoldable(cells[i], collapse)) &&\n\t\t\t\t\tcollapse != this.isCellCollapsed(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.model.setCollapsed(cells[i], collapse);\n\t\t\t\t\tthis.swapBounds(cells[i], collapse);\n\n\t\t\t\t\tif (this.isExtendParent(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (recurse)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\t\t\t\tthis.cellsFolded(children, collapse, recurse);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_FOLDED,\n\t\t\t\t'cells', cells, 'collapse', collapse, 'recurse', recurse));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swapBounds\n * \n * Swaps the alternate and the actual bounds in the geometry of the given\n * cell invoking <updateAlternateBounds> before carrying out the swap.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the bounds should be swapped.\n * willCollapse - Boolean indicating if the cell is going to be collapsed.\n */\nmxGraph.prototype.swapBounds = function(cell, willCollapse)\n{\n\tif (cell != null)\n\t{\n\t\tvar geo = this.model.getGeometry(cell);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\t\n\t\t\tthis.updateAlternateBounds(cell, geo, willCollapse);\n\t\t\tgeo.swap();\n\t\t\t\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateAlternateBounds\n * \n * Updates or sets the alternate bounds in the given geometry for the given\n * cell depending on whether the cell is going to be collapsed. If no\n * alternate bounds are defined in the geometry and\n * <collapseToPreferredSize> is true, then the preferred size is used for\n * the alternate bounds. The top, left corner is always kept at the same\n * location.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the geometry is being udpated.\n * g - <mxGeometry> for which the alternate bounds should be updated.\n * willCollapse - Boolean indicating if the cell is going to be collapsed.\n */\nmxGraph.prototype.updateAlternateBounds = function(cell, geo, willCollapse)\n{\n\tif (cell != null && geo != null)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cell);\n\n\t\tif (geo.alternateBounds == null)\n\t\t{\n\t\t\tvar bounds = geo;\n\t\t\t\n\t\t\tif (this.collapseToPreferredSize)\n\t\t\t{\n\t\t\t\tvar tmp = this.getPreferredSizeForCell(cell);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tbounds = tmp;\n\n\t\t\t\t\tvar startSize = mxUtils.getValue(style, mxConstants.STYLE_STARTSIZE);\n\n\t\t\t\t\tif (startSize > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbounds.height = Math.max(bounds.height, startSize);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tgeo.alternateBounds = new mxRectangle(0, 0, bounds.width, bounds.height);\n\t\t}\n\t\t\n\t\tif (geo.alternateBounds != null)\n\t\t{\n\t\t\tgeo.alternateBounds.x = geo.x;\n\t\t\tgeo.alternateBounds.y = geo.y;\n\t\t\t\n\t\t\tvar alpha = mxUtils.toRadians(style[mxConstants.STYLE_ROTATION] || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar dx = geo.alternateBounds.getCenterX() - geo.getCenterX();\n\t\t\t\tvar dy = geo.alternateBounds.getCenterY() - geo.getCenterY();\n\t\n\t\t\t\tvar cos = Math.cos(alpha);\n\t\t\t\tvar sin = Math.sin(alpha);\n\t\n\t\t\t\tvar dx2 = cos * dx - sin * dy;\n\t\t\t\tvar dy2 = sin * dx + cos * dy;\n\t\t\t\t\n\t\t\t\tgeo.alternateBounds.x += dx2 - dx;\n\t\t\t\tgeo.alternateBounds.y += dy2 - dy;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: addAllEdges\n * \n * Returns an array with the given cells and all edges that are connected\n * to a cell or one of its descendants.\n */\nmxGraph.prototype.addAllEdges = function(cells)\n{\n\tvar allCells = cells.slice();\n\t\n\treturn mxUtils.removeDuplicates(allCells.concat(this.getAllEdges(cells)));\n};\n\n/**\n * Function: getAllEdges\n * \n * Returns all edges connected to the given cells or its descendants.\n */\nmxGraph.prototype.getAllEdges = function(cells)\n{\n\tvar edges = [];\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar edgeCount = this.model.getEdgeCount(cells[i]);\n\t\t\t\n\t\t\tfor (var j = 0; j < edgeCount; j++)\n\t\t\t{\n\t\t\t\tedges.push(this.model.getEdgeAt(cells[i], j));\n\t\t\t}\n\n\t\t\t// Recurses\n\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\tedges = edges.concat(this.getAllEdges(children));\n\t\t}\n\t}\n\t\n\treturn edges;\n};\n\n/**\n * Group: Cell sizing\n */\n\n/**\n * Function: updateCellSize\n * \n * Updates the size of the given cell in the model using <cellSizeUpdated>.\n * This method fires <mxEvent.UPDATE_CELL_SIZE> while the transaction is in\n * progress. Returns the cell whose size was updated.\n * \n * Parameters:\n * \n * cell - <mxCell> whose size should be updated.\n */\nmxGraph.prototype.updateCellSize = function(cell, ignoreChildren)\n{\n\tignoreChildren = (ignoreChildren != null) ? ignoreChildren : false;\n\t\n\tthis.model.beginUpdate();\t\t\t\t\n\ttry\n\t{\n\t\tthis.cellSizeUpdated(cell, ignoreChildren);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UPDATE_CELL_SIZE,\n\t\t\t\t'cell', cell, 'ignoreChildren', ignoreChildren));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellSizeUpdated\n * \n * Updates the size of the given cell in the model using\n * <getPreferredSizeForCell> to get the new size.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the size should be changed.\n */\nmxGraph.prototype.cellSizeUpdated = function(cell, ignoreChildren)\n{\n\tif (cell != null)\n\t{\n\t\tthis.model.beginUpdate();\t\t\t\t\n\t\ttry\n\t\t{\n\t\t\tvar size = this.getPreferredSizeForCell(cell);\n\t\t\tvar geo = this.model.getGeometry(cell);\n\t\t\t\n\t\t\tif (size != null && geo != null)\n\t\t\t{\n\t\t\t\tvar collapsed = this.isCellCollapsed(cell);\n\t\t\t\tgeo = geo.clone();\n\n\t\t\t\tif (this.isSwimlane(cell))\n\t\t\t\t{\n\t\t\t\t\tvar style = this.getCellStyle(cell);\n\t\t\t\t\tvar cellStyle = this.model.getStyle(cell);\n\n\t\t\t\t\tif (cellStyle == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = mxUtils.setStyle(cellStyle,\n\t\t\t\t\t\t\t\tmxConstants.STYLE_STARTSIZE, size.height + 8);\n\n\t\t\t\t\t\tif (collapsed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.height = size.height + 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.width = size.width;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = mxUtils.setStyle(cellStyle,\n\t\t\t\t\t\t\t\tmxConstants.STYLE_STARTSIZE, size.width + 8);\n\n\t\t\t\t\t\tif (collapsed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.width = size.width + 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.height = size.height;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.setStyle(cell, cellStyle);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.createState(cell);\n\t\t\t\t\tvar align = (state.style[mxConstants.STYLE_ALIGN] || mxConstants.ALIGN_CENTER);\n\t\t\t\t\t\n\t\t\t\t\tif (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x += geo.width - size.width;\n\t\t\t\t\t}\n\t\t\t\t\telse if (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x += Math.round((geo.width - size.width) / 2);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar valign = this.getVerticalAlign(state);\n\t\t\t\t\t\n\t\t\t\t\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y += geo.height - size.height;\n\t\t\t\t\t}\n\t\t\t\t\telse if (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y += Math.round((geo.height - size.height) / 2);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeo.width = size.width;\n\t\t\t\t\tgeo.height = size.height;\n\t\t\t\t}\n\n\t\t\t\tif (!ignoreChildren && !collapsed)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = this.view.getBounds(this.model.getChildren(cell));\n\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tr = this.view.translate;\n\t\t\t\t\t\tvar scale = this.view.scale;\n\n\t\t\t\t\t\tvar width = (bounds.x + bounds.width) / scale - geo.x - tr.x;\n\t\t\t\t\t\tvar height = (bounds.y + bounds.height) / scale - geo.y - tr.y;\n\n\t\t\t\t\t\tgeo.width = Math.max(geo.width, width);\n\t\t\t\t\t\tgeo.height = Math.max(geo.height, height);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.cellsResized([cell], [geo], false);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: getPreferredSizeForCell\n * \n * Returns the preferred width and height of the given <mxCell> as an\n * <mxRectangle>. To implement a minimum width, add a new style eg.\n * minWidth in the vertex and override this method as follows.\n * \n * (code)\n * var graphGetPreferredSizeForCell = graph.getPreferredSizeForCell;\n * graph.getPreferredSizeForCell = function(cell)\n * {\n *   var result = graphGetPreferredSizeForCell.apply(this, arguments);\n *   var style = this.getCellStyle(cell);\n *   \n *   if (style['minWidth'] > 0)\n *   {\n *     result.width = Math.max(style['minWidth'], result.width);\n *   }\n * \n *   return result;\n * };\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> for which the preferred size should be returned.\n * textWidth - Optional maximum text width for word wrapping.\n */\nmxGraph.prototype.getPreferredSizeForCell = function(cell, textWidth)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tvar state = this.view.createState(cell);\n\t\tvar style = state.style;\n\n\t\tif (!this.model.isEdge(cell))\n\t\t{\n\t\t\tvar fontSize = style[mxConstants.STYLE_FONTSIZE] || mxConstants.DEFAULT_FONTSIZE;\n\t\t\tvar dx = 0;\n\t\t\tvar dy = 0;\n\t\t\t\n\t\t\t// Adds dimension of image if shape is a label\n\t\t\tif (this.getImage(state) != null || style[mxConstants.STYLE_IMAGE] != null)\n\t\t\t{\n\t\t\t\tif (style[mxConstants.STYLE_SHAPE] == mxConstants.SHAPE_LABEL)\n\t\t\t\t{\n\t\t\t\t\tif (style[mxConstants.STYLE_VERTICAL_ALIGN] == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx += parseFloat(style[mxConstants.STYLE_IMAGE_WIDTH]) || mxLabel.prototype.imageSize;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (style[mxConstants.STYLE_ALIGN] != mxConstants.ALIGN_CENTER)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy += parseFloat(style[mxConstants.STYLE_IMAGE_HEIGHT]) || mxLabel.prototype.imageSize;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Adds spacings\n\t\t\tdx += 2 * (style[mxConstants.STYLE_SPACING] || 0);\n\t\t\tdx += style[mxConstants.STYLE_SPACING_LEFT] || 0;\n\t\t\tdx += style[mxConstants.STYLE_SPACING_RIGHT] || 0;\n\n\t\t\tdy += 2 * (style[mxConstants.STYLE_SPACING] || 0);\n\t\t\tdy += style[mxConstants.STYLE_SPACING_TOP] || 0;\n\t\t\tdy += style[mxConstants.STYLE_SPACING_BOTTOM] || 0;\n\t\t\t\n\t\t\t// Add spacing for collapse/expand icon\n\t\t\t// LATER: Check alignment and use constants\n\t\t\t// for image spacing\n\t\t\tvar image = this.getFoldingImage(state);\n\t\t\t\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\tdx += image.width + 8;\n\t\t\t}\n\n\t\t\t// Adds space for label\n\t\t\tvar value = this.cellRenderer.getLabelValue(state);\n\n\t\t\tif (value != null && value.length > 0)\n\t\t\t{\n\t\t\t\tif (!this.isHtmlLabel(state.cell))\n\t\t\t\t{\n\t\t\t\t\tvalue = mxUtils.htmlEntities(value, false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue = value.replace(/\\n/g, '<br>');\n\t\t\t\t\n\t\t\t\tvar size = mxUtils.getSizeForString(value, fontSize,\n\t\t\t\t\tstyle[mxConstants.STYLE_FONTFAMILY], textWidth,\n\t\t\t\t\tstyle[mxConstants.STYLE_FONTSTYLE]);\n\t\t\t\tvar width = size.width + dx;\n\t\t\t\tvar height = size.height + dy;\n\t\t\t\t\n\t\t\t\tif (!mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t{\n\t\t\t\t\tvar tmp = height;\n\t\t\t\t\t\n\t\t\t\t\theight = width;\n\t\t\t\t\twidth = tmp;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif (this.gridEnabled)\n\t\t\t\t{\n\t\t\t\t\twidth = this.snap(width + this.gridSize / 2);\n\t\t\t\t\theight = this.snap(height + this.gridSize / 2);\n\t\t\t\t}\n\n\t\t\t\tresult = new mxRectangle(0, 0, width, height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar gs2 = 4 * this.gridSize;\n\t\t\t\tresult = new mxRectangle(0, 0, gs2, gs2);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: resizeCell\n * \n * Sets the bounds of the given cell using <resizeCells>. Returns the\n * cell which was passed to the function.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be changed.\n * bounds - <mxRectangle> that represents the new bounds.\n */\nmxGraph.prototype.resizeCell = function(cell, bounds, recurse)\n{\n\treturn this.resizeCells([cell], [bounds], recurse)[0];\n};\n\n/**\n * Function: resizeCells\n * \n * Sets the bounds of the given cells and fires a <mxEvent.RESIZE_CELLS>\n * event while the transaction is in progress. Returns the cells which\n * have been passed to the function.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be changed.\n * bounds - Array of <mxRectangles> that represent the new bounds.\n */\nmxGraph.prototype.resizeCells = function(cells, bounds, recurse)\n{\n\trecurse = (recurse != null) ? recurse : this.isRecursiveResize();\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar prev = this.cellsResized(cells, bounds, recurse);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_CELLS,\n\t\t\t'cells', cells, 'bounds', bounds, 'previous', prev));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsResized\n * \n * Sets the bounds of the given cells and fires a <mxEvent.CELLS_RESIZED>\n * event. If <extendParents> is true, then the parent is extended if a\n * child size is changed so that it overlaps with the parent.\n * \n * The following example shows how to control group resizes to make sure\n * that all child cells stay within the group.\n * \n * (code)\n * graph.addListener(mxEvent.CELLS_RESIZED, function(sender, evt)\n * {\n *   var cells = evt.getProperty('cells');\n *   \n *   if (cells != null)\n *   {\n *     for (var i = 0; i < cells.length; i++)\n *     {\n *       if (graph.getModel().getChildCount(cells[i]) > 0)\n *       {\n *         var geo = graph.getCellGeometry(cells[i]);\n *         \n *         if (geo != null)\n *         {\n *           var children = graph.getChildCells(cells[i], true, true);\n *           var bounds = graph.getBoundingBoxFromGeometry(children, true);\n *           \n *           geo = geo.clone();\n *           geo.width = Math.max(geo.width, bounds.width);\n *           geo.height = Math.max(geo.height, bounds.height);\n *           \n *           graph.getModel().setGeometry(cells[i], geo);\n *         }\n *       }\n *     }\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be changed.\n * bounds - Array of <mxRectangles> that represent the new bounds.\n * recurse - Optional boolean that specifies if the children should be resized.\n */\nmxGraph.prototype.cellsResized = function(cells, bounds, recurse)\n{\n\trecurse = (recurse != null) ? recurse : false;\n\tvar prev = [];\n\n\tif (cells != null && bounds != null && cells.length == bounds.length)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tprev.push(this.cellResized(cells[i], bounds[i], false, recurse));\n\n\t\t\t\tif (this.isExtendParent(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t}\n\n\t\t\tif (this.resetEdgesOnResize)\n\t\t\t{\n\t\t\t\tthis.resetEdges(cells);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_RESIZED,\n\t\t\t\t'cells', cells, 'bounds', bounds, 'previous', prev));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn prev;\n};\n\n/**\n * Function: cellResized\n * \n * Resizes the parents recursively so that they contain the complete area\n * of the resized child cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be changed.\n * bounds - <mxRectangles> that represent the new bounds.\n * ignoreRelative - Boolean that indicates if relative cells should be ignored.\n * recurse - Optional boolean that specifies if the children should be resized.\n */\nmxGraph.prototype.cellResized = function(cell, bounds, ignoreRelative, recurse)\n{\n\tvar prev = this.model.getGeometry(cell);\n\n\tif (prev != null && (prev.x != bounds.x || prev.y != bounds.y ||\n\t\tprev.width != bounds.width || prev.height != bounds.height))\n\t{\n\t\tvar geo = prev.clone();\n\n\t\tif (!ignoreRelative && geo.relative)\n\t\t{\n\t\t\tvar offset = geo.offset;\n\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\toffset.x += bounds.x - geo.x;\n\t\t\t\toffset.y += bounds.y - geo.y;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeo.x = bounds.x;\n\t\t\tgeo.y = bounds.y;\n\t\t}\n\n\t\tgeo.width = bounds.width;\n\t\tgeo.height = bounds.height;\n\n\t\tif (!geo.relative && this.model.isVertex(cell) && !this.isAllowNegativeCoordinates())\n\t\t{\n\t\t\tgeo.x = Math.max(0, geo.x);\n\t\t\tgeo.y = Math.max(0, geo.y);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (recurse)\n\t\t\t{\n\t\t\t\tthis.resizeChildCells(cell, geo);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t\tthis.constrainChildCells(cell);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn prev;\n};\n\n/**\n * Function: resizeChildCells\n * \n * Resizes the child cells of the given cell for the given new geometry with\n * respect to the current geometry of the cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n * newGeo - <mxGeometry> that represents the new bounds.\n */\nmxGraph.prototype.resizeChildCells = function(cell, newGeo)\n{\n\tvar geo = this.model.getGeometry(cell);\n\tvar dx = (geo.width != 0) ? newGeo.width / geo.width : 1;\n\tvar dy = (geo.height != 0) ? newGeo.height / geo.height : 1;\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.scaleCell(this.model.getChildAt(cell, i), dx, dy, true);\n\t}\n};\n\n/**\n * Function: constrainChildCells\n * \n * Constrains the children of the given cell using <constrainChild>.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.constrainChildCells = function(cell)\n{\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.constrainChild(this.model.getChildAt(cell, i));\n\t}\n};\n\n/**\n * Function: scaleCell\n * \n * Scales the points, position and size of the given cell according to the\n * given vertical and horizontal scaling factors.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be scaled.\n * dx - Horizontal scaling factor.\n * dy - Vertical scaling factor.\n * recurse - Boolean indicating if the child cells should be scaled.\n */\nmxGraph.prototype.scaleCell = function(cell, dx, dy, recurse)\n{\n\tvar geo = this.model.getGeometry(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cell);\n\t\tgeo = geo.clone();\n\t\t\n\t\t// Stores values for restoring based on style\n\t\tvar x = geo.x;\n\t\tvar y = geo.y\n\t\tvar w = geo.width;\n\t\tvar h = geo.height;\n\t\t\n\t\tgeo.scale(dx, dy, style[mxConstants.STYLE_ASPECT] == 'fixed');\n\t\t\n\t\tif (style[mxConstants.STYLE_RESIZE_WIDTH] == '1')\n\t\t{\n\t\t\tgeo.width = w * dx;\n\t\t}\n\t\telse if (style[mxConstants.STYLE_RESIZE_WIDTH] == '0')\n\t\t{\n\t\t\tgeo.width = w;\n\t\t}\n\t\t\n\t\tif (style[mxConstants.STYLE_RESIZE_HEIGHT] == '1')\n\t\t{\n\t\t\tgeo.height = h * dy;\n\t\t}\n\t\telse if (style[mxConstants.STYLE_RESIZE_HEIGHT] == '0')\n\t\t{\n\t\t\tgeo.height = h;\n\t\t}\n\t\t\n\t\tif (!this.isCellMovable(cell))\n\t\t{\n\t\t\tgeo.x = x;\n\t\t\tgeo.y = y;\n\t\t}\n\t\t\n\t\tif (!this.isCellResizable(cell))\n\t\t{\n\t\t\tgeo.width = w;\n\t\t\tgeo.height = h;\n\t\t}\n\n\t\tif (this.model.isVertex(cell))\n\t\t{\n\t\t\tthis.cellResized(cell, geo, true, recurse);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendParent\n * \n * Resizes the parents recursively so that they contain the complete area\n * of the resized child cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.extendParent = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar parent = this.model.getParent(cell);\n\t\tvar p = this.getCellGeometry(parent);\n\t\t\n\t\tif (parent != null && p != null && !this.isCellCollapsed(parent))\n\t\t{\n\t\t\tvar geo = this.getCellGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null && !geo.relative &&\n\t\t\t\t(p.width < geo.x + geo.width ||\n\t\t\t\tp.height < geo.y + geo.height))\n\t\t\t{\n\t\t\t\tp = p.clone();\n\t\t\t\t\n\t\t\t\tp.width = Math.max(p.width, geo.x + geo.width);\n\t\t\t\tp.height = Math.max(p.height, geo.y + geo.height);\n\t\t\t\t\n\t\t\t\tthis.cellsResized([parent], [p], false);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Group: Cell moving\n */\n\n/**\n * Function: importCells\n * \n * Clones and inserts the given cells into the graph using the move\n * method and returns the inserted cells. This shortcut is used if\n * cells are inserted via datatransfer.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be imported.\n * dx - Integer that specifies the x-coordinate of the vector. Default is 0.\n * dy - Integer that specifies the y-coordinate of the vector. Default is 0.\n * target - <mxCell> that represents the new parent of the cells.\n * evt - Mouseevent that triggered the invocation.\n * mapping - Optional mapping for existing clones.\n */\nmxGraph.prototype.importCells = function(cells, dx, dy, target, evt, mapping)\n{\t\n\treturn this.moveCells(cells, dx, dy, true, target, evt, mapping);\n};\n\n/**\n * Function: moveCells\n * \n * Moves or clones the specified cells and moves the cells or clones by the\n * given amount, adding them to the optional target cell. The evt is the\n * mouse event as the mouse was released. The change is carried out using\n * <cellsMoved>. This method fires <mxEvent.MOVE_CELLS> while the\n * transaction is in progress. Returns the cells that were moved.\n * \n * Use the following code to move all cells in the graph.\n * \n * (code)\n * graph.moveCells(graph.getChildCells(null, true, true), 10, 10);\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be moved, cloned or added to the target.\n * dx - Integer that specifies the x-coordinate of the vector. Default is 0.\n * dy - Integer that specifies the y-coordinate of the vector. Default is 0.\n * clone - Boolean indicating if the cells should be cloned. Default is false.\n * target - <mxCell> that represents the new parent of the cells.\n * evt - Mouseevent that triggered the invocation.\n * mapping - Optional mapping for existing clones.\n */\nmxGraph.prototype.moveCells = function(cells, dx, dy, clone, target, evt, mapping)\n{\n\tdx = (dx != null) ? dx : 0;\n\tdy = (dy != null) ? dy : 0;\n\tclone = (clone != null) ? clone : false;\n\t\n\tif (cells != null && (dx != 0 || dy != 0 || clone || target != null))\n\t{\n\t\t// Removes descendants with ancestors in cells to avoid multiple moving\n\t\tcells = this.model.getTopmostCells(cells);\n\t\tvar origCells = cells;\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Faster cell lookups to remove relative edge labels with selected\n\t\t\t// terminals to avoid explicit and implicit move at same time\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tvar isSelected = mxUtils.bind(this, function(cell)\n\t\t\t{\n\t\t\t\twhile (cell != null)\n\t\t\t\t{\n\t\t\t\t\tif (dict.get(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tcell = this.model.getParent(cell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn false;\n\t\t\t});\n\t\t\t\n\t\t\t// Removes relative edge labels with selected terminals\n\t\t\tvar checked = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\n\t\t\t\tif ((geo == null || !geo.relative) || !this.model.isEdge(parent) ||\n\t\t\t\t\t(!isSelected(this.model.getTerminal(parent, true)) &&\n\t\t\t\t\t!isSelected(this.model.getTerminal(parent, false))))\n\t\t\t\t{\n\t\t\t\t\tchecked.push(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcells = checked;\n\t\t\t\n\t\t\tif (clone)\n\t\t\t{\n\t\t\t\tcells = this.cloneCells(cells, this.isCloneInvalidEdges(), mapping);\n\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\ttarget = this.getDefaultParent();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// FIXME: Cells should always be inserted first before any other edit\n\t\t\t// to avoid forward references in sessions.\n\t\t\t// Need to disable allowNegativeCoordinates if target not null to\n\t\t\t// allow for temporary negative numbers until cellsAdded is called.\n\t\t\tvar previous = this.isAllowNegativeCoordinates();\n\t\t\t\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tthis.setAllowNegativeCoordinates(true);\n\t\t\t}\n\t\t\t\n\t\t\tthis.cellsMoved(cells, dx, dy, !clone && this.isDisconnectOnMove()\n\t\t\t\t\t&& this.isAllowDanglingEdges(), target == null,\n\t\t\t\t\tthis.isExtendParentsOnMove() && target == null);\n\t\t\t\n\t\t\tthis.setAllowNegativeCoordinates(previous);\n\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tvar index = this.model.getChildCount(target);\n\t\t\t\tthis.cellsAdded(cells, target, index, null, null, true);\n\t\t\t\t\n\t\t\t\t// Restores parent edge on cloned edge labels\n\t\t\t\tif (clone)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\t\tvar parent = this.model.getParent(origCells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null && geo.relative &&\n\t\t\t\t\t\t\tthis.model.isEdge(parent) &&\n\t\t\t\t\t\t\tthis.model.contains(parent))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.model.add(parent, cells[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Dispatches a move event\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_CELLS, 'cells', cells,\n\t\t\t\t'dx', dx, 'dy', dy, 'clone', clone, 'target', target, 'event', evt));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsMoved\n * \n * Moves the specified cells by the given vector, disconnecting the cells\n * using disconnectGraph is disconnect is true. This method fires\n * <mxEvent.CELLS_MOVED> while the transaction is in progress.\n */\nmxGraph.prototype.cellsMoved = function(cells, dx, dy, disconnect, constrain, extend)\n{\n\tif (cells != null && (dx != 0 || dy != 0))\n\t{\n\t\textend = (extend != null) ? extend : false;\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (disconnect)\n\t\t\t{\n\t\t\t\tthis.disconnectGraph(cells);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.translateCell(cells[i], dx, dy);\n\t\t\t\t\n\t\t\t\tif (extend && this.isExtendParent(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t}\n\t\t\t\telse if (constrain)\n\t\t\t\t{\n\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resetEdgesOnMove)\n\t\t\t{\n\t\t\t\tthis.resetEdges(cells);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_MOVED,\n\t\t\t\t'cells', cells, 'dx', dx, 'dy', dy, 'disconnect', disconnect));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: translateCell\n * \n * Translates the geometry of the given cell and stores the new,\n * translated geometry in the model as an atomic change.\n */\nmxGraph.prototype.translateCell = function(cell, dx, dy)\n{\n\tvar geo = this.model.getGeometry(cell);\n\n\tif (geo != null)\n\t{\n\t\tdx = parseFloat(dx);\n\t\tdy = parseFloat(dy);\n\t\tgeo = geo.clone();\n\t\tgeo.translate(dx, dy);\n\n\t\tif (!geo.relative && this.model.isVertex(cell) && !this.isAllowNegativeCoordinates())\n\t\t{\n\t\t\tgeo.x = Math.max(0, parseFloat(geo.x));\n\t\t\tgeo.y = Math.max(0, parseFloat(geo.y));\n\t\t}\n\t\t\n\t\tif (geo.relative && !this.model.isEdge(cell))\n\t\t{\n\t\t\tvar parent = this.model.getParent(cell);\n\t\t\tvar angle = 0;\n\t\t\t\n\t\t\tif (this.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar style = this.getCurrentCellStyle(parent);\n\t\t\t\tangle = mxUtils.getValue(style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (angle != 0)\n\t\t\t{\n\t\t\t\tvar rad = mxUtils.toRadians(-angle);\n\t\t\t\tvar cos = Math.cos(rad);\n\t\t\t\tvar sin = Math.sin(rad);\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(dx, dy), cos, sin, new mxPoint(0, 0));\n\t\t\t\tdx = pt.x;\n\t\t\t\tdy = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (geo.offset == null)\n\t\t\t{\n\t\t\t\tgeo.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgeo.offset.x = parseFloat(geo.offset.x) + dx;\n\t\t\t\tgeo.offset.y = parseFloat(geo.offset.y) + dy;\n\t\t\t}\n\t\t}\n\n\t\tthis.model.setGeometry(cell, geo);\n\t}\n};\n\n/**\n * Function: getCellContainmentArea\n * \n * Returns the <mxRectangle> inside which a cell is to be kept.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the area should be returned.\n */\nmxGraph.prototype.getCellContainmentArea = function(cell)\n{\n\tif (cell != null && !this.model.isEdge(cell))\n\t{\n\t\tvar parent = this.model.getParent(cell);\n\t\t\n\t\tif (parent != null && parent != this.getDefaultParent())\n\t\t{\n\t\t\tvar g = this.model.getGeometry(parent);\n\t\t\t\n\t\t\tif (g != null)\n\t\t\t{\n\t\t\t\tvar x = 0;\n\t\t\t\tvar y = 0;\n\t\t\t\tvar w = g.width;\n\t\t\t\tvar h = g.height;\n\t\t\t\t\n\t\t\t\tif (this.isSwimlane(parent))\n\t\t\t\t{\n\t\t\t\t\tvar size = this.getStartSize(parent);\n\t\t\t\t\tvar style = this.getCurrentCellStyle(parent);\n\t\t\t\t\tvar dir = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\t\t\t\t\tvar flipH = mxUtils.getValue(style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(style, mxConstants.STYLE_FLIPV, 0) == 1;\n\t\t\t\t\t\n\t\t\t\t\tif (dir == mxConstants.DIRECTION_SOUTH || dir == mxConstants.DIRECTION_NORTH)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = size.width;\n\t\t\t\t\t\tsize.width = size.height;\n\t\t\t\t\t\tsize.height = tmp;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ((dir == mxConstants.DIRECTION_EAST && !flipV) || (dir == mxConstants.DIRECTION_NORTH && !flipH) ||\n\t\t\t\t\t\t(dir == mxConstants.DIRECTION_WEST && flipV) || (dir == mxConstants.DIRECTION_SOUTH && flipH))\n\t\t\t\t\t{\n\t\t\t\t\t\tx = size.width;\n\t\t\t\t\t\ty = size.height;\n\t\t\t\t\t}\n\n\t\t\t\t\tw -= size.width;\n\t\t\t\t\th -= size.height;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxRectangle(x, y, w, h);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getMaximumGraphBounds\n * \n * Returns the bounds inside which the diagram should be kept as an\n * <mxRectangle>.\n */\nmxGraph.prototype.getMaximumGraphBounds = function()\n{\n\treturn this.maximumGraphBounds;\n};\n\n/**\n * Function: constrainChild\n * \n * Keeps the given cell inside the bounds returned by\n * <getCellContainmentArea> for its parent, according to the rules defined by\n * <getOverlap> and <isConstrainChild>. This modifies the cell's geometry\n * in-place and does not clone it.\n * \n * Parameters:\n * \n * cells - <mxCell> which should be constrained.\n * sizeFirst - Specifies if the size should be changed first. Default is true.\n */\nmxGraph.prototype.constrainChild = function(cell, sizeFirst)\n{\n\tsizeFirst = (sizeFirst != null) ? sizeFirst : true;\n\t\n\tif (cell != null)\n\t{\n\t\tvar geo = this.getCellGeometry(cell);\n\t\t\n\t\tif (geo != null && (this.isConstrainRelativeChildren() || !geo.relative))\n\t\t{\n\t\t\tvar parent = this.model.getParent(cell);\n\t\t\tvar pgeo = this.getCellGeometry(parent);\n\t\t\tvar max = this.getMaximumGraphBounds();\n\t\t\t\n\t\t\t// Finds parent offset\n\t\t\tif (max != null)\n\t\t\t{\n\t\t\t\tvar off = this.getBoundingBoxFromGeometry([parent], false);\n\t\t\t\t\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\t\n\t\t\t\t\tmax.x -= off.x;\n\t\t\t\t\tmax.y -= off.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (this.isConstrainChild(cell))\n\t\t\t{\n\t\t\t\tvar tmp = this.getCellContainmentArea(cell);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tvar overlap = this.getOverlap(cell);\n\t\n\t\t\t\t\tif (overlap > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = mxRectangle.fromRectangle(tmp);\n\t\t\t\t\t\t\n\t\t\t\t\t\ttmp.x -= tmp.width * overlap;\n\t\t\t\t\t\ttmp.y -= tmp.height * overlap;\n\t\t\t\t\t\ttmp.width += 2 * tmp.width * overlap;\n\t\t\t\t\t\ttmp.height += 2 * tmp.height * overlap;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Find the intersection between max and tmp\n\t\t\t\t\tif (max == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\t\tmax.intersect(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (max != null)\n\t\t\t{\n\t\t\t\tvar cells = [cell];\n\t\t\t\t\n\t\t\t\tif (!this.isCellCollapsed(cell))\n\t\t\t\t{\n\t\t\t\t\tvar desc = this.model.getDescendants(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < desc.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.isCellVisible(desc[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcells.push(desc[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar bbox = this.getBoundingBoxFromGeometry(cells, false);\n\t\t\t\t\n\t\t\t\tif (bbox != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\t// Cumulative horizontal movement\n\t\t\t\t\tvar dx = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (geo.width > max.width)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = geo.width - max.width;\n\t\t\t\t\t\tgeo.width -= dx;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.x + bbox.width > max.x + max.width)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx -= bbox.x + bbox.width - max.x - max.width - dx;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Cumulative vertical movement\n\t\t\t\t\tvar dy = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (geo.height > max.height)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = geo.height - max.height;\n\t\t\t\t\t\tgeo.height -= dy;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.y + bbox.height > max.y + max.height)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy -= bbox.y + bbox.height - max.y - max.height - dy;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.x < max.x)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx -= bbox.x - max.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.y < max.y)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy -= bbox.y - max.y;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Relative geometries are moved via absolute offset\n\t\t\t\t\t\t\tif (geo.offset == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.offset = new mxPoint();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tgeo.offset.x += dx;\n\t\t\t\t\t\t\tgeo.offset.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x += dx;\n\t\t\t\t\t\t\tgeo.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.model.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: resetEdges\n * \n * Resets the control points of the edges that are connected to the given\n * cells if not both ends of the edge are in the given cells array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> for which the connected edges should be\n * reset.\n */\nmxGraph.prototype.resetEdges = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\t// Prepares faster cells lookup\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t}\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar edges = this.model.getEdges(cells[i]);\n\t\t\t\t\n\t\t\t\tif (edges != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(edges[j]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[j], true);\n\t\t\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[j], false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if one of the terminals is not in the given array\n\t\t\t\t\t\tif (!dict.get(source) || !dict.get(target))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.resetEdge(edges[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.resetEdges(this.model.getChildren(cells[i]));\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resetEdge\n * \n * Resets the control points of the given edge.\n * \n * Parameters:\n * \n * edge - <mxCell> whose points should be reset.\n */\nmxGraph.prototype.resetEdge = function(edge)\n{\n\tvar geo = this.model.getGeometry(edge);\n\t\n\t// Resets the control points\n\tif (geo != null && geo.points != null && geo.points.length > 0)\n\t{\n\t\tgeo = geo.clone();\n\t\tgeo.points = [];\n\t\tthis.model.setGeometry(edge, geo);\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Group: Cell connecting and connection constraints\n */\n\n/**\n * Function: getOutlineConstraint\n * \n * Returns the constraint used to connect to the outline of the given state.\n */\nmxGraph.prototype.getOutlineConstraint = function(point, terminalState, me)\n{\n\tif (terminalState.shape != null)\n\t{\n\t\tvar bounds = this.view.getPerimeterBounds(terminalState);\n\t\tvar direction = terminalState.style[mxConstants.STYLE_DIRECTION];\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tbounds.x += bounds.width / 2 - bounds.height / 2;\n\t\t\tbounds.y += bounds.height / 2 - bounds.width / 2;\n\t\t\tvar tmp = bounds.width;\n\t\t\tbounds.width = bounds.height;\n\t\t\tbounds.height = tmp;\n\t\t}\n\t\n\t\tvar alpha = mxUtils.toRadians(terminalState.shape.getShapeRotation());\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(-alpha);\n\t\t\tvar sin = Math.sin(-alpha);\n\t\n\t\t\tvar ct = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\t\t\tpoint = mxUtils.getRotatedPoint(point, cos, sin, ct);\n\t\t}\n\n\t\tvar sx = 1;\n\t\tvar sy = 1;\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\t// LATER: Add flipping support for image shapes\n\t\tif (this.getModel().isVertex(terminalState.cell))\n\t\t{\n\t\t\tvar flipH = terminalState.style[mxConstants.STYLE_FLIPH];\n\t\t\tvar flipV = terminalState.style[mxConstants.STYLE_FLIPV];\n\t\t\t\n\t\t\t// Legacy support for stencilFlipH/V\n\t\t\tif (terminalState.shape != null && terminalState.shape.stencil != null)\n\t\t\t{\n\t\t\t\tflipH = mxUtils.getValue(terminalState.style, 'stencilFlipH', 0) == 1 || flipH;\n\t\t\t\tflipV = mxUtils.getValue(terminalState.style, 'stencilFlipV', 0) == 1 || flipV;\n\t\t\t}\n\t\t\t\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tvar tmp = flipH;\n\t\t\t\tflipH = flipV;\n\t\t\t\tflipV = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tif (flipH)\n\t\t\t{\n\t\t\t\tsx = -1;\n\t\t\t\tdx = -bounds.width;\n\t\t\t}\n\t\t\t\n\t\t\tif (flipV)\n\t\t\t{\n\t\t\t\tsy = -1;\n\t\t\t\tdy = -bounds.height ;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpoint = new mxPoint((point.x - bounds.x) * sx - dx + bounds.x, (point.y - bounds.y) * sy - dy + bounds.y);\n\t\t\n\t\tvar x = (bounds.width == 0) ? 0 : Math.round((point.x - bounds.x) * 1000 / bounds.width) / 1000;\n\t\tvar y = (bounds.height == 0) ? 0 : Math.round((point.y - bounds.y) * 1000 / bounds.height) / 1000;\n\t\t\n\t\treturn new mxConnectionConstraint(new mxPoint(x, y), false);\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getAllConnectionConstraints\n * \n * Returns an array of all <mxConnectionConstraints> for the given terminal. If\n * the shape of the given terminal is a <mxStencilShape> then the constraints\n * of the corresponding <mxStencil> are returned.\n * \n * Parameters:\n * \n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the terminal is the source or target.\n */\nmxGraph.prototype.getAllConnectionConstraints = function(terminal, source)\n{\n\tif (terminal != null && terminal.shape != null && terminal.shape.stencil != null)\n\t{\n\t\treturn terminal.shape.stencil.constraints;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: getConnectionConstraint\n * \n * Returns an <mxConnectionConstraint> that describes the given connection\n * point. This result can then be passed to <getConnectionPoint>.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the terminal is the source or target.\n */\nmxGraph.prototype.getConnectionConstraint = function(edge, terminal, source)\n{\n\tvar point = null;\n\tvar x = edge.style[(source) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X];\n\n\tif (x != null)\n\t{\n\t\tvar y = edge.style[(source) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y];\n\t\t\n\t\tif (y != null)\n\t\t{\n\t\t\tpoint = new mxPoint(parseFloat(x), parseFloat(y));\n\t\t}\n\t}\n\t\n\tvar perimeter = false;\n\tvar dx = 0, dy = 0;\n\t\n\tif (point != null)\n\t{\n\t\tperimeter = mxUtils.getValue(edge.style, (source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, true);\n\n\t\t//Add entry/exit offset\n\t\tdx = parseFloat(edge.style[(source) ? mxConstants.STYLE_EXIT_DX : mxConstants.STYLE_ENTRY_DX]);\n\t\tdy = parseFloat(edge.style[(source) ? mxConstants.STYLE_EXIT_DY : mxConstants.STYLE_ENTRY_DY]);\n\t\t\n\t\tdx = isFinite(dx)? dx : 0;\n\t\tdy = isFinite(dy)? dy : 0;\n\t}\n\n\treturn new mxConnectionConstraint(point, perimeter, null, dx, dy);\n};\n\n/**\n * Function: setConnectionConstraint\n * \n * Sets the <mxConnectionConstraint> that describes the given connection point.\n * If no constraint is given then nothing is changed. To remove an existing\n * constraint from the given edge, use an empty constraint instead.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge.\n * terminal - <mxCell> that represents the terminal.\n * source - Boolean indicating if the terminal is the source or target.\n * constraint - Optional <mxConnectionConstraint> to be used for this\n * connection.\n */\nmxGraph.prototype.setConnectionConstraint = function(edge, terminal, source, constraint)\n{\n\tif (constraint != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\t\n\t\ttry\n\t\t{\n\t\t\tif (constraint == null || constraint.point == null)\n\t\t\t{\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_X :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_X, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_Y :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_Y, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DX :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DX, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DY :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DY, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, null, [edge]);\n\t\t\t}\n\t\t\telse if (constraint.point != null)\n\t\t\t{\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_X :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_X, constraint.point.x, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_Y :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_Y, constraint.point.y, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DX :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DX, constraint.dx, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DY :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DY, constraint.dy, [edge]);\n\t\t\t\t\n\t\t\t\t// Only writes 0 since 1 is default\n\t\t\t\tif (!constraint.perimeter)\n\t\t\t\t{\n\t\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, '0', [edge]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, null, [edge]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: getConnectionPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n * \n * Parameters:\n * \n * vertex - <mxCellState> that represents the vertex.\n * constraint - <mxConnectionConstraint> that represents the connection point\n * constraint as returned by <getConnectionConstraint>.\n */\nmxGraph.prototype.getConnectionPoint = function(vertex, constraint, round)\n{\n\tround = (round != null) ? round : true;\n\tvar point = null;\n\t\n\tif (vertex != null && constraint.point != null)\n\t{\n\t\tvar bounds = this.view.getPerimeterBounds(vertex);\n        var cx = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\t\tvar direction = vertex.style[mxConstants.STYLE_DIRECTION];\n\t\tvar r1 = 0;\n\t\t\n\t\t// Bounds need to be rotated by 90 degrees for further computation\n\t\tif (direction != null && mxUtils.getValue(vertex.style,\n\t\t\tmxConstants.STYLE_ANCHOR_POINT_DIRECTION, 1) == 1)\n\t\t{\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t\t{\n\t\t\t\tr1 += 270;\n\t\t\t}\n\t\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t\t{\n\t\t\t\tr1 += 180;\n\t\t\t}\n\t\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tr1 += 90;\n\t\t\t}\n\n\t\t\t// Bounds need to be rotated by 90 degrees for further computation\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\t\tdirection == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tbounds.rotate90();\n\t\t\t}\n\t\t}\n\n\t\tvar scale = this.view.scale;\n\t\tpoint = new mxPoint(bounds.x + constraint.point.x * bounds.width + constraint.dx * scale,\n\t\t\t\tbounds.y + constraint.point.y * bounds.height + constraint.dy * scale);\n\t\t\n\t\t// Rotation for direction before projection on perimeter\n\t\tvar r2 = vertex.style[mxConstants.STYLE_ROTATION] || 0;\n\t\t\n\t\tif (constraint.perimeter)\n\t\t{\n\t\t\tif (r1 != 0)\n\t\t\t{\n\t\t\t\t// Only 90 degrees steps possible here so no trig needed\n\t\t\t\tvar cos = 0;\n\t\t\t\tvar sin = 0;\n\t\t\t\t\n\t\t\t\tif (r1 == 90)\n\t\t\t\t{\n\t\t\t\t\tsin = 1;\n\t\t\t\t}\n\t\t\t\telse if (r1 == 180)\n\t\t\t\t{\n\t\t\t\t\tcos = -1;\n\t\t\t\t}\n\t\t\t\telse if (r1 == 270)\n\t\t\t\t{\n\t\t\t\t\tsin = -1;\n\t\t\t\t}\n\t\t\t\t\n\t\t        point = mxUtils.getRotatedPoint(point, cos, sin, cx);\n\t\t\t}\n\t\n\t\t\tpoint = this.view.getPerimeterPoint(vertex, point, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr2 += r1;\n\t\t\t\n\t\t\tif (this.getModel().isVertex(vertex.cell))\n\t\t\t{\n\t\t\t\tvar flipH = vertex.style[mxConstants.STYLE_FLIPH] == 1;\n\t\t\t\tvar flipV = vertex.style[mxConstants.STYLE_FLIPV] == 1;\n\t\t\t\t\n\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\tif (vertex.shape != null && vertex.shape.stencil != null)\n\t\t\t\t{\n\t\t\t\t\tflipH = (mxUtils.getValue(vertex.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\tflipV = (mxUtils.getValue(vertex.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tdirection == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tvar temp = flipH;\n\t\t\t\t\tflipH = flipV\n\t\t\t\t\tflipV = temp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (flipH)\n\t\t\t\t{\n\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (flipV)\n\t\t\t\t{\n\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Generic rotation after projection on perimeter\n\t\tif (r2 != 0 && point != null)\n\t\t{\n\t        var rad = mxUtils.toRadians(r2);\n\t        var cos = Math.cos(rad);\n\t        var sin = Math.sin(rad);\n\t        \n\t        point = mxUtils.getRotatedPoint(point, cos, sin, cx);\n\t\t}\n\t}\n\t\n\tif (round && point != null)\n\t{\n\t\tpoint.x = Math.round(point.x);\n\t\tpoint.y = Math.round(point.y);\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: connectCell\n * \n * Connects the specified end of the given edge to the given terminal\n * using <cellConnected> and fires <mxEvent.CONNECT_CELL> while the\n * transaction is in progress. Returns the updated edge.\n * \n * Parameters:\n * \n * edge - <mxCell> whose terminal should be updated.\n * terminal - <mxCell> that represents the new terminal to be used.\n * source - Boolean indicating if the new terminal is the source or target.\n * constraint - Optional <mxConnectionConstraint> to be used for this\n * connection.\n */\nmxGraph.prototype.connectCell = function(edge, terminal, source, constraint)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar previous = this.model.getTerminal(edge, source);\n\t\tthis.cellConnected(edge, terminal, source, constraint);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.CONNECT_CELL,\n\t\t\t'edge', edge, 'terminal', terminal, 'source', source,\n\t\t\t'previous', previous));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: cellConnected\n * \n * Sets the new terminal for the given edge and resets the edge points if\n * <resetEdgesOnConnect> is true. This method fires\n * <mxEvent.CELL_CONNECTED> while the transaction is in progress.\n * \n * Parameters:\n * \n * edge - <mxCell> whose terminal should be updated.\n * terminal - <mxCell> that represents the new terminal to be used.\n * source - Boolean indicating if the new terminal is the source or target.\n * constraint - <mxConnectionConstraint> to be used for this connection.\n */\nmxGraph.prototype.cellConnected = function(edge, terminal, source, constraint)\n{\n\tif (edge != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar previous = this.model.getTerminal(edge, source);\n\n\t\t\t// Updates the constraint\n\t\t\tthis.setConnectionConstraint(edge, terminal, source, constraint);\n\t\t\t\n\t\t\t// Checks if the new terminal is a port, uses the ID of the port in the\n\t\t\t// style and the parent of the port as the actual terminal of the edge.\n\t\t\tif (this.isPortsEnabled())\n\t\t\t{\n\t\t\t\tvar id = null;\n\t\n\t\t\t\tif (this.isPort(terminal))\n\t\t\t\t{\n\t\t\t\t\tid = terminal.getId();\n\t\t\t\t\tterminal = this.getTerminalForPort(terminal, source);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Sets or resets all previous information for connecting to a child port\n\t\t\t\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\t\t\t\tmxConstants.STYLE_TARGET_PORT;\n\t\t\t\tthis.setCellStyles(key, id, [edge]);\n\t\t\t}\n\t\t\t\n\t\t\tthis.model.setTerminal(edge, terminal, source);\n\t\t\t\n\t\t\tif (this.resetEdgesOnConnect)\n\t\t\t{\n\t\t\t\tthis.resetEdge(edge);\n\t\t\t}\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELL_CONNECTED,\n\t\t\t\t'edge', edge, 'terminal', terminal, 'source', source,\n\t\t\t\t'previous', previous));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: disconnectGraph\n * \n * Disconnects the given edges from the terminals which are not in the\n * given array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be disconnected.\n */\nmxGraph.prototype.disconnectGraph = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\t\t\t\t\t\t\t\n\t\t\tvar scale = this.view.scale;\n\t\t\tvar tr = this.view.translate;\n\t\t\t\n\t\t\t// Fast lookup for finding cells in array\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (this.model.isEdge(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.model.getGeometry(cells[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\tvar pstate = this.view.getState(\n\t\t\t\t\t\t\tthis.model.getParent(cells[i]));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null &&\n\t\t\t\t\t\t\tpstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar dx = -pstate.origin.x;\n\t\t\t\t\t\t\tvar dy = -pstate.origin.y;\n\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\n\t\t\t\t\t\t\tvar src = this.model.getTerminal(cells[i], true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (src != null && this.isCellDisconnectable(cells[i], src, true))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twhile (src != null && !dict.get(src))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsrc = this.model.getParent(src);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (src == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[0].x / scale - tr.x + dx,\n\t\t\t\t\t\t\t\t\t\t\tpts[0].y / scale - tr.y + dy), true);\n\t\t\t\t\t\t\t\t\tthis.model.setTerminal(cells[i], null, true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar trg = this.model.getTerminal(cells[i], false);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (trg != null && this.isCellDisconnectable(cells[i], trg, false))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twhile (trg != null && !dict.get(trg))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttrg = this.model.getParent(trg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (trg == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar n = pts.length - 1;\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[n].x / scale - tr.x + dx,\n\t\t\t\t\t\t\t\t\t\t\tpts[n].y / scale - tr.y + dy), false);\n\t\t\t\t\t\t\t\t\tthis.model.setTerminal(cells[i], null, false);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Drilldown\n */\n\n/**\n * Function: getCurrentRoot\n * \n * Returns the current root of the displayed cell hierarchy. This is a\n * shortcut to <mxGraphView.currentRoot> in <view>.\n */\nmxGraph.prototype.getCurrentRoot = function()\n{\n\treturn this.view.currentRoot;\n};\n \n/**\n * Function: getTranslateForRoot\n * \n * Returns the translation to be used if the given cell is the root cell as\n * an <mxPoint>. This implementation returns null.\n * \n * Example:\n * \n * To keep the children at their absolute position while stepping into groups,\n * this function can be overridden as follows.\n * \n * (code)\n * var offset = new mxPoint(0, 0);\n * \n * while (cell != null)\n * {\n *   var geo = this.model.getGeometry(cell);\n * \n *   if (geo != null)\n *   {\n *     offset.x -= geo.x;\n *     offset.y -= geo.y;\n *   }\n * \n *   cell = this.model.getParent(cell);\n * }\n * \n * return offset;\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the root.\n */\nmxGraph.prototype.getTranslateForRoot = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, the cell returned by getTerminalForPort should be used as the\n * terminal and the port should be referenced by the ID in either the\n * mxConstants.STYLE_SOURCE_PORT or the or the\n * mxConstants.STYLE_TARGET_PORT. Note that a port should not be movable.\n * This implementation always returns false.\n * \n * A typical implementation is the following:\n * \n * (code)\n * graph.isPort = function(cell)\n * {\n *   var geo = this.getCellGeometry(cell);\n *   \n *   return (geo != null) ? geo.relative : false;\n * };\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxGraph.prototype.isPort = function(cell)\n{\n\treturn false;\n};\n\n/**\n * Function: getTerminalForPort\n * \n * Returns the terminal to be used for a given port. This implementation\n * always returns the parent cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n * source - If the cell is the source or target port.\n */\nmxGraph.prototype.getTerminalForPort = function(cell, source)\n{\n\treturn this.model.getParent(cell);\n};\n\n/**\n * Function: getChildOffsetForCell\n * \n * Returns the offset to be used for the cells inside the given cell. The\n * root and layer cells may be identified using <mxGraphModel.isRoot> and\n * <mxGraphModel.isLayer>. For all other current roots, the\n * <mxGraphView.currentRoot> field points to the respective cell, so that\n * the following holds: cell == this.view.currentRoot. This implementation\n * returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose offset should be returned.\n */\nmxGraph.prototype.getChildOffsetForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: enterGroup\n * \n * Uses the given cell as the root of the displayed cell hierarchy. If no\n * cell is specified then the selection cell is used. The cell is only used\n * if <isValidRoot> returns true.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be used as the new root. Default is the\n * selection cell.\n */\nmxGraph.prototype.enterGroup = function(cell)\n{\n\tcell = cell || this.getSelectionCell();\n\t\n\tif (cell != null && this.isValidRoot(cell))\n\t{\n\t\tthis.view.setCurrentRoot(cell);\n\t\tthis.clearSelection();\n\t}\n};\n\n/**\n * Function: exitGroup\n * \n * Changes the current root to the next valid root in the displayed cell\n * hierarchy.\n */\nmxGraph.prototype.exitGroup = function()\n{\n\tvar root = this.model.getRoot();\n\tvar current = this.getCurrentRoot();\n\t\n\tif (current != null)\n\t{\n\t\tvar next = this.model.getParent(current);\n\t\t\n\t\t// Finds the next valid root in the hierarchy\n\t\twhile (next != root && !this.isValidRoot(next) &&\n\t\t\t\tthis.model.getParent(next) != root)\n\t\t{\n\t\t\tnext = this.model.getParent(next);\n\t\t}\n\t\t\n\t\t// Clears the current root if the new root is\n\t\t// the model's root or one of the layers.\n\t\tif (next == root || this.model.getParent(next) == root)\n\t\t{\n\t\t\tthis.view.setCurrentRoot(null);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.view.setCurrentRoot(next);\n\t\t}\n\t\t\n\t\tvar state = this.view.getState(current);\n\t\t\n\t\t// Selects the previous root in the graph\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.setSelectionCell(current);\n\t\t}\n\t}\n};\n\n/**\n * Function: home\n * \n * Uses the root of the model as the root of the displayed cell hierarchy\n * and selects the previous root.\n */\nmxGraph.prototype.home = function()\n{\n\tvar current = this.getCurrentRoot();\n\t\n\tif (current != null)\n\t{\n\t\tthis.view.setCurrentRoot(null);\n\t\tvar state = this.view.getState(current);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.setSelectionCell(current);\n\t\t}\n\t}\n};\n\n/**\n * Function: isValidRoot\n * \n * Returns true if the given cell is a valid root for the cell display\n * hierarchy. This implementation returns true for all non-null values.\n * \n * Parameters:\n * \n * cell - <mxCell> which should be checked as a possible root.\n */\nmxGraph.prototype.isValidRoot = function(cell)\n{\n\treturn (cell != null);\n};\n\n/**\n * Group: Graph display\n */\n \n/**\n * Function: getGraphBounds\n * \n * Returns the bounds of the visible graph. Shortcut to\n * <mxGraphView.getGraphBounds>. See also: <getBoundingBoxFromGeometry>.\n */\n mxGraph.prototype.getGraphBounds = function()\n {\n \treturn this.view.getGraphBounds();\n };\n\n/**\n * Function: getCellBounds\n * \n * Returns the scaled, translated bounds for the given cell. See\n * <mxGraphView.getBounds> for arrays.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be returned.\n * includeEdge - Optional boolean that specifies if the bounds of\n * the connected edges should be included. Default is false.\n * includeDescendants - Optional boolean that specifies if the bounds\n * of all descendants should be included. Default is false.\n */\nmxGraph.prototype.getCellBounds = function(cell, includeEdges, includeDescendants)\n{\n\tvar cells = [cell];\n\t\n\t// Includes all connected edges\n\tif (includeEdges)\n\t{\n\t\tcells = cells.concat(this.model.getEdges(cell));\n\t}\n\t\n\tvar result = this.view.getBounds(cells);\n\t\n\t// Recursively includes the bounds of the children\n\tif (includeDescendants)\n\t{\n\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar tmp = this.getCellBounds(this.model.getChildAt(cell, i),\n\t\t\t\tincludeEdges, true);\n\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\tresult.add(tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = tmp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getBoundingBoxFromGeometry\n * \n * Returns the bounding box for the geometries of the vertices in the\n * given array of cells. This can be used to find the graph bounds during\n * a layout operation (ie. before the last endUpdate) as follows:\n * \n * (code)\n * var cells = graph.getChildCells(graph.getDefaultParent(), true, true);\n * var bounds = graph.getBoundingBoxFromGeometry(cells, true);\n * (end)\n * \n * This can then be used to move cells to the origin:\n * \n * (code)\n * if (bounds.x < 0 || bounds.y < 0)\n * {\n *   graph.moveCells(cells, -Math.min(bounds.x, 0), -Math.min(bounds.y, 0))\n * }\n * (end)\n * \n * Or to translate the graph view:\n * \n * (code)\n * if (bounds.x < 0 || bounds.y < 0)\n * {\n *   graph.view.setTranslate(-Math.min(bounds.x, 0), -Math.min(bounds.y, 0));\n * }\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be returned.\n * includeEdges - Specifies if edge bounds should be included by computing\n * the bounding box for all points in geometry. Default is false.\n */\nmxGraph.prototype.getBoundingBoxFromGeometry = function(cells, includeEdges)\n{\n\tincludeEdges = (includeEdges != null) ? includeEdges : false;\n\tvar result = null;\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (includeEdges || this.model.isVertex(cells[i]))\n\t\t\t{\n\t\t\t\t// Computes the bounding box for the points in the geometry\n\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = null;\n\t\t\t\t\t\n\t\t\t\t\tif (this.model.isEdge(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar addPoint = function(pt)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (pt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (tmp == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp = new mxRectangle(pt.x, pt.y, 0, 0);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp.add(new mxRectangle(pt.x, pt.y, 0, 0));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.model.getTerminal(cells[i], true) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddPoint(geo.getTerminalPoint(true));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.model.getTerminal(cells[i], false) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddPoint(geo.getTerminalPoint(false));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tvar pts = geo.points;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (pts != null && pts.length > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tmp = new mxRectangle(pts[0].x, pts[0].y, 0, 0);\n\n\t\t\t\t\t\t\tfor (var j = 1; j < pts.length; j++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taddPoint(pts[j]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tbbox = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.model.isVertex(parent) && parent != this.view.currentRoot)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tmp = this.getBoundingBoxFromGeometry([parent], false);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbbox = new mxRectangle(geo.x * tmp.width, geo.y * tmp.height, geo.width, geo.height);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (mxUtils.indexOf(cells, parent) >= 0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tbbox.x += tmp.x;\n\t\t\t\t\t\t\t\t\t\tbbox.y += tmp.y;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbbox = mxRectangle.fromRectangle(geo);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.model.isVertex(parent) && mxUtils.indexOf(cells, parent) >= 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tmp = this.getBoundingBoxFromGeometry([parent], false);\n\n\t\t\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbbox.x += tmp.x;\n\t\t\t\t\t\t\t\t\tbbox.y += tmp.y;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bbox != null && geo.offset != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbbox.x += geo.offset.x;\n\t\t\t\t\t\t\tbbox.y += geo.offset.y;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar style = this.getCurrentCellStyle(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bbox != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar angle = mxUtils.getValue(style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (angle != 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbbox = mxUtils.getBoundingBox(bbox, angle);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (result == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: refresh\n * \n * Clears all cell states or the states for the hierarchy starting at the\n * given cell and validates the graph. This fires a refresh event as the\n * last step.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> for which the cell states should be cleared.\n */\nmxGraph.prototype.refresh = function(cell)\n{\n\tthis.view.clear(cell, cell == null);\n\tthis.view.validate();\n\tthis.sizeDidChange();\n\tthis.fireEvent(new mxEventObject(mxEvent.REFRESH));\n};\n\n/**\n * Function: snap\n * \n * Snaps the given numeric value to the grid if <gridEnabled> is true.\n * \n * Parameters:\n * \n * value - Numeric value to be snapped to the grid.\n */\nmxGraph.prototype.snap = function(value)\n{\n\tif (this.gridEnabled)\n\t{\n\t\tvalue = Math.round(value / this.gridSize ) * this.gridSize;\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: snapDelta\n * \n * Snaps the given delta with the given scaled bounds.\n */\nmxGraph.prototype.snapDelta = function(delta, bounds, ignoreGrid, ignoreHorizontal, ignoreVertical)\n{\n\tvar t = this.view.translate;\n\tvar s = this.view.scale;\n\t\n\tif (!ignoreGrid && this.gridEnabled)\n\t{\n\t\tvar tol = this.gridSize * s * 0.5;\n\t\t\n\t\tif (!ignoreHorizontal)\n\t\t{\n\t\t\tvar tx = bounds.x - (this.snap(bounds.x / s - t.x) + t.x) * s;\n\t\t\t\n\t\t\tif (Math.abs(delta.x- tx) < tol)\n\t\t\t{\n\t\t\t\tdelta.x = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.x = this.snap(delta.x / s) * s - tx;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!ignoreVertical)\n\t\t{\n\t\t\tvar ty = bounds.y - (this.snap(bounds.y / s - t.y) + t.y) * s;\n\t\t\t\t\n\t\t\tif (Math.abs(delta.y - ty) < tol)\n\t\t\t{\n\t\t\t\tdelta.y = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.y = this.snap(delta.y / s) * s - ty;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar tol = 0.5 * s;\n\t\t\n\t\tif (!ignoreHorizontal)\n\t\t{\n\t\t\tvar tx = bounds.x - (Math.round(bounds.x / s - t.x) + t.x) * s;\n\t\t\t\n\t\t\tif (Math.abs(delta.x - tx) < tol)\n\t\t\t{\n\t\t\t\tdelta.x = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.x = Math.round(delta.x / s) * s - tx;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!ignoreVertical)\n\t\t{\t\t\n\t\t\tvar ty = bounds.y - (Math.round(bounds.y / s - t.y) + t.y) * s;\n\t\t\t\n\t\t\tif (Math.abs(delta.y - ty) < tol)\n\t\t\t{\n\t\t\t\tdelta.y = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.y = Math.round(delta.y / s) * s - ty;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn delta;\n};\n\n/**\n * Function: panGraph\n * \n * Shifts the graph display by the given amount. This is used to preview\n * panning operations, use <mxGraphView.setTranslate> to set a persistent\n * translation of the view. Fires <mxEvent.PAN>.\n * \n * Parameters:\n * \n * dx - Amount to shift the graph along the x-axis.\n * dy - Amount to shift the graph along the y-axis.\n */\nmxGraph.prototype.panGraph = function(dx, dy)\n{\n\tif (this.useScrollbarsForPanning && mxUtils.hasScrollbars(this.container))\n\t{\n\t\tthis.container.scrollLeft = -dx;\n\t\tthis.container.scrollTop = -dy;\n\t}\n\telse\n\t{\n\t\tvar canvas = this.view.getCanvas();\n\t\t\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\t// Puts everything inside the container in a DIV so that it\n\t\t\t// can be moved without changing the state of the container\n\t\t\tif (dx == 0 && dy == 0)\n\t\t\t{\n\t\t\t\t// Workaround for ignored removeAttribute on SVG element in IE9 standards\n\t\t\t\tif (mxClient.IS_IE)\n\t\t\t\t{\n\t\t\t\t\tcanvas.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.removeAttribute('transform');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.shiftPreview1 != null)\n\t\t\t\t{\n\t\t\t\t\tvar child = this.shiftPreview1.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\tthis.container.appendChild(child);\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview1.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shiftPreview1.parentNode.removeChild(this.shiftPreview1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview1 = null;\n\t\t\t\t\t\n\t\t\t\t\tthis.container.appendChild(canvas.parentNode);\n\t\t\t\t\t\n\t\t\t\t\tchild = this.shiftPreview2.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\tthis.container.appendChild(child);\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview2.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shiftPreview2.parentNode.removeChild(this.shiftPreview2);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview2 = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t\t\n\t\t\t\tif (this.shiftPreview1 == null)\n\t\t\t\t{\n\t\t\t\t\t// Needs two divs for stuff before and after the SVG element\n\t\t\t\t\tthis.shiftPreview1 = document.createElement('div');\n\t\t\t\t\tthis.shiftPreview1.style.position = 'absolute';\n\t\t\t\t\tthis.shiftPreview1.style.overflow = 'visible';\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview2 = document.createElement('div');\n\t\t\t\t\tthis.shiftPreview2.style.position = 'absolute';\n\t\t\t\t\tthis.shiftPreview2.style.overflow = 'visible';\n\n\t\t\t\t\tvar current = this.shiftPreview1;\n\t\t\t\t\tvar child = this.container.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// SVG element is moved via transform attribute\n\t\t\t\t\t\tif (child != canvas.parentNode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent.appendChild(child);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent = this.shiftPreview2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Inserts elements only if not empty\n\t\t\t\t\tif (this.shiftPreview1.firstChild != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.container.insertBefore(this.shiftPreview1, canvas.parentNode);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.shiftPreview2.firstChild != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.container.appendChild(this.shiftPreview2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.shiftPreview1.style.left = dx + 'px';\n\t\t\t\tthis.shiftPreview1.style.top = dy + 'px';\n\t\t\t\tthis.shiftPreview2.style.left = dx + 'px';\n\t\t\t\tthis.shiftPreview2.style.top = dy + 'px';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcanvas.style.left = dx + 'px';\n\t\t\tcanvas.style.top = dy + 'px';\n\t\t}\n\t\t\n\t\tthis.panDx = dx;\n\t\tthis.panDy = dy;\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN));\n\t}\n};\n\n/**\n * Function: zoomIn\n * \n * Zooms into the graph by <zoomFactor>.\n */\nmxGraph.prototype.zoomIn = function()\n{\n\tthis.zoom(this.zoomFactor);\n};\n\n/**\n * Function: zoomOut\n * \n * Zooms out of the graph by <zoomFactor>.\n */\nmxGraph.prototype.zoomOut = function()\n{\n\tthis.zoom(1 / this.zoomFactor);\n};\n\n/**\n * Function: zoomActual\n * \n * Resets the zoom and panning in the view.\n */\nmxGraph.prototype.zoomActual = function()\n{\n\tif (this.view.scale == 1)\n\t{\n\t\tthis.view.setTranslate(0, 0);\n\t}\n\telse\n\t{\n\t\tthis.view.translate.x = 0;\n\t\tthis.view.translate.y = 0;\n\n\t\tthis.view.setScale(1);\n\t}\n};\n\n/**\n * Function: zoomTo\n * \n * Zooms the graph to the given scale with an optional boolean center\n * argument, which is passd to <zoom>.\n */\nmxGraph.prototype.zoomTo = function(scale, center)\n{\n\tthis.zoom(scale / this.view.scale, center);\n};\n\n/**\n * Function: center\n * \n * Centers the graph in the container.\n * \n * Parameters:\n * \n * horizontal - Optional boolean that specifies if the graph should be centered\n * horizontally. Default is true.\n * vertical - Optional boolean that specifies if the graph should be centered\n * vertically. Default is true.\n * cx - Optional float that specifies the horizontal center. Default is 0.5.\n * cy - Optional float that specifies the vertical center. Default is 0.5.\n */\nmxGraph.prototype.center = function(horizontal, vertical, cx, cy)\n{\n\thorizontal = (horizontal != null) ? horizontal : true;\n\tvertical = (vertical != null) ? vertical : true;\n\tcx = (cx != null) ? cx : 0.5;\n\tcy = (cy != null) ? cy : 0.5;\n\t\n\tvar hasScrollbars = mxUtils.hasScrollbars(this.container);\n\tvar padding = 2 * this.getBorder();\n\tvar cw = this.container.clientWidth - padding;\n\tvar ch = this.container.clientHeight - padding;\n\tvar bounds = this.getGraphBounds();\n\n\tvar t = this.view.translate;\n\tvar s = this.view.scale;\n\n\tvar dx = (horizontal) ? cw - bounds.width : 0;\n\tvar dy = (vertical) ? ch - bounds.height : 0;\n\t\n\tif (!hasScrollbars)\n\t{\n\t\tthis.view.setTranslate((horizontal) ? Math.floor(t.x - bounds.x / s + dx * cx / s) : t.x,\n\t\t\t(vertical) ? Math.floor(t.y - bounds.y / s + dy * cy / s) : t.y);\n\t}\n\telse\n\t{\n\t\tbounds.x -= t.x;\n\t\tbounds.y -= t.y;\n\t\n\t\tvar sw = this.container.scrollWidth;\n\t\tvar sh = this.container.scrollHeight;\n\t\t\n\t\tif (sw > cw)\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\t\n\t\tif (sh > ch)\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\n\t\tthis.view.setTranslate(Math.floor(dx / 2 - bounds.x), Math.floor(dy / 2 - bounds.y));\n\t\tthis.container.scrollLeft = (sw - cw) / 2;\n\t\tthis.container.scrollTop = (sh - ch) / 2;\n\t}\n};\n\n/**\n * Function: zoom\n * \n * Zooms the graph using the given factor. Center is an optional boolean\n * argument that keeps the graph scrolled to the center. If the center argument\n * is omitted, then <centerZoom> will be used as its value.\n */\nmxGraph.prototype.zoom = function(factor, center)\n{\n\tcenter = (center != null) ? center : this.centerZoom;\n\tvar scale = Math.round(this.view.scale * factor * 100) / 100;\n\tvar state = this.view.getState(this.getSelectionCell());\n\tfactor = scale / this.view.scale;\n\t\n\tif (this.keepSelectionVisibleOnZoom && state != null)\n\t{\n\t\tvar rect = new mxRectangle(state.x * factor, state.y * factor,\n\t\t\tstate.width * factor, state.height * factor);\n\t\t\n\t\t// Refreshes the display only once if a scroll is carried out\n\t\tthis.view.scale = scale;\n\t\t\n\t\tif (!this.scrollRectToVisible(rect))\n\t\t{\n\t\t\tthis.view.revalidate();\n\t\t\t\n\t\t\t// Forces an event to be fired but does not revalidate again\n\t\t\tthis.view.setScale(scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar hasScrollbars = mxUtils.hasScrollbars(this.container);\n\t\t\n\t\tif (center && !hasScrollbars)\n\t\t{\n\t\t\tvar dx = this.container.offsetWidth;\n\t\t\tvar dy = this.container.offsetHeight;\n\t\t\t\n\t\t\tif (factor > 1)\n\t\t\t{\n\t\t\t\tvar f = (factor - 1) / (scale * 2);\n\t\t\t\tdx *= -f;\n\t\t\t\tdy *= -f;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = (1 / factor - 1) / (this.view.scale * 2);\n\t\t\t\tdx *= f;\n\t\t\t\tdy *= f;\n\t\t\t}\n\n\t\t\tthis.view.scaleAndTranslate(scale,\n\t\t\t\tthis.view.translate.x + dx,\n\t\t\t\tthis.view.translate.y + dy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Allows for changes of translate and scrollbars during setscale\n\t\t\tvar tx = this.view.translate.x;\n\t\t\tvar ty = this.view.translate.y;\n\t\t\tvar sl = this.container.scrollLeft;\n\t\t\tvar st = this.container.scrollTop;\n\t\t\t\n\t\t\tthis.view.setScale(scale);\n\t\t\t\n\t\t\tif (hasScrollbars)\n\t\t\t{\n\t\t\t\tvar dx = 0;\n\t\t\t\tvar dy = 0;\n\t\t\t\t\n\t\t\t\tif (center)\n\t\t\t\t{\n\t\t\t\t\tdx = this.container.offsetWidth * (factor - 1) / 2;\n\t\t\t\t\tdy = this.container.offsetHeight * (factor - 1) / 2;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.container.scrollLeft = (this.view.translate.x - tx) * this.view.scale + Math.round(sl * factor + dx);\n\t\t\t\tthis.container.scrollTop = (this.view.translate.y - ty) * this.view.scale + Math.round(st * factor + dy);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: zoomToRect\n * \n * Zooms the graph to the specified rectangle. If the rectangle does not have same aspect\n * ratio as the display container, it is increased in the smaller relative dimension only\n * until the aspect match. The original rectangle is centralised within this expanded one.\n * \n * Note that the input rectangular must be un-scaled and un-translated.\n * \n * Parameters:\n * \n * rect - The un-scaled and un-translated rectangluar region that should be just visible \n * after the operation\n */\nmxGraph.prototype.zoomToRect = function(rect)\n{\n\tvar scaleX = this.container.clientWidth / rect.width;\n\tvar scaleY = this.container.clientHeight / rect.height;\n\tvar aspectFactor = scaleX / scaleY;\n\n\t// Remove any overlap of the rect outside the client area\n\trect.x = Math.max(0, rect.x);\n\trect.y = Math.max(0, rect.y);\n\tvar rectRight = Math.min(this.container.scrollWidth, rect.x + rect.width);\n\tvar rectBottom = Math.min(this.container.scrollHeight, rect.y + rect.height);\n\trect.width = rectRight - rect.x;\n\trect.height = rectBottom - rect.y;\n\n\t// The selection area has to be increased to the same aspect\n\t// ratio as the container, centred around the centre point of the \n\t// original rect passed in.\n\tif (aspectFactor < 1.0)\n\t{\n\t\t// Height needs increasing\n\t\tvar newHeight = rect.height / aspectFactor;\n\t\tvar deltaHeightBuffer = (newHeight - rect.height) / 2.0;\n\t\trect.height = newHeight;\n\t\t\n\t\t// Assign up to half the buffer to the upper part of the rect, not crossing 0\n\t\t// put the rest on the bottom\n\t\tvar upperBuffer = Math.min(rect.y , deltaHeightBuffer);\n\t\trect.y = rect.y - upperBuffer;\n\t\t\n\t\t// Check if the bottom has extended too far\n\t\trectBottom = Math.min(this.container.scrollHeight, rect.y + rect.height);\n\t\trect.height = rectBottom - rect.y;\n\t}\n\telse\n\t{\n\t\t// Width needs increasing\n\t\tvar newWidth = rect.width * aspectFactor;\n\t\tvar deltaWidthBuffer = (newWidth - rect.width) / 2.0;\n\t\trect.width = newWidth;\n\t\t\n\t\t// Assign up to half the buffer to the upper part of the rect, not crossing 0\n\t\t// put the rest on the bottom\n\t\tvar leftBuffer = Math.min(rect.x , deltaWidthBuffer);\n\t\trect.x = rect.x - leftBuffer;\n\t\t\n\t\t// Check if the right hand side has extended too far\n\t\trectRight = Math.min(this.container.scrollWidth, rect.x + rect.width);\n\t\trect.width = rectRight - rect.x;\n\t}\n\n\tvar scale = this.container.clientWidth / rect.width;\n\tvar newScale = this.view.scale * scale;\n\n\tif (!mxUtils.hasScrollbars(this.container))\n\t{\n\t\tthis.view.scaleAndTranslate(newScale, (this.view.translate.x - rect.x / this.view.scale), (this.view.translate.y - rect.y / this.view.scale));\n\t}\n\telse\n\t{\n\t\tthis.view.setScale(newScale);\n\t\tthis.container.scrollLeft = Math.round(rect.x * scale);\n\t\tthis.container.scrollTop = Math.round(rect.y * scale);\n\t}\n};\n\n/**\n * Function: scrollCellToVisible\n * \n * Pans the graph so that it shows the given cell. Optionally the cell may\n * be centered in the container.\n * \n * To center a given graph if the <container> has no scrollbars, use the following code.\n * \n * [code]\n * var bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x - (bounds.width - container.clientWidth) / 2,\n * \t\t\t\t\t\t   -bounds.y - (bounds.height - container.clientHeight) / 2);\n * [/code]\n * \n * Parameters:\n * \n * cell - <mxCell> to be made visible.\n * center - Optional boolean flag. Default is false.\n */\nmxGraph.prototype.scrollCellToVisible = function(cell, center)\n{\n\tvar x = -this.view.translate.x;\n\tvar y = -this.view.translate.y;\n\n\tvar state = this.view.getState(cell);\n\n\tif (state != null)\n\t{\n\t\tvar bounds = new mxRectangle(x + state.x, y + state.y, state.width,\n\t\t\tstate.height);\n\n\t\tif (center && this.container != null)\n\t\t{\n\t\t\tvar w = this.container.clientWidth;\n\t\t\tvar h = this.container.clientHeight;\n\n\t\t\tbounds.x = bounds.getCenterX() - w / 2;\n\t\t\tbounds.width = w;\n\t\t\tbounds.y = bounds.getCenterY() - h / 2;\n\t\t\tbounds.height = h;\n\t\t}\n\t\t\n\t\tvar tr = new mxPoint(this.view.translate.x, this.view.translate.y);\n\n\t\tif (this.scrollRectToVisible(bounds))\n\t\t{\n\t\t\t// Triggers an update via the view's event source\n\t\t\tvar tr2 = new mxPoint(this.view.translate.x, this.view.translate.y);\n\t\t\tthis.view.translate.x = tr.x;\n\t\t\tthis.view.translate.y = tr.y;\n\t\t\tthis.view.setTranslate(tr2.x, tr2.y);\n\t\t}\n\t}\n};\n\n/**\n * Function: scrollRectToVisible\n * \n * Pans the graph so that it shows the given rectangle.\n * \n * Parameters:\n * \n * rect - <mxRectangle> to be made visible.\n */\nmxGraph.prototype.scrollRectToVisible = function(rect)\n{\n\tvar isChanged = false;\n\t\n\tif (rect != null)\n\t{\n\t\tvar w = this.container.offsetWidth;\n\t\tvar h = this.container.offsetHeight;\n\n        var widthLimit = Math.min(w, rect.width);\n        var heightLimit = Math.min(h, rect.height);\n\n\t\tif (mxUtils.hasScrollbars(this.container))\n\t\t{\n\t\t\tvar c = this.container;\n\t\t\trect.x += this.view.translate.x;\n\t\t\trect.y += this.view.translate.y;\n\t\t\tvar dx = c.scrollLeft - rect.x;\n\t\t\tvar ddx = Math.max(dx - c.scrollLeft, 0);\n\n\t\t\tif (dx > 0)\n\t\t\t{\n\t\t\t\tc.scrollLeft -= dx + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdx = rect.x + widthLimit - c.scrollLeft - c.clientWidth;\n\n\t\t\t\tif (dx > 0)\n\t\t\t\t{\n\t\t\t\t\tc.scrollLeft += dx + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dy = c.scrollTop - rect.y;\n\t\t\tvar ddy = Math.max(0, dy - c.scrollTop);\n\n\t\t\tif (dy > 0)\n\t\t\t{\n\t\t\t\tc.scrollTop -= dy + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdy = rect.y + heightLimit - c.scrollTop - c.clientHeight;\n\n\t\t\t\tif (dy > 0)\n\t\t\t\t{\n\t\t\t\t\tc.scrollTop += dy + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.useScrollbarsForPanning && (ddx != 0 || ddy != 0))\n\t\t\t{\n\t\t\t\tthis.view.setTranslate(ddx, ddy);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar x = -this.view.translate.x;\n\t\t\tvar y = -this.view.translate.y;\n\n\t\t\tvar s = this.view.scale;\n\n\t\t\tif (rect.x + widthLimit > x + w)\n\t\t\t{\n\t\t\t\tthis.view.translate.x -= (rect.x + widthLimit - w - x) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.y + heightLimit > y + h)\n\t\t\t{\n\t\t\t\tthis.view.translate.y -= (rect.y + heightLimit - h - y) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.x < x)\n\t\t\t{\n\t\t\t\tthis.view.translate.x += (x - rect.x) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.y  < y)\n\t\t\t{\n\t\t\t\tthis.view.translate.y += (y - rect.y) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (isChanged)\n\t\t\t{\n\t\t\t\tthis.view.refresh();\n\t\t\t\t\n\t\t\t\t// Repaints selection marker (ticket 18)\n\t\t\t\tif (this.selectionCellsHandler != null)\n\t\t\t\t{\n\t\t\t\t\tthis.selectionCellsHandler.refresh();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn isChanged;\n};\n\n/**\n * Function: getCellGeometry\n * \n * Returns the <mxGeometry> for the given cell. This implementation uses\n * <mxGraphModel.getGeometry>. Subclasses can override this to implement\n * specific geometries for cells in only one graph, that is, it can return\n * geometries that depend on the current state of the view.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be returned.\n */\nmxGraph.prototype.getCellGeometry = function(cell)\n{\n\treturn this.model.getGeometry(cell);\n};\n\n/**\n * Function: isCellVisible\n * \n * Returns true if the given cell is visible in this graph. This\n * implementation uses <mxGraphModel.isVisible>. Subclassers can override\n * this to implement specific visibility for cells in only one graph, that\n * is, without affecting the visible state of the cell.\n * \n * When using dynamic filter expressions for cell visibility, then the\n * graph should be revalidated after the filter expression has changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose visible state should be returned.\n */\nmxGraph.prototype.isCellVisible = function(cell)\n{\n\treturn this.model.isVisible(cell);\n};\n\n/**\n * Function: isCellCollapsed\n * \n * Returns true if the given cell is collapsed in this graph. This\n * implementation uses <mxGraphModel.isCollapsed>. Subclassers can override\n * this to implement specific collapsed states for cells in only one graph,\n * that is, without affecting the collapsed state of the cell.\n * \n * When using dynamic filter expressions for the collapsed state, then the\n * graph should be revalidated after the filter expression has changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be returned.\n */\nmxGraph.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.model.isCollapsed(cell);\n};\n\n/**\n * Function: isCellConnectable\n * \n * Returns true if the given cell is connectable in this graph. This\n * implementation uses <mxGraphModel.isConnectable>. Subclassers can override\n * this to implement specific connectable states for cells in only one graph,\n * that is, without affecting the connectable state of the cell in the model.\n * \n * Parameters:\n * \n * cell - <mxCell> whose connectable state should be returned.\n */\nmxGraph.prototype.isCellConnectable = function(cell)\n{\n\treturn this.model.isConnectable(cell);\n};\n\n/**\n * Function: isOrthogonal\n * \n * Returns true if perimeter points should be computed such that the\n * resulting edge has only horizontal or vertical segments.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n */\nmxGraph.prototype.isOrthogonal = function(edge)\n{\n\tvar orthogonal = edge.style[mxConstants.STYLE_ORTHOGONAL];\n\t\n\tif (orthogonal != null)\n\t{\n\t\treturn orthogonal;\n\t}\n\t\n\tvar tmp = this.view.getEdgeStyle(edge);\n\t\n\treturn tmp == mxEdgeStyle.SegmentConnector ||\n\t\ttmp == mxEdgeStyle.ElbowConnector ||\n\t\ttmp == mxEdgeStyle.SideToSide ||\n\t\ttmp == mxEdgeStyle.TopToBottom ||\n\t\ttmp == mxEdgeStyle.EntityRelation ||\n\t\ttmp == mxEdgeStyle.OrthConnector;\n};\n\n/**\n * Function: isLoop\n * \n * Returns true if the given cell state is a loop.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents a potential loop.\n */\nmxGraph.prototype.isLoop = function(state)\n{\n\tvar src = state.getVisibleTerminalState(true);\n\tvar trg = state.getVisibleTerminalState(false);\n\t\n\treturn (src != null && src == trg);\n};\n\n/**\n * Function: isCloneEvent\n * \n * Returns true if the given event is a clone event. This implementation\n * returns true if control is pressed.\n */\nmxGraph.prototype.isCloneEvent = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: isTransparentClickEvent\n * \n * Hook for implementing click-through behaviour on selected cells. If this\n * returns true the cell behind the selected cell will be selected. This\n * implementation returns false;\n */\nmxGraph.prototype.isTransparentClickEvent = function(evt)\n{\n\treturn false;\n};\n\n/**\n * Function: isToggleEvent\n * \n * Returns true if the given event is a toggle event. This implementation\n * returns true if the meta key (Cmd) is pressed on Macs or if control is\n * pressed on any other platform.\n */\nmxGraph.prototype.isToggleEvent = function(evt)\n{\n\treturn (mxClient.IS_MAC) ? mxEvent.isMetaDown(evt) : mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: isGridEnabledEvent\n * \n * Returns true if the given mouse event should be aligned to the grid.\n */\nmxGraph.prototype.isGridEnabledEvent = function(evt)\n{\n\treturn evt != null && !mxEvent.isAltDown(evt);\n};\n\n/**\n * Function: isConstrainedEvent\n * \n * Returns true if the given mouse event should be aligned to the grid.\n */\nmxGraph.prototype.isConstrainedEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: isIgnoreTerminalEvent\n * \n * Returns true if the given mouse event should not allow any connections to be\n * made. This implementation returns false.\n */\nmxGraph.prototype.isIgnoreTerminalEvent = function(evt)\n{\n\treturn false;\n};\n\n/**\n * Group: Validation\n */\n\n/**\n * Function: validationAlert\n * \n * Displays the given validation error in a dialog. This implementation uses\n * mxUtils.alert.\n */\nmxGraph.prototype.validationAlert = function(message)\n{\n\tmxUtils.alert(message);\n};\n\n/**\n * Function: isEdgeValid\n * \n * Checks if the return value of <getEdgeValidationError> for the given\n * arguments is null.\n *  \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.isEdgeValid = function(edge, source, target)\n{\n\treturn this.getEdgeValidationError(edge, source, target) == null;\n};\n\n/**\n * Function: getEdgeValidationError\n * \n * Returns the validation error message to be displayed when inserting or\n * changing an edges' connectivity. A return value of null means the edge\n * is valid, a return value of '' means it's not valid, but do not display\n * an error message. Any other (non-empty) string returned from this method\n * is displayed as an error message when trying to connect an edge to a\n * source and target. This implementation uses the <multiplicities>, and\n * checks <multigraph>, <allowDanglingEdges> and <allowLoops> to generate\n * validation errors.\n * \n * For extending this method with specific checks for source/target cells,\n * the method can be extended as follows. Returning an empty string means\n * the edge is invalid with no error message, a non-null string specifies\n * the error message, and null means the edge is valid.\n * \n * (code)\n * graph.getEdgeValidationError = function(edge, source, target)\n * {\n *   if (source != null && target != null &&\n *     this.model.getValue(source) != null &&\n *     this.model.getValue(target) != null)\n *   {\n *     if (target is not valid for source)\n *     {\n *       return 'Invalid Target';\n *     }\n *   }\n *   \n *   // \"Supercall\"\n *   return mxGraph.prototype.getEdgeValidationError.apply(this, arguments);\n * }\n * (end)\n *  \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.getEdgeValidationError = function(edge, source, target)\n{\n\tif (edge != null && !this.isAllowDanglingEdges() && (source == null || target == null))\n\t{\n\t\treturn '';\n\t}\n\t\n\tif (edge != null && this.model.getTerminal(edge, true) == null &&\n\t\tthis.model.getTerminal(edge, false) == null)\t\n\t{\n\t\treturn null;\n\t}\n\t\n\t// Checks if we're dealing with a loop\n\tif (!this.allowLoops && source == target && source != null)\n\t{\n\t\treturn '';\n\t}\n\t\n\t// Checks if the connection is generally allowed\n\tif (!this.isValidConnection(source, target))\n\t{\n\t\treturn '';\n\t}\n\n\tif (source != null && target != null)\n\t{\n\t\tvar error = '';\n\n\t\t// Checks if the cells are already connected\n\t\t// and adds an error message if required\t\t\t\n\t\tif (!this.multigraph)\n\t\t{\n\t\t\tvar tmp = this.model.getEdgesBetween(source, target, true);\n\t\t\t\n\t\t\t// Checks if the source and target are not connected by another edge\n\t\t\tif (tmp.length > 1 || (tmp.length == 1 && tmp[0] != edge))\n\t\t\t{\n\t\t\t\terror += (mxResources.get(this.alreadyConnectedResource) ||\n\t\t\t\t\tthis.alreadyConnectedResource)+'\\n';\n\t\t\t}\n\t\t}\n\n\t\t// Gets the number of outgoing edges from the source\n\t\t// and the number of incoming edges from the target\n\t\t// without counting the edge being currently changed.\n\t\tvar sourceOut = this.model.getDirectedEdgeCount(source, true, edge);\n\t\tvar targetIn = this.model.getDirectedEdgeCount(target, false, edge);\n\n\t\t// Checks the change against each multiplicity rule\n\t\tif (this.multiplicities != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.multiplicities.length; i++)\n\t\t\t{\n\t\t\t\tvar err = this.multiplicities[i].check(this, edge, source,\n\t\t\t\t\ttarget, sourceOut, targetIn);\n\t\t\t\t\n\t\t\t\tif (err != null)\n\t\t\t\t{\n\t\t\t\t\terror += err;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Validates the source and target terminals independently\n\t\tvar err = this.validateEdge(edge, source, target);\n\t\t\n\t\tif (err != null)\n\t\t{\n\t\t\terror += err;\n\t\t}\n\t\t\n\t\treturn (error.length > 0) ? error : null;\n\t}\n\t\n\treturn (this.allowDanglingEdges) ? null : '';\n};\n\n/**\n * Function: validateEdge\n * \n * Hook method for subclassers to return an error message for the given\n * edge and terminals. This implementation returns null.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.validateEdge = function(edge, source, target)\n{\n\treturn null;\n};\n\n/**\n * Function: validateGraph\n * \n * Validates the graph by validating each descendant of the given cell or\n * the root of the model. Context is an object that contains the validation\n * state for the complete validation run. The validation errors are\n * attached to their cells using <setCellWarning>. Returns null in the case of\n * successful validation or an array of strings (warnings) in the case of\n * failed validations.\n * \n * Paramters:\n * \n * cell - Optional <mxCell> to start the validation recursion. Default is\n * the graph root.\n * context - Object that represents the global validation state.\n */\nmxGraph.prototype.validateGraph = function(cell, context)\n{\n\tcell = (cell != null) ? cell : this.model.getRoot();\n\tcontext = (context != null) ? context : new Object();\n\t\n\tvar isValid = true;\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar tmp = this.model.getChildAt(cell, i);\n\t\tvar ctx = context;\n\t\t\n\t\tif (this.isValidRoot(tmp))\n\t\t{\n\t\t\tctx = new Object();\n\t\t}\n\t\t\n\t\tvar warn = this.validateGraph(tmp, ctx);\n\t\t\n\t\tif (warn != null)\n\t\t{\n\t\t\tthis.setCellWarning(tmp, warn.replace(/\\n/g, '<br>'));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.setCellWarning(tmp, null);\n\t\t}\n\t\t\n\t\tisValid = isValid && warn == null;\n\t}\n\t\n\tvar warning = '';\n\t\n\t// Adds error for invalid children if collapsed (children invisible)\n\tif (this.isCellCollapsed(cell) && !isValid)\n\t{\n\t\twarning += (mxResources.get(this.containsValidationErrorsResource) ||\n\t\t\tthis.containsValidationErrorsResource) + '\\n';\n\t}\n\t\n\t// Checks edges and cells using the defined multiplicities\n\tif (this.model.isEdge(cell))\n\t{\n\t\twarning += this.getEdgeValidationError(cell,\n\t\tthis.model.getTerminal(cell, true),\n\t\tthis.model.getTerminal(cell, false)) || '';\n\t}\n\telse\n\t{\n\t\twarning += this.getCellValidationError(cell) || '';\n\t}\n\t\n\t// Checks custom validation rules\n\tvar err = this.validateCell(cell, context);\n\t\n\tif (err != null)\n\t{\n\t\twarning += err;\n\t}\n\t\n\t// Updates the display with the warning icons\n\t// before any potential alerts are displayed.\n\t// LATER: Move this into addCellOverlay. Redraw\n\t// should check if overlay was added or removed.\n\tif (this.model.getParent(cell) == null)\n\t{\n\t\tthis.view.validate();\n\t}\n\n\treturn (warning.length > 0 || !isValid) ? warning : null;\n};\n\n/**\n * Function: getCellValidationError\n * \n * Checks all <multiplicities> that cannot be enforced while the graph is\n * being modified, namely, all multiplicities that require a minimum of\n * 1 edge.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the multiplicities should be checked.\n */\nmxGraph.prototype.getCellValidationError = function(cell)\n{\n\tvar outCount = this.model.getDirectedEdgeCount(cell, true);\n\tvar inCount = this.model.getDirectedEdgeCount(cell, false);\n\tvar value = this.model.getValue(cell);\n\tvar error = '';\n\n\tif (this.multiplicities != null)\n\t{\n\t\tfor (var i = 0; i < this.multiplicities.length; i++)\n\t\t{\n\t\t\tvar rule = this.multiplicities[i];\n\t\t\t\n\t\t\tif (rule.source && mxUtils.isNode(value, rule.type,\n\t\t\t\trule.attr, rule.value) && (outCount > rule.max ||\n\t\t\t\toutCount < rule.min))\n\t\t\t{\n\t\t\t\terror += rule.countError + '\\n';\n\t\t\t}\n\t\t\telse if (!rule.source && mxUtils.isNode(value, rule.type,\n\t\t\t\t\trule.attr, rule.value) && (inCount > rule.max ||\n\t\t\t\t\tinCount < rule.min))\n\t\t\t{\n\t\t\t\terror += rule.countError + '\\n';\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (error.length > 0) ? error : null;\n};\n\n/**\n * Function: validateCell\n * \n * Hook method for subclassers to return an error message for the given\n * cell and validation context. This implementation returns null. Any HTML\n * breaks will be converted to linefeeds in the calling method.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to validate.\n * context - Object that represents the global validation state.\n */\nmxGraph.prototype.validateCell = function(cell, context)\n{\n\treturn null;\n};\n\n/**\n * Group: Graph appearance\n */\n\n/**\n * Function: getBackgroundImage\n * \n * Returns the <backgroundImage> as an <mxImage>.\n */\nmxGraph.prototype.getBackgroundImage = function()\n{\n\treturn this.backgroundImage;\n};\n\n/**\n * Function: setBackgroundImage\n * \n * Sets the new <backgroundImage>.\n * \n * Parameters:\n * \n * image - New <mxImage> to be used for the background.\n */\nmxGraph.prototype.setBackgroundImage = function(image)\n{\n\tthis.backgroundImage = image;\n};\n\n/**\n * Function: getFoldingImage\n * \n * Returns the <mxImage> used to display the collapsed state of\n * the specified cell state. This returns null for all edges.\n */\nmxGraph.prototype.getFoldingImage = function(state)\n{\n\tif (state != null && this.foldingEnabled && !this.getModel().isEdge(state.cell))\n\t{\n\t\tvar tmp = this.isCellCollapsed(state.cell);\n\t\t\n\t\tif (this.isCellFoldable(state.cell, !tmp))\n\t\t{\n\t\t\treturn (tmp) ? this.collapsedImage : this.expandedImage;\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: convertValueToString\n * \n * Returns the textual representation for the given cell. This\n * implementation returns the nodename or string-representation of the user\n * object.\n *\n * Example:\n * \n * The following returns the label attribute from the cells user\n * object if it is an XML node.\n * \n * (code)\n * graph.convertValueToString = function(cell)\n * {\n * \treturn cell.getAttribute('label');\n * }\n * (end)\n * \n * See also: <cellLabelChanged>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose textual representation should be returned.\n */\nmxGraph.prototype.convertValueToString = function(cell)\n{\n\tvar value = this.model.getValue(cell);\n\t\n\tif (value != null)\n\t{\n\t\tif (mxUtils.isNode(value))\n\t\t{\n\t\t\treturn value.nodeName;\n\t\t}\n\t\telse if (typeof(value.toString) == 'function')\n\t\t{\n\t\t\treturn value.toString();\n\t\t}\n\t}\n\t\n\treturn '';\n};\n\n/**\n * Function: getLabel\n * \n * Returns a string or DOM node that represents the label for the given\n * cell. This implementation uses <convertValueToString> if <labelsVisible>\n * is true. Otherwise it returns an empty string.\n * \n * To truncate a label to match the size of the cell, the following code\n * can be used.\n * \n * (code)\n * graph.getLabel = function(cell)\n * {\n *   var label = mxGraph.prototype.getLabel.apply(this, arguments);\n * \n *   if (label != null && this.model.isVertex(cell))\n *   {\n *     var geo = this.getCellGeometry(cell);\n * \n *     if (geo != null)\n *     {\n *       var max = parseInt(geo.width / 8);\n * \n *       if (label.length > max)\n *       {\n *         label = label.substring(0, max)+'...';\n *       }\n *     }\n *   } \n *   return mxUtils.htmlEntities(label);\n * }\n * (end)\n * \n * A resize listener is needed in the graph to force a repaint of the label\n * after a resize.\n * \n * (code)\n * graph.addListener(mxEvent.RESIZE_CELLS, function(sender, evt)\n * {\n *   var cells = evt.getProperty('cells');\n * \n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     this.view.removeState(cells[i]);\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be returned.\n */\nmxGraph.prototype.getLabel = function(cell)\n{\n\tvar result = '';\n\t\n\tif (this.labelsVisible && cell != null)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cell);\n\t\t\n\t\tif (!mxUtils.getValue(style, mxConstants.STYLE_NOLABEL, false))\n\t\t{\n\t\t\tresult = this.convertValueToString(cell);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: isHtmlLabel\n * \n * Returns true if the label must be rendered as HTML markup. The default\n * implementation returns <htmlLabels>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be displayed as HTML markup.\n */\nmxGraph.prototype.isHtmlLabel = function(cell)\n{\n\treturn this.isHtmlLabels();\n};\n \n/**\n * Function: isHtmlLabels\n * \n * Returns <htmlLabels>.\n */\nmxGraph.prototype.isHtmlLabels = function()\n{\n\treturn this.htmlLabels;\n};\n \n/**\n * Function: setHtmlLabels\n * \n * Sets <htmlLabels>.\n */\nmxGraph.prototype.setHtmlLabels = function(value)\n{\n\tthis.htmlLabels = value;\n};\n\n/**\n * Function: isWrapping\n * \n * This enables wrapping for HTML labels.\n * \n * Returns true if no white-space CSS style directive should be used for\n * displaying the given cells label. This implementation returns true if\n * <mxConstants.STYLE_WHITE_SPACE> in the style of the given cell is 'wrap'.\n * \n * This is used as a workaround for IE ignoring the white-space directive\n * of child elements if the directive appears in a parent element. It\n * should be overridden to return true if a white-space directive is used\n * in the HTML markup that represents the given cells label. In order for\n * HTML markup to work in labels, <isHtmlLabel> must also return true\n * for the given cell.\n * \n * Example:\n * \n * (code)\n * graph.getLabel = function(cell)\n * {\n *   var tmp = mxGraph.prototype.getLabel.apply(this, arguments); // \"supercall\"\n *   \n *   if (this.model.isEdge(cell))\n *   {\n *     tmp = '<div style=\"width: 150px; white-space:normal;\">'+tmp+'</div>';\n *   }\n *   \n *   return tmp;\n * }\n * \n * graph.isWrapping = function(state)\n * {\n * \t return this.model.isEdge(state.cell);\n * }\n * (end)\n * \n * Makes sure no edge label is wider than 150 pixels, otherwise the content\n * is wrapped. Note: No width must be specified for wrapped vertex labels as\n * the vertex defines the width in its geometry.\n * \n * Parameters:\n * \n * state - <mxCell> whose label should be wrapped.\n */\nmxGraph.prototype.isWrapping = function(cell)\n{\n\treturn this.getCurrentCellStyle(cell)[mxConstants.STYLE_WHITE_SPACE] == 'wrap';\n};\n\n/**\n * Function: isLabelClipped\n * \n * Returns true if the overflow portion of labels should be hidden. If this\n * returns true then vertex labels will be clipped to the size of the vertices.\n * This implementation returns true if <mxConstants.STYLE_OVERFLOW> in the\n * style of the given cell is 'hidden'.\n * \n * Parameters:\n * \n * state - <mxCell> whose label should be clipped.\n */\nmxGraph.prototype.isLabelClipped = function(cell)\n{\n\treturn this.getCurrentCellStyle(cell)[mxConstants.STYLE_OVERFLOW] == 'hidden';\n};\n\n/**\n * Function: getTooltip\n * \n * Returns the string or DOM node that represents the tooltip for the given\n * state, node and coordinate pair. This implementation checks if the given\n * node is a folding icon or overlay and returns the respective tooltip. If\n * this does not result in a tooltip, the handler for the cell is retrieved\n * from <selectionCellsHandler> and the optional getTooltipForNode method is\n * called. If no special tooltip exists here then <getTooltipForCell> is used\n * with the cell in the given state as the argument to return a tooltip for the\n * given state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose tooltip should be returned.\n * node - DOM node that is currently under the mouse.\n * x - X-coordinate of the mouse.\n * y - Y-coordinate of the mouse.\n */\nmxGraph.prototype.getTooltip = function(state, node, x, y)\n{\n\tvar tip = null;\n\t\n\tif (state != null)\n\t{\n\t\t// Checks if the mouse is over the folding icon\n\t\tif (state.control != null && (node == state.control.node ||\n\t\t\tnode.parentNode == state.control.node))\n\t\t{\n\t\t\ttip = this.collapseExpandResource;\n\t\t\ttip = mxUtils.htmlEntities(mxResources.get(tip) || tip).replace(/\\\\n/g, '<br>');\n\t\t}\n\n\t\tif (tip == null && state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\t// LATER: Exit loop if tip is not null\n\t\t\t\tif (tip == null && (node == shape.node || node.parentNode == shape.node))\n\t\t\t\t{\n\t\t\t\t\ttip = shape.overlay.toString();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\tif (tip == null)\n\t\t{\n\t\t\tvar handler = this.selectionCellsHandler.getHandler(state.cell);\n\t\t\t\n\t\t\tif (handler != null && typeof(handler.getTooltipForNode) == 'function')\n\t\t\t{\n\t\t\t\ttip = handler.getTooltipForNode(node);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (tip == null)\n\t\t{\n\t\t\ttip = this.getTooltipForCell(state.cell);\n\t\t}\n\t}\n\t\n\treturn tip;\n};\n\n/**\n * Function: getTooltipForCell\n * \n * Returns the string or DOM node to be used as the tooltip for the given\n * cell. This implementation uses the cells getTooltip function if it\n * exists, or else it returns <convertValueToString> for the cell.\n * \n * Example:\n * \n * (code)\n * graph.getTooltipForCell = function(cell)\n * {\n *   return 'Hello, World!';\n * }\n * (end)\n * \n * Replaces all tooltips with the string Hello, World!\n * \n * Parameters:\n * \n * cell - <mxCell> whose tooltip should be returned.\n */\nmxGraph.prototype.getTooltipForCell = function(cell)\n{\n\tvar tip = null;\n\t\n\tif (cell != null && cell.getTooltip != null)\n\t{\n\t\ttip = cell.getTooltip();\n\t}\n\telse\n\t{\n\t\ttip = this.convertValueToString(cell);\n\t}\n\t\n\treturn tip;\n};\n\n/**\n * Function: getLinkForCell\n * \n * Returns the string to be used as the link for the given cell. This\n * implementation returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose tooltip should be returned.\n */\nmxGraph.prototype.getLinkForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: getCursorForMouseEvent\n * \n * Returns the cursor value to be used for the CSS of the shape for the\n * given event. This implementation calls <getCursorForCell>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> whose cursor should be returned.\n */\nmxGraph.prototype.getCursorForMouseEvent = function(me)\n{\n\treturn this.getCursorForCell(me.getCell());\n};\n\n/**\n * Function: getCursorForCell\n * \n * Returns the cursor value to be used for the CSS of the shape for the\n * given cell. This implementation returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose cursor should be returned.\n */\nmxGraph.prototype.getCursorForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: getStartSize\n * \n * Returns the start size of the given swimlane, that is, the width or\n * height of the part that contains the title, depending on the\n * horizontal style. The return value is an <mxRectangle> with either\n * width or height set as appropriate.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose start size should be returned.\n * ignoreState - Optional boolean that specifies if cell state should be ignored.\n */\nmxGraph.prototype.getStartSize = function(swimlane, ignoreState)\n{\n\tvar result = new mxRectangle();\n\tvar style = this.getCurrentCellStyle(swimlane, ignoreState);\n\tvar size = parseInt(mxUtils.getValue(style,\n\t\tmxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE));\n\t\n\tif (mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t{\n\t\tresult.height = size;\n\t}\n\telse\n\t{\n\t\tresult.width = size;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getSwimlaneDirection\n * \n * Returns the direction for the given swimlane style.\n */\nmxGraph.prototype.getSwimlaneDirection = function(style)\n{\n\tvar dir = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\tvar flipH = mxUtils.getValue(style, mxConstants.STYLE_FLIPH, 0) == 1;\n\tvar flipV = mxUtils.getValue(style, mxConstants.STYLE_FLIPV, 0) == 1;\n\tvar h = mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true);\n\tvar n = (h) ? 0 : 3;\n\t\n\tif (dir == mxConstants.DIRECTION_NORTH)\n\t{\n\t\tn--;\n\t}\n\telse if (dir == mxConstants.DIRECTION_WEST)\n\t{\n\t\tn += 2;\n\t}\n\telse if (dir == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tn += 1;\n\t}\n\t\n\tvar mod = mxUtils.mod(n, 2);\n\t\n\tif (flipH && mod == 1)\n\t{\n\t\tn += 2;\n\t}\n\t\n\tif (flipV && mod == 0)\n\t{\n\t\tn += 2;\n\t}\n\t\n\treturn [mxConstants.DIRECTION_NORTH, mxConstants.DIRECTION_EAST,\n\t\tmxConstants.DIRECTION_SOUTH, mxConstants.DIRECTION_WEST]\n\t\t[mxUtils.mod(n, 4)];\n};\n\n/**\n * Function: getActualStartSize\n * \n * Returns the actual start size of the given swimlane taking into account\n * direction and horizontal and vertial flip styles. The start size is\n * returned as an <mxRectangle> where top, left, bottom, right start sizes\n * are returned as x, y, height and width, respectively.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose start size should be returned.\n * ignoreState - Optional boolean that specifies if cell state should be ignored.\n */\nmxGraph.prototype.getActualStartSize = function(swimlane, ignoreState)\n{\n\tvar result = new mxRectangle();\n\t\n\tif (this.isSwimlane(swimlane, ignoreState))\n\t{\n\t\tvar style = this.getCurrentCellStyle(swimlane, ignoreState);\n\t\tvar size = parseInt(mxUtils.getValue(style, mxConstants.STYLE_STARTSIZE,\n\t\t\tmxConstants.DEFAULT_STARTSIZE));\n\t\tvar dir = this.getSwimlaneDirection(style);\n\t\t\n\t\tif (dir == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tresult.y = size;\n\t\t}\n\t\telse if (dir == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tresult.x = size;\n\t\t}\n\t\telse if (dir == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tresult.height = size;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult.width = size;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getImage\n * \n * Returns the image URL for the given cell state. This implementation\n * returns the value stored under <mxConstants.STYLE_IMAGE> in the cell\n * style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose image URL should be returned.\n */\nmxGraph.prototype.getImage = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_IMAGE] : null;\n};\n\n/**\n * Function: isTransparentState\n * \n * Returns true if the given state has no stroke- or fillcolor and no image.\n * \n * Parameters:\n * \n * state - <mxCellState> to check.\n */\nmxGraph.prototype.isTransparentState = function(state)\n{\n\tvar result = false;\n\t\n\tif (state != null)\n\t{\n\t\tvar stroke = mxUtils.getValue(state.style, mxConstants.STYLE_STROKECOLOR, mxConstants.NONE);\n\t\tvar fill = mxUtils.getValue(state.style, mxConstants.STYLE_FILLCOLOR, mxConstants.NONE);\n\t\t\n\t\tresult = stroke == mxConstants.NONE && fill == mxConstants.NONE && this.getImage(state) == null;\n\t\t\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getVerticalAlign\n * \n * Returns the vertical alignment for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_VERTICAL_ALIGN> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose vertical alignment should be\n * returned.\n */\nmxGraph.prototype.getVerticalAlign = function(state)\n{\n\treturn (state != null && state.style != null) ?\n\t\t(state.style[mxConstants.STYLE_VERTICAL_ALIGN] ||\n\t\tmxConstants.ALIGN_MIDDLE) : null;\n};\n\n/**\n * Function: getIndicatorColor\n * \n * Returns the indicator color for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_COLOR> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator color should be\n * returned.\n */\nmxGraph.prototype.getIndicatorColor = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_COLOR] : null;\n};\n\n/**\n * Function: getIndicatorGradientColor\n * \n * Returns the indicator gradient color for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_GRADIENTCOLOR> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator gradient color should be\n * returned.\n */\nmxGraph.prototype.getIndicatorGradientColor = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_GRADIENTCOLOR] : null;\n};\n\n/**\n * Function: getIndicatorShape\n * \n * Returns the indicator shape for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_SHAPE> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator shape should be returned.\n */\nmxGraph.prototype.getIndicatorShape = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_SHAPE] : null;\n};\n\n/**\n * Function: getIndicatorImage\n * \n * Returns the indicator image for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_IMAGE> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator image should be returned.\n */\nmxGraph.prototype.getIndicatorImage = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_IMAGE] : null;\n};\n\n/**\n * Function: getBorder\n * \n * Returns the value of <border>.\n */\nmxGraph.prototype.getBorder = function()\n{\n\treturn this.border;\n};\n\n/**\n * Function: setBorder\n * \n * Sets the value of <border>.\n * \n * Parameters:\n * \n * value - Positive integer that represents the border to be used.\n */\nmxGraph.prototype.setBorder = function(value)\n{\n\tthis.border = value;\n};\n\n/**\n * Function: isSwimlane\n * \n * Returns true if the given cell is a swimlane in the graph. A swimlane is\n * a container cell with some specific behaviour. This implementation\n * checks if the shape associated with the given cell is a <mxSwimlane>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be checked.\n * ignoreState - Optional boolean that specifies if the cell state should be ignored.\n */\nmxGraph.prototype.isSwimlane = function(cell, ignoreState)\n{\n\tif (cell != null && this.model.getParent(cell) != this.model.getRoot() &&\n\t\t!this.model.isEdge(cell))\n\t{\n\t\treturn this.getCurrentCellStyle(cell, ignoreState)\n\t\t\t[mxConstants.STYLE_SHAPE] == mxConstants.SHAPE_SWIMLANE;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Group: Graph behaviour\n */\n\n/**\n * Function: isResizeContainer\n * \n * Returns <resizeContainer>.\n */\nmxGraph.prototype.isResizeContainer = function()\n{\n\treturn this.resizeContainer;\n};\n\n/**\n * Function: setResizeContainer\n * \n * Sets <resizeContainer>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the container should be resized.\n */\nmxGraph.prototype.setResizeContainer = function(value)\n{\n\tthis.resizeContainer = value;\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if the graph is <enabled>.\n */\nmxGraph.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Specifies if the graph should allow any interactions. This\n * implementation updates <enabled>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should be enabled.\n */\nmxGraph.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isEscapeEnabled\n * \n * Returns <escapeEnabled>.\n */\nmxGraph.prototype.isEscapeEnabled = function()\n{\n\treturn this.escapeEnabled;\n};\n\n/**\n * Function: setEscapeEnabled\n * \n * Sets <escapeEnabled>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if escape should be enabled.\n */\nmxGraph.prototype.setEscapeEnabled = function(value)\n{\n\tthis.escapeEnabled = value;\n};\n\n/**\n * Function: isInvokesStopCellEditing\n * \n * Returns <invokesStopCellEditing>.\n */\nmxGraph.prototype.isInvokesStopCellEditing = function()\n{\n\treturn this.invokesStopCellEditing;\n};\n\n/**\n * Function: setInvokesStopCellEditing\n * \n * Sets <invokesStopCellEditing>.\n */\nmxGraph.prototype.setInvokesStopCellEditing = function(value)\n{\n\tthis.invokesStopCellEditing = value;\n};\n\n/**\n * Function: isEnterStopsCellEditing\n * \n * Returns <enterStopsCellEditing>.\n */\nmxGraph.prototype.isEnterStopsCellEditing = function()\n{\n\treturn this.enterStopsCellEditing;\n};\n\n/**\n * Function: setEnterStopsCellEditing\n * \n * Sets <enterStopsCellEditing>.\n */\nmxGraph.prototype.setEnterStopsCellEditing = function(value)\n{\n\tthis.enterStopsCellEditing = value;\n};\n\n/**\n * Function: isCellLocked\n * \n * Returns true if the given cell may not be moved, sized, bended,\n * disconnected, edited or selected. This implementation returns true for\n * all vertices with a relative geometry if <locked> is false.\n * \n * Parameters:\n * \n * cell - <mxCell> whose locked state should be returned.\n */\nmxGraph.prototype.isCellLocked = function(cell)\n{\n\tvar geometry = this.model.getGeometry(cell);\n\t\n\treturn this.isCellsLocked() || (geometry != null && this.model.isVertex(cell) && geometry.relative);\n};\n\n/**\n * Function: isCellsLocked\n * \n * Returns true if the given cell may not be moved, sized, bended,\n * disconnected, edited or selected. This implementation returns true for\n * all vertices with a relative geometry if <locked> is false.\n * \n * Parameters:\n * \n * cell - <mxCell> whose locked state should be returned.\n */\nmxGraph.prototype.isCellsLocked = function()\n{\n\treturn this.cellsLocked;\n};\n\n/**\n * Function: setCellsLocked\n * \n * Sets if any cell may be moved, sized, bended, disconnected, edited or\n * selected.\n * \n * Parameters:\n * \n * value - Boolean that defines the new value for <cellsLocked>.\n */\nmxGraph.prototype.setCellsLocked = function(value)\n{\n\tthis.cellsLocked = value;\n};\n\n/**\n * Function: getCloneableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getCloneableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellCloneable(cell);\n\t}));\n};\n\n/**\n * Function: isCellCloneable\n * \n * Returns true if the given cell is cloneable. This implementation returns\n * <isCellsCloneable> for all cells unless a cell style specifies\n * <mxConstants.STYLE_CLONEABLE> to be 0. \n * \n * Parameters:\n * \n * cell - Optional <mxCell> whose cloneable state should be returned.\n */\nmxGraph.prototype.isCellCloneable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\n\treturn this.isCellsCloneable() && style[mxConstants.STYLE_CLONEABLE] != 0;\n};\n\n/**\n * Function: isCellsCloneable\n * \n * Returns <cellsCloneable>, that is, if the graph allows cloning of cells\n * by using control-drag.\n */\nmxGraph.prototype.isCellsCloneable = function()\n{\n\treturn this.cellsCloneable;\n};\n\n/**\n * Function: setCellsCloneable\n * \n * Specifies if the graph should allow cloning of cells by holding down the\n * control key while cells are being moved. This implementation updates\n * <cellsCloneable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should be cloneable.\n */\nmxGraph.prototype.setCellsCloneable = function(value)\n{\n\tthis.cellsCloneable = value;\n};\n\n/**\n * Function: getExportableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getExportableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.canExportCell(cell);\n\t}));\n};\n\n/**\n * Function: canExportCell\n * \n * Returns true if the given cell may be exported to the clipboard. This\n * implementation returns <exportEnabled> for all cells.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to be exported.\n */\nmxGraph.prototype.canExportCell = function(cell)\n{\n\treturn this.exportEnabled;\n};\n\n/**\n * Function: getImportableCells\n * \n * Returns the cells which may be imported in the given array of cells.\n */\nmxGraph.prototype.getImportableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.canImportCell(cell);\n\t}));\n};\n\n/**\n * Function: canImportCell\n * \n * Returns true if the given cell may be imported from the clipboard.\n * This implementation returns <importEnabled> for all cells.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to be imported.\n */\nmxGraph.prototype.canImportCell = function(cell)\n{\n\treturn this.importEnabled;\n};\n\n/**\n * Function: isCellSelectable\n *\n * Returns true if the given cell is selectable. This implementation\n * returns <cellsSelectable>.\n * \n * To add a new style for making cells (un)selectable, use the following code.\n * \n * (code)\n * mxGraph.prototype.isCellSelectable = function(cell)\n * {\n *   var style = this.getCurrentCellStyle(cell);\n *   \n *   return this.isCellsSelectable() && !this.isCellLocked(cell) && style['selectable'] != 0;\n * };\n * (end)\n * \n * You can then use the new style as shown in this example.\n * \n * (code)\n * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'selectable=0');\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose selectable state should be returned.\n */\nmxGraph.prototype.isCellSelectable = function(cell)\n{\n\treturn this.isCellsSelectable();\n};\n\n/**\n * Function: isCellsSelectable\n *\n * Returns <cellsSelectable>.\n */\nmxGraph.prototype.isCellsSelectable = function()\n{\n\treturn this.cellsSelectable;\n};\n\n/**\n * Function: setCellsSelectable\n *\n * Sets <cellsSelectable>.\n */\nmxGraph.prototype.setCellsSelectable = function(value)\n{\n\tthis.cellsSelectable = value;\n};\n\n/**\n * Function: getDeletableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getDeletableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellDeletable(cell);\n\t}));\n};\n\n/**\n * Function: isCellDeletable\n *\n * Returns true if the given cell is moveable. This returns\n * <cellsDeletable> for all given cells if a cells style does not specify\n * <mxConstants.STYLE_DELETABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose deletable state should be returned.\n */\nmxGraph.prototype.isCellDeletable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsDeletable() && style[mxConstants.STYLE_DELETABLE] != 0;\n};\n\n/**\n * Function: isCellsDeletable\n *\n * Returns <cellsDeletable>.\n */\nmxGraph.prototype.isCellsDeletable = function()\n{\n\treturn this.cellsDeletable;\n};\n\n/**\n * Function: setCellsDeletable\n * \n * Sets <cellsDeletable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow deletion of cells.\n */\nmxGraph.prototype.setCellsDeletable = function(value)\n{\n\tthis.cellsDeletable = value;\n};\n\n/**\n * Function: isLabelMovable\n *\n * Returns true if the given edges's label is moveable. This returns\n * <movable> for all given cells if <isLocked> does not return true\n * for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be moved.\n */\nmxGraph.prototype.isLabelMovable = function(cell)\n{\n\treturn !this.isCellLocked(cell) &&\n\t\t((this.model.isEdge(cell) && this.edgeLabelsMovable) ||\n\t\t(this.model.isVertex(cell) && this.vertexLabelsMovable));\n};\n\n/**\n * Function: isCellRotatable\n *\n * Returns true if the given cell is rotatable. This returns true for the given\n * cell if its style does not specify <mxConstants.STYLE_ROTATABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose rotatable state should be returned.\n */\nmxGraph.prototype.isCellRotatable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn style[mxConstants.STYLE_ROTATABLE] != 0;\n};\n\n/**\n * Function: getMovableCells\n * \n * Returns the cells which are movable in the given array of cells.\n */\nmxGraph.prototype.getMovableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellMovable(cell);\n\t}));\n};\n\n/**\n * Function: isCellMovable\n *\n * Returns true if the given cell is moveable. This returns <cellsMovable>\n * for all given cells if <isCellLocked> does not return true for the given\n * cell and its style does not specify <mxConstants.STYLE_MOVABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose movable state should be returned.\n */\nmxGraph.prototype.isCellMovable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsMovable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_MOVABLE] != 0;\n};\n\n/**\n * Function: isCellsMovable\n *\n * Returns <cellsMovable>.\n */\nmxGraph.prototype.isCellsMovable = function()\n{\n\treturn this.cellsMovable;\n};\n\n/**\n * Function: setCellsMovable\n * \n * Specifies if the graph should allow moving of cells. This implementation\n * updates <cellsMsovable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow moving of cells.\n */\nmxGraph.prototype.setCellsMovable = function(value)\n{\n\tthis.cellsMovable = value;\n};\n\n/**\n * Function: isGridEnabled\n *\n * Returns <gridEnabled> as a boolean.\n */\nmxGraph.prototype.isGridEnabled = function()\n{\n\treturn this.gridEnabled;\n};\n\n/**\n * Function: setGridEnabled\n * \n * Specifies if the grid should be enabled.\n * \n * Parameters:\n * \n * value - Boolean indicating if the grid should be enabled.\n */\nmxGraph.prototype.setGridEnabled = function(value)\n{\n\tthis.gridEnabled = value;\n};\n\n/**\n * Function: isPortsEnabled\n *\n * Returns <portsEnabled> as a boolean.\n */\nmxGraph.prototype.isPortsEnabled = function()\n{\n\treturn this.portsEnabled;\n};\n\n/**\n * Function: setPortsEnabled\n * \n * Specifies if the ports should be enabled.\n * \n * Parameters:\n * \n * value - Boolean indicating if the ports should be enabled.\n */\nmxGraph.prototype.setPortsEnabled = function(value)\n{\n\tthis.portsEnabled = value;\n};\n\n/**\n * Function: getGridSize\n *\n * Returns <gridSize>.\n */\nmxGraph.prototype.getGridSize = function()\n{\n\treturn this.gridSize;\n};\n\n/**\n * Function: setGridSize\n * \n * Sets <gridSize>.\n */\nmxGraph.prototype.setGridSize = function(value)\n{\n\tthis.gridSize = value;\n};\n\n/**\n * Function: getTolerance\n *\n * Returns <tolerance>.\n */\nmxGraph.prototype.getTolerance = function()\n{\n\treturn this.tolerance;\n};\n\n/**\n * Function: setTolerance\n * \n * Sets <tolerance>.\n */\nmxGraph.prototype.setTolerance = function(value)\n{\n\tthis.tolerance = value;\n};\n\n/**\n * Function: isVertexLabelsMovable\n *\n * Returns <vertexLabelsMovable>.\n */\nmxGraph.prototype.isVertexLabelsMovable = function()\n{\n\treturn this.vertexLabelsMovable;\n};\n\n/**\n * Function: setVertexLabelsMovable\n * \n * Sets <vertexLabelsMovable>.\n */\nmxGraph.prototype.setVertexLabelsMovable = function(value)\n{\n\tthis.vertexLabelsMovable = value;\n};\n\n/**\n * Function: isEdgeLabelsMovable\n *\n * Returns <edgeLabelsMovable>.\n */\nmxGraph.prototype.isEdgeLabelsMovable = function()\n{\n\treturn this.edgeLabelsMovable;\n};\n\n/**\n * Function: isEdgeLabelsMovable\n * \n * Sets <edgeLabelsMovable>.\n */\nmxGraph.prototype.setEdgeLabelsMovable = function(value)\n{\n\tthis.edgeLabelsMovable = value;\n};\n\n/**\n * Function: isSwimlaneNesting\n *\n * Returns <swimlaneNesting> as a boolean.\n */\nmxGraph.prototype.isSwimlaneNesting = function()\n{\n\treturn this.swimlaneNesting;\n};\n\n/**\n * Function: setSwimlaneNesting\n * \n * Specifies if swimlanes can be nested by drag and drop. This is only\n * taken into account if dropEnabled is true.\n * \n * Parameters:\n * \n * value - Boolean indicating if swimlanes can be nested.\n */\nmxGraph.prototype.setSwimlaneNesting = function(value)\n{\n\tthis.swimlaneNesting = value;\n};\n\n/**\n * Function: isSwimlaneSelectionEnabled\n *\n * Returns <swimlaneSelectionEnabled> as a boolean.\n */\nmxGraph.prototype.isSwimlaneSelectionEnabled = function()\n{\n\treturn this.swimlaneSelectionEnabled;\n};\n\n/**\n * Function: setSwimlaneSelectionEnabled\n * \n * Specifies if swimlanes should be selected if the mouse is released\n * over their content area.\n * \n * Parameters:\n * \n * value - Boolean indicating if swimlanes content areas\n * should be selected when the mouse is released over them.\n */\nmxGraph.prototype.setSwimlaneSelectionEnabled = function(value)\n{\n\tthis.swimlaneSelectionEnabled = value;\n};\n\n/**\n * Function: isMultigraph\n *\n * Returns <multigraph> as a boolean.\n */\nmxGraph.prototype.isMultigraph = function()\n{\n\treturn this.multigraph;\n};\n\n/**\n * Function: setMultigraph\n * \n * Specifies if the graph should allow multiple connections between the\n * same pair of vertices.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph allows multiple connections\n * between the same pair of vertices.\n */\nmxGraph.prototype.setMultigraph = function(value)\n{\n\tthis.multigraph = value;\n};\n\n/**\n * Function: isAllowLoops\n *\n * Returns <allowLoops> as a boolean.\n */\nmxGraph.prototype.isAllowLoops = function()\n{\n\treturn this.allowLoops;\n};\n\n/**\n * Function: setAllowDanglingEdges\n * \n * Specifies if dangling edges are allowed, that is, if edges are allowed\n * that do not have a source and/or target terminal defined.\n * \n * Parameters:\n * \n * value - Boolean indicating if dangling edges are allowed.\n */\nmxGraph.prototype.setAllowDanglingEdges = function(value)\n{\n\tthis.allowDanglingEdges = value;\n};\n\n/**\n * Function: isAllowDanglingEdges\n *\n * Returns <allowDanglingEdges> as a boolean.\n */\nmxGraph.prototype.isAllowDanglingEdges = function()\n{\n\treturn this.allowDanglingEdges;\n};\n\n/**\n * Function: setConnectableEdges\n * \n * Specifies if edges should be connectable.\n * \n * Parameters:\n * \n * value - Boolean indicating if edges should be connectable.\n */\nmxGraph.prototype.setConnectableEdges = function(value)\n{\n\tthis.connectableEdges = value;\n};\n\n/**\n * Function: isConnectableEdges\n *\n * Returns <connectableEdges> as a boolean.\n */\nmxGraph.prototype.isConnectableEdges = function()\n{\n\treturn this.connectableEdges;\n};\n\n/**\n * Function: setCloneInvalidEdges\n * \n * Specifies if edges should be inserted when cloned but not valid wrt.\n * <getEdgeValidationError>. If false such edges will be silently ignored.\n * \n * Parameters:\n * \n * value - Boolean indicating if cloned invalid edges should be\n * inserted into the graph or ignored.\n */\nmxGraph.prototype.setCloneInvalidEdges = function(value)\n{\n\tthis.cloneInvalidEdges = value;\n};\n\n/**\n * Function: isCloneInvalidEdges\n *\n * Returns <cloneInvalidEdges> as a boolean.\n */\nmxGraph.prototype.isCloneInvalidEdges = function()\n{\n\treturn this.cloneInvalidEdges;\n};\n\n/**\n * Function: setAllowLoops\n * \n * Specifies if loops are allowed.\n * \n * Parameters:\n * \n * value - Boolean indicating if loops are allowed.\n */\nmxGraph.prototype.setAllowLoops = function(value)\n{\n\tthis.allowLoops = value;\n};\n\n/**\n * Function: isDisconnectOnMove\n *\n * Returns <disconnectOnMove> as a boolean.\n */\nmxGraph.prototype.isDisconnectOnMove = function()\n{\n\treturn this.disconnectOnMove;\n};\n\n/**\n * Function: setDisconnectOnMove\n * \n * Specifies if edges should be disconnected when moved. (Note: Cloned\n * edges are always disconnected.)\n * \n * Parameters:\n * \n * value - Boolean indicating if edges should be disconnected\n * when moved.\n */\nmxGraph.prototype.setDisconnectOnMove = function(value)\n{\n\tthis.disconnectOnMove = value;\n};\n\n/**\n * Function: isDropEnabled\n *\n * Returns <dropEnabled> as a boolean.\n */\nmxGraph.prototype.isDropEnabled = function()\n{\n\treturn this.dropEnabled;\n};\n\n/**\n * Function: setDropEnabled\n * \n * Specifies if the graph should allow dropping of cells onto or into other\n * cells.\n * \n * Parameters:\n * \n * dropEnabled - Boolean indicating if the graph should allow dropping\n * of cells into other cells.\n */\nmxGraph.prototype.setDropEnabled = function(value)\n{\n\tthis.dropEnabled = value;\n};\n\n/**\n * Function: isSplitEnabled\n *\n * Returns <splitEnabled> as a boolean.\n */\nmxGraph.prototype.isSplitEnabled = function()\n{\n\treturn this.splitEnabled;\n};\n\n/**\n * Function: setSplitEnabled\n * \n * Specifies if the graph should allow dropping of cells onto or into other\n * cells.\n * \n * Parameters:\n * \n * dropEnabled - Boolean indicating if the graph should allow dropping\n * of cells into other cells.\n */\nmxGraph.prototype.setSplitEnabled = function(value)\n{\n\tthis.splitEnabled = value;\n};\n\n/**\n * Function: isCellResizable\n *\n * Returns true if the given cell is resizable. This returns\n * <cellsResizable> for all given cells if <isCellLocked> does not return\n * true for the given cell and its style does not specify\n * <mxConstants.STYLE_RESIZABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose resizable state should be returned.\n */\nmxGraph.prototype.isCellResizable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\n\treturn this.isCellsResizable() && !this.isCellLocked(cell) &&\n\t\tmxUtils.getValue(style, mxConstants.STYLE_RESIZABLE, '1') != '0';\n};\n\n/**\n * Function: isCellsResizable\n *\n * Returns <cellsResizable>.\n */\nmxGraph.prototype.isCellsResizable = function()\n{\n\treturn this.cellsResizable;\n};\n\n/**\n * Function: setCellsResizable\n * \n * Specifies if the graph should allow resizing of cells. This\n * implementation updates <cellsResizable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow resizing of\n * cells.\n */\nmxGraph.prototype.setCellsResizable = function(value)\n{\n\tthis.cellsResizable = value;\n};\n\n/**\n * Function: isTerminalPointMovable\n *\n * Returns true if the given terminal point is movable. This is independent\n * from <isCellConnectable> and <isCellDisconnectable> and controls if terminal\n * points can be moved in the graph if the edge is not connected. Note that it\n * is required for this to return true to connect unconnected edges. This\n * implementation returns true.\n * \n * Parameters:\n * \n * cell - <mxCell> whose terminal point should be moved.\n * source - Boolean indicating if the source or target terminal should be moved.\n */\nmxGraph.prototype.isTerminalPointMovable = function(cell, source)\n{\n\treturn true;\n};\n\n/**\n * Function: isCellBendable\n *\n * Returns true if the given cell is bendable. This returns <cellsBendable>\n * for all given cells if <isLocked> does not return true for the given\n * cell and its style does not specify <mxConstants.STYLE_BENDABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bendable state should be returned.\n */\nmxGraph.prototype.isCellBendable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsBendable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_BENDABLE] != 0;\n};\n\n/**\n * Function: isCellsBendable\n *\n * Returns <cellsBenadable>.\n */\nmxGraph.prototype.isCellsBendable = function()\n{\n\treturn this.cellsBendable;\n};\n\n/**\n * Function: setCellsBendable\n * \n * Specifies if the graph should allow bending of edges. This\n * implementation updates <bendable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow bending of\n * edges.\n */\nmxGraph.prototype.setCellsBendable = function(value)\n{\n\tthis.cellsBendable = value;\n};\n\n/**\n * Function: isCellEditable\n *\n * Returns true if the given cell is editable. This returns <cellsEditable> for\n * all given cells if <isCellLocked> does not return true for the given cell\n * and its style does not specify <mxConstants.STYLE_EDITABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose editable state should be returned.\n */\nmxGraph.prototype.isCellEditable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsEditable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_EDITABLE] != 0;\n};\n\n/**\n * Function: isCellsEditable\n *\n * Returns <cellsEditable>.\n */\nmxGraph.prototype.isCellsEditable = function()\n{\n\treturn this.cellsEditable;\n};\n\n/**\n * Function: setCellsEditable\n * \n * Specifies if the graph should allow in-place editing for cell labels.\n * This implementation updates <cellsEditable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow in-place\n * editing.\n */\nmxGraph.prototype.setCellsEditable = function(value)\n{\n\tthis.cellsEditable = value;\n};\n\n/**\n * Function: isCellDisconnectable\n *\n * Returns true if the given cell is disconnectable from the source or\n * target terminal. This returns <isCellsDisconnectable> for all given\n * cells if <isCellLocked> does not return true for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose disconnectable state should be returned.\n * terminal - <mxCell> that represents the source or target terminal.\n * source - Boolean indicating if the source or target terminal is to be\n * disconnected.\n */\nmxGraph.prototype.isCellDisconnectable = function(cell, terminal, source)\n{\n\treturn this.isCellsDisconnectable() && !this.isCellLocked(cell);\n};\n\n/**\n * Function: isCellsDisconnectable\n *\n * Returns <cellsDisconnectable>.\n */\nmxGraph.prototype.isCellsDisconnectable = function()\n{\n\treturn this.cellsDisconnectable;\n};\n\n/**\n * Function: setCellsDisconnectable\n *\n * Sets <cellsDisconnectable>.\n */\nmxGraph.prototype.setCellsDisconnectable = function(value)\n{\n\tthis.cellsDisconnectable = value;\n};\n\n/**\n * Function: isValidSource\n * \n * Returns true if the given cell is a valid source for new connections.\n * This implementation returns true for all non-null values and is\n * called by is called by <isValidConnection>.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents a possible source or null.\n */\nmxGraph.prototype.isValidSource = function(cell)\n{\n\treturn (cell == null && this.allowDanglingEdges) ||\n\t\t(cell != null && (!this.model.isEdge(cell) ||\n\t\tthis.connectableEdges) && this.isCellConnectable(cell));\n};\n\t\n/**\n * Function: isValidTarget\n * \n * Returns <isValidSource> for the given cell. This is called by\n * <isValidConnection>.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents a possible target or null.\n */\nmxGraph.prototype.isValidTarget = function(cell)\n{\n\treturn this.isValidSource(cell);\n};\n\n/**\n * Function: isValidConnection\n * \n * Returns true if the given target cell is a valid target for source.\n * This is a boolean implementation for not allowing connections between\n * certain pairs of vertices and is called by <getEdgeValidationError>.\n * This implementation returns true if <isValidSource> returns true for\n * the source and <isValidTarget> returns true for the target.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source cell.\n * target - <mxCell> that represents the target cell.\n */\nmxGraph.prototype.isValidConnection = function(source, target)\n{\n\treturn this.isValidSource(source) && this.isValidTarget(target);\n};\n\n/**\n * Function: setConnectable\n * \n * Specifies if the graph should allow new connections. This implementation\n * updates <mxConnectionHandler.enabled> in <connectionHandler>.\n * \n * Parameters:\n * \n * connectable - Boolean indicating if new connections should be allowed.\n */\nmxGraph.prototype.setConnectable = function(connectable)\n{\n\tthis.connectionHandler.setEnabled(connectable);\n};\n\t\n/**\n * Function: isConnectable\n * \n * Returns true if the <connectionHandler> is enabled.\n */\nmxGraph.prototype.isConnectable = function()\n{\n\treturn this.connectionHandler.isEnabled();\n};\n\n/**\n * Function: setTooltips\n * \n * Specifies if tooltips should be enabled. This implementation updates\n * <mxTooltipHandler.enabled> in <tooltipHandler>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if tooltips should be enabled.\n */\nmxGraph.prototype.setTooltips = function (enabled)\n{\n\tthis.tooltipHandler.setEnabled(enabled);\n};\n\n/**\n * Function: setPanning\n * \n * Specifies if panning should be enabled. This implementation updates\n * <mxPanningHandler.panningEnabled> in <panningHandler>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if panning should be enabled.\n */\nmxGraph.prototype.setPanning = function(enabled)\n{\n\tthis.panningHandler.panningEnabled = enabled;\n};\n\n/**\n * Function: isEditing\n * \n * Returns true if the given cell is currently being edited.\n * If no cell is specified then this returns true if any\n * cell is currently being edited.\n *\n * Parameters:\n * \n * cell - <mxCell> that should be checked.\n */\nmxGraph.prototype.isEditing = function(cell)\n{\n\tif (this.cellEditor != null)\n\t{\n\t\tvar editingCell = this.cellEditor.getEditingCell();\n\t\t\n\t\treturn (cell == null) ? editingCell != null : cell == editingCell;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: isAutoSizeCell\n * \n * Returns true if the size of the given cell should automatically be\n * updated after a change of the label. This implementation returns\n * <autoSizeCells> or checks if the cell style does specify\n * <mxConstants.STYLE_AUTOSIZE> to be 1.\n * \n * Parameters:\n * \n * cell - <mxCell> that should be resized.\n */\nmxGraph.prototype.isAutoSizeCell = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isAutoSizeCells() || style[mxConstants.STYLE_AUTOSIZE] == 1;\n};\n\n/**\n * Function: isAutoSizeCells\n * \n * Returns <autoSizeCells>.\n */\nmxGraph.prototype.isAutoSizeCells = function()\n{\n\treturn this.autoSizeCells;\n};\n\n/**\n * Function: setAutoSizeCells\n * \n * Specifies if cell sizes should be automatically updated after a label\n * change. This implementation sets <autoSizeCells> to the given parameter.\n * To update the size of cells when the cells are added, set\n * <autoSizeCellsOnAdd> to true.\n * \n * Parameters:\n * \n * value - Boolean indicating if cells should be resized\n * automatically.\n */\nmxGraph.prototype.setAutoSizeCells = function(value)\n{\n\tthis.autoSizeCells = value;\n};\n\n/**\n * Function: isExtendParent\n * \n * Returns true if the parent of the given cell should be extended if the\n * child has been resized so that it overlaps the parent. This\n * implementation returns <isExtendParents> if the cell is not an edge.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.isExtendParent = function(cell)\n{\n\treturn !this.getModel().isEdge(cell) && this.isExtendParents();\n};\n\n/**\n * Function: isExtendParents\n * \n * Returns <extendParents>.\n */\nmxGraph.prototype.isExtendParents = function()\n{\n\treturn this.extendParents;\n};\n\n/**\n * Function: setExtendParents\n * \n * Sets <extendParents>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParents>.\n */\nmxGraph.prototype.setExtendParents = function(value)\n{\n\tthis.extendParents = value;\n};\n\n/**\n * Function: isExtendParentsOnAdd\n * \n * Returns <extendParentsOnAdd>.\n */\nmxGraph.prototype.isExtendParentsOnAdd = function(cell)\n{\n\treturn this.extendParentsOnAdd;\n};\n\n/**\n * Function: setExtendParentsOnAdd\n * \n * Sets <extendParentsOnAdd>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParentsOnAdd>.\n */\nmxGraph.prototype.setExtendParentsOnAdd = function(value)\n{\n\tthis.extendParentsOnAdd = value;\n};\n\n/**\n * Function: isExtendParentsOnMove\n * \n * Returns <extendParentsOnMove>.\n */\nmxGraph.prototype.isExtendParentsOnMove = function()\n{\n\treturn this.extendParentsOnMove;\n};\n\n/**\n * Function: setExtendParentsOnMove\n * \n * Sets <extendParentsOnMove>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParentsOnAdd>.\n */\nmxGraph.prototype.setExtendParentsOnMove = function(value)\n{\n\tthis.extendParentsOnMove = value;\n};\n\n/**\n * Function: isRecursiveResize\n * \n * Returns <recursiveResize>.\n * \n * Parameters:\n * \n * state - <mxCellState> that is being resized.\n */\nmxGraph.prototype.isRecursiveResize = function(state)\n{\n\treturn this.recursiveResize;\n};\n\n/**\n * Function: setRecursiveResize\n * \n * Sets <recursiveResize>.\n * \n * Parameters:\n * \n * value - New boolean value for <recursiveResize>.\n */\nmxGraph.prototype.setRecursiveResize = function(value)\n{\n\tthis.recursiveResize = value;\n};\n\n/**\n * Function: isConstrainChild\n * \n * Returns true if the given cell should be kept inside the bounds of its\n * parent according to the rules defined by <getOverlap> and\n * <isAllowOverlapParent>. This implementation returns false for all children\n * of edges and <isConstrainChildren> otherwise.\n * \n * Parameters:\n * \n * cell - <mxCell> that should be constrained.\n */\nmxGraph.prototype.isConstrainChild = function(cell)\n{\n\treturn this.isConstrainChildren() && !this.getModel().isEdge(this.getModel().getParent(cell));\n};\n\n/**\n * Function: isConstrainChildren\n * \n * Returns <constrainChildren>.\n */\nmxGraph.prototype.isConstrainChildren = function()\n{\n\treturn this.constrainChildren;\n};\n\n/**\n * Function: setConstrainChildren\n * \n * Sets <constrainChildren>.\n */\nmxGraph.prototype.setConstrainChildren = function(value)\n{\n\tthis.constrainChildren = value;\n};\n\n/**\n * Function: isConstrainRelativeChildren\n * \n * Returns <constrainRelativeChildren>.\n */\nmxGraph.prototype.isConstrainRelativeChildren = function()\n{\n\treturn this.constrainRelativeChildren;\n};\n\n/**\n * Function: setConstrainRelativeChildren\n * \n * Sets <constrainRelativeChildren>.\n */\nmxGraph.prototype.setConstrainRelativeChildren = function(value)\n{\n\tthis.constrainRelativeChildren = value;\n};\n\n/**\n * Function: isConstrainChildren\n * \n * Returns <allowNegativeCoordinates>.\n */\nmxGraph.prototype.isAllowNegativeCoordinates = function()\n{\n\treturn this.allowNegativeCoordinates;\n};\n\n/**\n * Function: setConstrainChildren\n * \n * Sets <allowNegativeCoordinates>.\n */\nmxGraph.prototype.setAllowNegativeCoordinates = function(value)\n{\n\tthis.allowNegativeCoordinates = value;\n};\n\n/**\n * Function: getOverlap\n * \n * Returns a decimal number representing the amount of the width and height\n * of the given cell that is allowed to overlap its parent. A value of 0\n * means all children must stay inside the parent, 1 means the child is\n * allowed to be placed outside of the parent such that it touches one of\n * the parents sides. If <isAllowOverlapParent> returns false for the given\n * cell, then this method returns 0.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the overlap ratio should be returned.\n */\nmxGraph.prototype.getOverlap = function(cell)\n{\n\treturn (this.isAllowOverlapParent(cell)) ? this.defaultOverlap : 0;\n};\n\t\n/**\n * Function: isAllowOverlapParent\n * \n * Returns true if the given cell is allowed to be placed outside of the\n * parents area.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the child to be checked.\n */\nmxGraph.prototype.isAllowOverlapParent = function(cell)\n{\n\treturn false;\n};\n\n/**\n * Function: getFoldableCells\n * \n * Returns the cells which are movable in the given array of cells.\n */\nmxGraph.prototype.getFoldableCells = function(cells, collapse)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellFoldable(cell, collapse);\n\t}));\n};\n\n/**\n * Function: isCellFoldable\n * \n * Returns true if the given cell is foldable. This implementation\n * returns true if the cell has at least one child and its style\n * does not specify <mxConstants.STYLE_FOLDABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose foldable state should be returned.\n */\nmxGraph.prototype.isCellFoldable = function(cell, collapse)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.model.getChildCount(cell) > 0 && style[mxConstants.STYLE_FOLDABLE] != 0;\n};\n\n/**\n * Function: isValidDropTarget\n *\n * Returns true if the given cell is a valid drop target for the specified\n * cells. If <splitEnabled> is true then this returns <isSplitTarget> for\n * the given arguments else it returns true if the cell is not collapsed\n * and its child count is greater than 0.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the possible drop target.\n * cells - <mxCells> that should be dropped into the target.\n * evt - Mouseevent that triggered the invocation.\n */\nmxGraph.prototype.isValidDropTarget = function(cell, cells, evt)\n{\n\treturn cell != null && ((this.isSplitEnabled() &&\n\t\tthis.isSplitTarget(cell, cells, evt)) || (!this.model.isEdge(cell) &&\n\t\t(this.isSwimlane(cell) || (this.model.getChildCount(cell) > 0 &&\n\t\t!this.isCellCollapsed(cell)))));\n};\n\n/**\n * Function: isSplitTarget\n *\n * Returns true if the given edge may be splitted into two edges with the\n * given cell as a new terminal between the two.\n * \n * Parameters:\n * \n * target - <mxCell> that represents the edge to be splitted.\n * cells - <mxCells> that should split the edge.\n * evt - Mouseevent that triggered the invocation.\n */\nmxGraph.prototype.isSplitTarget = function(target, cells, evt)\n{\n\tif (this.model.isEdge(target) && cells != null && cells.length == 1 &&\n\t\tthis.isCellConnectable(cells[0]) && this.getEdgeValidationError(target,\n\t\t\tthis.model.getTerminal(target, true), cells[0]) == null)\n\t{\n\t\tvar src = this.model.getTerminal(target, true);\n\t\tvar trg = this.model.getTerminal(target, false);\n\n\t\treturn (!this.model.isAncestor(cells[0], src) &&\n\t\t\t\t!this.model.isAncestor(cells[0], trg));\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getDropTarget\n * \n * Returns the given cell if it is a drop target for the given cells or the\n * nearest ancestor that may be used as a drop target for the given cells.\n * If the given array contains a swimlane and <swimlaneNesting> is false\n * then this always returns null. If no cell is given, then the bottommost\n * swimlane at the location of the given event is returned.\n * \n * This function should only be used if <isDropEnabled> returns true.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> which are to be dropped onto the target.\n * evt - Mouseevent for the drag and drop.\n * cell - <mxCell> that is under the mousepointer.\n * clone - Optional boolean to indicate of cells will be cloned.\n */\nmxGraph.prototype.getDropTarget = function(cells, evt, cell, clone)\n{\n\tif (!this.isSwimlaneNesting())\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSwimlane(cells[i]))\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar pt = mxUtils.convertPoint(this.container,\n\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\tpt.x -= this.panDx;\n\tpt.y -= this.panDy;\n\tvar swimlane = this.getSwimlaneAt(pt.x, pt.y);\n\t\n\tif (cell == null)\n\t{\n\t\tcell = swimlane;\n\t}\n\telse if (swimlane != null)\n\t{\n\t\t// Checks if the cell is an ancestor of the swimlane\n\t\t// under the mouse and uses the swimlane in that case\n\t\tvar tmp = this.model.getParent(swimlane);\n\t\t\n\t\twhile (tmp != null && this.isSwimlane(tmp) && tmp != cell)\n\t\t{\n\t\t\ttmp = this.model.getParent(tmp);\n\t\t}\n\t\t\n\t\tif (tmp == cell)\n\t\t{\n\t\t\tcell = swimlane;\n\t\t}\n\t}\n\t\n\twhile (cell != null && !this.isValidDropTarget(cell, cells, evt) &&\n\t\t!this.model.isLayer(cell))\n\t{\n\t\tcell = this.model.getParent(cell);\n\t}\n\t\n\t// Checks if parent is dropped into child if not cloning\n\tif (clone == null || !clone)\n\t{\n\t\tvar parent = cell;\n\t\t\n\t\twhile (parent != null && mxUtils.indexOf(cells, parent) < 0)\n\t\t{\n\t\t\tparent = this.model.getParent(parent);\n\t\t}\n\t}\n\n\treturn (!this.model.isLayer(cell) && parent == null) ? cell : null;\n};\n\n/**\n * Group: Cell retrieval\n */\n\n/**\n * Function: getDefaultParent\n * \n * Returns <defaultParent> or <mxGraphView.currentRoot> or the first child\n * child of <mxGraphModel.root> if both are null. The value returned by\n * this function should be used as the parent for new cells (aka default\n * layer).\n */\nmxGraph.prototype.getDefaultParent = function()\n{\n\tvar parent = this.getCurrentRoot();\n\t\n\tif (parent == null)\n\t{\n\t\tparent = this.defaultParent;\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tvar root = this.model.getRoot();\n\t\t\tparent = this.model.getChildAt(root, 0);\n\t\t}\n\t}\n\t\n\treturn parent;\n};\n\n/**\n * Function: setDefaultParent\n * \n * Sets the <defaultParent> to the given cell. Set this to null to return\n * the first child of the root in getDefaultParent.\n */\nmxGraph.prototype.setDefaultParent = function(cell)\n{\n\tthis.defaultParent = cell;\n};\n\n/**\n * Function: getSwimlane\n * \n * Returns the nearest ancestor of the given cell which is a swimlane, or\n * the given cell, if it is itself a swimlane.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the ancestor swimlane should be returned.\n */\nmxGraph.prototype.getSwimlane = function(cell)\n{\n\twhile (cell != null && !this.isSwimlane(cell))\n\t{\n\t\tcell = this.model.getParent(cell);\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: getSwimlaneAt\n * \n * Returns the bottom-most swimlane that intersects the given point (x, y)\n * in the cell hierarchy that starts at the given parent.\n * \n * Parameters:\n * \n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is <defaultParent>.\n */\nmxGraph.prototype.getSwimlaneAt = function (x, y, parent)\n{\n\tif (parent == null)\n\t{\n\t\tparent = this.getCurrentRoot();\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.model.getRoot();\n\t\t}\n\t}\n\t\n\tif (parent != null)\n\t{\n\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = this.model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (child != null)\n\t\t\t{\n\t\t\t\tvar result = this.getSwimlaneAt(x, y, child);\n\t\t\t\t\n\t\t\t\tif (result != null)\n\t\t\t\t{\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\telse if (this.isCellVisible(child) && this.isSwimlane(child))\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(child);\n\t\t\t\t\t\n\t\t\t\t\tif (this.intersects(state, x, y))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getCellAt\n * \n * Returns the bottom-most cell that intersects the given point (x, y) in\n * the cell hierarchy starting at the given parent. This will also return\n * swimlanes if the given location intersects the content area of the\n * swimlane. If this is not desired, then the <hitsSwimlaneContent> may be\n * used if the returned cell is a swimlane to determine if the location\n * is inside the content area or on the actual title of the swimlane.\n * \n * Parameters:\n * \n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is current root of the view or the root of the model.\n * vertices - Optional boolean indicating if vertices should be returned.\n * Default is true.\n * edges - Optional boolean indicating if edges should be returned. Default\n * is true.\n * ignoreFn - Optional function that returns true if cell should be ignored.\n * The function is passed the cell state and the x and y parameter.\n */\nmxGraph.prototype.getCellAt = function(x, y, parent, vertices, edges, ignoreFn)\n{\n\tvertices = (vertices != null) ? vertices : true;\n\tedges = (edges != null) ? edges : true;\n\n\tif (parent == null)\n\t{\n\t\tparent = this.getCurrentRoot();\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getModel().getRoot();\n\t\t}\n\t}\n\n\tif (parent != null)\n\t{\n\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\n\t\tfor (var i = childCount - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar cell = this.model.getChildAt(parent, i);\n\t\t\tvar result = this.getCellAt(x, y, cell, vertices, edges, ignoreFn);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse if (this.isCellVisible(cell) && (edges && this.model.isEdge(cell) ||\n\t\t\t\tvertices && this.model.isVertex(cell)))\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(cell);\n\n\t\t\t\tif (state != null && (ignoreFn == null || !ignoreFn(state, x, y)) &&\n\t\t\t\t\tthis.intersects(state, x, y))\n\t\t\t\t{\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: intersects\n * \n * Returns the bottom-most cell that intersects the given point (x, y) in\n * the cell hierarchy that starts at the given parent.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the cell state.\n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n */\nmxGraph.prototype.intersects = function(state, x, y)\n{\n\tif (state != null)\n\t{\n\t\tvar pts = state.absolutePoints;\n\n\t\tif (pts != null)\n\t\t{\n\t\t\tvar t2 = this.tolerance * this.tolerance;\n\t\t\tvar pt = pts[0];\n\t\t\t\n\t\t\tfor (var i = 1; i < pts.length; i++)\n\t\t\t{\n\t\t\t\tvar next = pts[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(pt.x, pt.y, next.x, next.y, x, y);\n\t\t\t\t\n\t\t\t\tif (dist <= t2)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpt = next;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(x, y), cos, sin, cx);\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (mxUtils.contains(state, x, y))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: hitsSwimlaneContent\n * \n * Returns true if the given coordinate pair is inside the content\n * are of the given swimlane.\n * \n * Parameters:\n * \n * swimlane - <mxCell> that specifies the swimlane.\n * x - X-coordinate of the mouse event.\n * y - Y-coordinate of the mouse event.\n */\nmxGraph.prototype.hitsSwimlaneContent = function(swimlane, x, y)\n{\n\tvar state = this.getView().getState(swimlane);\n\tvar size = this.getStartSize(swimlane);\n\t\n\tif (state != null)\n\t{\n\t\tvar scale = this.getView().getScale();\n\t\tx -= state.x;\n\t\ty -= state.y;\n\t\t\n\t\tif (size.width > 0 && x > 0 && x > size.width * scale)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (size.height > 0 && y > 0 && y > size.height * scale)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getChildVertices\n * \n * Returns the visible child vertices of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be returned.\n */\nmxGraph.prototype.getChildVertices = function(parent)\n{\n\treturn this.getChildCells(parent, true, false);\n};\n\t\n/**\n * Function: getChildEdges\n * \n * Returns the visible child edges of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose child vertices should be returned.\n */\nmxGraph.prototype.getChildEdges = function(parent)\n{\n\treturn this.getChildCells(parent, false, true);\n};\n\n/**\n * Function: getChildCells\n * \n * Returns the visible child vertices or edges in the given parent. If\n * vertices and edges is false, then all children are returned.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be returned.\n * vertices - Optional boolean that specifies if child vertices should\n * be returned. Default is false.\n * edges - Optional boolean that specifies if child edges should\n * be returned. Default is false.\n */\nmxGraph.prototype.getChildCells = function(parent, vertices, edges)\n{\n\tparent = (parent != null) ? parent : this.getDefaultParent();\n\tvertices = (vertices != null) ? vertices : false;\n\tedges = (edges != null) ? edges : false;\n\n\tvar cells = this.model.getChildCells(parent, vertices, edges);\n\tvar result = [];\n\n\t// Filters out the non-visible child cells\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (this.isCellVisible(cells[i]))\n\t\t{\n\t\t\tresult.push(cells[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\t\n/**\n * Function: getConnections\n * \n * Returns all visible edges connected to the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose connections should be returned.\n * parent - Optional parent of the opposite end for a connection to be\n * returned.\n */\nmxGraph.prototype.getConnections = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, true, true, false);\n};\n\t\n/**\n * Function: getIncomingEdges\n * \n * Returns the visible incoming edges for the given cell. If the optional\n * parent argument is specified, then only child edges of the given parent\n * are returned.\n * \n * Parameters:\n * \n * cell - <mxCell> whose incoming edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n */\nmxGraph.prototype.getIncomingEdges = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, true, false, false);\n};\n\t\n/**\n * Function: getOutgoingEdges\n * \n * Returns the visible outgoing edges for the given cell. If the optional\n * parent argument is specified, then only child edges of the given parent\n * are returned.\n * \n * Parameters:\n * \n * cell - <mxCell> whose outgoing edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n */\nmxGraph.prototype.getOutgoingEdges = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, false, true, false);\n};\n\t\n/**\n * Function: getEdges\n * \n * Returns the incoming and/or outgoing edges for the given cell.\n * If the optional parent argument is specified, then only edges are returned\n * where the opposite is in the given parent cell. If at least one of incoming\n * or outgoing is true, then loops are ignored, if both are false, then all\n * edges connected to the given cell are returned including loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n * incoming - Optional boolean that specifies if incoming edges should\n * be included in the result. Default is true.\n * outgoing - Optional boolean that specifies if outgoing edges should\n * be included in the result. Default is true.\n * includeLoops - Optional boolean that specifies if loops should be\n * included in the result. Default is true.\n * recurse - Optional boolean the specifies if the parent specified only \n * need be an ancestral parent, true, or the direct parent, false.\n * Default is false\n */\nmxGraph.prototype.getEdges = function(cell, parent, incoming, outgoing, includeLoops, recurse)\n{\n\tincoming = (incoming != null) ? incoming : true;\n\toutgoing = (outgoing != null) ? outgoing : true;\n\tincludeLoops = (includeLoops != null) ? includeLoops : true;\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tvar edges = [];\n\tvar isCollapsed = this.isCellCollapsed(cell);\n\tvar childCount = this.model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.model.getChildAt(cell, i);\n\n\t\tif (isCollapsed || !this.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(this.model.getEdges(child, incoming, outgoing));\n\t\t}\n\t}\n\n\tedges = edges.concat(this.model.getEdges(cell, incoming, outgoing));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar state = this.view.getState(edges[i]);\n\t\t\n\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\tif ((includeLoops && source == target) || ((source != target) && ((incoming &&\n\t\t\ttarget == cell && (parent == null || this.isValidAncestor(source, parent, recurse))) ||\n\t\t\t(outgoing && source == cell && (parent == null ||\n\t\t\t\t\tthis.isValidAncestor(target, parent, recurse))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isValidAncestor\n * \n * Returns whether or not the specified parent is a valid\n * ancestor of the specified cell, either direct or indirectly\n * based on whether ancestor recursion is enabled.\n * \n * Parameters:\n * \n * cell - <mxCell> the possible child cell\n * parent - <mxCell> the possible parent cell\n * recurse - boolean whether or not to recurse the child ancestors\n */\nmxGraph.prototype.isValidAncestor = function(cell, parent, recurse)\n{\n\treturn (recurse ? this.model.isAncestor(parent, cell) : this.model\n\t\t\t.getParent(cell) == parent);\n};\n\n/**\n * Function: getOpposites\n * \n * Returns all distinct visible opposite cells for the specified terminal\n * on the given edges.\n * \n * Parameters:\n * \n * edges - Array of <mxCells> that contains the edges whose opposite\n * terminals should be returned.\n * terminal - Terminal that specifies the end whose opposite should be\n * returned.\n * sources - Optional boolean that specifies if source terminals should be\n * included in the result. Default is true.\n * targets - Optional boolean that specifies if targer terminals should be\n * included in the result. Default is true.\n */\nmxGraph.prototype.getOpposites = function(edges, terminal, sources, targets)\n{\n\tsources = (sources != null) ? sources : true;\n\ttargets = (targets != null) ? targets : true;\n\t\n\tvar terminals = [];\n\t\n\t// Fast lookup to avoid duplicates in terminals array\n\tvar dict = new mxDictionary();\n\t\n\tif (edges != null)\n\t{\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar state = this.view.getState(edges[i]);\n\t\t\t\n\t\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\t\t\t\n\t\t\t// Checks if the terminal is the source of the edge and if the\n\t\t\t// target should be stored in the result\n\t\t\tif (source == terminal && target != null && target != terminal && targets)\n\t\t\t{\n\t\t\t\tif (!dict.get(target))\n\t\t\t\t{\n\t\t\t\t\tdict.put(target, true);\n\t\t\t\t\tterminals.push(target);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Checks if the terminal is the taget of the edge and if the\n\t\t\t// source should be stored in the result\n\t\t\telse if (target == terminal && source != null && source != terminal && sources)\n\t\t\t{\n\t\t\t\tif (!dict.get(source))\n\t\t\t\t{\n\t\t\t\t\tdict.put(source, true);\n\t\t\t\t\tterminals.push(source);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn terminals;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and returns the connected edges\n * as displayed on the screen.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxGraph.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar state = this.view.getState(edges[i]);\n\t\t\n\t\tvar src = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\tvar trg = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getPointForEvent\n * \n * Returns an <mxPoint> representing the given event in the unscaled,\n * non-translated coordinate space of <container> and applies the grid.\n * \n * Parameters:\n * \n * evt - Mousevent that contains the mouse pointer location.\n * addOffset - Optional boolean that specifies if the position should be\n * offset by half of the <gridSize>. Default is true.\n */\n mxGraph.prototype.getPointForEvent = function(evt, addOffset)\n {\n\tvar p = mxUtils.convertPoint(this.container,\n\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\n\tvar s = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar off = (addOffset != false) ? this.gridSize / 2 : 0;\n\t\n\tp.x = this.snap(p.x / s - tr.x - off);\n\tp.y = this.snap(p.y / s - tr.y - off);\n\t\n\treturn p;\n};\n\n/**\n * Function: getCells\n * \n * Returns the child vertices and edges of the given parent that are contained\n * in the given rectangle. The result is added to the optional result array,\n * which is returned. If no result array is specified then a new array is\n * created and returned.\n * \n * Parameters:\n * \n * x - X-coordinate of the rectangle.\n * y - Y-coordinate of the rectangle.\n * width - Width of the rectangle.\n * height - Height of the rectangle.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is current root of the view or the root of the model.\n * result - Optional array to store the result in.\n * intersection - Optional <mxRectangle> to check vertices for intersection.\n * ignoreFn - Optional function to check if a cell state is ignored.\n * includeDescendants - Optional boolean flag to add descendants to the result.\n * Default is false.\n */\nmxGraph.prototype.getCells = function(x, y, width, height, parent, result, intersection, ignoreFn, includeDescendants)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (width > 0 || height > 0 || intersection != null)\n\t{\n\t\tvar model = this.getModel();\n\t\tvar right = x + width;\n\t\tvar bottom = y + height;\n\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getCurrentRoot();\n\t\t\t\n\t\t\tif (parent == null)\n\t\t\t{\n\t\t\t\tparent = model.getRoot();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\tvar state = this.view.getState(cell);\n\t\t\t\t\n\t\t\t\tif (state != null && this.isCellVisible(cell) &&\n\t\t\t\t\t(ignoreFn == null || !ignoreFn(state)))\n\t\t\t\t{\n\t\t\t\t\tvar deg = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0;\n\t\t\t\t\tvar box = state;\n\t\t\t\t\t\n\t\t\t\t\tif (deg != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbox = mxUtils.getBoundingBox(box, deg);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar hit = (intersection != null && model.isVertex(cell) && mxUtils.intersects(intersection, box)) ||\n\t\t\t\t\t\t(intersection == null && (model.isEdge(cell) || model.isVertex(cell)) &&\n\t\t\t\t\t\tbox.x >= x && box.y + box.height <= bottom &&\n\t\t\t\t\t\tbox.y >= y && box.x + box.width <= right);\n\t\t\t\t\t\n\t\t\t\t\tif (hit)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(cell);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!hit || includeDescendants)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.getCells(x, y, width, height, cell, result, intersection, ignoreFn, includeDescendants);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsBeyond\n * \n * Returns the children of the given parent that are contained in the\n * halfpane from the given point (x0, y0) rightwards or downwards\n * depending on rightHalfpane and bottomHalfpane.\n * \n * Parameters:\n * \n * x0 - X-coordinate of the origin.\n * y0 - Y-coordinate of the origin.\n * parent - Optional <mxCell> whose children should be checked. Default is\n * <defaultParent>.\n * rightHalfpane - Boolean indicating if the cells in the right halfpane\n * from the origin should be returned.\n * bottomHalfpane - Boolean indicating if the cells in the bottom halfpane\n * from the origin should be returned.\n */\nmxGraph.prototype.getCellsBeyond = function(x0, y0, parent, rightHalfpane, bottomHalfpane)\n{\n\tvar result = [];\n\t\n\tif (rightHalfpane || bottomHalfpane)\n\t{\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getDefaultParent();\n\t\t}\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = this.model.getChildAt(parent, i);\n\t\t\t\tvar state = this.view.getState(child);\n\t\t\t\t\n\t\t\t\tif (this.isCellVisible(child) && state != null)\n\t\t\t\t{\n\t\t\t\t\tif ((!rightHalfpane || state.x >= x0) &&\n\t\t\t\t\t\t(!bottomHalfpane || state.y >= y0))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: findTreeRoots\n * \n * Returns all children in the given parent which do not have incoming\n * edges. If the result is empty then the with the greatest difference\n * between incoming and outgoing edges is returned.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * isolate - Optional boolean that specifies if edges should be ignored if\n * the opposite end is not a child of the given parent cell. Default is\n * false.\n * invert - Optional boolean that specifies if outgoing or incoming edges\n * should be counted for a tree root. If false then outgoing edges will be\n * counted. Default is false.\n */\nmxGraph.prototype.findTreeRoots = function(parent, isolate, invert)\n{\n\tisolate = (isolate != null) ? isolate : false;\n\tinvert = (invert != null) ? invert : false;\n\tvar roots = [];\n\t\n\tif (parent != null)\n\t{\n\t\tvar model = this.getModel();\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar best = null;\n\t\tvar maxDiff = 0;\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (this.model.isVertex(cell) && this.isCellVisible(cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getConnections(cell, (isolate) ? parent : null);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\t\t\t\t\n\t\t\t\tfor (var j = 0; j < conns.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.view.getVisibleTerminal(conns[j], true);\n\n                    if (src == cell)\n                    {\n                        fanOut++;\n                    }\n                    else\n                    {\n                        fanIn++;\n                    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((invert && fanOut == 0 && fanIn > 0) ||\n\t\t\t\t\t(!invert && fanIn == 0 && fanOut > 0))\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar diff = (invert) ? fanIn - fanOut : fanOut - fanIn;\n\t\t\t\t\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: traverse\n * \n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Example:\n * \n * (code)\n * mxLog.show();\n * var cell = graph.getSelectionCell();\n * graph.traverse(cell, false, function(vertex, edge)\n * {\n *   mxLog.debug(graph.getLabel(vertex));\n * });\n * (end)\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * func - Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * visited - Optional <mxDictionary> from cells to true for the visited cells.\n * inverse - Optional boolean to traverse in inverse direction. Default is false.\n * This is ignored if directed is false.\n */\nmxGraph.prototype.traverse = function(vertex, directed, func, edge, visited, inverse)\n{\n\tif (func != null && vertex != null)\n\t{\n\t\tdirected = (directed != null) ? directed : true;\n\t\tinverse = (inverse != null) ? inverse : false;\n\t\tvisited = visited || new mxDictionary();\n\t\t\n\t\tif (!visited.get(vertex))\n\t\t{\n\t\t\tvisited.put(vertex, true);\n\t\t\tvar result = func(vertex, edge);\n\t\t\t\n\t\t\tif (result == null || result)\n\t\t\t{\n\t\t\t\tvar edgeCount = this.model.getEdgeCount(vertex);\n\t\t\t\t\n\t\t\t\tif (edgeCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = this.model.getEdgeAt(vertex, i);\n\t\t\t\t\t\tvar isSource = this.model.getTerminal(e, true) == vertex;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!directed || (!inverse == isSource))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar next = this.model.getTerminal(e, !isSource);\n\t\t\t\t\t\t\tthis.traverse(next, directed, func, e, visited, inverse);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Group: Selection\n */\n\n/**\n * Function: isCellSelected\n * \n * Returns true if the given cell is selected.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the selection state should be returned.\n */\nmxGraph.prototype.isCellSelected = function(cell)\n{\n\treturn this.getSelectionModel().isSelected(cell);\n};\n\n/**\n * Function: isSelectionEmpty\n * \n * Returns true if the selection is empty.\n */\nmxGraph.prototype.isSelectionEmpty = function()\n{\n\treturn this.getSelectionModel().isEmpty();\n};\n\n/**\n * Function: clearSelection\n * \n * Clears the selection using <mxGraphSelectionModel.clear>.\n */\nmxGraph.prototype.clearSelection = function()\n{\n\treturn this.getSelectionModel().clear();\n};\n\n/**\n * Function: getSelectionCount\n * \n * Returns the number of selected cells.\n */\nmxGraph.prototype.getSelectionCount = function()\n{\n\treturn this.getSelectionModel().cells.length;\n};\n\t\n/**\n * Function: getSelectionCell\n * \n * Returns the first cell from the array of selected <mxCells>.\n */\nmxGraph.prototype.getSelectionCell = function()\n{\n\treturn this.getSelectionModel().cells[0];\n};\n\n/**\n * Function: getSelectionCells\n * \n * Returns the array of selected <mxCells>.\n */\nmxGraph.prototype.getSelectionCells = function()\n{\n\treturn this.getSelectionModel().cells.slice();\n};\n\n/**\n * Function: setSelectionCell\n * \n * Sets the selection cell.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n */\nmxGraph.prototype.setSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().setCell(cell);\n};\n\n/**\n * Function: setSelectionCells\n * \n * Sets the selection cell.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n */\nmxGraph.prototype.setSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().setCells(cells);\n};\n\n/**\n * Function: addSelectionCell\n * \n * Adds the given cell to the selection.\n * \n * Parameters:\n * \n * cell - <mxCell> to be add to the selection.\n */\nmxGraph.prototype.addSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().addCell(cell);\n};\n\n/**\n * Function: addSelectionCells\n * \n * Adds the given cells to the selection.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be added to the selection.\n */\nmxGraph.prototype.addSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().addCells(cells);\n};\n\n/**\n * Function: removeSelectionCell\n * \n * Removes the given cell from the selection.\n * \n * Parameters:\n * \n * cell - <mxCell> to be removed from the selection.\n */\nmxGraph.prototype.removeSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().removeCell(cell);\n};\n\n/**\n * Function: removeSelectionCells\n * \n * Removes the given cells from the selection.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be removed from the selection.\n */\nmxGraph.prototype.removeSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().removeCells(cells);\n};\n\n/**\n * Function: selectRegion\n * \n * Selects and returns the cells inside the given rectangle for the\n * specified event.\n * \n * Parameters:\n * \n * rect - <mxRectangle> that represents the region to be selected.\n * evt - Mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectRegion = function(rect, evt)\n{\n\tvar cells = this.getCells(rect.x, rect.y, rect.width, rect.height);\n\tthis.selectCellsForEvent(cells, evt);\n\t\n\treturn cells;\n};\n\n/**\n * Function: selectNextCell\n * \n * Selects the next cell.\n */\nmxGraph.prototype.selectNextCell = function()\n{\n\tthis.selectCell(true);\n};\n\n/**\n * Function: selectPreviousCell\n * \n * Selects the previous cell.\n */\nmxGraph.prototype.selectPreviousCell = function()\n{\n\tthis.selectCell();\n};\n\n/**\n * Function: selectParentCell\n * \n * Selects the parent cell.\n */\nmxGraph.prototype.selectParentCell = function()\n{\n\tthis.selectCell(false, true);\n};\n\n/**\n * Function: selectChildCell\n * \n * Selects the first child cell.\n */\nmxGraph.prototype.selectChildCell = function()\n{\n\tthis.selectCell(false, false, true);\n};\n\n/**\n * Function: selectCell\n * \n * Selects the next, parent, first child or previous cell, if all arguments\n * are false.\n * \n * Parameters:\n * \n * isNext - Boolean indicating if the next cell should be selected.\n * isParent - Boolean indicating if the parent cell should be selected.\n * isChild - Boolean indicating if the first child cell should be selected.\n */\nmxGraph.prototype.selectCell = function(isNext, isParent, isChild)\n{\n\tvar sel = this.selectionModel;\n\tvar cell = (sel.cells.length > 0) ? sel.cells[0] : null;\n\t\n\tif (sel.cells.length > 1)\n\t{\n\t\tsel.clear();\n\t}\n\t\n\tvar parent = (cell != null) ?\n\t\tthis.model.getParent(cell) :\n\t\tthis.getDefaultParent();\n\t\n\tvar childCount = this.model.getChildCount(parent);\n\t\n\tif (cell == null && childCount > 0)\n\t{\n\t\tvar child = this.model.getChildAt(parent, 0);\n\t\tthis.setSelectionCell(child);\n\t}\n\telse if ((cell == null || isParent) &&\n\t\tthis.view.getState(parent) != null &&\n\t\tthis.model.getGeometry(parent) != null)\n\t{\n\t\tif (this.getCurrentRoot() != parent)\n\t\t{\n\t\t\tthis.setSelectionCell(parent);\n\t\t}\n\t}\n\telse if (cell != null && isChild)\n\t{\n\t\tvar tmp = this.model.getChildCount(cell);\n\t\t\n\t\tif (tmp > 0)\n\t\t{\n\t\t\tvar child = this.model.getChildAt(cell, 0);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t}\n\telse if (childCount > 0)\n\t{\n\t\tvar i = parent.getIndex(cell);\n\t\t\n\t\tif (isNext)\n\t\t{\n\t\t\ti++;\n\t\t\tvar child = this.model.getChildAt(parent, i % childCount);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti--;\n\t\t\tvar index =  (i < 0) ? childCount - 1 : i;\n\t\t\tvar child = this.model.getChildAt(parent, index);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t}\n};\n\n/**\n * Function: selectAll\n * \n * Selects all children of the given parent cell or the children of the\n * default parent if no parent is specified. To select leaf vertices and/or\n * edges use <selectCells>.\n * \n * Parameters:\n * \n * parent - Optional <mxCell> whose children should be selected.\n * Default is <defaultParent>.\n * descendants - Optional boolean specifying whether all descendants should be\n * selected. Default is false.\n */\nmxGraph.prototype.selectAll = function(parent, descendants)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tvar cells = (descendants) ? this.model.filterDescendants(mxUtils.bind(this, function(cell)\n\t{\n\t\treturn cell != parent && this.view.getState(cell) != null;\n\t}), parent) : this.model.getChildren(parent);\n\t\n\tif (cells != null)\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Function: selectVertices\n * \n * Select all vertices inside the given parent or the default parent.\n */\nmxGraph.prototype.selectVertices = function(parent, selectGroups)\n{\n\tthis.selectCells(true, false, parent, selectGroups);\n};\n\n/**\n * Function: selectVertices\n * \n * Select all vertices inside the given parent or the default parent.\n */\nmxGraph.prototype.selectEdges = function(parent)\n{\n\tthis.selectCells(false, true, parent);\n};\n\n/**\n * Function: selectCells\n * \n * Selects all vertices and/or edges depending on the given boolean\n * arguments recursively, starting at the given parent or the default\n * parent if no parent is specified. Use <selectAll> to select all cells.\n * For vertices, only cells with no children are selected.\n * \n * Parameters:\n * \n * vertices - Boolean indicating if vertices should be selected.\n * edges - Boolean indicating if edges should be selected.\n * parent - Optional <mxCell> that acts as the root of the recursion.\n * Default is <defaultParent>.\n * selectGroups - Optional boolean that specifies if groups should be\n * selected. Default is false.\n */\nmxGraph.prototype.selectCells = function(vertices, edges, parent, selectGroups)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.view.getState(cell) != null &&\n\t\t\t(((selectGroups || this.model.getChildCount(cell) == 0) &&\n\t\t\tthis.model.isVertex(cell) && vertices\n\t\t\t&& !this.model.isEdge(this.model.getParent(cell))) ||\n\t\t\t(this.model.isEdge(cell) && edges));\n\t});\n\t\n\tvar cells = this.model.filterDescendants(filter, parent);\n\t\n\tif (cells != null)\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Function: selectCellForEvent\n * \n * Selects the given cell by either adding it to the selection or\n * replacing the selection depending on whether the given mouse event is a\n * toggle event.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n * evt - Optional mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectCellForEvent = function(cell, evt)\n{\n\tvar isSelected = this.isCellSelected(cell);\n\t\n\tif (this.isToggleEvent(evt))\n\t{\n\t\tif (isSelected)\n\t\t{\n\t\t\tthis.removeSelectionCell(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.addSelectionCell(cell);\n\t\t}\n\t}\n\telse if (!isSelected || this.getSelectionCount() != 1)\n\t{\n\t\tthis.setSelectionCell(cell);\n\t}\n};\n\n/**\n * Function: selectCellsForEvent\n * \n * Selects the given cells by either adding them to the selection or\n * replacing the selection depending on whether the given mouse event is a\n * toggle event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n * evt - Optional mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectCellsForEvent = function(cells, evt)\n{\n\tif (this.isToggleEvent(evt))\n\t{\n\t\tthis.addSelectionCells(cells);\n\t}\n\telse\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Group: Selection state\n */\n\n/**\n * Function: createHandler\n * \n * Creates a new handler for the given cell state. This implementation\n * returns a new <mxEdgeHandler> of the corresponding cell is an edge,\n * otherwise it returns an <mxVertexHandler>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose handler should be created.\n */\nmxGraph.prototype.createHandler = function(state)\n{\n\tvar result = null;\n\t\n\tif (state != null)\n\t{\n\t\tif (this.model.isEdge(state.cell))\n\t\t{\n\t\t\tvar source = state.getVisibleTerminalState(true);\n\t\t\tvar target = state.getVisibleTerminalState(false);\n\t\t\tvar geo = this.getCellGeometry(state.cell);\n\t\t\t\n\t\t\tvar edgeStyle = this.view.getEdgeStyle(state, (geo != null) ? geo.points : null, source, target);\n\t\t\tresult = this.createEdgeHandler(state, edgeStyle);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = this.createVertexHandler(state);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createVertexHandler\n * \n * Hooks to create a new <mxVertexHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createVertexHandler = function(state)\n{\n\treturn new mxVertexHandler(state);\n};\n\n/**\n * Function: createEdgeHandler\n * \n * Hooks to create a new <mxEdgeHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createEdgeHandler = function(state, edgeStyle)\n{\n\tvar result = null;\n\t\n\tif (edgeStyle == mxEdgeStyle.Loop ||\n\t\tedgeStyle == mxEdgeStyle.ElbowConnector ||\n\t\tedgeStyle == mxEdgeStyle.SideToSide ||\n\t\tedgeStyle == mxEdgeStyle.TopToBottom)\n\t{\n\t\tresult = this.createElbowEdgeHandler(state);\n\t}\n\telse if (edgeStyle == mxEdgeStyle.SegmentConnector || \n\t\t\tedgeStyle == mxEdgeStyle.OrthConnector)\n\t{\n\t\tresult = this.createEdgeSegmentHandler(state);\n\t}\n\telse\n\t{\n\t\tresult = new mxEdgeHandler(state);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createEdgeSegmentHandler\n * \n * Hooks to create a new <mxEdgeSegmentHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createEdgeSegmentHandler = function(state)\n{\n\treturn new mxEdgeSegmentHandler(state);\n};\n\n/**\n * Function: createElbowEdgeHandler\n * \n * Hooks to create a new <mxElbowEdgeHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createElbowEdgeHandler = function(state)\n{\n\treturn new mxElbowEdgeHandler(state);\n};\n\n/**\n * Group: Graph events\n */\n\n/**\n * Function: addMouseListener\n * \n * Adds a listener to the graph event dispatch loop. The listener\n * must implement the mouseDown, mouseMove and mouseUp methods\n * as shown in the <mxMouseEvent> class.\n * \n * Parameters:\n * \n * listener - Listener to be added to the graph event listeners.\n */\nmxGraph.prototype.addMouseListener = function(listener)\n{\n\tif (this.mouseListeners == null)\n\t{\n\t\tthis.mouseListeners = [];\n\t}\n\t\n\tthis.mouseListeners.push(listener);\n};\n\n/**\n * Function: removeMouseListener\n * \n * Removes the specified graph listener.\n * \n * Parameters:\n * \n * listener - Listener to be removed from the graph event listeners.\n */\nmxGraph.prototype.removeMouseListener = function(listener)\n{\n\tif (this.mouseListeners != null)\n\t{\n\t\tfor (var i = 0; i < this.mouseListeners.length; i++)\n\t\t{\n\t\t\tif (this.mouseListeners[i] == listener)\n\t\t\t{\n\t\t\t\tthis.mouseListeners.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: updateMouseEvent\n * \n * Sets the graphX and graphY properties if the given <mxMouseEvent> if\n * required and returned the event.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> to be updated.\n * evtName - Name of the mouse event.\n */\nmxGraph.prototype.updateMouseEvent = function(me, evtName)\n{\n\tif (me.graphX == null || me.graphY == null)\n\t{\n\t\tvar pt = mxUtils.convertPoint(this.container, me.getX(), me.getY());\n\t\t\n\t\tme.graphX = pt.x - this.panDx;\n\t\tme.graphY = pt.y - this.panDy;\n\t\t\n\t\t// Searches for rectangles using method if native hit detection is disabled on shape\n\t\tif (me.getCell() == null && this.isMouseDown && evtName == mxEvent.MOUSE_MOVE)\n\t\t{\n\t\t\tme.state = this.view.getState(this.getCellAt(pt.x, pt.y, null, null, null, function(state)\n\t\t\t{\n\t\t\t\treturn state.shape == null || state.shape.paintBackground != mxRectangleShape.prototype.paintBackground ||\n\t\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1' ||\n\t\t\t\t\t(state.shape.fill != null && state.shape.fill != mxConstants.NONE);\n\t\t\t}));\n\t\t}\n\t}\n\t\n\treturn me;\n};\n\n/**\n * Function: getStateForEvent\n * \n * Returns the state for the given touch event.\n */\nmxGraph.prototype.getStateForTouchEvent = function(evt)\n{\n\tvar x = mxEvent.getClientX(evt);\n\tvar y = mxEvent.getClientY(evt);\n\t\n\t// Dispatches the drop event to the graph which\n\t// consumes and executes the source function\n\tvar pt = mxUtils.convertPoint(this.container, x, y);\n\n\treturn this.view.getState(this.getCellAt(pt.x, pt.y));\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the event should be ignored in <fireMouseEvent>.\n */\nmxGraph.prototype.isEventIgnored = function(evtName, me, sender)\n{\n\tvar mouseEvent = mxEvent.isMouseEvent(me.getEvent());\n\tvar result = false;\n\n\t// Drops events that are fired more than once\n\tif (me.getEvent() == this.lastEvent)\n\t{\n\t\tresult = true;\n\t}\n\telse\n\t{\n\t\tthis.lastEvent = me.getEvent();\n\t}\n\n\t// Installs event listeners to capture the complete gesture from the event source\n\t// for non-MS touch events as a workaround for all events for the same geture being\n\t// fired from the event source even if that was removed from the DOM.\n\tif (this.eventSource != null && evtName != mxEvent.MOUSE_MOVE)\n\t{\n\t\tmxEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n\t\tthis.mouseMoveRedirect = null;\n\t\tthis.mouseUpRedirect = null;\n\t\tthis.eventSource = null;\n\t}\n\telse if (!mxClient.IS_GC && this.eventSource != null && me.getSource() != this.eventSource)\n\t{\n\t\tresult = true;\n\t}\n\telse if (mxClient.IS_TOUCH && evtName == mxEvent.MOUSE_DOWN &&\n\t\t\t!mouseEvent && !mxEvent.isPenEvent(me.getEvent()))\n\t{\n\t\tthis.eventSource = me.getSource();\n\n\t\tthis.mouseMoveRedirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, this.getStateForTouchEvent(evt)));\n\t\t});\n\t\tthis.mouseUpRedirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, this.getStateForTouchEvent(evt)));\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n\t}\n\n\t// Factored out the workarounds for FF to make it easier to override/remove\n\t// Note this method has side-effects!\n\tif (this.isSyntheticEventIgnored(evtName, me, sender))\n\t{\n\t\tresult = true;\n\t}\n\n\t// Never fires mouseUp/-Down for double clicks\n\tif (!mxEvent.isPopupTrigger(this.lastEvent) && evtName != mxEvent.MOUSE_MOVE && this.lastEvent.detail == 2)\n\t{\n\t\treturn true;\n\t}\n\t\n\t// Filters out of sequence events or mixed event types during a gesture\n\tif (evtName == mxEvent.MOUSE_UP && this.isMouseDown)\n\t{\n\t\tthis.isMouseDown = false;\n\t}\n\telse if (evtName == mxEvent.MOUSE_DOWN && !this.isMouseDown)\n\t{\n\t\tthis.isMouseDown = true;\n\t\tthis.isMouseTrigger = mouseEvent;\n\t}\n\t// Drops mouse events that are fired during touch gestures as a workaround for Webkit\n\t// and mouse events that are not in sync with the current internal button state\n\telse if (!result && (((!mxClient.IS_FF || evtName != mxEvent.MOUSE_MOVE) &&\n\t\tthis.isMouseDown && this.isMouseTrigger != mouseEvent) ||\n\t\t(evtName == mxEvent.MOUSE_DOWN && this.isMouseDown) ||\n\t\t(evtName == mxEvent.MOUSE_UP && !this.isMouseDown)))\n\t{\n\t\tresult = true;\n\t}\n\t\n\tif (!result && evtName == mxEvent.MOUSE_DOWN)\n\t{\n\t\tthis.lastMouseX = me.getX();\n\t\tthis.lastMouseY = me.getY();\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isSyntheticEventIgnored\n * \n * Hook for ignoring synthetic mouse events after touchend in Firefox.\n */\nmxGraph.prototype.isSyntheticEventIgnored = function(evtName, me, sender)\n{\n\tvar result = false;\n\tvar mouseEvent = mxEvent.isMouseEvent(me.getEvent());\n\t\n\t// LATER: This does not cover all possible cases that can go wrong in FF\n\tif (this.ignoreMouseEvents && mouseEvent && evtName != mxEvent.MOUSE_MOVE)\n\t{\n\t\tthis.ignoreMouseEvents = evtName != mxEvent.MOUSE_UP;\n\t\tresult = true;\n\t}\n\telse if (mxClient.IS_FF && !mouseEvent && evtName == mxEvent.MOUSE_UP)\n\t{\n\t\tthis.ignoreMouseEvents = true;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: isEventSourceIgnored\n * \n * Returns true if the event should be ignored in <fireMouseEvent>. This\n * implementation returns true for select, option and input (if not of type\n * checkbox, radio, button, submit or file) event sources if the event is not\n * a mouse event or a left mouse button press event.\n * \n * Parameters:\n * \n * evtName - The name of the event.\n * me - <mxMouseEvent> that should be ignored.\n */\nmxGraph.prototype.isEventSourceIgnored = function(evtName, me)\n{\n\tvar source = me.getSource();\n\tvar name = (source.nodeName != null) ? source.nodeName.toLowerCase() : '';\n\tvar candidate = !mxEvent.isMouseEvent(me.getEvent()) || mxEvent.isLeftMouseButton(me.getEvent());\n\t\n\treturn evtName == mxEvent.MOUSE_DOWN && candidate && (name == 'select' || name == 'option' ||\n\t\t(name == 'input' && source.type != 'checkbox' && source.type != 'radio' &&\n\t\tsource.type != 'button' && source.type != 'submit' && source.type != 'file'));\n};\n\n/**\n * Function: getEventState\n * \n * Returns the <mxCellState> to be used when firing the mouse event for the\n * given state. This implementation returns the given state.\n * \n * Parameters:\n * \n * <mxCellState> - State whose event source should be returned.\n */\nmxGraph.prototype.getEventState = function(state)\n{\n\treturn state;\n};\n\n/**\n * Function: fireMouseEvent\n * \n * Dispatches the given event in the graph event dispatch loop. Possible\n * event names are <mxEvent.MOUSE_DOWN>, <mxEvent.MOUSE_MOVE> and\n * <mxEvent.MOUSE_UP>. All listeners are invoked for all events regardless\n * of the consumed state of the event.\n * \n * Parameters:\n * \n * evtName - String that specifies the type of event to be dispatched.\n * me - <mxMouseEvent> to be fired.\n * sender - Optional sender argument. Default is this.\n */\nmxGraph.prototype.fireMouseEvent = function(evtName, me, sender)\n{\n\tif (this.isEventSourceIgnored(evtName, me))\n\t{\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.hide();\n\t\t}\n\t\t\n\t\treturn;\n\t}\n\t\n\tif (sender == null)\n\t{\n\t\tsender = this;\n\t}\n\n\t// Updates the graph coordinates in the event\n\tme = this.updateMouseEvent(me, evtName);\n\n\t// Detects and processes double taps for touch-based devices which do not have native double click events\n\t// or where detection of double click is not always possible (quirks, IE10+). Note that this can only handle\n\t// double clicks on cells because the sequence of events in IE prevents detection on the background, it fires\n\t// two mouse ups, one of which without a cell but no mousedown for the second click which means we cannot\n\t// detect which mouseup(s) are part of the first click, ie we do not know when the first click ends.\n\tif ((!this.nativeDblClickEnabled && !mxEvent.isPopupTrigger(me.getEvent())) || (this.doubleTapEnabled &&\n\t\tmxClient.IS_TOUCH && (mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent()))))\n\t{\n\t\tvar currentTime = new Date().getTime();\n\t\t\n\t\t// NOTE: Second mouseDown for double click missing in quirks mode\n\t\tif ((!mxClient.IS_QUIRKS && evtName == mxEvent.MOUSE_DOWN) || (mxClient.IS_QUIRKS && evtName == mxEvent.MOUSE_UP && !this.fireDoubleClick))\n\t\t{\n\t\t\tif (this.lastTouchEvent != null && this.lastTouchEvent != me.getEvent() &&\n\t\t\t\tcurrentTime - this.lastTouchTime < this.doubleTapTimeout &&\n\t\t\t\tMath.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n\t\t\t\tMath.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance &&\n\t\t\t\tthis.doubleClickCounter < 2)\n\t\t\t{\n\t\t\t\tthis.doubleClickCounter++;\n\t\t\t\tvar doubleClickFired = false;\n\t\t\t\t\n\t\t\t\tif (evtName == mxEvent.MOUSE_UP)\n\t\t\t\t{\n\t\t\t\t\tif (me.getCell() == this.lastTouchCell && this.lastTouchCell != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.lastTouchTime = 0;\n\t\t\t\t\t\tvar cell = this.lastTouchCell;\n\t\t\t\t\t\tthis.lastTouchCell = null;\n\n\t\t\t\t\t\t// Fires native dblclick event via event source\n\t\t\t\t\t\t// NOTE: This fires two double click events on edges in quirks mode. While\n\t\t\t\t\t\t// trying to fix this, we realized that nativeDoubleClick can be disabled for\n\t\t\t\t\t\t// quirks and IE10+ (or we didn't find the case mentioned above where it\n\t\t\t\t\t\t// would not work), ie. all double clicks seem to be working without this.\n\t\t\t\t\t\tif (mxClient.IS_QUIRKS)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tme.getSource().fireEvent('ondblclick');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.dblClick(me.getEvent(), cell);\n\t\t\t\t\t\tdoubleClickFired = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.fireDoubleClick = true;\n\t\t\t\t\tthis.lastTouchTime = 0;\n\t\t\t\t}\n\n\t\t\t\t// Do not ignore mouse up in quirks in this case\n\t\t\t\tif (!mxClient.IS_QUIRKS || doubleClickFired)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(me.getEvent());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.lastTouchEvent == null || this.lastTouchEvent != me.getEvent())\n\t\t\t{\n\t\t\t\tthis.lastTouchCell = me.getCell();\n\t\t\t\tthis.lastTouchX = me.getX();\n\t\t\t\tthis.lastTouchY = me.getY();\n\t\t\t\tthis.lastTouchTime = currentTime;\n\t\t\t\tthis.lastTouchEvent = me.getEvent();\n\t\t\t\tthis.doubleClickCounter = 0;\n\t\t\t}\n\t\t}\n\t\telse if ((this.isMouseDown || evtName == mxEvent.MOUSE_UP) && this.fireDoubleClick)\n\t\t{\n\t\t\tthis.fireDoubleClick = false;\n\t\t\tvar cell = this.lastTouchCell;\n\t\t\tthis.lastTouchCell = null;\n\t\t\tthis.isMouseDown = false;\n\t\t\t\n\t\t\t// Workaround for Chrome/Safari not firing native double click events for double touch on background\n\t\t\tvar valid = (cell != null) || ((mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent())) &&\n\t\t\t\t(mxClient.IS_GC || mxClient.IS_SF));\n\t\t\t\n\t\t\tif (valid && Math.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n\t\t\t\tMath.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance)\n\t\t\t{\n\t\t\t\tthis.dblClick(me.getEvent(), cell);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxEvent.consume(me.getEvent());\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (!this.isEventIgnored(evtName, me, sender))\n\t{\n\t\t// Updates the event state via getEventState\n\t\tme.state = this.getEventState(me.getState());\n\t\tthis.fireEvent(new mxEventObject(mxEvent.FIRE_MOUSE_EVENT, 'eventName', evtName, 'event', me));\n\t\t\n\t\tif ((mxClient.IS_OP || mxClient.IS_SF || mxClient.IS_GC || mxClient.IS_IE11 ||\n\t\t\t(mxClient.IS_IE && mxClient.IS_SVG) || me.getEvent().target != this.container))\n\t\t{\n\t\t\tif (evtName == mxEvent.MOUSE_MOVE && this.isMouseDown && this.autoScroll && !mxEvent.isMultiTouchEvent(me.getEvent))\n\t\t\t{\n\t\t\t\tthis.scrollPointToVisible(me.getGraphX(), me.getGraphY(), this.autoExtend);\n\t\t\t}\n\t\t\telse if (evtName == mxEvent.MOUSE_UP && this.ignoreScrollbars && this.translateToScrollPosition &&\n\t\t\t\t\t(this.container.scrollLeft != 0 || this.container.scrollTop != 0))\n\t\t\t{\n\t\t\t\tvar s = this.view.scale;\n\t\t\t\tvar tr = this.view.translate;\n\t\t\t\tthis.view.setTranslate(tr.x - this.container.scrollLeft / s, tr.y - this.container.scrollTop / s);\n\t\t\t\tthis.container.scrollLeft = 0;\n\t\t\t\tthis.container.scrollTop = 0;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.mouseListeners != null)\n\t\t\t{\n\t\t\t\tvar args = [sender, me];\n\t\n\t\t\t\t// Does not change returnValue in Opera\n\t\t\t\tif (!me.getEvent().preventDefault)\n\t\t\t\t{\n\t\t\t\t\tme.getEvent().returnValue = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < this.mouseListeners.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar l = this.mouseListeners[i];\n\t\t\t\t\t\n\t\t\t\t\tif (evtName == mxEvent.MOUSE_DOWN)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseDown.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t\telse if (evtName == mxEvent.MOUSE_MOVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseMove.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t\telse if (evtName == mxEvent.MOUSE_UP)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseUp.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Invokes the click handler\n\t\t\tif (evtName == mxEvent.MOUSE_UP)\n\t\t\t{\n\t\t\t\tthis.click(me);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Detects tapAndHold events using a timer\n\t\tif ((mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent())) &&\n\t\t\tevtName == mxEvent.MOUSE_DOWN && this.tapAndHoldEnabled && !this.tapAndHoldInProgress)\n\t\t{\n\t\t\tthis.tapAndHoldInProgress = true;\n\t\t\tthis.initialTouchX = me.getGraphX();\n\t\t\tthis.initialTouchY = me.getGraphY();\n\t\t\t\n\t\t\tvar handler = function()\n\t\t\t{\n\t\t\t\tif (this.tapAndHoldValid)\n\t\t\t\t{\n\t\t\t\t\tthis.tapAndHold(me);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.tapAndHoldInProgress = false;\n\t\t\t\tthis.tapAndHoldValid = false;\n\t\t\t};\n\t\t\t\n\t\t\tif (this.tapAndHoldThread)\n\t\t\t{\n\t\t\t\twindow.clearTimeout(this.tapAndHoldThread);\n\t\t\t}\n\t\n\t\t\tthis.tapAndHoldThread = window.setTimeout(mxUtils.bind(this, handler), this.tapAndHoldDelay);\n\t\t\tthis.tapAndHoldValid = true;\n\t\t}\n\t\telse if (evtName == mxEvent.MOUSE_UP)\n\t\t{\n\t\t\tthis.tapAndHoldInProgress = false;\n\t\t\tthis.tapAndHoldValid = false;\n\t\t}\n\t\telse if (this.tapAndHoldValid)\n\t\t{\n\t\t\tthis.tapAndHoldValid =\n\t\t\t\tMath.abs(this.initialTouchX - me.getGraphX()) < this.tolerance &&\n\t\t\t\tMath.abs(this.initialTouchY - me.getGraphY()) < this.tolerance;\n\t\t}\n\n\t\t// Stops editing for all events other than from cellEditor\n\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isEditing() && !this.cellEditor.isEventSource(me.getEvent()))\n\t\t{\n\t\t\tthis.stopEditing(!this.isInvokesStopCellEditing());\n\t\t}\n\n\t\tthis.consumeMouseEvent(evtName, me, sender);\n\t}\n};\n\n/**\n * Function: consumeMouseEvent\n * \n * Consumes the given <mxMouseEvent> if it's a touchStart event.\n */\nmxGraph.prototype.consumeMouseEvent = function(evtName, me, sender)\n{\n\t// Workaround for duplicate click in Windows 8 with Chrome/FF/Opera with touch\n\tif (evtName == mxEvent.MOUSE_DOWN && mxEvent.isTouchEvent(me.getEvent()))\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: fireGestureEvent\n * \n * Dispatches a <mxEvent.GESTURE> event. The following example will resize the\n * cell under the mouse based on the scale property of the native touch event.\n * \n * (code)\n * graph.addListener(mxEvent.GESTURE, function(sender, eo)\n * {\n *   var evt = eo.getProperty('event');\n *   var state = graph.view.getState(eo.getProperty('cell'));\n *   \n *   if (graph.isEnabled() && graph.isCellResizable(state.cell) && Math.abs(1 - evt.scale) > 0.2)\n *   {\n *     var scale = graph.view.scale;\n *     var tr = graph.view.translate;\n *     \n *     var w = state.width * evt.scale;\n *     var h = state.height * evt.scale;\n *     var x = state.x - (w - state.width) / 2;\n *     var y = state.y - (h - state.height) / 2;\n *     \n *     var bounds = new mxRectangle(graph.snap(x / scale) - tr.x,\n *     \t\tgraph.snap(y / scale) - tr.y, graph.snap(w / scale), graph.snap(h / scale));\n *     graph.resizeCell(state.cell, bounds);\n *     eo.consume();\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * evt - Gestureend event that represents the gesture.\n * cell - Optional <mxCell> associated with the gesture.\n */\nmxGraph.prototype.fireGestureEvent = function(evt, cell)\n{\n\t// Resets double tap event handling when gestures take place\n\tthis.lastTouchTime = 0;\n\tthis.fireEvent(new mxEventObject(mxEvent.GESTURE, 'event', evt, 'cell', cell));\n};\n\n/**\n * Function: destroy\n * \n * Destroys the graph and all its resources.\n */\nmxGraph.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\t\t\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.selectionCellsHandler != null)\n\t\t{\n\t\t\tthis.selectionCellsHandler.destroy();\n\t\t}\n\n\t\tif (this.panningHandler != null)\n\t\t{\n\t\t\tthis.panningHandler.destroy();\n\t\t}\n\n\t\tif (this.popupMenuHandler != null)\n\t\t{\n\t\t\tthis.popupMenuHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.connectionHandler != null)\n\t\t{\n\t\t\tthis.connectionHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.graphHandler != null)\n\t\t{\n\t\t\tthis.graphHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.cellEditor != null)\n\t\t{\n\t\t\tthis.cellEditor.destroy();\n\t\t}\n\t\t\n\t\tif (this.view != null)\n\t\t{\n\t\t\tthis.view.destroy();\n\t\t}\n\n\t\tif (this.model != null && this.graphModelChangeListener != null)\n\t\t{\n\t\t\tthis.model.removeListener(this.graphModelChangeListener);\n\t\t\tthis.graphModelChangeListener = null;\n\t\t}\n\n\t\tthis.container = null;\n\t}\n};\n\n__mxOutput.mxGraph = typeof mxGraph !== 'undefined' ? mxGraph : undefined;\n\n/**\n * Class: azdataGraph\n * \n * Constructor: azdataGraph\n * \n * Constructs a new azdataGraph in the specified container. Model is an optional\n * mxGraphModel. If no model is provided, a new mxGraphModel instance is \n * used as the model. The container must have a valid owner document prior \n * to calling this function in Internet Explorer. RenderHint is a string to\n * affect the display performance and rendering in IE, but not in SVG-based \n * browsers. The parameter is mapped to <dialect>, which may \n * be one of <mxConstants.DIALECT_SVG> for SVG-based browsers, \n * <mxConstants.DIALECT_STRICTHTML> for fastest display mode,\n * <mxConstants.DIALECT_PREFERHTML> for faster display mode,\n * <mxConstants.DIALECT_MIXEDHTML> for fast and <mxConstants.DIALECT_VML> \n * for exact display mode (slowest). The dialects are defined in mxConstants.\n * The default values are DIALECT_SVG for SVG-based browsers and\n * DIALECT_MIXED for IE.\n *\n * Example:\n * \n * To create a graph inside a DOM node with an id of graph:\n * (code)\n * var container = document.getElementById('graph');\n * var graph = new azdataGraph(container);\n * (end)\n * \n * Parameters:\n * \n * container - Optional DOM node that acts as a container for the graph.\n * If this is null then the container can be initialized later using\n * <init>.\n * model - Optional <mxGraphModel> that constitutes the graph data.\n * renderHint - Optional string that specifies the display accuracy and\n * performance. Default is mxConstants.DIALECT_MIXEDHTML (for IE).\n * stylesheet - Optional <mxStylesheet> to be used in the graph.\n */\nfunction azdataGraph(container, model, renderHint, styleSheet) {\n    mxGraph.call(this, container, model, renderHint, styleSheet);\n}\n\nazdataGraph.prototype = Object.create(mxGraph.prototype);\nazdataGraph.prototype.constructor = azdataGraph;\n\n/**\n * Function: insertInvertedEdge\n * \n * Adds a new edge into the given parent <mxCell> using value as the user\n * object and the given source and target as the terminals of the new edge.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent of the new edge.\n * id - Optional string that defines the Id of the new edge.\n * value - JavaScript object to be used as the user object.\n * source - <mxCell> that defines the source of the edge.\n * target - <mxCell> that defines the target of the edge.\n * style - Optional string that defines the cell style.\n */\nazdataGraph.prototype.insertInvertedEdge = function (parent, id, value, source, target, style) {\n    var terminalStyle = 'startArrow=classic;endArrow=none;';\n    var edge = this.createEdge(parent, id, value, source, target, terminalStyle + style);\n\n    return this.addEdge(edge, parent, source, target);\n};\n\n/**\n * Function: insertWeightedInvertedEdge\n * \n * Adds a new edge into the given parent <mxCell> using value as the user\n * object and the given source and target as the terminals of the new edge.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent of the new edge.\n * id - Optional string that defines the Id of the new edge.\n * value - JavaScript object to be used as the user object.\n * source - <mxCell> that defines the source of the edge.\n * target - <mxCell> that defines the target of the edge.\n * style - Optional string that defines the cell style.\n */\nazdataGraph.prototype.insertWeightedInvertedEdge = function (parent, id, value, source, target, style) {\n    return this.insertInvertedEdge(parent, id, value, source, target, `strokeWidth=${value.weight.toFixed(1)};` + style);\n};\n\n/**\n * Function: getStyledTooltipForCell\n * \n * Returns a string to be used as the tooltip for the given cell. The\n * string contains HTML and styles that will resemble tooltips found in\n * SSMS.\n * \n * Parameters:\n * cell - <mxCell> that specifies the cell the retrieved tooltip is for.\n */\nazdataGraph.prototype.getStyledTooltipForCell = function (cell) {\n    const tooltipWidth = 'width: 45em;';\n    const justifyContent = 'display: flex; justify-content: space-between;';\n    const boldText = 'font-weight: bold;';\n    const tooltipLineHeight = 'padding-top: .13em; line-height: .5em;';\n    const centerText = 'text-align: center;';\n    const headerBottomMargin = 'margin-bottom: 1.5em;';\n    const headerTopMargin = 'margin-top: 1.5em;';\n    const footerTopMargin = 'margin-top: 1.5em;';\n    const metricLabelMargin = 'margin-right: 4em;';\n\n    if (cell?.value != null && cell?.value?.metrics != null) {\n        var tooltip = `<div style=\\\"${tooltipWidth}\\\">`;\n\n        // tooltip heading for vertices only\n        if (!cell.edge) {\n            let tooltipTitle = this.truncateTooltipTitle(cell.value.tooltipTitle);\n            tooltip += `<div style=\\\"${centerText}\\\"><span style=\\\"${boldText}\\\">${tooltipTitle}</span></div>`;\n            if (cell.value.description) {\n                tooltip += `<div style=\\\"${headerBottomMargin} ${headerTopMargin}\\\"><span>${cell.value.description}</span></div>`;\n            }\n        }\n\n        // tooltip body\n        let startIndex = cell.edge ? 0 : 1; // first index for vertices contains footer label, so we can skip for vertices.\n        for (var i = startIndex; i < cell.value.metrics.length; ++i) {\n            if (cell.value.metrics[i].isLongString) { // Skipping all strings as they go to the bottom of tooltip\n                continue;\n            }\n            tooltip += `<div style=\\\"${tooltipLineHeight}\\\">`;\n\n            tooltip += `<div style=\\\"${justifyContent}\\\">`;\n            tooltip += `<span style=\\\"${boldText} ${metricLabelMargin}\\\">${cell.value.metrics[i].name}</span>`;\n            tooltip += `<span>${cell.value.metrics[i].value}</span>`;\n            tooltip += '</div>';\n\n            if (i < cell.value.metrics.length - 1) {\n                tooltip += `<hr />`;\n            }\n\n            tooltip += `</div>`;\n        }\n\n        // tooltip footer for vertices only\n        if (!cell.edge) {\n            cell.value.metrics.filter(m => m.isLongString).forEach(m => {\n                tooltip += '<hr />';\n                tooltip += `<div style=\\\"${footerTopMargin}\\\"><span style=\\\"${boldText}\\\">${m.name}</span></div>`;\n\n                let metricLabel = m.value.replace(/(\\r\\n|\\n|\\r)/gm, \" \");\n                if (metricLabel.length > 103) {\n                    metricLabel = metricLabel.substring(0, 100) + '...';\n                }\n                tooltip += `<div><span>${metricLabel}</span></div>`; // Removing all line breaks as they look bad in tooltips\n            })\n        }\n\n        tooltip += '</div>';\n\n        return tooltip;\n    }\n\n    return azdataGraph.prototype.getTooltipForCell.apply(this, arguments); // \"supercall\"\n};\n\nazdataGraph.prototype.truncateTooltipTitle = function (title) {\n    let hasWindowsEOL = title.includes('\\r\\n');\n    let titleSegments = hasWindowsEOL ? title.split('\\r\\n') : title.split('\\n');\n    let truncatedTitleSegments = titleSegments.map(segment => {\n        if (segment.length > 50) {\n            return segment.substring(0, 50) + '...';\n        }\n        else {\n            return segment;\n        }\n    });\n\n    if (hasWindowsEOL) {\n        title = truncatedTitleSegments.join('\\r\\n');\n    }\n    else {\n        title = truncatedTitleSegments.join('\\n');\n    }\n\n    return title;\n};\n\n/**\n * Function: graphEventHandler\n * \n * Event listener for the entire graph.\n * \n * Parameter:\n * \n * sender - Optional sender argument. Default is this.\n * event - The event caught by the listener.\n * callback - The callback to invoke with the passed in selected cell.\n */\nazdataGraph.prototype.graphEventHandler = function (sender, event, eventCallback) {\n    let selectedCell = event.getProperty('cell');\n    if (eventCallback && selectedCell) {\n        eventCallback(selectedCell);\n    }\n    event.consume();\n};\n\n/**\n * Function: addDomEventListener\n * \n * Adds a listener to the given element\n * \n * Parameter\n * \n * element - The element to add the listener to.\n * eventType - The event type (i.e. 'click') that should trigger the callback\n * callback - The callback function that is executed by the event listener.\n */\nazdataGraph.prototype.addDomEventListener = function (element, eventType, eventCallback) {\n    mxEvent.addListener(element, eventType, (e) => {\n        if (eventCallback) {\n            eventCallback();\n        }\n        mxEvent.consume(e);\n    });\n};\n\n__mxOutput.azDataGraph = typeof azDataGraph !== 'undefined' ? azDataGraph : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellOverlay\n *\n * Extends <mxEventSource> to implement a graph overlay, represented by an icon\n * and a tooltip. Overlays can handle and fire <click> events and are added to\n * the graph using <mxGraph.addCellOverlay>, and removed using\n * <mxGraph.removeCellOverlay>, or <mxGraph.removeCellOverlays> to remove all overlays.\n * The <mxGraph.getCellOverlays> function returns the array of overlays for a given\n * cell in a graph. If multiple overlays exist for the same cell, then\n * <getBounds> should be overridden in at least one of the overlays.\n * \n * Overlays appear on top of all cells in a special layer. If this is not\n * desirable, then the image must be rendered as part of the shape or label of\n * the cell instead.\n *\n * Example:\n * \n * The following adds a new overlays for a given vertex and selects the cell\n * if the overlay is clicked.\n *\n * (code)\n * var overlay = new mxCellOverlay(img, html);\n * graph.addCellOverlay(vertex, overlay);\n * overlay.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var cell = evt.getProperty('cell');\n *   graph.setSelectionCell(cell);\n * });\n * (end)\n * \n * For cell overlays to be printed use <mxPrintPreview.printOverlays>.\n *\n * Event: mxEvent.CLICK\n *\n * Fires when the user clicks on the overlay. The <code>event</code> property\n * contains the corresponding mouse event and the <code>cell</code> property\n * contains the cell. For touch devices this is fired if the element receives\n * a touchend event.\n * \n * Constructor: mxCellOverlay\n *\n * Constructs a new overlay using the given image and tooltip.\n * \n * Parameters:\n * \n * image - <mxImage> that represents the icon to be displayed.\n * tooltip - Optional string that specifies the tooltip.\n * align - Optional horizontal alignment for the overlay. Possible\n * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>\n * (default).\n * verticalAlign - Vertical alignment for the overlay. Possible\n * values are <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>\n * (default).\n */\nfunction mxCellOverlay(image, tooltip, align, verticalAlign, offset, cursor)\n{\n\tthis.image = image;\n\tthis.tooltip = tooltip;\n\tthis.align = (align != null) ? align : this.align;\n\tthis.verticalAlign = (verticalAlign != null) ? verticalAlign : this.verticalAlign;\n\tthis.offset = (offset != null) ? offset : new mxPoint();\n\tthis.cursor = (cursor != null) ? cursor : 'help';\n};\n\n/**\n * Extends mxEventSource.\n */\nmxCellOverlay.prototype = new mxEventSource();\nmxCellOverlay.prototype.constructor = mxCellOverlay;\n\n/**\n * Variable: image\n *\n * Holds the <mxImage> to be used as the icon.\n */\nmxCellOverlay.prototype.image = null;\n\n/**\n * Variable: tooltip\n * \n * Holds the optional string to be used as the tooltip.\n */\nmxCellOverlay.prototype.tooltip = null;\n\n/**\n * Variable: align\n * \n * Holds the horizontal alignment for the overlay. Default is\n * <mxConstants.ALIGN_RIGHT>. For edges, the overlay always appears in the\n * center of the edge.\n */\nmxCellOverlay.prototype.align = mxConstants.ALIGN_RIGHT;\n\n/**\n * Variable: verticalAlign\n * \n * Holds the vertical alignment for the overlay. Default is\n * <mxConstants.ALIGN_BOTTOM>. For edges, the overlay always appears in the\n * center of the edge.\n */\nmxCellOverlay.prototype.verticalAlign = mxConstants.ALIGN_BOTTOM;\n\n/**\n * Variable: offset\n * \n * Holds the offset as an <mxPoint>. The offset will be scaled according to the\n * current scale.\n */\nmxCellOverlay.prototype.offset = null;\n\n/**\n * Variable: cursor\n * \n * Holds the cursor for the overlay. Default is 'help'.\n */\nmxCellOverlay.prototype.cursor = null;\n\n/**\n * Variable: defaultOverlap\n * \n * Defines the overlapping for the overlay, that is, the proportional distance\n * from the origin to the point defined by the alignment. Default is 0.5.\n */\nmxCellOverlay.prototype.defaultOverlap = 0.5;\n\n/**\n * Function: getBounds\n * \n * Returns the bounds of the overlay for the given <mxCellState> as an\n * <mxRectangle>. This should be overridden when using multiple overlays\n * per cell so that the overlays do not overlap.\n * \n * The following example will place the overlay along an edge (where\n * x=[-1..1] from the start to the end of the edge and y is the\n * orthogonal offset in px).\n * \n * (code)\n * overlay.getBounds = function(state)\n * {\n *   var bounds = mxCellOverlay.prototype.getBounds.apply(this, arguments);\n *   \n *   if (state.view.graph.getModel().isEdge(state.cell))\n *   {\n *     var pt = state.view.getPoint(state, {x: 0, y: 0, relative: true});\n *     \n *     bounds.x = pt.x - bounds.width / 2;\n *     bounds.y = pt.y - bounds.height / 2;\n *   }\n *   \n *   return bounds;\n * };\n * (end)\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the current state of the\n * associated cell.\n */\nmxCellOverlay.prototype.getBounds = function(state)\n{\n\tvar isEdge = state.view.graph.getModel().isEdge(state.cell);\n\tvar s = state.view.scale;\n\tvar pt = null;\n\n\tvar w = this.image.width;\n\tvar h = this.image.height;\n\t\n\tif (isEdge)\n\t{\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tif (pts.length % 2 == 1)\n\t\t{\n\t\t\tpt = pts[Math.floor(pts.length / 2)];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar idx = pts.length / 2;\n\t\t\tvar p0 = pts[idx-1];\n\t\t\tvar p1 = pts[idx];\n\t\t\tpt = new mxPoint(p0.x + (p1.x - p0.x) / 2,\n\t\t\t\tp0.y + (p1.y - p0.y) / 2);\n\t\t}\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint();\n\t\t\n\t\tif (this.align == mxConstants.ALIGN_LEFT)\n\t\t{\n\t\t\tpt.x = state.x;\n\t\t}\n\t\telse if (this.align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tpt.x = state.x + state.width / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpt.x = state.x + state.width;\n\t\t}\n\t\t\n\t\tif (this.verticalAlign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tpt.y = state.y;\n\t\t}\n\t\telse if (this.verticalAlign == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tpt.y = state.y + state.height / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpt.y = state.y + state.height;\n\t\t}\n\t}\n\n\treturn new mxRectangle(Math.round(pt.x - (w * this.defaultOverlap - this.offset.x) * s),\n\t\tMath.round(pt.y - (h * this.defaultOverlap - this.offset.y) * s), w * s, h * s);\n};\n\n/**\n * Function: toString\n * \n * Returns the textual representation of the overlay to be used as the\n * tooltip. This implementation returns <tooltip>.\n */\nmxCellOverlay.prototype.toString = function()\n{\n\treturn this.tooltip;\n};\n\n__mxOutput.mxCellOverlay = typeof mxCellOverlay !== 'undefined' ? mxCellOverlay : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxOutline\n *\n * Implements an outline (aka overview) for a graph. Set <updateOnPan> to true\n * to enable updates while the source graph is panning.\n * \n * Example:\n * \n * (code)\n * var outline = new mxOutline(graph, div);\n * (end)\n * \n * If an outline is used in an <mxWindow> in IE8 standards mode, the following\n * code makes sure that the shadow filter is not inherited and that any\n * transparent elements in the graph do not show the page background, but the\n * background of the graph container.\n * \n * (code)\n * if (document.documentMode == 8)\n * {\n *   container.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n * }\n * (end)\n * \n * To move the graph to the top, left corner the following code can be used.\n * \n * (code)\n * var scale = graph.view.scale;\n * var bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x / scale, -bounds.y / scale);\n * (end)\n * \n * To toggle the suspended mode, the following can be used.\n * \n * (code)\n * outline.suspended = !outln.suspended;\n * if (!outline.suspended)\n * {\n *   outline.update(true);\n * }\n * (end)\n * \n * Constructor: mxOutline\n *\n * Constructs a new outline for the specified graph inside the given\n * container.\n * \n * Parameters:\n * \n * source - <mxGraph> to create the outline for.\n * container - DOM node that will contain the outline.\n */\nfunction mxOutline(source, container)\n{\n\tthis.source = source;\n\n\tif (container != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\n/**\n * Function: source\n * \n * Reference to the source <mxGraph>.\n */\nmxOutline.prototype.source = null;\n\n/**\n * Function: outline\n * \n * Reference to the <mxGraph> that renders the outline.\n */\nmxOutline.prototype.outline = null;\n\n/**\n * Function: graphRenderHint\n * \n * Renderhint to be used for the outline graph. Default is faster.\n */\nmxOutline.prototype.graphRenderHint = mxConstants.RENDERING_HINT_FASTER;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxOutline.prototype.enabled = true;\n\n/**\n * Variable: showViewport\n * \n * Specifies a viewport rectangle should be shown. Default is true.\n */\nmxOutline.prototype.showViewport = true;\n\n/**\n * Variable: border\n * \n * Border to be added at the bottom and right. Default is 10.\n */\nmxOutline.prototype.border = 10;\n\n/**\n * Variable: enabled\n * \n * Specifies the size of the sizer handler. Default is 8.\n */\nmxOutline.prototype.sizerSize = 8;\n\n/**\n * Variable: labelsVisible\n * \n * Specifies if labels should be visible in the outline. Default is false.\n */\nmxOutline.prototype.labelsVisible = false;\n\n/**\n * Variable: updateOnPan\n * \n * Specifies if <update> should be called for <mxEvent.PAN> in the source\n * graph. Default is false.\n */\nmxOutline.prototype.updateOnPan = false;\n\n/**\n * Variable: sizerImage\n * \n * Optional <mxImage> to be used for the sizer. Default is null.\n */\nmxOutline.prototype.sizerImage = null;\n\n/**\n * Variable: minScale\n * \n * Minimum scale to be used. Default is 0.0001.\n */\nmxOutline.prototype.minScale = 0.0001;\n\n/**\n * Variable: suspended\n * \n * Optional boolean flag to suspend updates. Default is false. This flag will\n * also suspend repaints of the outline. To toggle this switch, use the\n * following code.\n * \n * (code)\n * nav.suspended = !nav.suspended;\n * \n * if (!nav.suspended)\n * {\n *   nav.update(true);\n * }\n * (end)\n */\nmxOutline.prototype.suspended = false;\n\n/**\n * Variable: forceVmlHandles\n * \n * Specifies if VML should be used to render the handles in this control. This\n * is true for IE8 standards mode and false for all other browsers and modes.\n * This is a workaround for rendering issues of HTML elements over elements\n * with filters in IE 8 standards mode.\n */\nmxOutline.prototype.forceVmlHandles = document.documentMode == 8;\n\n/**\n * Function: createGraph\n * \n * Creates the <mxGraph> used in the outline.\n */\nmxOutline.prototype.createGraph = function(container)\n{\n\tvar graph = new mxGraph(container, this.source.getModel(), this.graphRenderHint, this.source.getStylesheet());\n\tgraph.foldingEnabled = false;\n\tgraph.autoScroll = false;\n\t\n\treturn graph;\n};\n\n/**\n * Function: init\n * \n * Initializes the outline inside the given container.\n */\nmxOutline.prototype.init = function(container)\n{\n\tthis.outline = this.createGraph(container);\n\t\n\t// Do not repaint when suspended\n\tvar outlineGraphModelChanged = this.outline.graphModelChanged;\n\tthis.outline.graphModelChanged = mxUtils.bind(this, function(changes)\n\t{\n\t\tif (!this.suspended && this.outline != null)\n\t\t{\n\t\t\toutlineGraphModelChanged.apply(this.outline, arguments);\n\t\t}\n\t});\n\n\t// Enables faster painting in SVG\n\tif (mxClient.IS_SVG)\n\t{\n\t\tvar node = this.outline.getView().getCanvas().parentNode;\n\t\tnode.setAttribute('shape-rendering', 'optimizeSpeed');\n\t\tnode.setAttribute('image-rendering', 'optimizeSpeed');\n\t}\n\t\n\t// Hides cursors and labels\n\tthis.outline.labelsVisible = this.labelsVisible;\n\tthis.outline.setEnabled(false);\n\t\n\tthis.updateHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (!this.suspended && !this.active)\n\t\t{\n\t\t\tthis.update();\n\t\t}\n\t});\n\t\n\t// Updates the scale of the outline after a change of the main graph\n\tthis.source.getModel().addListener(mxEvent.CHANGE, this.updateHandler);\n\tthis.outline.addMouseListener(this);\n\t\n\t// Adds listeners to keep the outline in sync with the source graph\n\tvar view = this.source.getView();\n\tview.addListener(mxEvent.SCALE, this.updateHandler);\n\tview.addListener(mxEvent.TRANSLATE, this.updateHandler);\n\tview.addListener(mxEvent.SCALE_AND_TRANSLATE, this.updateHandler);\n\tview.addListener(mxEvent.DOWN, this.updateHandler);\n\tview.addListener(mxEvent.UP, this.updateHandler);\n\n\t// Updates blue rectangle on scroll\n\tmxEvent.addListener(this.source.container, 'scroll', this.updateHandler);\n\t\n\tthis.panHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.updateOnPan)\n\t\t{\n\t\t\tthis.updateHandler.apply(this, arguments);\n\t\t}\n\t});\n\tthis.source.addListener(mxEvent.PAN, this.panHandler);\n\t\n\t// Refreshes the graph in the outline after a refresh of the main graph\n\tthis.refreshHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.outline.setStylesheet(this.source.getStylesheet());\n\t\tthis.outline.refresh();\n\t});\n\tthis.source.addListener(mxEvent.REFRESH, this.refreshHandler);\n\n\t// Creates the blue rectangle for the viewport\n\tthis.bounds = new mxRectangle(0, 0, 0, 0);\n\tthis.selectionBorder = new mxRectangleShape(this.bounds, null,\n\t\tmxConstants.OUTLINE_COLOR, mxConstants.OUTLINE_STROKEWIDTH);\n\tthis.selectionBorder.dialect = this.outline.dialect;\n\n\tif (this.forceVmlHandles)\n\t{\n\t\tthis.selectionBorder.isHtmlAllowed = function()\n\t\t{\n\t\t\treturn false;\n\t\t};\n\t}\n\t\n\tthis.selectionBorder.init(this.outline.getView().getOverlayPane());\n\n\t// Handles event by catching the initial pointer start and then listening to the\n\t// complete gesture on the event target. This is needed because all the events\n\t// are routed via the initial element even if that element is removed from the\n\t// DOM, which happens when we repaint the selection border and zoom handles.\n\tvar handler = mxUtils.bind(this, function(evt)\n\t{\n\t\tvar t = mxEvent.getSource(evt);\n\t\t\n\t\tvar redirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t});\n\t\t\n\t\tvar redirect2 = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tmxEvent.removeGestureListeners(t, null, redirect, redirect2);\n\t\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(t, null, redirect, redirect2);\n\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t});\n\t\n\tmxEvent.addGestureListeners(this.selectionBorder.node, handler);\n\n\t// Creates a small blue rectangle for sizing (sizer handle)\n\tthis.sizer = this.createSizer();\n\t\n\tif (this.forceVmlHandles)\n\t{\n\t\tthis.sizer.isHtmlAllowed = function()\n\t\t{\n\t\t\treturn false;\n\t\t};\n\t}\n\t\n\tthis.sizer.init(this.outline.getView().getOverlayPane());\n\t\n\tif (this.enabled)\n\t{\n\t\tthis.sizer.node.style.cursor = 'nwse-resize';\n\t}\n\t\n\tmxEvent.addGestureListeners(this.sizer.node, handler);\n\n\tthis.selectionBorder.node.style.display = (this.showViewport) ? '' : 'none';\n\tthis.sizer.node.style.display = this.selectionBorder.node.style.display;\n\tthis.selectionBorder.node.style.cursor = 'move';\n\n\tthis.update(false);\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxOutline.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new enabled state.\n */\nmxOutline.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setZoomEnabled\n * \n * Enables or disables the zoom handling by showing or hiding the respective\n * handle.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new enabled state.\n */\nmxOutline.prototype.setZoomEnabled = function(value)\n{\n\tthis.sizer.node.style.visibility = (value) ? 'visible' : 'hidden';\n};\n\n/**\n * Function: refresh\n * \n * Invokes <update> and revalidate the outline. This method is deprecated.\n */\nmxOutline.prototype.refresh = function()\n{\n\tthis.update(true);\n};\n\n/**\n * Function: createSizer\n * \n * Creates the shape used as the sizer.\n */\nmxOutline.prototype.createSizer = function()\n{\n\tif (this.sizerImage != null)\n\t{\n\t\tvar sizer = new mxImageShape(new mxRectangle(0, 0, this.sizerImage.width, this.sizerImage.height), this.sizerImage.src);\n\t\tsizer.dialect = this.outline.dialect;\n\t\t\n\t\treturn sizer;\n\t}\n\telse\n\t{\n\t\tvar sizer = new mxRectangleShape(new mxRectangle(0, 0, this.sizerSize, this.sizerSize),\n\t\t\tmxConstants.OUTLINE_HANDLE_FILLCOLOR, mxConstants.OUTLINE_HANDLE_STROKECOLOR);\n\t\tsizer.dialect = this.outline.dialect;\n\t\n\t\treturn sizer;\n\t}\n};\n\n/**\n * Function: getSourceContainerSize\n * \n * Returns the size of the source container.\n */\nmxOutline.prototype.getSourceContainerSize = function()\n{\n\treturn new mxRectangle(0, 0, this.source.container.scrollWidth, this.source.container.scrollHeight);\n};\n\n/**\n * Function: getOutlineOffset\n * \n * Returns the offset for drawing the outline graph.\n */\nmxOutline.prototype.getOutlineOffset = function(scale)\n{\n\treturn null;\n};\n\n/**\n * Function: getSourceGraphBounds\n * \n * Returns the graph bound boxing of the source.\n */\nmxOutline.prototype.getSourceGraphBounds = function()\n{\n\treturn this.source.getGraphBounds();\n};\n\n/**\n * Function: update\n * \n * Updates the outline.\n */\nmxOutline.prototype.update = function(revalidate)\n{\n\tif (this.source != null && this.source.container != null &&\n\t\tthis.outline != null && this.outline.container != null)\n\t{\n\t\tvar sourceScale = this.source.view.scale;\n\t\tvar scaledGraphBounds = this.getSourceGraphBounds();\n\t\tvar unscaledGraphBounds = new mxRectangle(scaledGraphBounds.x / sourceScale + this.source.panDx,\n\t\t\t\tscaledGraphBounds.y / sourceScale + this.source.panDy, scaledGraphBounds.width / sourceScale,\n\t\t\t\tscaledGraphBounds.height / sourceScale);\n\n\t\tvar unscaledFinderBounds = new mxRectangle(0, 0,\n\t\t\tthis.source.container.clientWidth / sourceScale,\n\t\t\tthis.source.container.clientHeight / sourceScale);\n\t\t\n\t\tvar union = unscaledGraphBounds.clone();\n\t\tunion.add(unscaledFinderBounds);\n\t\n\t\t// Zooms to the scrollable area if that is bigger than the graph\n\t\tvar size = this.getSourceContainerSize();\n\t\tvar completeWidth = Math.max(size.width / sourceScale, union.width);\n\t\tvar completeHeight = Math.max(size.height / sourceScale, union.height);\n\t\n\t\tvar availableWidth = Math.max(0, this.outline.container.clientWidth - this.border);\n\t\tvar availableHeight = Math.max(0, this.outline.container.clientHeight - this.border);\n\t\t\n\t\tvar outlineScale = Math.min(availableWidth / completeWidth, availableHeight / completeHeight);\n\t\tvar scale = (isNaN(outlineScale)) ? this.minScale : Math.max(this.minScale, outlineScale);\n\n\t\tif (scale > 0)\n\t\t{\n\t\t\tif (this.outline.getView().scale != scale)\n\t\t\t{\n\t\t\t\tthis.outline.getView().scale = scale;\n\t\t\t\trevalidate = true;\n\t\t\t}\n\t\t\n\t\t\tvar navView = this.outline.getView();\n\t\t\t\n\t\t\tif (navView.currentRoot != this.source.getView().currentRoot)\n\t\t\t{\n\t\t\t\tnavView.setCurrentRoot(this.source.getView().currentRoot);\n\t\t\t}\n\n\t\t\tvar t = this.source.view.translate;\n\t\t\tvar tx = t.x + this.source.panDx;\n\t\t\tvar ty = t.y + this.source.panDy;\n\t\t\t\n\t\t\tvar off = this.getOutlineOffset(scale);\n\t\t\t\n\t\t\tif (off != null)\n\t\t\t{\n\t\t\t\ttx += off.x;\n\t\t\t\tty += off.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (unscaledGraphBounds.x < 0)\n\t\t\t{\n\t\t\t\ttx = tx - unscaledGraphBounds.x;\n\t\t\t}\n\t\t\tif (unscaledGraphBounds.y < 0)\n\t\t\t{\n\t\t\t\tty = ty - unscaledGraphBounds.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (navView.translate.x != tx || navView.translate.y != ty)\n\t\t\t{\n\t\t\t\tnavView.translate.x = tx;\n\t\t\t\tnavView.translate.y = ty;\n\t\t\t\trevalidate = true;\n\t\t\t}\n\t\t\n\t\t\t// Prepares local variables for computations\n\t\t\tvar t2 = navView.translate;\n\t\t\tscale = this.source.getView().scale;\n\t\t\tvar scale2 = scale / navView.scale;\n\t\t\tvar scale3 = 1.0 / navView.scale;\n\t\t\tvar container = this.source.container;\n\t\t\t\n\t\t\t// Updates the bounds of the viewrect in the navigation\n\t\t\tthis.bounds = new mxRectangle(\n\t\t\t\t(t2.x - t.x - this.source.panDx) / scale3,\n\t\t\t\t(t2.y - t.y - this.source.panDy) / scale3,\n\t\t\t\t(container.clientWidth / scale2),\n\t\t\t\t(container.clientHeight / scale2));\n\t\t\t\n\t\t\t// Adds the scrollbar offset to the finder\n\t\t\tthis.bounds.x += this.source.container.scrollLeft * navView.scale / scale;\n\t\t\tthis.bounds.y += this.source.container.scrollTop * navView.scale / scale;\n\t\t\t\n\t\t\tvar b = this.selectionBorder.bounds;\n\t\t\t\n\t\t\tif (b.x != this.bounds.x || b.y != this.bounds.y || b.width != this.bounds.width || b.height != this.bounds.height)\n\t\t\t{\n\t\t\t\tthis.selectionBorder.bounds = this.bounds;\n\t\t\t\tthis.selectionBorder.redraw();\n\t\t\t}\n\t\t\n\t\t\t// Updates the bounds of the zoom handle at the bottom right\n\t\t\tvar b = this.sizer.bounds;\n\t\t\tvar b2 = new mxRectangle(this.bounds.x + this.bounds.width - b.width / 2,\n\t\t\t\t\tthis.bounds.y + this.bounds.height - b.height / 2, b.width, b.height);\n\n\t\t\tif (b.x != b2.x || b.y != b2.y || b.width != b2.width || b.height != b2.height)\n\t\t\t{\n\t\t\t\tthis.sizer.bounds = b2;\n\t\t\t\t\n\t\t\t\t// Avoids update of visibility in redraw for VML\n\t\t\t\tif (this.sizer.node.style.visibility != 'hidden')\n\t\t\t\t{\n\t\t\t\t\tthis.sizer.redraw();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (revalidate)\n\t\t\t{\n\t\t\t\tthis.outline.view.revalidate();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by starting a translation or zoom.\n */\nmxOutline.prototype.mouseDown = function(sender, me)\n{\n\tif (this.enabled && this.showViewport)\n\t{\n\t\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.source.tolerance : 0;\n\t\tvar hit = (this.source.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\t\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\t\tthis.zoom = me.isSource(this.sizer) || (hit != null && mxUtils.intersects(shape.bounds, hit));\n\t\tthis.startX = me.getX();\n\t\tthis.startY = me.getY();\n\t\tthis.active = true;\n\n\t\tif (this.source.useScrollbarsForPanning && mxUtils.hasScrollbars(this.source.container))\n\t\t{\n\t\t\tthis.dx0 = this.source.container.scrollLeft;\n\t\t\tthis.dy0 = this.source.container.scrollTop;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dx0 = 0;\n\t\t\tthis.dy0 = 0;\n\t\t}\n\t}\n\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by previewing the viewrect in <graph> and updating the\n * rectangle that represents the viewrect in the outline.\n */\nmxOutline.prototype.mouseMove = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tthis.selectionBorder.node.style.display = (this.showViewport) ? '' : 'none';\n\t\tthis.sizer.node.style.display = this.selectionBorder.node.style.display; \n\n\t\tvar delta = this.getTranslateForEvent(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\tvar bounds = null;\n\t\t\n\t\tif (!this.zoom)\n\t\t{\n\t\t\t// Previews the panning on the source graph\n\t\t\tvar scale = this.outline.getView().scale;\n\t\t\tbounds = new mxRectangle(this.bounds.x + dx,\n\t\t\t\tthis.bounds.y + dy, this.bounds.width, this.bounds.height);\n\t\t\tthis.selectionBorder.bounds = bounds;\n\t\t\tthis.selectionBorder.redraw();\n\t\t\tdx /= scale;\n\t\t\tdx *= this.source.getView().scale;\n\t\t\tdy /= scale;\n\t\t\tdy *= this.source.getView().scale;\n\t\t\tthis.source.panGraph(-dx - this.dx0, -dy - this.dy0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Does *not* preview zooming on the source graph\n\t\t\tvar container = this.source.container;\n\t\t\tvar viewRatio = container.clientWidth / container.clientHeight;\n\t\t\tdy = dx / viewRatio;\n\t\t\tbounds = new mxRectangle(this.bounds.x,\n\t\t\t\tthis.bounds.y,\n\t\t\t\tMath.max(1, this.bounds.width + dx),\n\t\t\t\tMath.max(1, this.bounds.height + dy));\n\t\t\tthis.selectionBorder.bounds = bounds;\n\t\t\tthis.selectionBorder.redraw();\n\t\t}\n\t\t\n\t\t// Updates the zoom handle\n\t\tvar b = this.sizer.bounds;\n\t\tthis.sizer.bounds = new mxRectangle(\n\t\t\tbounds.x + bounds.width - b.width / 2,\n\t\t\tbounds.y + bounds.height - b.height / 2,\n\t\t\tb.width, b.height);\n\t\t\n\t\t// Avoids update of visibility in redraw for VML\n\t\tif (this.sizer.node.style.visibility != 'hidden')\n\t\t{\n\t\t\tthis.sizer.redraw();\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: getTranslateForEvent\n * \n * Gets the translate for the given mouse event. Here is an example to limit\n * the outline to stay within positive coordinates:\n * \n * (code)\n * outline.getTranslateForEvent = function(me)\n * {\n *   var pt = new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n *   \n *   if (!this.zoom)\n *   {\n *     var tr = this.source.view.translate;\n *     pt.x = Math.max(tr.x * this.outline.view.scale, pt.x);\n *     pt.y = Math.max(tr.y * this.outline.view.scale, pt.y);\n *   }\n *   \n *   return pt;\n * };\n * (end)\n */\nmxOutline.prototype.getTranslateForEvent = function(me)\n{\n\treturn new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the translation or zoom to <graph>.\n */\nmxOutline.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tvar delta = this.getTranslateForEvent(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\t\n\t\tif (Math.abs(dx) > 0 || Math.abs(dy) > 0)\n\t\t{\n\t\t\tif (!this.zoom)\n\t\t\t{\n\t\t\t\t// Applies the new translation if the source\n\t\t\t\t// has no scrollbars\n\t\t\t\tif (!this.source.useScrollbarsForPanning ||\n\t\t\t\t\t!mxUtils.hasScrollbars(this.source.container))\n\t\t\t\t{\n\t\t\t\t\tthis.source.panGraph(0, 0);\n\t\t\t\t\tdx /= this.outline.getView().scale;\n\t\t\t\t\tdy /= this.outline.getView().scale;\n\t\t\t\t\tvar t = this.source.getView().translate;\n\t\t\t\t\tthis.source.getView().setTranslate(t.x - dx, t.y - dy);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Applies the new zoom\n\t\t\t\tvar w = this.selectionBorder.bounds.width;\n\t\t\t\tvar scale = this.source.getView().scale;\n\t\t\t\tthis.source.zoomTo(Math.max(this.minScale, scale - (dx * scale) / w), false);\n\t\t\t}\n\n\t\t\tthis.update();\n\t\t\tme.consume();\n\t\t}\n\t\t\t\n\t\t// Resets the state of the handler\n\t\tthis.index = null;\n\t\tthis.active = false;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroy this outline and removes all listeners from <source>.\n */\nmxOutline.prototype.destroy = function()\n{\n\tif (this.source != null)\n\t{\n\t\tthis.source.removeListener(this.panHandler);\n\t\tthis.source.removeListener(this.refreshHandler);\n\t\tthis.source.getModel().removeListener(this.updateHandler);\n\t\tthis.source.getView().removeListener(this.updateHandler);\n\t\tmxEvent.removeListener(this.source.container, 'scroll', this.updateHandler);\n\t\tthis.source = null;\n\t}\n\t\n\tif (this.outline != null)\n\t{\n\t\tthis.outline.removeMouseListener(this);\n\t\tthis.outline.destroy();\n\t\tthis.outline = null;\n\t}\n\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.destroy();\n\t\tthis.selectionBorder = null;\n\t}\n\t\n\tif (this.sizer != null)\n\t{\n\t\tthis.sizer.destroy();\n\t\tthis.sizer = null;\n\t}\n};\n\n__mxOutput.mxOutline = typeof mxOutline !== 'undefined' ? mxOutline : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMultiplicity\n * \n * Defines invalid connections along with the error messages that they produce.\n * To add or remove rules on a graph, you must add/remove instances of this\n * class to <mxGraph.multiplicities>.\n * \n * Example:\n * \n * (code)\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only circle targets allowed'));\n * (end)\n * \n * Defines a rule where each rectangle must be connected to no more than 2\n * circles and no other types of targets are allowed.\n * \n * Constructor: mxMultiplicity\n * \n * Instantiate class mxMultiplicity in order to describe allowed\n * connections in a graph. Not all constraints can be enforced while\n * editing, some must be checked at validation time. The <countError> and\n * <typeError> are treated as resource keys in <mxResources>.\n * \n * Parameters:\n * \n * source - Boolean indicating if this rule applies to the source or target\n * terminal.\n * type - Type of the source or target terminal that this rule applies to.\n * See <type> for more information.\n * attr - Optional attribute name to match the source or target terminal.\n * value - Optional attribute value to match the source or target terminal.\n * min - Minimum number of edges for this rule. Default is 1.\n * max - Maximum number of edges for this rule. n means infinite. Default\n * is n.\n * validNeighbors - Array of types of the opposite terminal for which this\n * rule applies.\n * countError - Error to be displayed for invalid number of edges.\n * typeError - Error to be displayed for invalid opposite terminals.\n * validNeighborsAllowed - Optional boolean indicating if the array of\n * opposite types should be valid or invalid.\n */\nfunction mxMultiplicity(source, type, attr, value, min, max,\n\tvalidNeighbors, countError, typeError, validNeighborsAllowed)\n{\n\tthis.source = source;\n\tthis.type = type;\n\tthis.attr = attr;\n\tthis.value = value;\n\tthis.min = (min != null) ? min : 0;\n\tthis.max = (max != null) ? max : 'n';\n\tthis.validNeighbors = validNeighbors;\n\tthis.countError = mxResources.get(countError) || countError;\n\tthis.typeError = mxResources.get(typeError) || typeError;\n\tthis.validNeighborsAllowed = (validNeighborsAllowed != null) ?\n\t\tvalidNeighborsAllowed : true;\n};\n\n/**\n * Variable: type\n * \n * Defines the type of the source or target terminal. The type is a string\n * passed to <mxUtils.isNode> together with the source or target vertex\n * value as the first argument.\n */\nmxMultiplicity.prototype.type = null;\n\n/**\n * Variable: attr\n * \n * Optional string that specifies the attributename to be passed to\n * <mxUtils.isNode> to check if the rule applies to a cell.\n */\nmxMultiplicity.prototype.attr = null;\n\n/**\n * Variable: value\n * \n * Optional string that specifies the value of the attribute to be passed\n * to <mxUtils.isNode> to check if the rule applies to a cell.\n */\nmxMultiplicity.prototype.value = null;\n\n/**\n * Variable: source\n * \n * Boolean that specifies if the rule is applied to the source or target\n * terminal of an edge.\n */\nmxMultiplicity.prototype.source = null;\n\n/**\n * Variable: min\n * \n * Defines the minimum number of connections for which this rule applies.\n * Default is 0.\n */\nmxMultiplicity.prototype.min = null;\n\n/**\n * Variable: max\n * \n * Defines the maximum number of connections for which this rule applies.\n * A value of 'n' means unlimited times. Default is 'n'. \n */\nmxMultiplicity.prototype.max = null;\n\n/**\n * Variable: validNeighbors\n * \n * Holds an array of strings that specify the type of neighbor for which\n * this rule applies. The strings are used in <mxCell.is> on the opposite\n * terminal to check if the rule applies to the connection.\n */\nmxMultiplicity.prototype.validNeighbors = null;\n\n/**\n * Variable: validNeighborsAllowed\n * \n * Boolean indicating if the list of validNeighbors are those that are allowed\n * for this rule or those that are not allowed for this rule.\n */\nmxMultiplicity.prototype.validNeighborsAllowed = true;\n\n/**\n * Variable: countError\n * \n * Holds the localized error message to be displayed if the number of\n * connections for which the rule applies is smaller than <min> or greater\n * than <max>.\n */\nmxMultiplicity.prototype.countError = null;\n\n/**\n * Variable: typeError\n * \n * Holds the localized error message to be displayed if the type of the\n * neighbor for a connection does not match the rule.\n */\nmxMultiplicity.prototype.typeError = null;\n\n/**\n * Function: check\n * \n * Checks the multiplicity for the given arguments and returns the error\n * for the given connection or null if the multiplicity does not apply.\n *  \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph> instance.\n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * sourceOut - Number of outgoing edges from the source terminal.\n * targetIn - Number of incoming edges for the target terminal.\n */\nmxMultiplicity.prototype.check = function(graph, edge, source, target, sourceOut, targetIn)\n{\n\tvar error = '';\n\n\tif ((this.source && this.checkTerminal(graph, source, edge)) ||\n\t\t(!this.source && this.checkTerminal(graph, target, edge)))\n\t{\n\t\tif (this.countError != null && \n\t\t\t((this.source && (this.max == 0 || (sourceOut >= this.max))) ||\n\t\t\t(!this.source && (this.max == 0 || (targetIn >= this.max)))))\n\t\t{\n\t\t\terror += this.countError + '\\n';\n\t\t}\n\n\t\tif (this.validNeighbors != null && this.typeError != null && this.validNeighbors.length > 0)\n\t\t{\n\t\t\tvar isValid = this.checkNeighbors(graph, edge, source, target);\n\n\t\t\tif (!isValid)\n\t\t\t{\n\t\t\t\terror += this.typeError + '\\n';\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn (error.length > 0) ? error : null;\n};\n\n/**\n * Function: checkNeighbors\n * \n * Checks if there are any valid neighbours in <validNeighbors>. This is only\n * called if <validNeighbors> is a non-empty array.\n */\nmxMultiplicity.prototype.checkNeighbors = function(graph, edge, source, target)\n{\n\tvar sourceValue = graph.model.getValue(source);\n\tvar targetValue = graph.model.getValue(target);\n\tvar isValid = !this.validNeighborsAllowed;\n\tvar valid = this.validNeighbors;\n\t\n\tfor (var j = 0; j < valid.length; j++)\n\t{\n\t\tif (this.source &&\n\t\t\tthis.checkType(graph, targetValue, valid[j]))\n\t\t{\n\t\t\tisValid = this.validNeighborsAllowed;\n\t\t\tbreak;\n\t\t}\n\t\telse if (!this.source && \n\t\t\tthis.checkType(graph, sourceValue, valid[j]))\n\t\t{\n\t\t\tisValid = this.validNeighborsAllowed;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn isValid;\n};\n\n/**\n * Function: checkTerminal\n * \n * Checks the given terminal cell and returns true if this rule applies. The\n * given cell is the source or target of the given edge, depending on\n * <source>. This implementation uses <checkType> on the terminal's value.\n */\nmxMultiplicity.prototype.checkTerminal = function(graph, terminal, edge)\n{\n\tvar value = graph.model.getValue(terminal);\n\t\n\treturn this.checkType(graph, value, this.type, this.attr, this.value);\n};\n\n/**\n * Function: checkType\n * \n * Checks the type of the given value.\n */\nmxMultiplicity.prototype.checkType = function(graph, value, type, attr, attrValue)\n{\n\tif (value != null)\n\t{\n\t\tif (!isNaN(value.nodeType)) // Checks if value is a DOM node\n\t\t{\n\t\t\treturn mxUtils.isNode(value, type, attr, attrValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn value == type;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n__mxOutput.mxMultiplicity = typeof mxMultiplicity !== 'undefined' ? mxMultiplicity : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLayoutManager\n * \n * Implements a layout manager that runs a given layout after any changes to the graph:\n * \n * Example:\n * \n * (code)\n * var layoutMgr = new mxLayoutManager(graph);\n * layoutMgr.getLayout = function(cell, eventName)\n * {\n *   return layout;\n * };\n * (end)\n * \n * See <getLayout> for a description of the possible eventNames.\n * \n * Event: mxEvent.LAYOUT_CELLS\n * \n * Fires between begin- and endUpdate after all cells have been layouted in\n * <layoutCells>. The <code>cells</code> property contains all cells that have\n * been passed to <layoutCells>.\n * \n * Constructor: mxLayoutManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxLayoutManager(graph)\n{\n\t// Executes the layout before the changes are dispatched\n\tthis.undoHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.beforeUndo(evt.getProperty('edit'));\n\t\t}\n\t});\n\t\n\t// Notifies the layout of a move operation inside a parent\n\tthis.moveHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.cellsMoved(evt.getProperty('cells'), evt.getProperty('event'));\n\t\t}\n\t});\n\t\t\n\t// Notifies the layout of a move operation inside a parent\n\tthis.resizeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.cellsResized(evt.getProperty('cells'), evt.getProperty('bounds'),\n\t\t\t\tevt.getProperty('previous'));\n\t\t}\n\t});\n\t\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxLayoutManager.prototype = new mxEventSource();\nmxLayoutManager.prototype.constructor = mxLayoutManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxLayoutManager.prototype.graph = null;\n\n/**\n * Variable: bubbling\n * \n * Specifies if the layout should bubble along\n * the cell hierarchy. Default is true.\n */\nmxLayoutManager.prototype.bubbling = true;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxLayoutManager.prototype.enabled = true;\n\n/**\n * Variable: undoHandler\n * \n * Holds the function that handles the endUpdate event.\n */\nmxLayoutManager.prototype.undoHandler = null;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxLayoutManager.prototype.moveHandler = null;\n\n/**\n * Variable: resizeHandler\n * \n * Holds the function that handles the resize event.\n */\nmxLayoutManager.prototype.resizeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxLayoutManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxLayoutManager.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isBubbling\n * \n * Returns true if a layout should bubble, that is, if the parent layout\n * should be executed whenever a cell layout (layout of the children of\n * a cell) has been executed. This implementation returns <bubbling>.\n */\nmxLayoutManager.prototype.isBubbling = function()\n{\n\treturn this.bubbling;\n};\n\n/**\n * Function: setBubbling\n * \n * Sets <bubbling>.\n */\nmxLayoutManager.prototype.setBubbling = function(value)\n{\n\tthis.bubbling = value;\n};\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this layout operates on.\n */\nmxLayoutManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the layouts operate on.\n */\nmxLayoutManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\t\t\n\t\tmodel.removeListener(this.undoHandler);\n\t\tthis.graph.removeListener(this.moveHandler);\n\t\tthis.graph.removeListener(this.resizeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\t\n\t\tmodel.addListener(mxEvent.BEFORE_UNDO, this.undoHandler);\n\t\tthis.graph.addListener(mxEvent.MOVE_CELLS, this.moveHandler);\n\t\tthis.graph.addListener(mxEvent.RESIZE_CELLS, this.resizeHandler);\n\t}\n};\n\n/**\n * Function: hasLayout\n * \n * Returns true if the given cell has a layout. This implementation invokes\n * <getLayout> with <mxEvent.LAYOUT_CELLS> as the eventName. Override this\n * if creating layouts in <getLayout> is expensive and return true if\n * <getLayout> will return a layout for the given cell for\n * <mxEvent.BEGIN_UPDATE> or <mxEvent.END_UPDATE>.\n */\nmxLayoutManager.prototype.hasLayout = function(cell)\n{\n\treturn this.getLayout(cell, mxEvent.LAYOUT_CELLS);\n};\n\n/**\n * Function: getLayout\n * \n * Returns the layout for the given cell and eventName. Possible\n * event names are <mxEvent.MOVE_CELLS> and <mxEvent.RESIZE_CELLS>\n * when cells are moved or resized and <mxEvent.BEGIN_UPDATE> or\n * <mxEvent.END_UPDATE> for the bottom up and top down phases after\n * changes to the graph model. <mxEvent.LAYOUT_CELLS> is used to\n * check if a layout exists for the given cell. This is called\n * from <hasLayout>.\n */\nmxLayoutManager.prototype.getLayout = function(cell, eventName)\n{\n\treturn null;\n};\n\n/**\n * Function: beforeUndo\n * \n * Called from <undoHandler>.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.beforeUndo = function(undoableEdit)\n{\n\tthis.executeLayoutForCells(this.getCellsForChanges(undoableEdit.changes));\n};\n\n/**\n * Function: cellsMoved\n * \n * Called from <moveHandler>.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.cellsMoved = function(cells, evt)\n{\n\tif (cells != null && evt != null)\n\t{\n\t\tvar point = mxUtils.convertPoint(this.getGraph().container,\n\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar layout = this.getLayout(model.getParent(cells[i]), mxEvent.MOVE_CELLS);\n\n\t\t\tif (layout != null)\n\t\t\t{\n\t\t\t\tlayout.moveCell(cells[i], point.x, point.y);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: cellsResized\n * \n * Called from <resizeHandler>.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been resized.\n * bounds - <mxRectangle> taht represents the new bounds.\n */\nmxLayoutManager.prototype.cellsResized = function(cells, bounds, prev)\n{\n\tif (cells != null && bounds != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar layout = this.getLayout(model.getParent(cells[i]), mxEvent.RESIZE_CELLS);\n\n\t\t\tif (layout != null)\n\t\t\t{\n\t\t\t\tlayout.resizeCell(cells[i], bounds[i], prev[i]);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getCellsForChanges\n * \n * Returns the cells for which a layout should be executed.\n */\nmxLayoutManager.prototype.getCellsForChanges = function(changes)\n{\n\tvar result = [];\n\t\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\t\t\n\t\tif (change instanceof mxRootChange)\n\t\t{\n\t\t\treturn [];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = result.concat(this.getCellsForChange(change));\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsForChange\n * \n * Executes all layouts which have been scheduled during the\n * changes.\n */\nmxLayoutManager.prototype.getCellsForChange = function(change)\n{\n\tif (change instanceof mxChildChange)\n\t{\n\t\treturn this.addCellsWithLayout(change.child,\n\t\t\tthis.addCellsWithLayout(change.previous));\n\t}\n\telse if (change instanceof mxTerminalChange ||\n\t\tchange instanceof mxGeometryChange)\n\t{\n\t\treturn this.addCellsWithLayout(change.cell);\n\t}\n\telse if (change instanceof mxVisibleChange ||\n\t\tchange instanceof mxStyleChange)\n\t{\n\t\treturn this.addCellsWithLayout(change.cell);\n\t}\n\t\n\treturn [];\n};\n\n/**\n * Function: addCellsWithLayout\n * \n * Adds all ancestors of the given cell that have a layout.\n */\nmxLayoutManager.prototype.addCellsWithLayout = function(cell, result)\n{\n\treturn this.addDescendantsWithLayout(cell,\n\t\tthis.addAncestorsWithLayout(cell, result));\n};\n\n/**\n * Function: addAncestorsWithLayout\n * \n * Adds all ancestors of the given cell that have a layout.\n */\nmxLayoutManager.prototype.addAncestorsWithLayout = function(cell, result)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (cell != null)\n\t{\n\t\tvar layout = this.hasLayout(cell);\n\t\t\n\t\tif (layout != null)\n\t\t{\n\t\t\tresult.push(cell);\n\t\t}\n\t\t\n\t\tif (this.isBubbling())\n\t\t{\n\t\t\tvar model = this.getGraph().getModel();\n\t\t\tthis.addAncestorsWithLayout(\n\t\t\t\tmodel.getParent(cell), result);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: addDescendantsWithLayout\n * \n * Adds all descendants of the given cell that have a layout.\n */\nmxLayoutManager.prototype.addDescendantsWithLayout = function(cell, result)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (cell != null && this.hasLayout(cell))\n\t{\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tfor (var i = 0; i < model.getChildCount(cell); i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\tif (this.hasLayout(child))\n\t\t\t{\n\t\t\t\tresult.push(child);\n\t\t\t\tthis.addDescendantsWithLayout(child, result);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: executeLayoutForCells\n * \n * Executes all layouts for the given cells in two phases: In the first phase\n * layouts for child cells are executed before layouts for parent cells with\n * <mxEvent.BEGIN_UPDATE>, in the second phase layouts for parent cells are\n * executed before layouts for child cells with <mxEvent.END_UPDATE>.\n */\nmxLayoutManager.prototype.executeLayoutForCells = function(cells)\n{\n\tvar sorted = mxUtils.sortCells(cells, false);\n\tthis.layoutCells(sorted, true);\n\tthis.layoutCells(sorted.reverse(), false);\n};\n\n/**\n * Function: layoutCells\n * \n * Executes all layouts which have been scheduled during the changes.\n */\nmxLayoutManager.prototype.layoutCells = function(cells, bubble)\n{\n\tif (cells.length > 0)\n\t{\n\t\t// Invokes the layouts while removing duplicates\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tmodel.beginUpdate();\n\t\ttry \n\t\t{\n\t\t\tvar last = null;\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] != model.getRoot() && cells[i] != last)\n\t\t\t\t{\n\t\t\t\t\tthis.executeLayout(cells[i], bubble);\n\t\t\t\t\tlast = cells[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.LAYOUT_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: executeLayout\n * \n * Executes the given layout on the given parent.\n */\nmxLayoutManager.prototype.executeLayout = function(cell, bubble)\n{\n\tvar layout = this.getLayout(cell, (bubble) ?\n\t\tmxEvent.BEGIN_UPDATE : mxEvent.END_UPDATE);\n\n\tif (layout != null)\n\t{\n\t\tlayout.execute(cell);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxLayoutManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxLayoutManager = typeof mxLayoutManager !== 'undefined' ? mxLayoutManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneManager\n * \n * Manager for swimlanes and nested swimlanes that sets the size of newly added\n * swimlanes to that of their siblings, and propagates changes to the size of a\n * swimlane to its siblings, if <siblings> is true, and its ancestors, if\n * <bubbling> is true.\n * \n * Constructor: mxSwimlaneManager\n *\n * Constructs a new swimlane manager for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxSwimlaneManager(graph, horizontal, addEnabled, resizeEnabled)\n{\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.addEnabled = (addEnabled != null) ? addEnabled : true;\n\tthis.resizeEnabled = (resizeEnabled != null) ? resizeEnabled : true;\n\n\tthis.addHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isAddEnabled())\n\t\t{\n\t\t\tthis.cellsAdded(evt.getProperty('cells'));\n\t\t}\n\t});\n\t\n\tthis.resizeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isResizeEnabled())\n\t\t{\n\t\t\tthis.cellsResized(evt.getProperty('cells'));\n\t\t}\n\t});\n\t\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxSwimlaneManager.prototype = new mxEventSource();\nmxSwimlaneManager.prototype.constructor = mxSwimlaneManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxSwimlaneManager.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxSwimlaneManager.prototype.enabled = true;\n\n/**\n * Variable: horizontal\n * \n * Specifies the orientation of the swimlanes. Default is true.\n */\nmxSwimlaneManager.prototype.horizontal = true;\n\n/**\n * Variable: addEnabled\n * \n * Specifies if newly added cells should be resized to match the size of their\n * existing siblings. Default is true.\n */\nmxSwimlaneManager.prototype.addEnabled = true;\n\n/**\n * Variable: resizeEnabled\n * \n * Specifies if resizing of swimlanes should be handled. Default is true.\n */\nmxSwimlaneManager.prototype.resizeEnabled = true;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.addHandler = null;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.resizeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxSwimlaneManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxSwimlaneManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxSwimlaneManager.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: setHorizontal\n * \n * Sets <horizontal>.\n */\nmxSwimlaneManager.prototype.setHorizontal = function(value)\n{\n\tthis.horizontal = value;\n};\n\n/**\n * Function: isAddEnabled\n * \n * Returns <addEnabled>.\n */\nmxSwimlaneManager.prototype.isAddEnabled = function()\n{\n\treturn this.addEnabled;\n};\n\n/**\n * Function: setAddEnabled\n * \n * Sets <addEnabled>.\n */\nmxSwimlaneManager.prototype.setAddEnabled = function(value)\n{\n\tthis.addEnabled = value;\n};\n\n/**\n * Function: isResizeEnabled\n * \n * Returns <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.isResizeEnabled = function()\n{\n\treturn this.resizeEnabled;\n};\n\n/**\n * Function: setResizeEnabled\n * \n * Sets <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.setResizeEnabled = function(value)\n{\n\tthis.resizeEnabled = value;\n};\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this manager operates on.\n */\nmxSwimlaneManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the manager operates on.\n */\nmxSwimlaneManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.removeListener(this.addHandler);\n\t\tthis.graph.removeListener(this.resizeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.addListener(mxEvent.ADD_CELLS, this.addHandler);\n\t\tthis.graph.addListener(mxEvent.CELLS_RESIZED, this.resizeHandler);\n\t}\n};\n\n/**\n * Function: isSwimlaneIgnored\n * \n * Returns true if the given swimlane should be ignored.\n */\nmxSwimlaneManager.prototype.isSwimlaneIgnored = function(swimlane)\n{\n\treturn !this.getGraph().isSwimlane(swimlane);\n};\n\n/**\n * Function: isCellHorizontal\n * \n * Returns true if the given cell is horizontal. If the given cell is not a\n * swimlane, then the global orientation is returned.\n */\nmxSwimlaneManager.prototype.isCellHorizontal = function(cell)\n{\n\tif (this.graph.isSwimlane(cell))\n\t{\n\t\tvar style = this.graph.getCellStyle(cell);\n\t\t\n\t\treturn mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n\t}\n\t\n\treturn !this.isHorizontal();\n};\n\n/**\n * Function: cellsAdded\n * \n * Called if any cells have been added.\n * \n * Parameters:\n * \n * cell - Array of <mxCells> that have been added.\n */\nmxSwimlaneManager.prototype.cellsAdded = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.swimlaneAdded(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swimlaneAdded\n * \n * Updates the size of the given swimlane to match that of any existing\n * siblings swimlanes.\n * \n * Parameters:\n * \n * swimlane - <mxCell> that represents the new swimlane.\n */\nmxSwimlaneManager.prototype.swimlaneAdded = function(swimlane)\n{\n\tvar model = this.getGraph().getModel();\n\tvar parent = model.getParent(swimlane);\n\tvar childCount = model.getChildCount(parent);\n\tvar geo = null;\n\t\n\t// Finds the first valid sibling swimlane as reference\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (child != swimlane && !this.isSwimlaneIgnored(child))\n\t\t{\n\t\t\tgeo = model.getGeometry(child);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Applies the size of the refernece to the newly added swimlane\n\tif (geo != null)\n\t{\n\t\tvar parentHorizontal = (parent != null) ? this.isCellHorizontal(parent) : this.horizontal;\n\t\tthis.resizeSwimlane(swimlane, geo.width, geo.height, parentHorizontal);\n\t}\n};\n\n/**\n * Function: cellsResized\n * \n * Called if any cells have been resizes. Calls <swimlaneResized> for all\n * swimlanes where <isSwimlaneIgnored> returns false.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose size was changed.\n */\nmxSwimlaneManager.prototype.cellsResized = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Finds the top-level swimlanes and adds offsets\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = model.getGeometry(cells[i]);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar size = new mxRectangle(0, 0, geo.width, geo.height);\n\t\t\t\t\t\tvar top = cells[i];\n\t\t\t\t\t\tvar current = top;\n\t\t\t\t\t\t\n\t\t\t\t\t\twhile (current != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttop = current;\n\t\t\t\t\t\t\tcurrent = model.getParent(current);\n\t\t\t\t\t\t\tvar tmp = (this.graph.isSwimlane(current)) ?\n\t\t\t\t\t\t\t\t\tthis.graph.getStartSize(current) :\n\t\t\t\t\t\t\t\t\tnew mxRectangle();\n\t\t\t\t\t\t\tsize.width += tmp.width;\n\t\t\t\t\t\t\tsize.height += tmp.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar parentHorizontal = (current != null) ? this.isCellHorizontal(current) : this.horizontal;\n\t\t\t\t\t\tthis.resizeSwimlane(top, size.width, size.height, parentHorizontal);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resizeSwimlane\n * \n * Called from <cellsResized> for all swimlanes that are not ignored to update\n * the size of the siblings and the size of the parent swimlanes, recursively,\n * if <bubbling> is true.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose size has changed.\n */\nmxSwimlaneManager.prototype.resizeSwimlane = function(swimlane, w, h, parentHorizontal)\n{\n\tvar model = this.getGraph().getModel();\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar horizontal = this.isCellHorizontal(swimlane);\n\t\t\n\t\tif (!this.isSwimlaneIgnored(swimlane))\n\t\t{\n\t\t\tvar geo = model.getGeometry(swimlane);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tif ((parentHorizontal && geo.height != h) || (!parentHorizontal && geo.width != w))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tif (parentHorizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.height = h;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.width = w;\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel.setGeometry(swimlane, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar tmp = (this.graph.isSwimlane(swimlane)) ?\n\t\t\t\tthis.graph.getStartSize(swimlane) :\n\t\t\t\tnew mxRectangle();\n\t\tw -= tmp.width;\n\t\th -= tmp.height;\n\t\t\n\t\tvar childCount = model.getChildCount(swimlane);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(swimlane, i);\n\t\t\tthis.resizeSwimlane(child, w, h, horizontal);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxSwimlaneManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxSwimlaneManager = typeof mxSwimlaneManager !== 'undefined' ? mxSwimlaneManager : undefined;\n\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxTemporaryCellStates\n * \n * Creates a temporary set of cell states.\n */\nfunction mxTemporaryCellStates(view, scale, cells, isCellVisibleFn, getLinkForCellState)\n{\n\tscale = (scale != null) ? scale : 1;\n\tthis.view = view;\n\t\n\t// Stores the previous state\n\tthis.oldValidateCellState = view.validateCellState;\n\tthis.oldBounds = view.getGraphBounds();\n\tthis.oldStates = view.getStates();\n\tthis.oldScale = view.getScale();\n\tthis.oldDoRedrawShape = view.graph.cellRenderer.doRedrawShape;\n\n\tvar self = this;\n\n\t// Overrides doRedrawShape and paint shape to add links on shapes\n\tif (getLinkForCellState != null)\n\t{\n\t\tview.graph.cellRenderer.doRedrawShape = function(state)\n\t\t{\n\t\t\tvar oldPaint = state.shape.paint;\n\t\t\t\n\t\t\tstate.shape.paint = function(c)\n\t\t\t{\n\t\t\t\tvar link = getLinkForCellState(state);\n\t\t\t\t\n\t\t\t\tif (link != null)\n\t\t\t\t{\n\t\t\t\t\tc.setLink(link);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\toldPaint.apply(this, arguments);\n\t\t\t\t\n\t\t\t\tif (link != null)\n\t\t\t\t{\n\t\t\t\t\tc.setLink(null);\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tself.oldDoRedrawShape.apply(view.graph.cellRenderer, arguments);\n\t\t\tstate.shape.paint = oldPaint;\n\t\t};\n\t}\n\n\t// Overrides validateCellState to ignore invisible cells\n\tview.validateCellState = function(cell, resurse)\n\t{\n\t\tif (cell == null || isCellVisibleFn == null || isCellVisibleFn(cell))\n\t\t{\n\t\t\treturn self.oldValidateCellState.apply(view, arguments);\n\t\t}\n\t\t\n\t\treturn null;\n\t};\n\t\n\t// Creates space for new states\n\tview.setStates(new mxDictionary());\n\tview.setScale(scale);\n\t\n\tif (cells != null)\n\t{\n\t\tview.resetValidationState();\n\t\tvar bbox = null;\n\n\t\t// Validates the vertices and edges without adding them to\n\t\t// the model so that the original cells are not modified\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar bounds = view.getBoundingBox(view.validateCellState(view.validateCell(cells[i])));\n\t\t\t\n\t\t\tif (bbox == null)\n\t\t\t{\n\t\t\t\tbbox = bounds;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox.add(bounds);\n\t\t\t}\n\t\t}\n\n\t\tview.setGraphBounds(bbox || new mxRectangle());\n\t}\n};\n\n/**\n * Variable: view\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.view = null;\n\n/**\n * Variable: oldStates\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldStates = null;\n\n/**\n * Variable: oldBounds\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldBounds = null;\n\n/**\n * Variable: oldScale\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldScale = null;\n\n/**\n * Function: destroy\n * \n * Returns the top, left corner as a new <mxPoint>.\n */\nmxTemporaryCellStates.prototype.destroy = function()\n{\n\tthis.view.setScale(this.oldScale);\n\tthis.view.setStates(this.oldStates);\n\tthis.view.setGraphBounds(this.oldBounds);\n\tthis.view.validateCellState = this.oldValidateCellState;\n\tthis.view.graph.cellRenderer.doRedrawShape = this.oldDoRedrawShape;\n};\n\n__mxOutput.mxTemporaryCellStates = typeof mxTemporaryCellStates !== 'undefined' ? mxTemporaryCellStates : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxCellStatePreview\n * \n * Implements a live preview for moving cells.\n * \n * Constructor: mxCellStatePreview\n * \n * Constructs a move preview for the given graph.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellStatePreview(graph)\n{\n\tthis.deltas = new mxDictionary();\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.graph = null;\n\n/**\n * Variable: deltas\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.deltas = null;\n\n/**\n * Variable: count\n * \n * Contains the number of entries in the map.\n */\nmxCellStatePreview.prototype.count = 0;\n\n/**\n * Function: isEmpty\n * \n * Returns true if this contains no entries.\n */\nmxCellStatePreview.prototype.isEmpty = function()\n{\n\treturn this.count == 0;\n};\n\n/**\n * Function: moveState\n */\nmxCellStatePreview.prototype.moveState = function(state, dx, dy, add, includeEdges)\n{\n\tadd = (add != null) ? add : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tvar delta = this.deltas.get(state.cell);\n\n\tif (delta == null)\n\t{\n\t\t// Note: Deltas stores the point and the state since the key is a string.\n\t\tdelta = {point: new mxPoint(dx, dy), state: state};\n\t\tthis.deltas.put(state.cell, delta);\n\t\tthis.count++;\n\t}\n\telse if (add)\n\t{\n\t\tdelta.point.x += dx;\n\t\tdelta.point.y += dy;\n\t}\n\telse\n\t{\n\t\tdelta.point.x = dx;\n\t\tdelta.point.y = dy;\n\t}\n\t\n\tif (includeEdges)\n\t{\n\t\tthis.addEdges(state);\n\t}\n\t\n\treturn delta.point;\n};\n\n/**\n * Function: show\n */\nmxCellStatePreview.prototype.show = function(visitor)\n{\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.translateState(delta.state, delta.point.x, delta.point.y);\n\t}));\n\t\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.revalidateState(delta.state, delta.point.x, delta.point.y, visitor);\n\t}));\n};\n\n/**\n * Function: translateState\n */\nmxCellStatePreview.prototype.translateState = function(state, dx, dy)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tif (model.isVertex(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t\tvar geo = model.getGeometry(state.cell);\n\t\t\t\n\t\t\t// Moves selection cells and non-relative vertices in\n\t\t\t// the first phase so that edge terminal points will\n\t\t\t// be updated in the second phase\n\t\t\tif ((dx != 0 || dy != 0) && geo != null && (!geo.relative || this.deltas.get(state.cell) != null))\n\t\t\t{\n\t\t\t\tstate.x += dx;\n\t\t\t\tstate.y += dy;\n\t\t\t}\n\t\t}\n\t    \n\t    var childCount = model.getChildCount(state.cell);\n\t    \n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.translateState(state.view.getState(model.getChildAt(state.cell, i)), dx, dy);\n\t    }\n\t}\n};\n\n/**\n * Function: revalidateState\n */\nmxCellStatePreview.prototype.revalidateState = function(state, dx, dy, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\t// Updates the edge terminal points and restores the\n\t\t// (relative) positions of any (relative) children\n\t\tif (model.isEdge(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t}\n\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\n\t\tvar pState = state.view.getState(model.getParent(state.cell));\n\t\t\n\t\t// Moves selection vertices which are relative\n\t\tif ((dx != 0 || dy != 0) && geo != null && geo.relative &&\n\t\t\tmodel.isVertex(state.cell) && (pState == null ||\n\t\t\tmodel.isVertex(pState.cell) || this.deltas.get(state.cell) != null))\n\t\t{\n\t\t\tstate.x += dx;\n\t\t\tstate.y += dy;\n\t\t}\n\t\t\n\t\tthis.graph.cellRenderer.redraw(state);\n\t\n\t\t// Invokes the visitor on the given state\n\t\tif (visitor != null)\n\t\t{\n\t\t\tvisitor(state);\n\t\t}\n\t\t\t\t\t\t\n\t    var childCount = model.getChildCount(state.cell);\n\t    \n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.revalidateState(this.graph.view.getState(model.getChildAt(state.cell, i)), dx, dy, visitor);\n\t    }\n\t}\n};\n\n/**\n * Function: addEdges\n */\nmxCellStatePreview.prototype.addEdges = function(state)\n{\n\tvar model = this.graph.getModel();\n\tvar edgeCount = model.getEdgeCount(state.cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar s = state.view.getState(model.getEdgeAt(state.cell, i));\n\n\t\tif (s != null)\n\t\t{\n\t\t\tthis.moveState(s, 0, 0);\n\t\t}\n\t}\n};\n\n__mxOutput.mxCellStatePreview = typeof mxCellStatePreview !== 'undefined' ? mxCellStatePreview : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConnectionConstraint\n * \n * Defines an object that contains the constraints about how to connect one\n * side of an edge to its terminal.\n * \n * Constructor: mxConnectionConstraint\n * \n * Constructs a new connection constraint for the given point and boolean\n * arguments.\n * \n * Parameters:\n * \n * point - Optional <mxPoint> that specifies the fixed location of the point\n * in relative coordinates. Default is null.\n * perimeter - Optional boolean that specifies if the fixed point should be\n * projected onto the perimeter of the terminal. Default is true.\n */\nfunction mxConnectionConstraint(point, perimeter, name, dx, dy)\n{\n\tthis.point = point;\n\tthis.perimeter = (perimeter != null) ? perimeter : true;\n\tthis.name = name;\n\tthis.dx = dx? dx : 0;\n\tthis.dy = dy? dy : 0;\n};\n\n/**\n * Variable: point\n * \n * <mxPoint> that specifies the fixed location of the connection point.\n */\nmxConnectionConstraint.prototype.point = null;\n\n/**\n * Variable: perimeter\n * \n * Boolean that specifies if the point should be projected onto the perimeter\n * of the terminal.\n */\nmxConnectionConstraint.prototype.perimeter = null;\n\n/**\n * Variable: name\n * \n * Optional string that specifies the name of the constraint.\n */\nmxConnectionConstraint.prototype.name = null;\n\n/**\n * Variable: dx\n * \n * Optional float that specifies the horizontal offset of the constraint.\n */\nmxConnectionConstraint.prototype.dx = null;\n\n/**\n * Variable: dy\n * \n * Optional float that specifies the vertical offset of the constraint.\n */\nmxConnectionConstraint.prototype.dy = null;\n\n\n__mxOutput.mxConnectionConstraint = typeof mxConnectionConstraint !== 'undefined' ? mxConnectionConstraint : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHandler\n * \n * Graph event handler that handles selection. Individual cells are handled\n * separately using <mxVertexHandler> or one of the edge handlers. These\n * handlers are created using <mxGraph.createHandler> in\n * <mxGraphSelectionModel.cellAdded>.\n * \n * To avoid the container to scroll a moved cell into view, set\n * <scrollAfterMove> to false.\n * \n * Constructor: mxGraphHandler\n * \n * Constructs an event handler that creates handles for the\n * selection cells.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphHandler(graph)\n{\n\tthis.graph = graph;\n\tthis.graph.addMouseListener(this);\n\t\n\t// Repaints the handler after autoscroll\n\tthis.panHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (!this.suspended)\n\t\t{\n\t\t\tthis.updatePreview();\n\t\t\tthis.updateHint();\n\t\t}\n\t});\n\t\n\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\t\n\t// Handles escape keystrokes\n\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.reset();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t\n\t// Updates the preview box for remote changes\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\t// Merges multiple pending calls\n\t\tif (this.refreshThread)\n\t\t{\n\t\t\twindow.clearTimeout(this.refreshThread);\n\t\t}\n\n\t\t// Waits for the states and handlers to be updated\n\t\tthis.refreshThread = window.setTimeout(mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.refreshThread = null;\n\t\t\t\n\t\t\tif (this.first != null && !this.suspended)\n\t\t\t{\n\t\t\t\t// Updates preview with no translate to compute bounding box\n\t\t\t\tvar dx = this.currentDx;\n\t\t\t\tvar dy = this.currentDy;\n\t\t\t\tthis.currentDx = 0;\n\t\t\t\tthis.currentDy = 0;\n\t\t\t\tthis.updatePreview();\n\t\t\t\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\t\t\t\tthis.pBounds = this.getPreviewBounds(this.cells);\n\n\t\t\t\tif (this.pBounds == null && !this.livePreviewUsed)\n\t\t\t\t{\n\t\t\t\t\tthis.reset();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Restores translate and updates preview\n\t\t\t\t\tthis.currentDx = dx;\n\t\t\t\t\tthis.currentDy = dy;\n\t\t\t\t\tthis.updatePreview();\n\t\t\t\t\tthis.updateHint();\n\n\t\t\t\t\tif (this.livePreviewUsed)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Forces update to ignore last visible state\n\t\t\t\t\t\tthis.setHandlesVisibleForCells(\n\t\t\t\t\t\t\tthis.graph.selectionCellsHandler.\n\t\t\t\t\t\t\tgetHandledSelectionCells(), false, true);\n\t\t\t\t\t\tthis.updatePreview();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}), 0);\n\t});\n\t\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.addListener(mxEvent.REFRESH, this.refreshHandler);\n\t\n\tthis.keyHandler = mxUtils.bind(this, function(e)\n\t{\n\t\tif (this.graph.container != null && this.graph.container.style.visibility != 'hidden' &&\n\t\t\tthis.first != null && !this.suspended)\n\t\t{\n\t\t\tvar clone = this.graph.isCloneEvent(e) &&\n\t\t\t\tthis.graph.isCellsCloneable() &&\n\t\t\t\tthis.isCloneEnabled();\n\t\t\t\n\t\t\tif (clone != this.cloning)\n\t\t\t{\n\t\t\t\tthis.cloning = clone;\n\t\t\t\tthis.checkPreview();\n\t\t\t\tthis.updatePreview();\n\t\t\t}\n\t\t}\n\t});\n\t\n\tmxEvent.addListener(document, 'keydown', this.keyHandler);\n\tmxEvent.addListener(document, 'keyup', this.keyHandler);\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphHandler.prototype.graph = null;\n\n/**\n * Variable: maxCells\n * \n * Defines the maximum number of cells to paint subhandles\n * for. Default is 50 for Firefox and 20 for IE. Set this\n * to 0 if you want an unlimited number of handles to be\n * displayed. This is only recommended if the number of\n * cells in the graph is limited to a small number, eg.\n * 500.\n */\nmxGraphHandler.prototype.maxCells = (mxClient.IS_IE) ? 20 : 50;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxGraphHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightEnabled\n * \n * Specifies if drop targets under the mouse should be enabled. Default is\n * true.\n */\nmxGraphHandler.prototype.highlightEnabled = true;\n\n/**\n * Variable: cloneEnabled\n * \n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxGraphHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: moveEnabled\n * \n * Specifies if moving is enabled. Default is true.\n */\nmxGraphHandler.prototype.moveEnabled = true;\n\n/**\n * Variable: guidesEnabled\n * \n * Specifies if other cells should be used for snapping the right, center or\n * left side of the current selection. Default is false.\n */\nmxGraphHandler.prototype.guidesEnabled = false;\n\n/**\n * Variable: handlesVisible\n * \n * Whether the handles of the selection are currently visible.\n */\nmxGraphHandler.prototype.handlesVisible = true;\n\n/**\n * Variable: guide\n * \n * Holds the <mxGuide> instance that is used for alignment.\n */\nmxGraphHandler.prototype.guide = null;\n\n/**\n * Variable: currentDx\n * \n * Stores the x-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDx = null;\n\n/**\n * Variable: currentDy\n * \n * Stores the y-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDy = null;\n\n/**\n * Variable: updateCursor\n * \n * Specifies if a move cursor should be shown if the mouse is over a movable\n * cell. Default is true.\n */\nmxGraphHandler.prototype.updateCursor = true;\n\n/**\n * Variable: selectEnabled\n * \n * Specifies if selecting is enabled. Default is true.\n */\nmxGraphHandler.prototype.selectEnabled = true;\n\n/**\n * Variable: removeCellsFromParent\n * \n * Specifies if cells may be moved out of their parents. Default is true.\n */\nmxGraphHandler.prototype.removeCellsFromParent = true;\n\n/**\n * Variable: removeEmptyParents\n * \n * If empty parents should be removed from the model after all child cells\n * have been moved out. Default is true.\n */\nmxGraphHandler.prototype.removeEmptyParents = false;\n\n/**\n * Variable: connectOnDrop\n * \n * Specifies if drop events are interpreted as new connections if no other\n * drop action is defined. Default is false.\n */\nmxGraphHandler.prototype.connectOnDrop = false;\n\n/**\n * Variable: scrollOnMove\n * \n * Specifies if the view should be scrolled so that a moved cell is\n * visible. Default is true.\n */\nmxGraphHandler.prototype.scrollOnMove = true;\n\n/**\n * Variable: minimumSize\n * \n * Specifies the minimum number of pixels for the width and height of a\n * selection border. Default is 6.\n */\nmxGraphHandler.prototype.minimumSize = 6;\n\n/**\n * Variable: previewColor\n * \n * Specifies the color of the preview shape. Default is black.\n */\nmxGraphHandler.prototype.previewColor = 'black';\n\n/**\n * Variable: htmlPreview\n * \n * Specifies if the graph container should be used for preview. If this is used\n * then drop target detection relies entirely on <mxGraph.getCellAt> because\n * the HTML preview does not \"let events through\". Default is false.\n */\nmxGraphHandler.prototype.htmlPreview = false;\n\n/**\n * Variable: shape\n * \n * Reference to the <mxShape> that represents the preview.\n */\nmxGraphHandler.prototype.shape = null;\n\n/**\n * Variable: scaleGrid\n * \n * Specifies if the grid should be scaled. Default is false.\n */\nmxGraphHandler.prototype.scaleGrid = false;\n\n/**\n * Variable: rotationEnabled\n * \n * Specifies if the bounding box should allow for rotation. Default is true.\n */\nmxGraphHandler.prototype.rotationEnabled = true;\n\n/**\n * Variable: maxLivePreview\n * \n * Maximum number of cells for which live preview should be used. Default is 0\n * which means no live preview.\n */\nmxGraphHandler.prototype.maxLivePreview = 0;\n\n/**\n * Variable: allowLivePreview\n * \n * If live preview is allowed on this system. Default is true for systems with\n * SVG support.\n */\nmxGraphHandler.prototype.allowLivePreview = mxClient.IS_SVG;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxGraphHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxGraphHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isCloneEnabled\n * \n * Returns <cloneEnabled>.\n */\nmxGraphHandler.prototype.isCloneEnabled = function()\n{\n\treturn this.cloneEnabled;\n};\n\n/**\n * Function: setCloneEnabled\n * \n * Sets <cloneEnabled>.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new clone enabled state.\n */\nmxGraphHandler.prototype.setCloneEnabled = function(value)\n{\n\tthis.cloneEnabled = value;\n};\n\n/**\n * Function: isMoveEnabled\n * \n * Returns <moveEnabled>.\n */\nmxGraphHandler.prototype.isMoveEnabled = function()\n{\n\treturn this.moveEnabled;\n};\n\n/**\n * Function: setMoveEnabled\n * \n * Sets <moveEnabled>.\n */\nmxGraphHandler.prototype.setMoveEnabled = function(value)\n{\n\tthis.moveEnabled = value;\n};\n\n/**\n * Function: isSelectEnabled\n * \n * Returns <selectEnabled>.\n */\nmxGraphHandler.prototype.isSelectEnabled = function()\n{\n\treturn this.selectEnabled;\n};\n\n/**\n * Function: setSelectEnabled\n * \n * Sets <selectEnabled>.\n */\nmxGraphHandler.prototype.setSelectEnabled = function(value)\n{\n\tthis.selectEnabled = value;\n};\n\n/**\n * Function: isRemoveCellsFromParent\n * \n * Returns <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.isRemoveCellsFromParent = function()\n{\n\treturn this.removeCellsFromParent;\n};\n\n/**\n * Function: setRemoveCellsFromParent\n * \n * Sets <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.setRemoveCellsFromParent = function(value)\n{\n\tthis.removeCellsFromParent = value;\n};\n\n/**\n * Function: isPropagateSelectionCell\n * \n * Returns true if the given cell and parent should propagate\n * selection state to the parent.\n */\nmxGraphHandler.prototype.isPropagateSelectionCell = function(cell, immediate, me)\n{\n\tvar parent = this.graph.model.getParent(cell);\n\n\tif (immediate)\n\t{\n\t\tvar geo = (this.graph.model.isEdge(cell)) ? null :\n\t\t\tthis.graph.getCellGeometry(cell);\n\t\t\n\t\treturn !this.graph.isSiblingSelected(cell) &&\n\t\t\t((geo != null && geo.relative) ||\n\t\t\t!this.graph.isSwimlane(parent));\n\t}\n\telse\n\t{\n\t\treturn (!this.graph.isToggleEvent(me.getEvent()) ||\n\t\t\t(!this.graph.isSiblingSelected(cell) &&\n\t\t\t!this.graph.isCellSelected(cell) &&\n\t\t\t(!this.graph.isSwimlane(parent)) ||\n\t\t\tthis.graph.isCellSelected(parent))) &&\n\t\t\t(this.graph.isToggleEvent(me.getEvent()) ||\n\t\t\t!this.graph.isCellSelected(parent));\n\t}\n};\n\n/**\n * Function: getInitialCellForEvent\n * \n * Hook to return initial cell for the given event. This returns\n * the topmost cell that is not a swimlane or is selected.\n */\nmxGraphHandler.prototype.getInitialCellForEvent = function(me)\n{\n\tvar state = me.getState();\n\t\n\tif ((!this.graph.isToggleEvent(me.getEvent()) || !mxEvent.isAltDown(me.getEvent())) &&\n\t\tstate != null && !this.graph.isCellSelected(state.cell))\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar next = this.graph.view.getState(model.getParent(state.cell));\n\n\t\twhile (next != null && !this.graph.isCellSelected(next.cell) &&\n\t\t\t(model.isVertex(next.cell) || model.isEdge(next.cell)) &&\n\t\t\tthis.isPropagateSelectionCell(state.cell, true, me))\n\t\t{\n\t\t\tstate = next;\n\t\t\tnext = this.graph.view.getState(this.graph.getModel().getParent(state.cell));\n\t\t}\n\t}\n\t\n\treturn (state != null) ? state.cell : null;\n};\n\n/**\n * Function: isDelayedSelection\n * \n * Returns true if the cell or one of its ancestors is selected.\n */\nmxGraphHandler.prototype.isDelayedSelection = function(cell, me)\n{\n\tif (!this.graph.isToggleEvent(me.getEvent()) || !mxEvent.isAltDown(me.getEvent()))\n\t{\n\t\twhile (cell != null)\n\t\t{\n\t\t\tif (this.graph.selectionCellsHandler.isHandled(cell))\n\t\t\t{\n\t\t\t\treturn this.graph.cellEditor.getEditingCell() != cell;\n\t\t\t}\n\t\t\t\n\t\t\tcell = this.graph.model.getParent(cell);\n\t\t}\n\t}\n\t\n\treturn this.graph.isToggleEvent(me.getEvent()) && !mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: selectDelayed\n * \n * Implements the delayed selection for the given mouse event.\n */\nmxGraphHandler.prototype.selectDelayed = function(me)\n{\n\tif (!this.graph.popupMenuHandler.isPopupTrigger(me))\n\t{\n\t\tvar cell = me.getCell();\n\t\t\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.cell;\n\t\t}\n\t\t\n\t\tthis.selectCellForEvent(cell, me);\n\t}\n};\n\n/**\n * Function: selectCellForEvent\n * \n * Selects the given cell for the given <mxMouseEvent>.\n */\nmxGraphHandler.prototype.selectCellForEvent = function(cell, me)\n{\n\tvar state = this.graph.view.getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tif (me.isSource(state.control))\n\t\t{\n\t\t\tthis.graph.selectCellForEvent(cell, me.getEvent());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!this.graph.isToggleEvent(me.getEvent()) ||\n\t\t\t\t!mxEvent.isAltDown(me.getEvent()))\n\t\t\t{\n\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\tvar parent = model.getParent(cell);\n\t\t\t\t\n\t\t\t\twhile (this.graph.view.getState(parent) != null &&\n\t\t\t\t\t(model.isVertex(parent) || model.isEdge(parent)) &&\n\t\t\t\t\tthis.isPropagateSelectionCell(cell, false, me))\n\t\t\t\t{\n\t\t\t\t\tcell = parent;\n\t\t\t\t\tparent = model.getParent(cell);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.graph.selectCellForEvent(cell, me.getEvent());\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: consumeMouseEvent\n * \n * Consumes the given mouse event. NOTE: This may be used to enable click\n * events for links in labels on iOS as follows as consuming the initial\n * touchStart disables firing the subsequent click event on the link.\n * \n * <code>\n * mxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n * {\n *   var source = mxEvent.getSource(me.getEvent());\n *   \n *   if (!mxEvent.isTouchEvent(me.getEvent()) || source.nodeName != 'A')\n *   {\n *     me.consume();\n *   }\n * }\n * </code>\n */\nmxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by selecing the given cell and creating a handle for\n * it. By consuming the event all subsequent events of the gesture are\n * redirected to this handler.\n */\nmxGraphHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() != null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar cell = this.getInitialCellForEvent(me);\n\t\tthis.delayedSelection = this.isDelayedSelection(cell, me);\n\t\tthis.cell = null;\n\t\t\n\t\tif (this.isSelectEnabled() && !this.delayedSelection)\n\t\t{\n\t\t\tthis.graph.selectCellForEvent(cell, me.getEvent());\n\t\t}\n\n\t\tif (this.isMoveEnabled())\n\t\t{\n\t\t\tvar model = this.graph.model;\n\t\t\tvar geo = model.getGeometry(cell);\n\n\t\t\tif (this.graph.isCellMovable(cell) && ((!model.isEdge(cell) || this.graph.getSelectionCount() > 1 ||\n\t\t\t\t(geo.points != null && geo.points.length > 0) || model.getTerminal(cell, true) == null ||\n\t\t\t\tmodel.getTerminal(cell, false) == null) || this.graph.allowDanglingEdges || \n\t\t\t\t(this.graph.isCloneEvent(me.getEvent()) && this.graph.isCellsCloneable())))\n\t\t\t{\n\t\t\t\tthis.start(cell, me.getX(), me.getY());\n\t\t\t}\n\t\t\telse if (this.delayedSelection)\n\t\t\t{\n\t\t\t\tthis.cell = cell;\n\t\t\t}\n\n\t\t\tthis.cellWasClicked = true;\n\t\t\tthis.consumeMouseEvent(mxEvent.MOUSE_DOWN, me);\n\t\t}\n\t}\n};\n\n/**\n * Function: getGuideStates\n * \n * Creates an array of cell states which should be used as guides.\n */\nmxGraphHandler.prototype.getGuideStates = function()\n{\n\tvar parent = this.graph.getDefaultParent();\n\tvar model = this.graph.getModel();\n\t\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.graph.view.getState(cell) != null &&\n\t\t\tmodel.isVertex(cell) &&\n\t\t\tmodel.getGeometry(cell) != null &&\n\t\t\t!model.getGeometry(cell).relative;\n\t});\n\t\n\treturn this.graph.view.getCellStates(model.filterDescendants(filter, parent));\n};\n\n/**\n * Function: getCells\n * \n * Returns the cells to be modified by this handler. This implementation\n * returns all selection cells that are movable, or the given initial cell if\n * the given cell is not selected and movable. This handles the case of moving\n * unselectable or unselected cells.\n * \n * Parameters:\n * \n * initialCell - <mxCell> that triggered this handler.\n */\nmxGraphHandler.prototype.getCells = function(initialCell)\n{\n\tif (!this.delayedSelection && this.graph.isCellMovable(initialCell))\n\t{\n\t\treturn [initialCell];\n\t}\n\telse\n\t{\n\t\treturn this.graph.getMovableCells(this.graph.getSelectionCells());\n\t}\n};\n\n/**\n * Function: getPreviewBounds\n * \n * Returns the <mxRectangle> used as the preview bounds for\n * moving the given cells.\n */\nmxGraphHandler.prototype.getPreviewBounds = function(cells)\n{\n\tvar bounds = this.getBoundingBox(cells);\n\t\n\tif (bounds != null)\n\t{\n\t\t// Corrects width and height\n\t\tbounds.width = Math.max(0, bounds.width - 1);\n\t\tbounds.height = Math.max(0, bounds.height - 1);\n\t\t\n\t\tif (bounds.width < this.minimumSize)\n\t\t{\n\t\t\tvar dx = this.minimumSize - bounds.width;\n\t\t\tbounds.x -= dx / 2;\n\t\t\tbounds.width = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.x = Math.round(bounds.x);\n\t\t\tbounds.width = Math.ceil(bounds.width);\n\t\t}\n\t\t\n\t\tvar tr = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\t\n\t\tif (bounds.height < this.minimumSize)\n\t\t{\n\t\t\tvar dy = this.minimumSize - bounds.height;\n\t\t\tbounds.y -= dy / 2;\n\t\t\tbounds.height = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.y = Math.round(bounds.y);\n\t\t\tbounds.height = Math.ceil(bounds.height);\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the union of the <mxCellStates> for the given array of <mxCells>.\n * For vertices, this method uses the bounding box of the corresponding shape\n * if one exists. The bounding box of the corresponding text label and all\n * controls and overlays are ignored. See also: <mxGraphView.getBounds> and\n * <mxGraph.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraphHandler.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.graph.view.getState(cells[i]);\n\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = state;\n\t\t\t\t\t\n\t\t\t\t\tif (model.isVertex(cells[i]) && state.shape != null && state.shape.boundingBox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = state.shape.boundingBox;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createPreviewShape\n * \n * Creates the shape used to draw the preview for the given bounds.\n */\nmxGraphHandler.prototype.createPreviewShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.previewColor);\n\tshape.isDashed = true;\n\t\n\tif (this.htmlPreview)\n\t{\n\t\tshape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tshape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t// event-transparency on the background area of the rectangle since\n\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\tshape.init(this.graph.getView().getOverlayPane());\n\t\tshape.pointerEvents = false;\n\t\t\n\t\t// Workaround for artifacts on iOS\n\t\tif (mxClient.IS_IOS)\n\t\t{\n\t\t\tshape.getSvgScreenOffset = function()\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t};\n\t\t}\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxGraphHandler.prototype.start = function(cell, x, y, cells)\n{\n\tthis.cell = cell;\n\tthis.first = mxUtils.convertPoint(this.graph.container, x, y);\n\tthis.cells = (cells != null) ? cells : this.getCells(this.cell);\n\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\tthis.pBounds = this.getPreviewBounds(this.cells);\n\tthis.allCells = new mxDictionary();\n\tthis.cloning = false;\n\tthis.cellCount = 0;\n\t\n\tfor (var i = 0; i < this.cells.length; i++)\n\t{\n\t\tthis.cellCount += this.addStates(this.cells[i], this.allCells);\n\t}\n\t\n\tif (this.guidesEnabled)\n\t{\n\t\tthis.guide = new mxGuide(this.graph, this.getGuideStates());\n\t\tvar parent = this.graph.model.getParent(cell);\n\t\tvar ignore = this.graph.model.getChildCount(parent) < 2;\n\t\t\n\t\t// Uses connected states as guides\n\t\tvar connected = new mxDictionary();\n\t\tvar opps = this.graph.getOpposites(this.graph.getEdges(this.cell), this.cell);\n\t\t\n\t\tfor (var i = 0; i < opps.length; i++)\n\t\t{\n\t\t\tvar state = this.graph.view.getState(opps[i]);\n\t\t\t\n\t\t\tif (state != null && !connected.get(state))\n\t\t\t{\n\t\t\t\tconnected.put(state, true);\n\t\t\t}\n\t\t}\n\n\t\tthis.guide.isStateIgnored = mxUtils.bind(this, function(state)\n\t\t{\n\t\t\tvar p = this.graph.model.getParent(state.cell);\n\t\t\t\n\t\t\treturn state.cell != null && ((!this.cloning &&\n\t\t\t\tthis.isCellMoving(state.cell)) ||\n\t\t\t\t(state.cell != (this.target || parent) && !ignore &&\n\t\t\t\t!connected.get(state) &&\n\t\t\t\t(this.target == null || this.graph.model.getChildCount(\n\t\t\t\tthis.target) >= 2) && p != (this.target || parent)));  \n\t\t});\n\t}\n};\n\n/**\n * Function: addStates\n * \n * Adds the states for the given cell recursively to the given dictionary.\n */\nmxGraphHandler.prototype.addStates = function(cell, dict)\n{\n\tvar state = this.graph.view.getState(cell);\n\tvar count = 0;\n\t\n\tif (state != null && dict.get(cell) == null)\n\t{\n\t\tdict.put(cell, state);\n\t\tcount++;\n\t\t\n\t\tvar childCount = this.graph.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tcount += this.addStates(this.graph.model.getChildAt(cell, i), dict);\n\t\t}\n\t}\n\t\n\treturn count;\n};\n\n/**\n * Function: isCellMoving\n * \n * Returns true if the given cell is currently being moved.\n */\nmxGraphHandler.prototype.isCellMoving = function(cell)\n{\n\treturn this.allCells.get(cell) != null;\n};\n\n/**\n * Function: useGuidesForEvent\n * \n * Returns true if the guides should be used for the given <mxMouseEvent>.\n * This implementation returns <mxGuide.isEnabledForEvent>.\n */\nmxGraphHandler.prototype.useGuidesForEvent = function(me)\n{\n\treturn (this.guide != null) ? this.guide.isEnabledForEvent(me.getEvent()) &&\n\t\t!this.graph.isConstrainedEvent(me.getEvent()) : true;\n};\n\n\n/**\n * Function: snap\n * \n * Snaps the given vector to the grid and returns the given mxPoint instance.\n */\nmxGraphHandler.prototype.snap = function(vector)\n{\n\tvar scale = (this.scaleGrid) ? this.graph.view.scale : 1;\n\t\n\tvector.x = this.graph.snap(vector.x / scale) * scale;\n\tvector.y = this.graph.snap(vector.y / scale) * scale;\n\t\n\treturn vector;\n};\n\n/**\n * Function: getDelta\n * \n * Returns an <mxPoint> that represents the vector for moving the cells\n * for the given <mxMouseEvent>.\n */\nmxGraphHandler.prototype.getDelta = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\t\n\treturn new mxPoint(point.x - this.first.x - this.graph.panDx,\n\t\tpoint.y - this.first.y - this.graph.panDy);\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxGraphHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxGraphHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled vector. Allows for half steps in the raster so\n * numbers coming in should be rounded if no half steps are allowed (ie for non\n * aligned standard moving where pixel steps should be preferred).\n */\nmxGraphHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length * 100) / 100;\n};\n\n/**\n * Function: isValidDropTarget\n * \n * Returns true if the given cell is a valid drop target.\n */\nmxGraphHandler.prototype.isValidDropTarget = function(target, me)\n{\n\treturn this.graph.model.getParent(this.cell) != target;\n};\n\n/**\n * Function: checkPreview\n * \n * Updates the preview if cloning state has changed.\n */\nmxGraphHandler.prototype.checkPreview = function()\n{\n\tif (this.livePreviewActive && this.cloning)\n\t{\n\t\tthis.resetLivePreview();\n\t\tthis.livePreviewActive = false;\n\t}\n\telse if (this.maxLivePreview >= this.cellCount && !this.livePreviewActive && this.allowLivePreview)\n\t{\n\t\tif (!this.cloning || !this.livePreviewActive)\n\t\t{\n\t\t\tthis.livePreviewActive = true;\n\t\t\tthis.livePreviewUsed = true;\n\t\t}\n\t}\n\telse if (!this.livePreviewUsed && this.shape == null)\n\t{\n\t\tthis.shape = this.createPreviewShape(this.bounds);\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by highlighting possible drop targets and updating the\n * preview.\n */\nmxGraphHandler.prototype.mouseMove = function(sender, me)\n{\n\tvar graph = this.graph;\n\n\tif (!me.isConsumed() && graph.isMouseDown && this.cell != null &&\n\t\tthis.first != null && this.bounds != null && !this.suspended)\n\t{\n\t\t// Stops moving if a multi touch event is received\n\t\tif (mxEvent.isMultiTouchEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.reset();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar delta = this.getDelta(me);\n\t\tvar tol = graph.tolerance;\n\n\t\tif (this.shape != null || this.livePreviewActive || Math.abs(delta.x) > tol || Math.abs(delta.y) > tol)\n\t\t{\n\t\t\t// Highlight is used for highlighting drop targets\n\t\t\tif (this.highlight == null)\n\t\t\t{\n\t\t\t\tthis.highlight = new mxCellHighlight(this.graph,\n\t\t\t\t\tmxConstants.DROP_TARGET_COLOR, 3);\n\t\t\t}\n\n\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\tvar gridEnabled = graph.isGridEnabledEvent(me.getEvent());\n\t\t\tvar cell = me.getCell();\n\t\t\tvar hideGuide = true;\n\t\t\tvar target = null;\n\t\t\tthis.cloning = clone;\n\t\t\t\n\t\t\tif (graph.isDropEnabled() && this.highlightEnabled)\n\t\t\t{\n\t\t\t\t// Contains a call to getCellAt to find the cell under the mouse\n\t\t\t\ttarget = graph.getDropTarget(this.cells, me.getEvent(), cell, clone);\n\t\t\t}\n\n\t\t\tvar state = graph.getView().getState(target);\n\t\t\tvar highlight = false;\n\t\t\t\n\t\t\tif (state != null && (clone || this.isValidDropTarget(target, me)))\n\t\t\t{\n\t\t\t    if (this.target != target)\n\t\t\t    {\n\t\t\t\t    this.target = target;\n\t\t\t\t    this.setHighlightColor(mxConstants.DROP_TARGET_COLOR);\n\t\t\t\t}\n\t\t\t    \n\t\t\t    highlight = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.target = null;\n\n\t\t\t\tif (this.connectOnDrop && cell != null && this.cells.length == 1 &&\n\t\t\t\t\tgraph.getModel().isVertex(cell) && graph.isCellConnectable(cell))\n\t\t\t\t{\n\t\t\t\t\tstate = graph.getView().getState(cell);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar error = graph.getEdgeValidationError(null, this.cell, cell);\n\t\t\t\t\t\tvar color = (error == null) ?\n\t\t\t\t\t\t\tmxConstants.VALID_COLOR :\n\t\t\t\t\t\t\tmxConstants.INVALID_CONNECT_TARGET_COLOR;\n\t\t\t\t\t\tthis.setHighlightColor(color);\n\t\t\t\t\t\thighlight = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (state != null && highlight)\n\t\t\t{\n\t\t\t\tthis.highlight.highlight(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.highlight.hide();\n\t\t\t}\n\n\t\t\tif (this.guide != null && this.useGuidesForEvent(me))\n\t\t\t{\n\t\t\t\tdelta = this.guide.move(this.bounds, delta, gridEnabled, clone);\n\t\t\t\thideGuide = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta = this.graph.snapDelta(delta, this.bounds, !gridEnabled, false, false);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.guide != null && hideGuide)\n\t\t\t{\n\t\t\t\tthis.guide.hide();\n\t\t\t}\n\n\t\t\t// Constrained movement if shift key is pressed\n\t\t\tif (graph.isConstrainedEvent(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(delta.x) > Math.abs(delta.y))\n\t\t\t\t{\n\t\t\t\t\tdelta.y = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelta.x = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.checkPreview();\n\t\t\t\n\t\t\tif (this.currentDx != delta.x || this.currentDy != delta.y)\n\t\t\t{\n\t\t\t\tthis.currentDx = delta.x;\n\t\t\t\tthis.currentDy = delta.y;\n\t\t\t\tthis.updatePreview();\n\t\t\t}\n\t\t}\n\n\t\tthis.updateHint(me);\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_MOVE, me);\n\t\t\n\t\t// Cancels the bubbling of events to the container so\n\t\t// that the droptarget is not reset due to an mouseMove\n\t\t// fired on the container with no associated state.\n\t\tmxEvent.consume(me.getEvent());\n\t}\n\telse if ((this.isMoveEnabled() || this.isCloneEnabled()) && this.updateCursor && !me.isConsumed() &&\n\t\t\t(me.getState() != null || me.sourceState != null) && !graph.isMouseDown)\n\t{\n\t\tvar cursor = graph.getCursorForMouseEvent(me);\n\t\t\n\t\tif (cursor == null && graph.isEnabled() && graph.isCellMovable(me.getCell()))\n\t\t{\n\t\t\tif (graph.getModel().isEdge(me.getCell()))\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_EDGE;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_VERTEX;\n\t\t\t}\n\t\t}\n\n\t\t// Sets the cursor on the original source state under the mouse\n\t\t// instead of the event source state which can be the parent\n\t\tif (cursor != null && me.sourceState != null)\n\t\t{\n\t\t\tme.sourceState.setCursor(cursor);\n\t\t}\n\t}\n};\n\n/**\n * Function: updatePreview\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updatePreview = function(remote)\n{\n\tif (this.livePreviewUsed && !remote)\n\t{\n\t\tif (this.cells != null)\n\t\t{\n\t\t\tthis.setHandlesVisibleForCells(\n\t\t\t\tthis.graph.selectionCellsHandler.\n\t\t\t\tgetHandledSelectionCells(), false);\n\t\t\tthis.updateLivePreview(this.currentDx, this.currentDy);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.updatePreviewShape();\n\t}\n};\n\n/**\n * Function: updatePreviewShape\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updatePreviewShape = function()\n{\n\tif (this.shape != null && this.pBounds != null)\n\t{\n\t\tthis.shape.bounds = new mxRectangle(Math.round(this.pBounds.x + this.currentDx),\n\t\t\t\tMath.round(this.pBounds.y + this.currentDy), this.pBounds.width, this.pBounds.height);\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: updateLivePreview\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updateLivePreview = function(dx, dy)\n{\n\tif (!this.suspended)\n\t{\n\t\tvar states = [];\n\t\t\n\t\tif (this.allCells != null)\n\t\t{\n\t\t\tthis.allCells.visit(mxUtils.bind(this, function(key, state)\n\t\t\t{\n\t\t\t\tvar realState = this.graph.view.getState(state.cell);\n\t\t\t\t\n\t\t\t\t// Checks if cell was removed or replaced\n\t\t\t\tif (realState != state)\n\t\t\t\t{\n\t\t\t\t\tstate.destroy();\n\t\t\t\t\t\n\t\t\t\t\tif (realState != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.allCells.put(state.cell, realState);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.allCells.remove(state.cell);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tstate = realState;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\t// Saves current state\n\t\t\t\t\tvar tempState = state.clone();\n\t\t\t\t\tstates.push([state, tempState]);\n\t\t\n\t\t\t\t\t// Makes transparent for events to detect drop targets\n\t\t\t\t\tif (state.shape != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (state.shape.originalPointerEvents == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.shape.originalPointerEvents = state.shape.pointerEvents;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tstate.shape.pointerEvents = false;\n\t\t\n\t\t\t\t\t\tif (state.text != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (state.text.originalPointerEvents == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.text.originalPointerEvents = state.text.pointerEvents;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tstate.text.pointerEvents = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\t// Temporarily changes position\n\t\t\t\t\tif (this.graph.model.isVertex(state.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.x += dx;\n\t\t\t\t\t\tstate.y += dy;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Draws the live preview\n\t\t\t\t\t\tif (!this.cloning)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.view.graph.cellRenderer.redraw(state, true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Forces redraw of connected edges after all states\n\t\t\t\t\t\t\t// have been updated but avoids update of state\n\t\t\t\t\t\t\tstate.view.invalidate(state.cell);\n\t\t\t\t\t\t\tstate.invalid = false;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Hides folding icon\n\t\t\t\t\t\t\tif (state.control != null && state.control.node != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.control.node.style.visibility = 'hidden';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Clone live preview may use text bounds\n\t\t\t\t\t\telse if (state.text != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.text.updateBoundingBox();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Fixes preview box for edge labels\n\t\t\t\t\t\t\tif (state.text.boundingBox != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.text.boundingBox.x += dx;\n\t\t\t\t\t\t\t\tstate.text.boundingBox.y += dy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (state.text.unrotatedBoundingBox != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.text.unrotatedBoundingBox.x += dx;\n\t\t\t\t\t\t\t\tstate.text.unrotatedBoundingBox.y += dy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t\t\n\t\t// Resets the handler if everything was removed\n\t\tif (states.length == 0)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Redraws connected edges\n\t\t\tvar s = this.graph.view.scale;\n\t\t\t\n\t\t\tfor (var i = 0; i < states.length; i++)\n\t\t\t{\n\t\t\t\tvar state = states[i][0];\n\t\t\t\t\n\t\t\t\tif (this.graph.model.isEdge(state.cell))\n\t\t\t\t{\n\t\t\t\t\tvar geometry = this.graph.getCellGeometry(state.cell);\n\t\t\t\t\tvar points = [];\n\t\t\t\t\t\n\t\t\t\t\tif (geometry != null && geometry.points != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var j = 0; j < geometry.points.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (geometry.points[j] != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.push(new mxPoint(\n\t\t\t\t\t\t\t\t\tgeometry.points[j].x + dx / s,\n\t\t\t\t\t\t\t\t\tgeometry.points[j].y + dy / s));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tvar source = state.visibleSourceState;\n\t\t\t\t\tvar target = state.visibleTargetState;\n\t\t\t\t\tvar pts = states[i][1].absolutePoints;\n\t\t\t\t\t\n\t\t\t\t\tif (source == null || !this.isCellMoving(source.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pt0 = pts[0];\n\t\t\t\t\t\tstate.setAbsoluteTerminalPoint(new mxPoint(pt0.x + dx, pt0.y + dy), true);\n\t\t\t\t\t\tsource = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.view.updateFixedTerminalPoint(state, source, true,\n\t\t\t\t\t\t\tthis.graph.getConnectionConstraint(state, source, true));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (target == null || !this.isCellMoving(target.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar ptn = pts[pts.length - 1];\n\t\t\t\t\t\tstate.setAbsoluteTerminalPoint(new mxPoint(ptn.x + dx, ptn.y + dy), false);\n\t\t\t\t\t\ttarget = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.view.updateFixedTerminalPoint(state, target, false,\n\t\t\t\t\t\t\tthis.graph.getConnectionConstraint(state, target, false));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tstate.view.updatePoints(state, points, source, target);\n\t\t\t\t\tstate.view.updateFloatingTerminalPoints(state, source, target);\n\t\t\t\t\tstate.view.updateEdgeLabelOffset(state);\n\t\t\t\t\tstate.invalid = false;\n\t\n\t\t\t\t\t// Draws the live preview but avoids update of state\n\t\t\t\t\tif (!this.cloning)\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.view.graph.cellRenderer.redraw(state, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tthis.graph.view.validate();\n\t\t\tthis.redrawHandles(states);\n\t\t\tthis.resetPreviewStates(states);\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the preview shape for the given states array.\n */\nmxGraphHandler.prototype.redrawHandles = function(states)\n{\n\tfor (var i = 0; i < states.length; i++)\n\t{\n\t\tvar handler = this.graph.selectionCellsHandler.getHandler(states[i][0].cell);\n\t\t\n\t\tif (handler != null)\n\t\t{\n\t\t\thandler.redraw(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetPreviewStates\n * \n * Resets the given preview states array.\n */\nmxGraphHandler.prototype.resetPreviewStates = function(states)\n{\n\tfor (var i = 0; i < states.length; i++)\n\t{\n\t\tstates[i][0].setState(states[i][1]);\n\t}\n};\n\n/**\n * Function: suspend\n * \n * Suspends the livew preview.\n */\nmxGraphHandler.prototype.suspend = function()\n{\n\tif (!this.suspended)\n\t{\n\t\tif (this.livePreviewUsed)\n\t\t{\n\t\t\tthis.updateLivePreview(0, 0);\n\t\t}\n\t\t\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.node.style.visibility = 'hidden';\n\t\t} \n\t\n\t\tif (this.guide != null)\n\t\t{\n\t\t\tthis.guide.setVisible(false);\n\t\t}\n\t\t\n\t\tthis.suspended = true;\n\t}\n};\n\n/**\n * Function: resume\n * \n * Suspends the livew preview.\n */\nmxGraphHandler.prototype.resume = function()\n{\n\tif (this.suspended)\n\t{\n\t\tthis.suspended = null;\n\t\t\n\t\tif (this.livePreviewUsed)\n\t\t{\n\t\t\tthis.livePreviewActive = true;\n\t\t}\n\t\t\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.node.style.visibility = 'visible';\n\t\t}\n\t\t\n\t\tif (this.guide != null)\n\t\t{\n\t\t\tthis.guide.setVisible(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetLivePreview\n * \n * Resets the livew preview.\n */\nmxGraphHandler.prototype.resetLivePreview = function()\n{\n\tif (this.allCells != null)\n\t{\n\t\tthis.allCells.visit(mxUtils.bind(this, function(key, state)\n\t\t{\n\t\t\t// Restores event handling\n\t\t\tif (state.shape != null && state.shape.originalPointerEvents != null)\n\t\t\t{\n\t\t\t\tstate.shape.pointerEvents = state.shape.originalPointerEvents;\n\t\t\t\tstate.shape.originalPointerEvents = null;\n\t\t\t\t\n\t\t\t\t// Forces repaint even if not moved to update pointer events\n\t\t\t\tstate.shape.bounds = null;\n\t\t\t\t\n\t\t\t\tif (state.text != null)\n\t\t\t\t{\n\t\t\t\t\tstate.text.pointerEvents = state.text.originalPointerEvents;\n\t\t\t\t\tstate.text.originalPointerEvents = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Shows folding icon\n\t\t\tif (state.control != null && state.control.node != null &&\n\t\t\t\tstate.control.node.style.visibility == 'hidden')\n\t\t\t{\n\t\t\t\tstate.control.node.style.visibility = '';\n\t\t\t}\n\t\t\t\n\t\t\t// Fixes preview box for edge labels\n\t\t\tif (!this.cloning)\n\t\t\t{\n\t\t\t\tif (state.text != null)\n\t\t\t\t{\n\t\t\t\t\tstate.text.updateBoundingBox();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Forces repaint of connected edges\n\t\t\tstate.view.invalidate(state.cell);\n\t\t}));\n\n\t\t// Repaints all invalid states\n\t\tthis.graph.view.validate();\n\t}\n};\n\n/**\n * Function: setHandlesVisibleForCells\n * \n * Sets wether the handles attached to the given cells are visible.\n * \n * Parameters:\n * \n * cells - Array of <mxCells>.\n * visible - Boolean that specifies if the handles should be visible.\n * force - Forces an update of the handler regardless of the last used value.\n */\nmxGraphHandler.prototype.setHandlesVisibleForCells = function(cells, visible, force)\n{\n\tif (force || this.handlesVisible != visible)\n\t{\n\t\tthis.handlesVisible = visible;\n\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar handler = this.graph.selectionCellsHandler.getHandler(cells[i]);\n\t\t\t\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\thandler.setHandlesVisible(visible);\n\t\t\t\t\n\t\t\t\tif (visible)\n\t\t\t\t{\n\t\t\t\t\thandler.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: setHighlightColor\n * \n * Sets the color of the rectangle used to highlight drop targets.\n * \n * Parameters:\n * \n * color - String that represents the new highlight color.\n */\nmxGraphHandler.prototype.setHighlightColor = function(color)\n{\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.setHighlightColor(color);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the changes to the selection cells.\n */\nmxGraphHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed())\n\t{\n\t\tif (this.livePreviewUsed)\n\t\t{\n\t\t\tthis.resetLivePreview();\n\t\t}\n\t\t\n\t\tif (this.cell != null && this.first != null && (this.shape != null || this.livePreviewUsed) &&\n\t\t\tthis.currentDx != null && this.currentDy != null)\n\t\t{\n\t\t\tvar graph = this.graph;\n\t\t\tvar cell = me.getCell();\n\t\t\t\n\t\t\tif (this.connectOnDrop && this.target == null && cell != null && graph.getModel().isVertex(cell) &&\n\t\t\t\tgraph.isCellConnectable(cell) && graph.isEdgeValid(null, this.cell, cell))\n\t\t\t{\n\t\t\t\tgraph.connectionHandler.connect(this.cell, cell, me.getEvent());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\t\tvar scale = graph.getView().scale;\n\t\t\t\tvar dx = this.roundLength(this.currentDx / scale);\n\t\t\t\tvar dy = this.roundLength(this.currentDy / scale);\n\t\t\t\tvar target = this.target;\n\t\t\t\t\n\t\t\t\tif (graph.isSplitEnabled() && graph.isSplitTarget(target, this.cells, me.getEvent()))\n\t\t\t\t{\n\t\t\t\t\tgraph.splitEdge(target, this.cells, null, dx, dy,\n\t\t\t\t\t\tme.getGraphX(), me.getGraphY());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.moveCells(this.cells, dx, dy, clone, this.target, me.getEvent());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.isSelectEnabled() && this.delayedSelection && this.cell != null)\n\t\t{\n\t\t\tthis.selectDelayed(me);\n\t\t}\n\t}\n\n\t// Consumes the event if a cell was initially clicked\n\tif (this.cellWasClicked)\n\t{\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_UP, me);\n\t}\n\n\tthis.reset();\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxGraphHandler.prototype.reset = function()\n{\n\tif (this.livePreviewUsed)\n\t{\n\t\tthis.resetLivePreview();\n\t\tthis.setHandlesVisibleForCells(\n\t\t\tthis.graph.selectionCellsHandler.\n\t\t\tgetHandledSelectionCells(), true);\n\t}\n\t\n\tthis.destroyShapes();\n\tthis.removeHint();\n\n\tthis.delayedSelection = false;\n\tthis.livePreviewActive = null;\n\tthis.livePreviewUsed = null;\n\tthis.cellWasClicked = false;\n\tthis.suspended = null;\n\tthis.currentDx = null;\n\tthis.currentDy = null;\n\tthis.cellCount = null;\n\tthis.cloning = false;\n\tthis.allCells = null;\n\tthis.pBounds = null;\n\tthis.guides = null;\n\tthis.target = null;\n\tthis.first = null;\n\tthis.cells = null;\n\tthis.cell = null;\n};\n\n/**\n * Function: shouldRemoveCellsFromParent\n * \n * Returns true if the given cells should be removed from the parent for the specified\n * mousereleased event.\n */\nmxGraphHandler.prototype.shouldRemoveCellsFromParent = function(parent, cells, evt)\n{\n\tif (this.graph.getModel().isVertex(parent))\n\t{\n\t\tvar pState = this.graph.getView().getState(parent);\n\t\t\n\t\tif (pState != null)\n\t\t{\n\t\t\tvar pt = mxUtils.convertPoint(this.graph.container,\n\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(pState.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, cx);\n\t\t\t}\n\t\t\n\t\t\treturn !mxUtils.contains(pState, pt.x, pt.y);\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: moveCells\n * \n * Moves the given cells by the specified amount.\n */\nmxGraphHandler.prototype.moveCells = function(cells, dx, dy, clone, target, evt)\n{\n\tif (clone)\n\t{\n\t\tcells = this.graph.getCloneableCells(cells);\n\t}\n\t\n\t// Removes cells from parent\n\tvar parent = this.graph.getModel().getParent(this.cell);\n\t\n\tif (target == null && this.isRemoveCellsFromParent() &&\n\t\tthis.shouldRemoveCellsFromParent(parent, cells, evt))\n\t{\n\t\ttarget = this.graph.getDefaultParent();\n\t}\n\t\n\t// Cloning into locked cells is not allowed\n\tclone = clone && !this.graph.isCellLocked(target || this.graph.getDefaultParent());\n\n\tthis.graph.getModel().beginUpdate();\n\ttry\n\t{\n\t\tvar parents = [];\n\t\t\n\t\t// Removes parent if all child cells are removed\n\t\tif (!clone && target != null && this.removeEmptyParents)\n\t\t{\n\t\t\t// Collects all non-selected parents\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Recurse up the cell hierarchy\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar par = this.graph.model.getParent(cells[i]);\n\n\t\t\t\tif (par != null && !dict.get(par))\n\t\t\t\t{\n\t\t\t\t\tdict.put(par, true);\n\t\t\t\t\tparents.push(par);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Passes all selected cells in order to correctly clone or move into\n\t\t// the target cell. The method checks for each cell if its movable.\n\t\tcells = this.graph.moveCells(cells, dx, dy, clone, target, evt);\n\n\t\t// Removes parent if all child cells are removed\n\t\tvar temp = [];\n\t\t\n\t\tfor (var i = 0; i < parents.length; i++)\n\t\t{\n\t\t\tif (this.shouldRemoveParent(parents[i]))\n\t\t\t{\n\t\t\t\ttemp.push(parents[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.graph.removeCells(temp, false);\n\t}\n\tfinally\n\t{\n\t\tthis.graph.getModel().endUpdate();\n\t}\n\n\t// Selects the new cells if cells have been cloned\n\tif (clone)\n\t{\n\t\tthis.graph.setSelectionCells(cells);\n\t}\n\n\tif (this.isSelectEnabled() && this.scrollOnMove)\n\t{\n\t\tthis.graph.scrollCellToVisible(cells[0]);\n\t}\n};\n\n/**\n * Function: shouldRemoveParent\n * \n * Returns true if the given parent should be removed after removal of child cells.\n */\nmxGraphHandler.prototype.shouldRemoveParent = function(parent)\n{\n\tvar state = this.graph.view.getState(parent);\n\t\n\treturn state != null && (this.graph.model.isEdge(state.cell) || this.graph.model.isVertex(state.cell)) &&\n\t\tthis.graph.isCellDeletable(state.cell) && this.graph.model.getChildCount(state.cell) == 0 &&\n\t\tthis.graph.isTransparentState(state);\n};\n\n/**\n * Function: destroyShapes\n * \n * Destroy the preview and highlight shapes.\n */\nmxGraphHandler.prototype.destroyShapes = function()\n{\n\t// Destroys the preview dashed rectangle\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.guide != null)\n\t{\n\t\tthis.guide.destroy();\n\t\tthis.guide = null;\n\t}\n\t\n\t// Destroys the drop target highlight\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.destroy();\n\t\tthis.highlight = null;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxGraphHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.panHandler);\n\t\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.graph.removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n\t\n\tmxEvent.removeListener(document, 'keydown', this.keyHandler);\n\tmxEvent.removeListener(document, 'keyup', this.keyHandler);\n\t\n\tthis.destroyShapes();\n\tthis.removeHint();\n};\n\n__mxOutput.mxGraphHandler = typeof mxGraphHandler !== 'undefined' ? mxGraphHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningHandler\n * \n * Event handler that pans and creates popupmenus. To use the left\n * mousebutton for panning without interfering with cell moving and\n * resizing, use <isUseLeftButton> and <isIgnoreCell>. For grid size\n * steps while panning, use <useGrid>. This handler is built-into\n * <mxGraph.panningHandler> and enabled using <mxGraph.setPanning>.\n * \n * Constructor: mxPanningHandler\n * \n * Constructs an event handler that creates a <mxPopupMenu>\n * and pans the graph.\n *\n * Event: mxEvent.PAN_START\n *\n * Fires when the panning handler changes its <active> state to true. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN\n *\n * Fires while handle is processing events. The <code>event</code> property contains\n * the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN_END\n *\n * Fires when the panning handler changes its <active> state to false. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n */\nfunction mxPanningHandler(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force panning event\n\t\tthis.forcePanningHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\t\t\t\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForcePanningEvent(me))\n\t\t\t{\n\t\t\t\tthis.start(me);\n\t\t\t\tthis.active = true;\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forcePanningHandler);\n\t\t\n\t\t// Handles pinch gestures\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.isPinchEnabled())\n\t\t\t{\n\t\t\t\tvar evt = eo.getProperty('event');\n\t\t\t\t\n\t\t\t\tif (!mxEvent.isConsumed(evt) && evt.type == 'gesturestart')\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = this.graph.view.scale;\n\t\t\t\t\n\t\t\t\t\t// Forces start of panning when pinch gesture starts\n\t\t\t\t\tif (!this.active && this.mouseDownEvent != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.start(this.mouseDownEvent);\n\t\t\t\t\t\tthis.mouseDownEvent = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (evt.type == 'gestureend' && this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tthis.zoomGraph(evt);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t\t{\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.reset();\n\t    \t}\n\t\t});\n\t\t\n\t\t// Stops scrolling on every mouseup anywhere in the document\n\t\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPanningHandler.prototype = new mxEventSource();\nmxPanningHandler.prototype.constructor = mxPanningHandler;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxPanningHandler.prototype.graph = null;\n\n/**\n * Variable: useLeftButtonForPanning\n * \n * Specifies if panning should be active for the left mouse button.\n * Setting this to true may conflict with <mxRubberband>. Default is false.\n */\nmxPanningHandler.prototype.useLeftButtonForPanning = false;\n\n/**\n * Variable: usePopupTrigger\n * \n * Specifies if <mxEvent.isPopupTrigger> should also be used for panning.\n */\nmxPanningHandler.prototype.usePopupTrigger = true;\n\n/**\n * Variable: ignoreCell\n * \n * Specifies if panning should be active even if there is a cell under the\n * mousepointer. Default is false.\n */\nmxPanningHandler.prototype.ignoreCell = false;\n\n/**\n * Variable: previewEnabled\n * \n * Specifies if the panning should be previewed. Default is true.\n */\nmxPanningHandler.prototype.previewEnabled = true;\n\n/**\n * Variable: useGrid\n * \n * Specifies if the panning steps should be aligned to the grid size.\n * Default is false.\n */\nmxPanningHandler.prototype.useGrid = false;\n\n/**\n * Variable: panningEnabled\n * \n * Specifies if panning should be enabled. Default is true.\n */\nmxPanningHandler.prototype.panningEnabled = true;\n\n/**\n * Variable: pinchEnabled\n * \n * Specifies if pinch gestures should be handled as zoom. Default is true.\n */\nmxPanningHandler.prototype.pinchEnabled = true;\n\n/**\n * Variable: maxScale\n * \n * Specifies the maximum scale. Default is 8.\n */\nmxPanningHandler.prototype.maxScale = 8;\n\n/**\n * Variable: minScale\n * \n * Specifies the minimum scale. Default is 0.01.\n */\nmxPanningHandler.prototype.minScale = 0.01;\n\n/**\n * Variable: dx\n * \n * Holds the current horizontal offset.\n */\nmxPanningHandler.prototype.dx = null;\n\n/**\n * Variable: dy\n * \n * Holds the current vertical offset.\n */\nmxPanningHandler.prototype.dy = null;\n\n/**\n * Variable: startX\n * \n * Holds the x-coordinate of the start point.\n */\nmxPanningHandler.prototype.startX = 0;\n\n/**\n * Variable: startY\n * \n * Holds the y-coordinate of the start point.\n */\nmxPanningHandler.prototype.startY = 0;\n\n/**\n * Function: isActive\n * \n * Returns true if the handler is currently active.\n */\nmxPanningHandler.prototype.isActive = function()\n{\n\treturn this.active || this.initialScale != null;\n};\n\n/**\n * Function: isPanningEnabled\n * \n * Returns <panningEnabled>.\n */\nmxPanningHandler.prototype.isPanningEnabled = function()\n{\n\treturn this.panningEnabled;\n};\n\n/**\n * Function: setPanningEnabled\n * \n * Sets <panningEnabled>.\n */\nmxPanningHandler.prototype.setPanningEnabled = function(value)\n{\n\tthis.panningEnabled = value;\n};\n\n/**\n * Function: isPinchEnabled\n * \n * Returns <pinchEnabled>.\n */\nmxPanningHandler.prototype.isPinchEnabled = function()\n{\n\treturn this.pinchEnabled;\n};\n\n/**\n * Function: setPinchEnabled\n * \n * Sets <pinchEnabled>.\n */\nmxPanningHandler.prototype.setPinchEnabled = function(value)\n{\n\tthis.pinchEnabled = value;\n};\n\n/**\n * Function: isPanningTrigger\n * \n * Returns true if the given event is a panning trigger for the optional\n * given cell. This returns true if control-shift is pressed or if\n * <usePopupTrigger> is true and the event is a popup trigger.\n */\nmxPanningHandler.prototype.isPanningTrigger = function(me)\n{\n\tvar evt = me.getEvent();\n\t\n\treturn (this.useLeftButtonForPanning && me.getState() == null &&\n\t\t\tmxEvent.isLeftMouseButton(evt)) || (mxEvent.isControlDown(evt) &&\n\t\t\tmxEvent.isShiftDown(evt)) || (this.usePopupTrigger && mxEvent.isPopupTrigger(evt));\n};\n\n/**\n * Function: isForcePanningEvent\n * \n * Returns true if the given <mxMouseEvent> should start panning. This\n * implementation always returns true if <ignoreCell> is true or for\n * multi touch events.\n */\nmxPanningHandler.prototype.isForcePanningEvent = function(me)\n{\n\treturn this.ignoreCell || mxEvent.isMultiTouchEvent(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPanningHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownEvent = me;\n\t\n\tif (!me.isConsumed() && this.isPanningEnabled() && !this.active && this.isPanningTrigger(me))\n\t{\n\t\tthis.start(me);\n\t\tthis.consumePanningTrigger(me);\n\t}\n};\n\n/**\n * Function: start\n * \n * Starts panning at the given event.\n */\nmxPanningHandler.prototype.start = function(me)\n{\n\tthis.dx0 = -this.graph.container.scrollLeft;\n\tthis.dy0 = -this.graph.container.scrollTop;\n\n\t// Stores the location of the trigger event\n\tthis.startX = me.getX();\n\tthis.startY = me.getY();\n\tthis.dx = null;\n\tthis.dy = null;\n\t\n\tthis.panningTrigger = true;\n};\n\n/**\n * Function: consumePanningTrigger\n * \n * Consumes the given <mxMouseEvent> if it was a panning trigger in\n * <mouseDown>. The default is to invoke <mxMouseEvent.consume>. Note that this\n * will block any further event processing. If you haven't disabled built-in\n * context menus and require immediate selection of the cell on mouseDown in\n * Safari and/or on the Mac, then use the following code:\n * \n * (code)\n * mxPanningHandler.prototype.consumePanningTrigger = function(me)\n * {\n *   if (me.evt.preventDefault)\n *   {\n *     me.evt.preventDefault();\n *   }\n *   \n *   // Stops event processing in IE\n *   me.evt.returnValue = false;\n *   \n *   // Sets local consumed state\n *   if (!mxClient.IS_SF && !mxClient.IS_MAC)\n *   {\n *     me.consumed = true;\n *   }\n * };\n * (end)\n */\nmxPanningHandler.prototype.consumePanningTrigger = function(me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the panning on the graph.\n */\nmxPanningHandler.prototype.mouseMove = function(sender, me)\n{\n\tthis.dx = me.getX() - this.startX;\n\tthis.dy = me.getY() - this.startY;\n\t\n\tif (this.active)\n\t{\n\t\tif (this.previewEnabled)\n\t\t{\n\t\t\t// Applies the grid to the panning steps\n\t\t\tif (this.useGrid)\n\t\t\t{\n\t\t\t\tthis.dx = this.graph.snap(this.dx);\n\t\t\t\tthis.dy = this.graph.snap(this.dy);\n\t\t\t}\n\t\t\t\n\t\t\tthis.graph.panGraph(this.dx + this.dx0, this.dy + this.dy0);\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN, 'event', me));\n\t}\n\telse if (this.panningTrigger)\n\t{\n\t\tvar tmp = this.active;\n\n\t\t// Panning is activated only if the mouse is moved\n\t\t// beyond the graph tolerance\n\t\tthis.active = Math.abs(this.dx) > this.graph.tolerance || Math.abs(this.dy) > this.graph.tolerance;\n\n\t\tif (!tmp && this.active)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t}\n\t}\n\t\n\tif (this.active || this.panningTrigger)\n\t{\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPanningHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tif (this.dx != null && this.dy != null)\n\t\t{\n\t\t\t// Ignores if scrollbars have been used for panning\n\t\t\tif (!this.graph.useScrollbarsForPanning || !mxUtils.hasScrollbars(this.graph.container))\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar t = this.graph.getView().translate;\n\t\t\t\tthis.graph.panGraph(0, 0);\n\t\t\t\tthis.panGraph(t.x + this.dx / scale, t.y + this.dy / scale);\n\t\t\t}\n\t\t\t\n\t\t\tme.consume();\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_END, 'event', me));\n\t}\n\t\n\tthis.reset();\n};\n\n/**\n * Function: zoomGraph\n * \n * Zooms the graph to the given value and consumed the event if needed.\n */\nmxPanningHandler.prototype.zoomGraph = function(evt)\n{\n\tvar value = Math.round(this.initialScale * evt.scale * 100) / 100;\n\t\n\tif (this.minScale != null)\n\t{\n\t\tvalue = Math.max(this.minScale, value);\n\t}\n\t\n\tif (this.maxScale != null)\n\t{\n\t\tvalue = Math.min(this.maxScale, value);\n\t}\n\n\tif (this.graph.view.scale != value)\n\t{\n\t\tthis.graph.zoomTo(value);\n\t\tmxEvent.consume(evt);\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxPanningHandler.prototype.reset = function()\n{\n\tthis.panningTrigger = false;\n\tthis.mouseDownEvent = null;\n\tthis.active = false;\n\tthis.dx = null;\n\tthis.dy = null;\n};\n\n/**\n * Function: panGraph\n * \n * Pans <graph> by the given amount.\n */\nmxPanningHandler.prototype.panGraph = function(dx, dy)\n{\n\tthis.graph.getView().setTranslate(dx, dy);\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPanningHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.forcePanningHandler);\n\tthis.graph.removeListener(this.gestureHandler);\n\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n};\n\n__mxOutput.mxPanningHandler = typeof mxPanningHandler !== 'undefined' ? mxPanningHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPopupMenuHandler\n * \n * Event handler that creates popupmenus.\n * \n * Constructor: mxPopupMenuHandler\n * \n * Constructs an event handler that creates a <mxPopupMenu>.\n */\nfunction mxPopupMenuHandler(graph, factoryMethod)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.factoryMethod = factoryMethod;\n\t\tthis.graph.addMouseListener(this);\n\t\t\n\t\t// Does not show menu if any touch gestures take place after the trigger\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\tthis.init();\n\t}\n};\n\n/**\n * Extends mxPopupMenu.\n */\nmxPopupMenuHandler.prototype = new mxPopupMenu();\nmxPopupMenuHandler.prototype.constructor = mxPopupMenuHandler;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxPopupMenuHandler.prototype.graph = null;\n\n/**\n * Variable: selectOnPopup\n * \n * Specifies if cells should be selected if a popupmenu is displayed for\n * them. Default is true.\n */\nmxPopupMenuHandler.prototype.selectOnPopup = true;\n\n/**\n * Variable: clearSelectionOnBackground\n * \n * Specifies if cells should be deselected if a popupmenu is displayed for\n * the diagram background. Default is true.\n */\nmxPopupMenuHandler.prototype.clearSelectionOnBackground = true;\n\n/**\n * Variable: triggerX\n * \n * X-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.triggerX = null;\n\n/**\n * Variable: triggerY\n * \n * Y-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.triggerY = null;\n\n/**\n * Variable: screenX\n * \n * Screen X-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.screenX = null;\n\n/**\n * Variable: screenY\n * \n * Screen Y-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.screenY = null;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxPopupMenuHandler.prototype.init = function()\n{\n\t// Supercall\n\tmxPopupMenu.prototype.init.apply(this);\n\n\t// Hides the tooltip if the mouse is over\n\t// the context menu\n\tmxEvent.addGestureListeners(this.div, mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.graph.tooltipHandler.hide();\n\t}));\n};\n\n/**\n * Function: isSelectOnPopup\n * \n * Hook for returning if a cell should be selected for a given <mxMouseEvent>.\n * This implementation returns <selectOnPopup>.\n */\nmxPopupMenuHandler.prototype.isSelectOnPopup = function(me)\n{\n\treturn this.selectOnPopup;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPopupMenuHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.isEnabled() && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\t// Hides the popupmenu if is is being displayed\n\t\tthis.hideMenu();\n\t\tthis.triggerX = me.getGraphX();\n\t\tthis.triggerY = me.getGraphY();\n\t\tthis.screenX = mxEvent.getMainEvent(me.getEvent()).screenX;\n\t\tthis.screenY = mxEvent.getMainEvent(me.getEvent()).screenY;\n\t\tthis.popupTrigger = this.isPopupTrigger(me);\n\t\tthis.inTolerance = true;\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the panning on the graph.\n */\nmxPopupMenuHandler.prototype.mouseMove = function(sender, me)\n{\n\t// Popup trigger may change on mouseUp so ignore it\n\tif (this.inTolerance && this.screenX != null && this.screenY != null)\n\t{\n\t\tif (Math.abs(mxEvent.getMainEvent(me.getEvent()).screenX - this.screenX) > this.graph.tolerance ||\n\t\t\tMath.abs(mxEvent.getMainEvent(me.getEvent()).screenY - this.screenY) > this.graph.tolerance)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPopupMenuHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.popupTrigger && this.inTolerance && this.triggerX != null && this.triggerY != null)\n\t{\n\t\tvar cell = this.getCellForPopupEvent(me);\n\n\t\t// Selects the cell for which the context menu is being displayed\n\t\tif (this.graph.isEnabled() && this.isSelectOnPopup(me) &&\n\t\t\tcell != null && !this.graph.isCellSelected(cell))\n\t\t{\n\t\t\tthis.graph.setSelectionCell(cell);\n\t\t}\n\t\telse if (this.clearSelectionOnBackground && cell == null)\n\t\t{\n\t\t\tthis.graph.clearSelection();\n\t\t}\n\t\t\n\t\t// Hides the tooltip if there is one\n\t\tthis.graph.tooltipHandler.hide();\n\n\t\t// Menu is shifted by 1 pixel so that the mouse up event\n\t\t// is routed via the underlying shape instead of the DIV\n\t\tvar origin = mxUtils.getScrollOrigin();\n\t\tthis.popup(me.getX() + origin.x + 1, me.getY() + origin.y + 1, cell, me.getEvent());\n\t\tme.consume();\n\t}\n\t\n\tthis.popupTrigger = false;\n\tthis.inTolerance = false;\n};\n\n/**\n * Function: getCellForPopupEvent\n * \n * Hook to return the cell for the mouse up popup trigger handling.\n */\nmxPopupMenuHandler.prototype.getCellForPopupEvent = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPopupMenuHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.gestureHandler);\n\t\n\t// Supercall\n\tmxPopupMenu.prototype.destroy.apply(this);\n};\n\n__mxOutput.mxPopupMenuHandler = typeof mxPopupMenuHandler !== 'undefined' ? mxPopupMenuHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellMarker\n * \n * A helper class to process mouse locations and highlight cells.\n * \n * Helper class to highlight cells. To add a cell marker to an existing graph\n * for highlighting all cells, the following code is used:\n * \n * (code)\n * var marker = new mxCellMarker(graph);\n * graph.addMouseListener({\n *   mouseDown: function() {},\n *   mouseMove: function(sender, me)\n *   {\n *     marker.process(me);\n *   },\n *   mouseUp: function() {}\n * });\n * (end)\n *\n * Event: mxEvent.MARK\n * \n * Fires after a cell has been marked or unmarked. The <code>state</code>\n * property contains the marked <mxCellState> or null if no state is marked.\n * \n * Constructor: mxCellMarker\n * \n * Constructs a new cell marker.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * validColor - Optional marker color for valid states. Default is\n * <mxConstants.DEFAULT_VALID_COLOR>.\n * invalidColor - Optional marker color for invalid states. Default is\n * <mxConstants.DEFAULT_INVALID_COLOR>.\n * hotspot - Portion of the width and hight where a state intersects a\n * given coordinate pair. A value of 0 means always highlight. Default is\n * <mxConstants.DEFAULT_HOTSPOT>.\n */\nfunction mxCellMarker(graph, validColor, invalidColor, hotspot)\n{\n\tmxEventSource.call(this);\n\t\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.validColor = (validColor != null) ? validColor : mxConstants.DEFAULT_VALID_COLOR;\n\t\tthis.invalidColor = (invalidColor != null) ? invalidColor : mxConstants.DEFAULT_INVALID_COLOR;\n\t\tthis.hotspot = (hotspot != null) ? hotspot : mxConstants.DEFAULT_HOTSPOT;\n\t\t\n\t\tthis.highlight = new mxCellHighlight(graph);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxCellMarker, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellMarker.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if the marker is enabled. Default is true.\n */\nmxCellMarker.prototype.enabled = true;\n\n/**\n * Variable: hotspot\n * \n * Specifies the portion of the width and height that should trigger\n * a highlight. The area around the center of the cell to be marked is used\n * as the hotspot. Possible values are between 0 and 1. Default is\n * mxConstants.DEFAULT_HOTSPOT.\n */\nmxCellMarker.prototype.hotspot = mxConstants.DEFAULT_HOTSPOT; \n\n/**\n * Variable: hotspotEnabled\n * \n * Specifies if the hotspot is enabled. Default is false.\n */\nmxCellMarker.prototype.hotspotEnabled = false;\n\n/**\n * Variable: validColor\n * \n * Holds the valid marker color.\n */\nmxCellMarker.prototype.validColor = null;\n\n/**\n * Variable: invalidColor\n * \n * Holds the invalid marker color.\n */\nmxCellMarker.prototype.invalidColor = null;\n\n/**\n * Variable: currentColor\n * \n * Holds the current marker color.\n */\nmxCellMarker.prototype.currentColor = null;\n\n/**\n * Variable: validState\n * \n * Holds the marked <mxCellState> if it is valid.\n */\nmxCellMarker.prototype.validState = null; \n\n/**\n * Variable: markedState\n * \n * Holds the marked <mxCellState>.\n */\nmxCellMarker.prototype.markedState = null;\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxCellMarker.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxCellMarker.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setHotspot\n * \n * Sets the <hotspot>.\n */\nmxCellMarker.prototype.setHotspot = function(hotspot)\n{\n\tthis.hotspot = hotspot;\n};\n\n/**\n * Function: getHotspot\n * \n * Returns the <hotspot>.\n */\nmxCellMarker.prototype.getHotspot = function()\n{\n\treturn this.hotspot;\n};\n\n/**\n * Function: setHotspotEnabled\n * \n * Specifies whether the hotspot should be used in <intersects>.\n */\nmxCellMarker.prototype.setHotspotEnabled = function(enabled)\n{\n\tthis.hotspotEnabled = enabled;\n};\n\n/**\n * Function: isHotspotEnabled\n * \n * Returns true if hotspot is used in <intersects>.\n */\nmxCellMarker.prototype.isHotspotEnabled = function()\n{\n\treturn this.hotspotEnabled;\n};\n\n/**\n * Function: hasValidState\n * \n * Returns true if <validState> is not null.\n */\nmxCellMarker.prototype.hasValidState = function()\n{\n\treturn this.validState != null;\n};\n\n/**\n * Function: getValidState\n * \n * Returns the <validState>.\n */\nmxCellMarker.prototype.getValidState = function()\n{\n\treturn this.validState;\n};\n\n/**\n * Function: getMarkedState\n * \n * Returns the <markedState>.\n */\nmxCellMarker.prototype.getMarkedState = function()\n{\n\treturn this.markedState;\n};\n\n/**\n * Function: reset\n * \n * Resets the state of the cell marker.\n */\nmxCellMarker.prototype.reset = function()\n{\n\tthis.validState = null;\n\t\n\tif (this.markedState != null)\n\t{\n\t\tthis.markedState = null;\n\t\tthis.unmark();\n\t}\n};\n\n/**\n * Function: process\n * \n * Processes the given event and cell and marks the state returned by\n * <getState> with the color returned by <getMarkerColor>. If the\n * markerColor is not null, then the state is stored in <markedState>. If\n * <isValidState> returns true, then the state is stored in <validState>\n * regardless of the marker color. The state is returned regardless of the\n * marker color and valid state. \n */\nmxCellMarker.prototype.process = function(me)\n{\n\tvar state = null;\n\t\n\tif (this.isEnabled())\n\t{\n\t\tstate = this.getState(me);\n\t\tthis.setCurrentState(state, me);\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: setCurrentState\n * \n * Sets and marks the current valid state.\n */\nmxCellMarker.prototype.setCurrentState = function(state, me, color)\n{\n\tvar isValid = (state != null) ? this.isValidState(state) : false;\n\tcolor = (color != null) ? color : this.getMarkerColor(me.getEvent(), state, isValid);\n\t\n\tif (isValid)\n\t{\n\t\tthis.validState = state;\n\t}\n\telse\n\t{\n\t\tthis.validState = null;\n\t}\n\t\n\tif (state != this.markedState || color != this.currentColor)\n\t{\n\t\tthis.currentColor = color;\n\t\t\n\t\tif (state != null && this.currentColor != null)\n\t\t{\n\t\t\tthis.markedState = state;\n\t\t\tthis.mark();\t\t\n\t\t}\n\t\telse if (this.markedState != null)\n\t\t{\n\t\t\tthis.markedState = null;\n\t\t\tthis.unmark();\n\t\t}\n\t}\n};\n\n/**\n * Function: markCell\n * \n * Marks the given cell using the given color, or <validColor> if no color is specified.\n */\nmxCellMarker.prototype.markCell = function(cell, color)\n{\n\tvar state = this.graph.getView().getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tthis.currentColor = (color != null) ? color : this.validColor;\n\t\tthis.markedState = state;\n\t\tthis.mark();\n\t}\n};\n\n/**\n * Function: mark\n * \n * Marks the <markedState> and fires a <mark> event.\n */\nmxCellMarker.prototype.mark = function()\n{\n\tthis.highlight.setHighlightColor(this.currentColor);\n\tthis.highlight.highlight(this.markedState);\n\tthis.fireEvent(new mxEventObject(mxEvent.MARK, 'state', this.markedState));\n};\n\n/**\n * Function: unmark\n * \n * Hides the marker and fires a <mark> event.\n */\nmxCellMarker.prototype.unmark = function()\n{\n\tthis.mark();\n};\n\n/**\n * Function: isValidState\n * \n * Returns true if the given <mxCellState> is a valid state. If this\n * returns true, then the state is stored in <validState>. The return value\n * of this method is used as the argument for <getMarkerColor>.\n */\nmxCellMarker.prototype.isValidState = function(state)\n{\n\treturn true;\n};\n\n/**\n * Function: getMarkerColor\n * \n * Returns the valid- or invalidColor depending on the value of isValid.\n * The given <mxCellState> is ignored by this implementation.\n */\nmxCellMarker.prototype.getMarkerColor = function(evt, state, isValid)\n{\n\treturn (isValid) ? this.validColor : this.invalidColor;\n};\n\n/**\n * Function: getState\n * \n * Uses <getCell>, <getStateToMark> and <intersects> to return the\n * <mxCellState> for the given <mxMouseEvent>.\n */\nmxCellMarker.prototype.getState = function(me)\n{\n\tvar view = this.graph.getView();\n\tvar cell = this.getCell(me);\n\tvar state = this.getStateToMark(view.getState(cell));\n\n\treturn (state != null && this.intersects(state, me)) ? state : null;\n};\n\n/**\n * Function: getCell\n * \n * Returns the <mxCell> for the given event and cell. This returns the\n * given cell.\n */\nmxCellMarker.prototype.getCell = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: getStateToMark\n * \n * Returns the <mxCellState> to be marked for the given <mxCellState> under\n * the mouse. This returns the given state.\n */\nmxCellMarker.prototype.getStateToMark = function(state)\n{\n\treturn state;\n};\n\n/**\n * Function: intersects\n * \n * Returns true if the given coordinate pair intersects the given state.\n * This returns true if the <hotspot> is 0 or the coordinates are inside\n * the hotspot for the given cell state.\n */\nmxCellMarker.prototype.intersects = function(state, me)\n{\n\tif (this.hotspotEnabled)\n\t{\n\t\treturn mxUtils.intersectsHotspot(state, me.getGraphX(), me.getGraphY(),\n\t\t\tthis.hotspot, mxConstants.MIN_HOTSPOT_SIZE,\n\t\t\tmxConstants.MAX_HOTSPOT_SIZE);\n\t}\n\t\n\treturn true;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxCellMarker.prototype.destroy = function()\n{\n\tthis.graph.getView().removeListener(this.resetHandler);\n\tthis.graph.getModel().removeListener(this.resetHandler);\n\tthis.highlight.destroy();\n};\n\n__mxOutput.mxCellMarker = typeof mxCellMarker !== 'undefined' ? mxCellMarker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSelectionCellsHandler\n * \n * An event handler that manages cell handlers and invokes their mouse event\n * processing functions.\n * \n * Group: Events\n * \n * Event: mxEvent.ADD\n * \n * Fires if a cell has been added to the selection. The <code>state</code>\n * property contains the <mxCellState> that has been added.\n * \n * Event: mxEvent.REMOVE\n * \n * Fires if a cell has been remove from the selection. The <code>state</code>\n * property contains the <mxCellState> that has been removed.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxSelectionCellsHandler(graph)\n{\n\tmxEventSource.call(this);\n\t\n\tthis.graph = graph;\n\tthis.handlers = new mxDictionary();\n\tthis.graph.addMouseListener(this);\n\t\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.refresh();\n\t\t}\n\t});\n\t\n\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.refreshHandler);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxSelectionCellsHandler, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxSelectionCellsHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxSelectionCellsHandler.prototype.enabled = true;\n\n/**\n * Variable: refreshHandler\n * \n * Keeps a reference to an event listener for later removal.\n */\nmxSelectionCellsHandler.prototype.refreshHandler = null;\n\n/**\n * Variable: maxHandlers\n * \n * Defines the maximum number of handlers to paint individually. Default is 100.\n */\nmxSelectionCellsHandler.prototype.maxHandlers = 100;\n\n/**\n * Variable: handlers\n * \n * <mxDictionary> that maps from cells to handlers.\n */\nmxSelectionCellsHandler.prototype.handlers = null;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxSelectionCellsHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxSelectionCellsHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getHandler\n * \n * Returns the handler for the given cell.\n */\nmxSelectionCellsHandler.prototype.getHandler = function(cell)\n{\n\treturn this.handlers.get(cell);\n};\n\n/**\n * Function: isHandled\n * \n * Returns true if the given cell has a handler.\n */\nmxSelectionCellsHandler.prototype.isHandled = function(cell)\n{\n\treturn this.getHandler(cell) != null;\n};\n\n/**\n * Function: reset\n * \n * Resets all handlers.\n */\nmxSelectionCellsHandler.prototype.reset = function()\n{\n\tthis.handlers.visit(function(key, handler)\n\t{\n\t\thandler.reset.apply(handler);\n\t});\n};\n\n/**\n * Function: getHandledSelectionCells\n * \n * Reloads or updates all handlers.\n */\nmxSelectionCellsHandler.prototype.getHandledSelectionCells = function()\n{\n\treturn this.graph.getSelectionCells();\n};\n\n/**\n * Function: refresh\n * \n * Reloads or updates all handlers.\n */\nmxSelectionCellsHandler.prototype.refresh = function()\n{\n\t// Removes all existing handlers\n\tvar oldHandlers = this.handlers;\n\tthis.handlers = new mxDictionary();\n\t\n\t// Creates handles for all selection cells\n\tvar tmp = mxUtils.sortCells(this.getHandledSelectionCells(), false);\n\n\t// Destroys or updates old handlers\n\tfor (var i = 0; i < tmp.length; i++)\n\t{\n\t\tvar state = this.graph.view.getState(tmp[i]);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tvar handler = oldHandlers.remove(tmp[i]);\n\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tif (handler.state != state)\n\t\t\t\t{\n\t\t\t\t\thandler.destroy();\n\t\t\t\t\thandler = null;\n\t\t\t\t}\n\t\t\t\telse if (!this.isHandlerActive(handler))\n\t\t\t\t{\n\t\t\t\t\tif (handler.refresh != null)\n\t\t\t\t\t{\n\t\t\t\t\t\thandler.refresh();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\thandler.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tthis.handlers.put(tmp[i], handler);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Destroys unused handlers\n\toldHandlers.visit(mxUtils.bind(this, function(key, handler)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE, 'state', handler.state));\n\t\thandler.destroy();\n\t}));\n\t\n\t// Creates new handlers and updates parent highlight on existing handlers\n\tfor (var i = 0; i < tmp.length; i++)\n\t{\n\t\tvar state = this.graph.view.getState(tmp[i]);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tvar handler = this.handlers.get(tmp[i]);\n\n\t\t\tif (handler == null)\n\t\t\t{\n\t\t\t\thandler = this.graph.createHandler(state);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'state', state));\n\t\t\t\tthis.handlers.put(tmp[i], handler);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thandler.updateParentHighlight();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isHandlerActive\n * \n * Returns true if the given handler is active and should not be redrawn.\n */\nmxSelectionCellsHandler.prototype.isHandlerActive = function(handler)\n{\n\treturn handler.index != null;\n};\n\n/**\n * Function: updateHandler\n * \n * Updates the handler for the given shape if one exists.\n */\nmxSelectionCellsHandler.prototype.updateHandler = function(state)\n{\n\tvar handler = this.handlers.remove(state.cell);\n\t\n\tif (handler != null)\n\t{\n\t\t// Transfers the current state to the new handler\n\t\tvar index = handler.index;\n\t\tvar x = handler.startX;\n\t\tvar y = handler.startY;\n\t\t\n\t\thandler.destroy();\n\t\thandler = this.graph.createHandler(state);\n\n\t\tif (handler != null)\n\t\t{\n\t\t\tthis.handlers.put(state.cell, handler);\n\t\t\t\n\t\t\tif (index != null && x != null && y != null)\n\t\t\t{\n\t\t\t\thandler.start(x, y, index);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseDown.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseMove.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseUp.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxSelectionCellsHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\t\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getSelectionModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getView().removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n};\n\n__mxOutput.mxSelectionCellsHandler = typeof mxSelectionCellsHandler !== 'undefined' ? mxSelectionCellsHandler : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\n/**\n * Class: mxConnectionHandler\n *\n * Graph event handler that creates new connections. Uses <mxTerminalMarker>\n * for finding and highlighting the source and target vertices and\n * <factoryMethod> to create the edge instance. This handler is built-into\n * <mxGraph.connectionHandler> and enabled using <mxGraph.setConnectable>.\n *\n * Example:\n * \n * (code)\n * new mxConnectionHandler(graph, function(source, target, style)\n * {\n *   edge = new mxCell('', new mxGeometry());\n *   edge.setEdge(true);\n *   edge.setStyle(style);\n *   edge.geometry.relative = true;\n *   return edge;\n * });\n * (end)\n * \n * Here is an alternative solution that just sets a specific user object for\n * new edges by overriding <insertEdge>.\n *\n * (code)\n * mxConnectionHandlerInsertEdge = mxConnectionHandler.prototype.insertEdge;\n * mxConnectionHandler.prototype.insertEdge = function(parent, id, value, source, target, style)\n * {\n *   value = 'Test';\n * \n *   return mxConnectionHandlerInsertEdge.apply(this, arguments);\n * };\n * (end)\n * \n * Using images to trigger connections:\n * \n * This handler uses mxTerminalMarker to find the source and target cell for\n * the new connection and creates a new edge using <connect>. The new edge is\n * created using <createEdge> which in turn uses <factoryMethod> or creates a\n * new default edge.\n * \n * The handler uses a \"highlight-paradigm\" for indicating if a cell is being\n * used as a source or target terminal, as seen in other diagramming products.\n * In order to allow both, moving and connecting cells at the same time,\n * <mxConstants.DEFAULT_HOTSPOT> is used in the handler to determine the hotspot\n * of a cell, that is, the region of the cell which is used to trigger a new\n * connection. The constant is a value between 0 and 1 that specifies the\n * amount of the width and height around the center to be used for the hotspot\n * of a cell and its default value is 0.5. In addition,\n * <mxConstants.MIN_HOTSPOT_SIZE> defines the minimum number of pixels for the\n * width and height of the hotspot.\n * \n * This solution, while standards compliant, may be somewhat confusing because\n * there is no visual indicator for the hotspot and the highlight is seen to\n * switch on and off while the mouse is being moved in and out. Furthermore,\n * this paradigm does not allow to create different connections depending on\n * the highlighted hotspot as there is only one hotspot per cell and it\n * normally does not allow cells to be moved and connected at the same time as\n * there is no clear indication of the connectable area of the cell.\n * \n * To come across these issues, the handle has an additional <createIcons> hook\n * with a default implementation that allows to create one icon to be used to\n * trigger new connections. If this icon is specified, then new connections can\n * only be created if the image is clicked while the cell is being highlighted.\n * The <createIcons> hook may be overridden to create more than one\n * <mxImageShape> for creating new connections, but the default implementation\n * supports one image and is used as follows:\n * \n * In order to display the \"connect image\" whenever the mouse is over the cell,\n * an DEFAULT_HOTSPOT of 1 should be used:\n * \n * (code)\n * mxConstants.DEFAULT_HOTSPOT = 1;\n * (end)\n * \n * In order to avoid confusion with the highlighting, the highlight color\n * should not be used with a connect image:\n * \n * (code)\n * mxConstants.HIGHLIGHT_COLOR = null;\n * (end)\n * \n * To install the image, the connectImage field of the mxConnectionHandler must\n * be assigned a new <mxImage> instance:\n * \n * (code)\n * mxConnectionHandler.prototype.connectImage = new mxImage('images/green-dot.gif', 14, 14);\n * (end)\n * \n * This will use the green-dot.gif with a width and height of 14 pixels as the\n * image to trigger new connections. In createIcons the icon field of the\n * handler will be set in order to remember the icon that has been clicked for\n * creating the new connection. This field will be available under selectedIcon\n * in the connect method, which may be overridden to take the icon that\n * triggered the new connection into account. This is useful if more than one\n * icon may be used to create a connection.\n *\n * Group: Events\n * \n * Event: mxEvent.START\n * \n * Fires when a new connection is being created by the user. The <code>state</code>\n * property contains the state of the source cell.\n * \n * Event: mxEvent.CONNECT\n * \n * Fires between begin- and endUpdate in <connect>. The <code>cell</code>\n * property contains the inserted edge, the <code>event</code> and <code>target</code> \n * properties contain the respective arguments that were passed to <connect> (where\n * target corresponds to the dropTarget argument). Finally, the <code>terminal</code>\n * property corresponds to the target argument in <connect> or the clone of the source\n * terminal if <createTarget> is enabled.\n * \n * Note that the target is the cell under the mouse where the mouse button was released.\n * Depending on the logic in the handler, this doesn't necessarily have to be the target\n * of the inserted edge. To print the source, target or any optional ports IDs that the\n * edge is connected to, the following code can be used. To get more details about the\n * actual connection point, <mxGraph.getConnectionConstraint> can be used. To resolve\n * the port IDs, use <mxGraphModel.getCell>.\n * \n * (code)\n * graph.connectionHandler.addListener(mxEvent.CONNECT, function(sender, evt)\n * {\n *   var edge = evt.getProperty('cell');\n *   var source = graph.getModel().getTerminal(edge, true);\n *   var target = graph.getModel().getTerminal(edge, false);\n *   \n *   var style = graph.getCellStyle(edge);\n *   var sourcePortId = style[mxConstants.STYLE_SOURCE_PORT];\n *   var targetPortId = style[mxConstants.STYLE_TARGET_PORT];\n *   \n *   mxLog.show();\n *   mxLog.debug('connect', edge, source.id, target.id, sourcePortId, targetPortId);\n * });\n * (end)\n *\n * Event: mxEvent.RESET\n * \n * Fires when the <reset> method is invoked.\n *\n * Constructor: mxConnectionHandler\n *\n * Constructs an event handler that connects vertices using the specified\n * factory method to create the new edges. Modify\n * <mxConstants.ACTIVE_REGION> to setup the region on a cell which triggers\n * the creation of a new connection or use connect icons as explained\n * above.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * factoryMethod - Optional function to create the edge. The function takes\n * the source and target <mxCell> as the first and second argument and an\n * optional cell style from the preview as the third argument. It returns\n * the <mxCell> that represents the new edge.\n */\nfunction mxConnectionHandler(graph, factoryMethod)\n{\n\tmxEventSource.call(this);\n\t\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.factoryMethod = factoryMethod;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tthis.reset();\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxConnectionHandler, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxConnectionHandler.prototype.graph = null;\n\n/**\n * Variable: factoryMethod\n * \n * Function that is used for creating new edges. The function takes the\n * source and target <mxCell> as the first and second argument and returns\n * a new <mxCell> that represents the edge. This is used in <createEdge>.\n */\nmxConnectionHandler.prototype.factoryMethod = true;\n\n/**\n * Variable: moveIconFront\n * \n * Specifies if icons should be displayed inside the graph container instead\n * of the overlay pane. This is used for HTML labels on vertices which hide\n * the connect icon. This has precendence over <moveIconBack> when set\n * to true. Default is false.\n */\nmxConnectionHandler.prototype.moveIconFront = false;\n\n/**\n * Variable: moveIconBack\n * \n * Specifies if icons should be moved to the back of the overlay pane. This can\n * be set to true if the icons of the connection handler conflict with other\n * handles, such as the vertex label move handle. Default is false.\n */\nmxConnectionHandler.prototype.moveIconBack = false;\n\n/**\n * Variable: connectImage\n * \n * <mxImage> that is used to trigger the creation of a new connection. This\n * is used in <createIcons>. Default is null.\n */\nmxConnectionHandler.prototype.connectImage = null;\n\n/**\n * Variable: targetConnectImage\n * \n * Specifies if the connect icon should be centered on the target state\n * while connections are being previewed. Default is false.\n */\nmxConnectionHandler.prototype.targetConnectImage = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxConnectionHandler.prototype.enabled = true;\n\n/**\n * Variable: select\n * \n * Specifies if new edges should be selected. Default is true.\n */\nmxConnectionHandler.prototype.select = true;\n\n/**\n * Variable: createTarget\n * \n * Specifies if <createTargetVertex> should be called if no target was under the\n * mouse for the new connection. Setting this to true means the connection\n * will be drawn as valid if no target is under the mouse, and\n * <createTargetVertex> will be called before the connection is created between\n * the source cell and the newly created vertex in <createTargetVertex>, which\n * can be overridden to create a new target. Default is false.\n */\nmxConnectionHandler.prototype.createTarget = false;\n\n/**\n * Variable: marker\n * \n * Holds the <mxTerminalMarker> used for finding source and target cells.\n */\nmxConnectionHandler.prototype.marker = null;\n\n/**\n * Variable: constraintHandler\n * \n * Holds the <mxConstraintHandler> used for drawing and highlighting\n * constraints.\n */\nmxConnectionHandler.prototype.constraintHandler = null;\n\n/**\n * Variable: error\n * \n * Holds the current validation error while connections are being created.\n */\nmxConnectionHandler.prototype.error = null;\n\n/**\n * Variable: waypointsEnabled\n * \n * Specifies if single clicks should add waypoints on the new edge. Default is\n * false.\n */\nmxConnectionHandler.prototype.waypointsEnabled = false;\n\n/**\n * Variable: ignoreMouseDown\n * \n * Specifies if the connection handler should ignore the state of the mouse\n * button when highlighting the source. Default is false, that is, the\n * handler only highlights the source if no button is being pressed.\n */\nmxConnectionHandler.prototype.ignoreMouseDown = false;\n\n/**\n * Variable: first\n * \n * Holds the <mxPoint> where the mouseDown took place while the handler is\n * active.\n */\nmxConnectionHandler.prototype.first = null;\n\n/**\n * Variable: connectIconOffset\n * \n * Holds the offset for connect icons during connection preview.\n * Default is mxPoint(0, <mxConstants.TOOLTIP_VERTICAL_OFFSET>).\n * Note that placing the icon under the mouse pointer with an\n * offset of (0,0) will affect hit detection.\n */\nmxConnectionHandler.prototype.connectIconOffset = new mxPoint(0, mxConstants.TOOLTIP_VERTICAL_OFFSET);\n\n/**\n * Variable: edgeState\n * \n * Optional <mxCellState> that represents the preview edge while the\n * handler is active. This is created in <createEdgeState>.\n */\nmxConnectionHandler.prototype.edgeState = null;\n\n/**\n * Variable: changeHandler\n * \n * Holds the change event listener for later removal.\n */\nmxConnectionHandler.prototype.changeHandler = null;\n\n/**\n * Variable: drillHandler\n * \n * Holds the drill event listener for later removal.\n */\nmxConnectionHandler.prototype.drillHandler = null;\n\n/**\n * Variable: mouseDownCounter\n * \n * Counts the number of mouseDown events since the start. The initial mouse\n * down event counts as 1.\n */\nmxConnectionHandler.prototype.mouseDownCounter = 0;\n\n/**\n * Variable: movePreviewAway\n * \n * Switch to enable moving the preview away from the mousepointer. This is required in browsers\n * where the preview cannot be made transparent to events and if the built-in hit detection on\n * the HTML elements in the page should be used. Default is the value of <mxClient.IS_VML>.\n */\nmxConnectionHandler.prototype.movePreviewAway = mxClient.IS_VML;\n\n/**\n * Variable: outlineConnect\n * \n * Specifies if connections to the outline of a highlighted target should be\n * enabled. This will allow to place the connection point along the outline of\n * the highlighted target. Default is false.\n */\nmxConnectionHandler.prototype.outlineConnect = false;\n\n/**\n * Variable: livePreview\n * \n * Specifies if the actual shape of the edge state should be used for the preview.\n * Default is false. (Ignored if no edge state is created in <createEdgeState>.)\n */\nmxConnectionHandler.prototype.livePreview = false;\n\n/**\n * Variable: cursor\n * \n * Specifies the cursor to be used while the handler is active. Default is null.\n */\nmxConnectionHandler.prototype.cursor = null;\n\n/**\n * Variable: insertBeforeSource\n * \n * Specifies if new edges should be inserted before the source vertex in the\n * cell hierarchy. Default is false for backwards compatibility.\n */\nmxConnectionHandler.prototype.insertBeforeSource = false;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxConnectionHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxConnectionHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isInsertBefore\n * \n * Returns <insertBeforeSource> for non-loops and false for loops.\n *\n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be inserted.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * evt - Mousedown event of the connect gesture.\n * dropTarget - <mxCell> that represents the cell under the mouse when it was\n * released.\n */\nmxConnectionHandler.prototype.isInsertBefore = function(edge, source, target, evt, dropTarget)\n{\n\treturn this.insertBeforeSource && source != target;\n};\n\n/**\n * Function: isCreateTarget\n * \n * Returns <createTarget>.\n *\n * Parameters:\n *\n * evt - Current active native pointer event.\n */\nmxConnectionHandler.prototype.isCreateTarget = function(evt)\n{\n\treturn this.createTarget;\n};\n\n/**\n * Function: setCreateTarget\n * \n * Sets <createTarget>.\n */\nmxConnectionHandler.prototype.setCreateTarget = function(value)\n{\n\tthis.createTarget = value;\n};\n\n/**\n * Function: createShape\n * \n * Creates the preview shape for new connections.\n */\nmxConnectionHandler.prototype.createShape = function()\n{\n\t// Creates the edge preview\n\tvar shape = (this.livePreview && this.edgeState != null) ?\n\t\tthis.graph.cellRenderer.createShape(this.edgeState) :\n\t\tnew mxPolyline([], mxConstants.INVALID_COLOR);\n\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tshape.scale = this.graph.view.scale;\n\tshape.pointerEvents = false;\n\tshape.isDashed = true;\n\tshape.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(shape.node, this.graph, null);\n\n\treturn shape;\n};\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this connection handler. This should\n * be invoked if <mxGraph.container> is assigned after the connection\n * handler has been created.\n */\nmxConnectionHandler.prototype.init = function()\n{\n\tthis.graph.addMouseListener(this);\n\tthis.marker = this.createMarker();\n\tthis.constraintHandler = new mxConstraintHandler(this.graph);\n\n\t// Redraws the icons if the graph changes\n\tthis.changeHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.iconState != null)\n\t\t{\n\t\t\tthis.iconState = this.graph.getView().getState(this.iconState.cell);\n\t\t}\n\t\t\n\t\tif (this.iconState != null)\n\t\t{\n\t\t\tthis.redrawIcons(this.icons, this.iconState);\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\telse if (this.previous != null && this.graph.view.getState(this.previous.cell) == null)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t});\n\t\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.changeHandler);\n\t\n\t// Removes the icon if we step into/up or start editing\n\tthis.drillHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.reset();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.START_EDITING, this.drillHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.drillHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.drillHandler);\n};\n\n/**\n * Function: isConnectableCell\n * \n * Returns true if the given cell is connectable. This is a hook to\n * disable floating connections. This implementation returns true.\n */\nmxConnectionHandler.prototype.isConnectableCell = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: createMarker\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxConnectionHandler.prototype.createMarker = function()\n{\n\tvar marker = new mxCellMarker(this.graph);\n\tmarker.hotspotEnabled = true;\n\n\t// Overrides to return cell at location only if valid (so that\n\t// there is no highlight for invalid cells)\n\tmarker.getCell = mxUtils.bind(this, function(me)\n\t{\n\t\tvar cell = mxCellMarker.prototype.getCell.apply(marker, arguments);\n\t\tthis.error = null;\n\t\t\n\t\t// Checks for cell at preview point (with grid)\n\t\tif (cell == null && this.currentPoint != null)\n\t\t{\n\t\t\tcell = this.graph.getCellAt(this.currentPoint.x, this.currentPoint.y);\n\t\t}\n\t\t\n\t\t// Uses connectable parent vertex if one exists\n\t\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\t\n\t\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t\t{\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ((this.graph.isSwimlane(cell) && this.currentPoint != null &&\n\t\t\tthis.graph.hitsSwimlaneContent(cell, this.currentPoint.x, this.currentPoint.y)) ||\n\t\t\t!this.isConnectableCell(cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tif (this.isConnecting())\n\t\t\t{\n\t\t\t\tif (this.previous != null)\n\t\t\t\t{\n\t\t\t\t\tthis.error = this.validateConnection(this.previous.cell, cell);\n\t\t\t\t\t\n\t\t\t\t\tif (this.error != null && this.error.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell = null;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Enables create target inside groups\n\t\t\t\t\t\tif (this.isCreateTarget(me.getEvent()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.error = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!this.isValidSource(cell, me))\n\t\t\t{\n\t\t\t\tcell = null;\n\t\t\t}\n\t\t}\n\t\telse if (this.isConnecting() && !this.isCreateTarget(me.getEvent()) &&\n\t\t\t\t!this.graph.allowDanglingEdges)\n\t\t{\n\t\t\tthis.error = '';\n\t\t}\n\n\t\treturn cell;\n\t});\n\n\t// Sets the highlight color according to validateConnection\n\tmarker.isValidState = mxUtils.bind(this, function(state)\n\t{\n\t\tif (this.isConnecting())\n\t\t{\n\t\t\treturn this.error == null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mxCellMarker.prototype.isValidState.apply(marker, arguments);\n\t\t}\n\t});\n\n\t// Overrides to use marker color only in highlight mode or for\n\t// target selection\n\tmarker.getMarkerColor = mxUtils.bind(this, function(evt, state, isValid)\n\t{\n\t\treturn (this.connectImage == null || this.isConnecting()) ?\n\t\t\tmxCellMarker.prototype.getMarkerColor.apply(marker, arguments) :\n\t\t\tnull;\n\t});\n\n\t// Overrides to use hotspot only for source selection otherwise\n\t// intersects always returns true when over a cell\n\tmarker.intersects = mxUtils.bind(this, function(state, evt)\n\t{\n\t\tif (this.connectImage != null || this.isConnecting())\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn mxCellMarker.prototype.intersects.apply(marker, arguments);\n\t});\n\n\treturn marker;\n};\n\n/**\n * Function: start\n * \n * Starts a new connection for the given state and coordinates.\n */\nmxConnectionHandler.prototype.start = function(state, x, y, edgeState)\n{\n\tthis.previous = state;\n\tthis.first = new mxPoint(x, y);\n\tthis.edgeState = (edgeState != null) ? edgeState : this.createEdgeState(null);\n\t\n\t// Marks the source state\n\tthis.marker.currentColor = this.marker.validColor;\n\tthis.marker.markedState = state;\n\tthis.marker.mark();\n\n\tthis.fireEvent(new mxEventObject(mxEvent.START, 'state', this.previous));\n};\n\n/**\n * Function: isConnecting\n * \n * Returns true if the source terminal has been clicked and a new\n * connection is currently being previewed.\n */\nmxConnectionHandler.prototype.isConnecting = function()\n{\n\treturn this.first != null && this.shape != null;\n};\n\n/**\n * Function: isValidSource\n * \n * Returns <mxGraph.isValidSource> for the given source terminal.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the source terminal.\n * me - <mxMouseEvent> that is associated with this call.\n */\nmxConnectionHandler.prototype.isValidSource = function(cell, me)\n{\n\treturn this.graph.isValidSource(cell);\n};\n\n/**\n * Function: isValidTarget\n * \n * Returns true. The call to <mxGraph.isValidTarget> is implicit by calling\n * <mxGraph.getEdgeValidationError> in <validateConnection>. This is an\n * additional hook for disabling certain targets in this specific handler.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the target terminal.\n */\nmxConnectionHandler.prototype.isValidTarget = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: validateConnection\n * \n * Returns the error message or an empty string if the connection for the\n * given source target pair is not valid. Otherwise it returns null. This\n * implementation uses <mxGraph.getEdgeValidationError>.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxConnectionHandler.prototype.validateConnection = function(source, target)\n{\n\tif (!this.isValidTarget(target))\n\t{\n\t\treturn '';\n\t}\n\t\n\treturn this.graph.getEdgeValidationError(null, source, target);\n};\n\n/**\n * Function: getConnectImage\n * \n * Hook to return the <mxImage> used for the connection icon of the given\n * <mxCellState>. This implementation returns <connectImage>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect image should be returned.\n */\nmxConnectionHandler.prototype.getConnectImage = function(state)\n{\n\treturn this.connectImage;\n};\n\n/**\n * Function: isMoveIconToFrontForState\n * \n * Returns true if the state has a HTML label in the graph's container, otherwise\n * it returns <moveIconFront>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect icons should be returned.\n */\nmxConnectionHandler.prototype.isMoveIconToFrontForState = function(state)\n{\n\tif (state.text != null && state.text.node.parentNode == this.graph.container)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn this.moveIconFront;\n};\n\n/**\n * Function: createIcons\n * \n * Creates the array <mxImageShapes> that represent the connect icons for\n * the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect icons should be returned.\n */\nmxConnectionHandler.prototype.createIcons = function(state)\n{\n\tvar image = this.getConnectImage(state);\n\t\n\tif (image != null && state != null)\n\t{\n\t\tthis.iconState = state;\n\t\tvar icons = [];\n\n\t\t// Cannot use HTML for the connect icons because the icon receives all\n\t\t// mouse move events in IE, must use VML and SVG instead even if the\n\t\t// connect-icon appears behind the selection border and the selection\n\t\t// border consumes the events before the icon gets a chance\n\t\tvar bounds = new mxRectangle(0, 0, image.width, image.height);\n\t\tvar icon = new mxImageShape(bounds, image.src, null, null, 0);\n\t\ticon.preserveImageAspect = false;\n\t\t\n\t\tif (this.isMoveIconToFrontForState(state))\n\t\t{\n\t\t\ticon.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\t\ticon.init(this.graph.container);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ticon.dialect = (this.graph.dialect == mxConstants.DIALECT_SVG) ?\n\t\t\t\tmxConstants.DIALECT_SVG : mxConstants.DIALECT_VML;\n\t\t\ticon.init(this.graph.getView().getOverlayPane());\n\n\t\t\t// Move the icon back in the overlay pane\n\t\t\tif (this.moveIconBack && icon.node.previousSibling != null)\n\t\t\t{\n\t\t\t\ticon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n\t\t\t}\n\t\t}\n\n\t\ticon.node.style.cursor = mxConstants.CURSOR_CONNECT;\n\n\t\t// Events transparency\n\t\tvar getState = mxUtils.bind(this, function()\n\t\t{\n\t\t\treturn (this.currentState != null) ? this.currentState : state;\n\t\t});\n\t\t\n\t\t// Updates the local icon before firing the mouse down event.\n\t\tvar mouseDown = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tthis.icon = icon;\n\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN,\n\t\t\t\t\tnew mxMouseEvent(evt, getState()));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.redirectMouseEvents(icon.node, this.graph, getState, mouseDown);\n\t\t\n\t\ticons.push(icon);\n\t\tthis.redrawIcons(icons, this.iconState);\n\t\t\n\t\treturn icons;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: redrawIcons\n * \n * Redraws the given array of <mxImageShapes>.\n * \n * Parameters:\n * \n * icons - Optional array of <mxImageShapes> to be redrawn.\n */\nmxConnectionHandler.prototype.redrawIcons = function(icons, state)\n{\n\tif (icons != null && icons[0] != null && state != null)\n\t{\n\t\tvar pos = this.getIconPosition(icons[0], state);\n\t\ticons[0].bounds.x = pos.x;\n\t\ticons[0].bounds.y = pos.y;\n\t\ticons[0].redraw();\n\t}\n};\n\n/**\n * Function: getIconPosition\n * \n * Returns the center position of the given icon.\n * \n * Parameters:\n * \n * icon - The connect icon of <mxImageShape> with the mouse.\n * state - <mxCellState> under the mouse.\n */\nmxConnectionHandler.prototype.getIconPosition = function(icon, state)\n{\n\tvar scale = this.graph.getView().scale;\n\tvar cx = state.getCenterX();\n\tvar cy = state.getCenterY();\n\t\n\tif (this.graph.isSwimlane(state.cell))\n\t{\n\t\tvar size = this.graph.getStartSize(state.cell);\n\t\t\n\t\tcx = (size.width != 0) ? state.x + size.width * scale / 2 : cx;\n\t\tcy = (size.height != 0) ? state.y + size.height * scale / 2 : cy;\n\t\t\n\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin, ct);\n\t\t\tcx = pt.x;\n\t\t\tcy = pt.y;\n\t\t}\n\t}\n\n\treturn new mxPoint(cx - icon.bounds.width / 2,\n\t\t\tcy - icon.bounds.height / 2);\n};\n\n/**\n * Function: destroyIcons\n * \n * Destroys the connect icons and resets the respective state.\n */\nmxConnectionHandler.prototype.destroyIcons = function()\n{\n\tif (this.icons != null)\n\t{\n\t\tfor (var i = 0; i < this.icons.length; i++)\n\t\t{\n\t\t\tthis.icons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.icons = null;\n\t\tthis.icon = null;\n\t\tthis.selectedIcon = null;\n\t\tthis.iconState = null;\n\t}\n};\n\n/**\n * Function: isStartEvent\n * \n * Returns true if the given mouse down event should start this handler. The\n * This implementation returns true if the event does not force marquee\n * selection, and the currentConstraint and currentFocus of the\n * <constraintHandler> are not null, or <previous> and <error> are not null and\n * <icons> is null or <icons> and <icon> are not null.\n */\nmxConnectionHandler.prototype.isStartEvent = function(me)\n{\n\treturn ((this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null) ||\n\t\t(this.previous != null && this.error == null && (this.icons == null || (this.icons != null &&\n\t\tthis.icon != null))));\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a new connection.\n */\nmxConnectionHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownCounter++;\n\t\n\tif (this.isEnabled() && this.graph.isEnabled() && !me.isConsumed() &&\n\t\t!this.isConnecting() && this.isStartEvent(me))\n\t{\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t{\n\t\t\tthis.sourceConstraint = this.constraintHandler.currentConstraint;\n\t\t\tthis.previous = this.constraintHandler.currentFocus;\n\t\t\tthis.first = this.constraintHandler.currentPoint.clone();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Stores the location of the initial mousedown\n\t\t\tthis.first = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t}\n\t\n\t\tthis.edgeState = this.createEdgeState(me);\n\t\tthis.mouseDownCounter = 1;\n\t\t\n\t\tif (this.waypointsEnabled && this.shape == null)\n\t\t{\n\t\t\tthis.waypoints = null;\n\t\t\tthis.shape = this.createShape();\n\t\t\t\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tthis.shape.apply(this.edgeState);\n\t\t\t}\n\t\t}\n\n\t\t// Stores the starting point in the geometry of the preview\n\t\tif (this.previous == null && this.edgeState != null)\n\t\t{\n\t\t\tvar pt = this.graph.getPointForEvent(me.getEvent());\n\t\t\tthis.edgeState.cell.geometry.setTerminalPoint(pt, true);\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.START, 'state', this.previous));\n\n\t\tme.consume();\n\t}\n\n\tthis.selectedIcon = this.icon;\n\tthis.icon = null;\n};\n\n/**\n * Function: isImmediateConnectSource\n * \n * Returns true if a tap on the given source state should immediately start\n * connecting. This implementation returns true if the state is not movable\n * in the graph. \n */\nmxConnectionHandler.prototype.isImmediateConnectSource = function(state)\n{\n\treturn !this.graph.isCellMovable(state.cell);\n};\n\n/**\n * Function: createEdgeState\n * \n * Hook to return an <mxCellState> which may be used during the preview.\n * This implementation returns null.\n * \n * Use the following code to create a preview for an existing edge style:\n * \n * (code)\n * graph.connectionHandler.createEdgeState = function(me)\n * {\n *   var edge = graph.createEdge(null, null, null, null, null, 'edgeStyle=elbowEdgeStyle');\n *   \n *   return new mxCellState(this.graph.view, edge, this.graph.getCellStyle(edge));\n * };\n * (end)\n */\nmxConnectionHandler.prototype.createEdgeState = function(me)\n{\n\treturn null;\n};\n\n/**\n * Function: isOutlineConnectEvent\n * \n * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n * or shift is pressed.\n */\nmxConnectionHandler.prototype.isOutlineConnectEvent = function(me)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar evt = me.getEvent();\n\t\n\tvar clientX = mxEvent.getClientX(evt);\n\tvar clientY = mxEvent.getClientY(evt);\n\t\n\tvar doc = document.documentElement;\n\tvar left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n\tvar top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);\n\t\n\tvar gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n\tvar gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n\n\treturn this.outlineConnect && !mxEvent.isShiftDown(me.getEvent()) &&\n\t\t(me.isSource(this.marker.highlight.shape) ||\n\t\t(mxEvent.isAltDown(me.getEvent()) && me.getState() != null) ||\n\t\tthis.marker.highlight.isHighlightAt(clientX, clientY) ||\n\t\t((gridX != clientX || gridY != clientY) && me.getState() == null &&\n\t\tthis.marker.highlight.isHighlightAt(gridX, gridY)));\n};\n\n/**\n * Function: updateCurrentState\n * \n * Updates the current state for a given mouse move event by using\n * the <marker>.\n */\nmxConnectionHandler.prototype.updateCurrentState = function(me, point)\n{\n\tthis.constraintHandler.update(me, this.first == null, false, (this.first == null ||\n\t\tme.isSource(this.marker.highlight.shape)) ? null : point);\n\t\n\tif (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null)\n\t{\n\t\t// Handles special case where grid is large and connection point is at actual point in which\n\t\t// case the outline is not followed as long as we're < gridSize / 2 away from that point\n\t\tif (this.marker.highlight != null && this.marker.highlight.state != null &&\n\t\t\tthis.marker.highlight.state.cell == this.constraintHandler.currentFocus.cell)\n\t\t{\n\t\t\t// Direct repaint needed if cell already highlighted\n\t\t\tif (this.marker.highlight.shape.stroke != 'transparent')\n\t\t\t{\n\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n\t\t}\n\n\t\t// Updates validation state\n\t\tif (this.previous != null)\n\t\t{\n\t\t\tthis.error = this.validateConnection(this.previous.cell, this.constraintHandler.currentFocus.cell);\n\t\t\t\n\t\t\tif (this.error == null)\n\t\t\t{\n\t\t\t\tthis.currentState = this.constraintHandler.currentFocus;\n\t\t\t}\n\t\t\t\t\t\n\t\t\tif (this.error != null || (this.currentState != null &&\n\t\t\t\t!this.isCellEnabled(this.currentState.cell)))\n\t\t\t{\n\t\t\t\tthis.constraintHandler.reset();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.graph.isIgnoreTerminalEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.marker.reset();\n\t\t\tthis.currentState = null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.process(me);\n\t\t\tthis.currentState = this.marker.getValidState();\n\t\t}\n\t\t\t\n\t\tif (this.currentState != null && !this.isCellEnabled(this.currentState.cell))\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t\tthis.marker.reset();\n\t\t\tthis.currentState = null;\n\t\t}\n\n\t\tvar outline = this.isOutlineConnectEvent(me);\n\t\t\n\t\tif (this.currentState != null && outline)\n\t\t{\n\t\t\t// Handles special case where mouse is on outline away from actual end point\n\t\t\t// in which case the grid is ignored and mouse point is used instead\n\t\t\tif (me.isSource(this.marker.highlight.shape))\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\t\t\t\n\t\t\tvar constraint = this.graph.getOutlineConstraint(point, this.currentState, me);\n\t\t\tthis.constraintHandler.setFocus(me, this.currentState, false);\n\t\t\tthis.constraintHandler.currentConstraint = constraint;\n\t\t\tthis.constraintHandler.currentPoint = point;\n\t\t}\n\n\t\tif (this.outlineConnect)\n\t\t{\n\t\t\tif (this.marker.highlight != null && this.marker.highlight.shape != null)\n\t\t\t{\n\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\n\t\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t\t\t{\n\t\t\t\t\tthis.marker.highlight.shape.stroke = mxConstants.OUTLINE_HIGHLIGHT_COLOR;\n\t\t\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t} \n\t\t\t\telse if (this.marker.hasValidState())\n\t\t\t\t{\n\t\t\t\t\t// Handles special case where actual end point of edge and current mouse point\n\t\t\t\t\t// are not equal (due to grid snapping) and there is no hit on shape or highlight\n\t\t\t\t\t// but ignores cases where parent is used for non-connectable child cells\n\t\t\t\t\tif (this.graph.isCellConnectable(me.getCell()) &&\n\t\t\t\t\t\tthis.marker.getValidState() != me.getState())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\t\t\tthis.currentState = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.marker.highlight.shape.stroke = mxConstants.DEFAULT_VALID_COLOR;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isCellEnabled\n * \n * Returns true if the given cell allows new connections to be created. This implementation\n * always returns true.\n */\nmxConnectionHandler.prototype.isCellEnabled = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: convertWaypoint\n * \n * Converts the given point from screen coordinates to model coordinates.\n */\nmxConnectionHandler.prototype.convertWaypoint = function(point)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\t\n\tpoint.x = point.x / scale - tr.x;\n\tpoint.y = point.y / scale - tr.y;\n};\n\n/**\n * Function: snapToPreview\n * \n * Called to snap the given point to the current preview. This snaps to the\n * first point of the preview if alt is not pressed.\n */\nmxConnectionHandler.prototype.snapToPreview = function(me, point)\n{\n\tif (!mxEvent.isAltDown(me.getEvent()) && this.previous != null)\n\t{\n\t\tvar tol = this.graph.gridSize * this.graph.view.scale / 2;\t\n\t\tvar tmp = (this.sourceConstraint != null) ? this.first :\n\t\t\tnew mxPoint(this.previous.getCenterX(), this.previous.getCenterY());\n\n\t\tif (Math.abs(tmp.x - me.getGraphX()) < tol)\n\t\t{\n\t\t\tpoint.x = tmp.x;\n\t\t}\n\t\t\n\t\tif (Math.abs(tmp.y - me.getGraphY()) < tol)\n\t\t{\n\t\t\tpoint.y = tmp.y;\n\t\t}\n\t}\t\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview edge or by highlighting\n * a possible source or target terminal.\n */\nmxConnectionHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && (this.ignoreMouseDown || this.first != null || !this.graph.isMouseDown))\n\t{\n\t\t// Handles special case when handler is disabled during highlight\n\t\tif (!this.isEnabled() && this.currentState != null)\n\t\t{\n\t\t\tthis.destroyIcons();\n\t\t\tthis.currentState = null;\n\t\t}\n\n\t\tvar view = this.graph.getView();\n\t\tvar scale = view.scale;\n\t\tvar tr = view.translate;\n\t\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\tthis.error = null;\n\n\t\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t\t{\n\t\t\tpoint = new mxPoint((this.graph.snap(point.x / scale - tr.x) + tr.x) * scale,\n\t\t\t\t(this.graph.snap(point.y / scale - tr.y) + tr.y) * scale);\n\t\t}\n\t\t\n\t\tthis.snapToPreview(me, point);\n\t\tthis.currentPoint = point;\n\t\t\n\t\tif ((this.first != null || (this.isEnabled() && this.graph.isEnabled())) &&\n\t\t\t(this.shape != null || this.first == null ||\n\t\t\tMath.abs(me.getGraphX() - this.first.x) > this.graph.tolerance ||\n\t\t\tMath.abs(me.getGraphY() - this.first.y) > this.graph.tolerance))\n\t\t{\n\t\t\tthis.updateCurrentState(me, point);\n\t\t}\n\n\t\tif (this.first != null)\n\t\t{\n\t\t\tvar constraint = null;\n\t\t\tvar current = point;\n\t\t\t\n\t\t\t// Uses the current point from the constraint handler if available\n\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t\t{\n\t\t\t\tconstraint = this.constraintHandler.currentConstraint;\n\t\t\t\tcurrent = this.constraintHandler.currentPoint.clone();\n\t\t\t}\n\t\t\telse if (this.previous != null && !this.graph.isIgnoreTerminalEvent(me.getEvent()) &&\n\t\t\t\tmxEvent.isShiftDown(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(this.previous.getCenterX() - point.x) <\n\t\t\t\t\tMath.abs(this.previous.getCenterY() - point.y))\n\t\t\t\t{\n\t\t\t\t\tpoint.x = this.previous.getCenterX();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpoint.y = this.previous.getCenterY();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar pt2 = this.first;\n\t\t\t\n\t\t\t// Moves the connect icon with the mouse\n\t\t\tif (this.selectedIcon != null)\n\t\t\t{\n\t\t\t\tvar w = this.selectedIcon.bounds.width;\n\t\t\t\tvar h = this.selectedIcon.bounds.height;\n\t\t\t\t\n\t\t\t\tif (this.currentState != null && this.targetConnectImage)\n\t\t\t\t{\n\t\t\t\t\tvar pos = this.getIconPosition(this.selectedIcon, this.currentState);\n\t\t\t\t\tthis.selectedIcon.bounds.x = pos.x;\n\t\t\t\t\tthis.selectedIcon.bounds.y = pos.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar bounds = new mxRectangle(me.getGraphX() + this.connectIconOffset.x,\n\t\t\t\t\t\tme.getGraphY() + this.connectIconOffset.y, w, h);\n\t\t\t\t\tthis.selectedIcon.bounds = bounds;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.selectedIcon.redraw();\n\t\t\t}\n\n\t\t\t// Uses edge state to compute the terminal points\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(current, constraint);\n\t\t\t\tcurrent = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 1];\n\t\t\t\tpt2 = this.edgeState.absolutePoints[0];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.currentState != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.constraintHandler.currentConstraint == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = this.getTargetPerimeterPoint(this.currentState, me);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent = tmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Computes the source perimeter point\n\t\t\t\tif (this.sourceConstraint == null && this.previous != null)\n\t\t\t\t{\n\t\t\t\t\tvar next = (this.waypoints != null && this.waypoints.length > 0) ?\n\t\t\t\t\t\t\tthis.waypoints[0] : current;\n\t\t\t\t\tvar tmp = this.getSourcePerimeterPoint(this.previous, next, me);\n\t\t\t\t\t\n\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt2 = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Makes sure the cell under the mousepointer can be detected\n\t\t\t// by moving the preview shape away from the mouse. This\n\t\t\t// makes sure the preview shape does not prevent the detection\n\t\t\t// of the cell under the mousepointer even for slow gestures.\n\t\t\tif (this.currentState == null && this.movePreviewAway)\n\t\t\t{\n\t\t\t\tvar tmp = pt2; \n\t\t\t\t\n\t\t\t\tif (this.edgeState != null && this.edgeState.absolutePoints.length >= 2)\n\t\t\t\t{\n\t\t\t\t\tvar tmp2 = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 2];\n\t\t\t\t\t\n\t\t\t\t\tif (tmp2 != null)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = tmp2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar dx = current.x - tmp.x;\n\t\t\t\tvar dy = current.y - tmp.y;\n\t\t\t\t\n\t\t\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\t\n\t\t\t\tif (len == 0)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Stores old point to reuse when creating edge\n\t\t\t\tthis.originalPoint = current.clone();\n\t\t\t\tcurrent.x -= dx * 4 / len;\n\t\t\t\tcurrent.y -= dy * 4 / len;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.originalPoint = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Creates the preview shape (lazy)\n\t\t\tif (this.shape == null)\n\t\t\t{\n\t\t\t\tvar dx = Math.abs(me.getGraphX() - this.first.x);\n\t\t\t\tvar dy = Math.abs(me.getGraphY() - this.first.y);\n\n\t\t\t\tif (dx > this.graph.tolerance || dy > this.graph.tolerance)\n\t\t\t\t{\n\t\t\t\t\tthis.shape = this.createShape();\n\n\t\t\t\t\tif (this.edgeState != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shape.apply(this.edgeState);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Revalidates current connection\n\t\t\t\t\tthis.updateCurrentState(me, point);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Updates the points in the preview edge\n\t\t\tif (this.shape != null)\n\t\t\t{\n\t\t\t\tif (this.edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tthis.shape.points = this.edgeState.absolutePoints;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar pts = [pt2];\n\t\t\t\t\t\n\t\t\t\t\tif (this.waypoints != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpts = pts.concat(this.waypoints);\n\t\t\t\t\t}\n\n\t\t\t\t\tpts.push(current);\n\t\t\t\t\tthis.shape.points = pts;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.drawPreview();\n\t\t\t}\n\t\t\t\n\t\t\t// Makes sure endpoint of edge is visible during connect\n\t\t\tif (this.cursor != null)\n\t\t\t{\n\t\t\t\tthis.graph.container.style.cursor = this.cursor;\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(me.getEvent());\n\t\t\tme.consume();\n\t\t}\n\t\telse if (!this.isEnabled() || !this.graph.isEnabled())\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\telse if (this.previous != this.currentState && this.edgeState == null)\n\t\t{\n\t\t\tthis.destroyIcons();\n\t\t\t\n\t\t\t// Sets the cursor on the current shape\t\t\t\t\n\t\t\tif (this.currentState != null && this.error == null && this.constraintHandler.currentConstraint == null)\n\t\t\t{\n\t\t\t\tthis.icons = this.createIcons(this.currentState);\n\n\t\t\t\tif (this.icons == null)\n\t\t\t\t{\n\t\t\t\t\tthis.currentState.setCursor(mxConstants.CURSOR_CONNECT);\n\t\t\t\t\tme.consume();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.previous = this.currentState;\n\t\t}\n\t\telse if (this.previous == this.currentState && this.currentState != null && this.icons == null &&\n\t\t\t!this.graph.isMouseDown)\n\t\t{\n\t\t\t// Makes sure that no cursors are changed\n\t\t\tme.consume();\n\t\t}\n\n\t\tif (!this.graph.isMouseDown && this.currentState != null && this.icons != null)\n\t\t{\n\t\t\tvar hitsIcon = false;\n\t\t\tvar target = me.getSource();\n\t\t\t\n\t\t\tfor (var i = 0; i < this.icons.length && !hitsIcon; i++)\n\t\t\t{\n\t\t\t\thitsIcon = target == this.icons[i].node || target.parentNode == this.icons[i].node;\n\t\t\t}\n\n\t\t\tif (!hitsIcon)\n\t\t\t{\n\t\t\t\tthis.updateIcons(this.currentState, this.icons, me);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.constraintHandler.reset();\n\t}\n};\n\n/**\n * Function: updateEdgeState\n * \n * Updates <edgeState>.\n */\nmxConnectionHandler.prototype.updateEdgeState = function(current, constraint)\n{\n\t// TODO: Use generic method for writing constraint to style\n\tif (this.sourceConstraint != null && this.sourceConstraint.point != null)\n\t{\n\t\tthis.edgeState.style[mxConstants.STYLE_EXIT_X] = this.sourceConstraint.point.x;\n\t\tthis.edgeState.style[mxConstants.STYLE_EXIT_Y] = this.sourceConstraint.point.y;\n\t}\n\n\tif (constraint != null && constraint.point != null)\n\t{\n\t\tthis.edgeState.style[mxConstants.STYLE_ENTRY_X] = constraint.point.x;\n\t\tthis.edgeState.style[mxConstants.STYLE_ENTRY_Y] = constraint.point.y;\n\t}\n\telse\n\t{\n\t\tdelete this.edgeState.style[mxConstants.STYLE_ENTRY_X];\n\t\tdelete this.edgeState.style[mxConstants.STYLE_ENTRY_Y];\n\t}\n\t\n\tthis.edgeState.absolutePoints = [null, (this.currentState != null) ? null : current];\n\tthis.graph.view.updateFixedTerminalPoint(this.edgeState, this.previous, true, this.sourceConstraint);\n\t\n\tif (this.currentState != null)\n\t{\n\t\tif (constraint == null)\n\t\t{\n\t\t\tconstraint = this.graph.getConnectionConstraint(this.edgeState, this.previous, false);\n\t\t}\n\t\t\n\t\tthis.edgeState.setAbsoluteTerminalPoint(null, false);\n\t\tthis.graph.view.updateFixedTerminalPoint(this.edgeState, this.currentState, false, constraint);\n\t}\n\t\n\t// Scales and translates the waypoints to the model\n\tvar realPoints = null;\n\t\n\tif (this.waypoints != null)\n\t{\n\t\trealPoints = [];\n\t\t\n\t\tfor (var i = 0; i < this.waypoints.length; i++)\n\t\t{\n\t\t\tvar pt = this.waypoints[i].clone();\n\t\t\tthis.convertWaypoint(pt);\n\t\t\trealPoints[i] = pt;\n\t\t}\n\t}\n\t\n\tthis.graph.view.updatePoints(this.edgeState, realPoints, this.previous, this.currentState);\n\tthis.graph.view.updateFloatingTerminalPoints(this.edgeState, this.previous, this.currentState);\n};\n\n/**\n * Function: getTargetPerimeterPoint\n * \n * Returns the perimeter point for the given target state.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the target cell state.\n * me - <mxMouseEvent> that represents the mouse move.\n */\nmxConnectionHandler.prototype.getTargetPerimeterPoint = function(state, me)\n{\n\tvar result = null;\n\tvar view = state.view;\n\tvar targetPerimeter = view.getPerimeterFunction(state);\n\t\n\tif (targetPerimeter != null)\n\t{\n\t\tvar next = (this.waypoints != null && this.waypoints.length > 0) ?\n\t\t\t\tthis.waypoints[this.waypoints.length - 1] :\n\t\t\t\tnew mxPoint(this.previous.getCenterX(), this.previous.getCenterY());\n\t\tvar tmp = targetPerimeter(view.getPerimeterBounds(state),\n\t\t\tthis.edgeState, next, false);\n\t\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tresult = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = new mxPoint(state.getCenterX(), state.getCenterY());\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getSourcePerimeterPoint\n * \n * Hook to update the icon position(s) based on a mouseOver event. This is\n * an empty implementation.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the target cell state.\n * next - <mxPoint> that represents the next point along the previewed edge.\n * me - <mxMouseEvent> that represents the mouse move.\n */\nmxConnectionHandler.prototype.getSourcePerimeterPoint = function(state, next, me)\n{\n\tvar result = null;\n\tvar view = state.view;\n\tvar sourcePerimeter = view.getPerimeterFunction(state);\n\tvar c = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\n\tif (sourcePerimeter != null)\n\t{\n\t\tvar theta = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\tvar rad = -theta * (Math.PI / 180);\n\t\t\n\t\tif (theta != 0)\n\t\t{\n\t\t\tnext = mxUtils.getRotatedPoint(new mxPoint(next.x, next.y), Math.cos(rad), Math.sin(rad), c);\n\t\t}\n\t\t\n\t\tvar tmp = sourcePerimeter(view.getPerimeterBounds(state), state, next, false);\n\t\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tif (theta != 0)\n\t\t\t{\n\t\t\t\ttmp = mxUtils.getRotatedPoint(new mxPoint(tmp.x, tmp.y), Math.cos(-rad), Math.sin(-rad), c);\n\t\t\t}\n\t\t\t\n\t\t\tresult = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = c;\n\t}\n\t\n\treturn result;\n};\n\n\n/**\n * Function: updateIcons\n * \n * Hook to update the icon position(s) based on a mouseOver event. This is\n * an empty implementation.\n * \n * Parameters:\n * \n * state - <mxCellState> under the mouse.\n * icons - Array of currently displayed icons.\n * me - <mxMouseEvent> that contains the mouse event.\n */\nmxConnectionHandler.prototype.updateIcons = function(state, icons, me)\n{\n\t// empty\n};\n\n/**\n * Function: isStopEvent\n * \n * Returns true if the given mouse up event should stop this handler. The\n * connection will be created if <error> is null. Note that this is only\n * called if <waypointsEnabled> is true. This implemtation returns true\n * if there is a cell state in the given event.\n */\nmxConnectionHandler.prototype.isStopEvent = function(me)\n{\n\treturn me.getState() != null;\n};\n\n/**\n * Function: addWaypoint\n * \n * Adds the waypoint for the given event to <waypoints>.\n */\nmxConnectionHandler.prototype.addWaypointForEvent = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\tvar dx = Math.abs(point.x - this.first.x);\n\tvar dy = Math.abs(point.y - this.first.y);\n\tvar addPoint = this.waypoints != null || (this.mouseDownCounter > 1 &&\n\t\t\t(dx > this.graph.tolerance || dy > this.graph.tolerance));\n\n\tif (addPoint)\n\t{\n\t\tif (this.waypoints == null)\n\t\t{\n\t\t\tthis.waypoints = [];\n\t\t}\n\t\t\n\t\tvar scale = this.graph.view.scale;\n\t\tvar point = new mxPoint(this.graph.snap(me.getGraphX() / scale) * scale,\n\t\t\t\tthis.graph.snap(me.getGraphY() / scale) * scale);\n\t\tthis.waypoints.push(point);\n\t}\n};\n\n/**\n * Function: checkConstraints\n * \n * Returns true if the connection for the given constraints is valid. This\n * implementation returns true if the constraints are not pointing to the\n * same fixed connection point.\n */\nmxConnectionHandler.prototype.checkConstraints = function(c1, c2)\n{\n\treturn (c1 == null || c2 == null || c1.point == null || c2.point == null ||\n\t\t!c1.point.equals(c2.point) || c1.dx != c2.dx || c1.dy != c2.dy ||\n\t\tc1.perimeter != c2.perimeter);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by inserting the new connection.\n */\nmxConnectionHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isConnecting())\n\t{\n\t\tif (this.waypointsEnabled && !this.isStopEvent(me))\n\t\t{\n\t\t\tthis.addWaypointForEvent(me);\n\t\t\tme.consume();\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar c1 = this.sourceConstraint;\n\t\tvar c2 = this.constraintHandler.currentConstraint;\n\n\t\tvar source = (this.previous != null) ? this.previous.cell : null;\n\t\tvar target = null;\n\t\t\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t{\n\t\t\ttarget = this.constraintHandler.currentFocus.cell;\n\t\t}\n\t\t\n\t\tif (target == null && this.currentState != null)\n\t\t{\n\t\t\ttarget = this.currentState.cell;\n\t\t}\n\t\t\n\t\t// Inserts the edge if no validation error exists and if constraints differ\n\t\tif (this.error == null && (source == null || target == null ||\n\t\t\tsource != target || this.checkConstraints(c1, c2)))\n\t\t{\n\t\t\tthis.connect(source, target, me.getEvent(), me.getCell());\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Selects the source terminal for self-references\n\t\t\tif (this.previous != null && this.marker.validState != null &&\n\t\t\t\tthis.previous.cell == this.marker.validState.cell)\n\t\t\t{\n\t\t\t\tthis.graph.selectCellForEvent(this.marker.source, me.getEvent());\n\t\t\t}\n\t\t\t\n\t\t\t// Displays the error message if it is not an empty string,\n\t\t\t// for empty error messages, the event is silently dropped\n\t\t\tif (this.error != null && this.error.length > 0)\n\t\t\t{\n\t\t\t\tthis.graph.validationAlert(this.error);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Redraws the connect icons and resets the handler state\n\t\tthis.destroyIcons();\n\t\tme.consume();\n\t}\n\n\tif (this.first != null)\n\t{\n\t\tthis.reset();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxConnectionHandler.prototype.reset = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\t// Resets the cursor on the container\n\tif (this.cursor != null && this.graph.container != null)\n\t{\n\t\tthis.graph.container.style.cursor = '';\n\t}\n\t\n\tthis.destroyIcons();\n\tthis.marker.reset();\n\tthis.constraintHandler.reset();\n\tthis.originalPoint = null;\n\tthis.currentPoint = null;\n\tthis.edgeState = null;\n\tthis.previous = null;\n\tthis.error = null;\n\tthis.sourceConstraint = null;\n\tthis.mouseDownCounter = 0;\n\tthis.first = null;\n\n\tthis.fireEvent(new mxEventObject(mxEvent.RESET));\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview edge using the color and width returned by\n * <getEdgeColor> and <getEdgeWidth>.\n */\nmxConnectionHandler.prototype.drawPreview = function()\n{\n\tthis.updatePreview(this.error == null);\n\tthis.shape.redraw();\n};\n\n/**\n * Function: getEdgeColor\n * \n * Returns the color used to draw the preview edge. This returns green if\n * there is no edge validation error and red otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the color for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.updatePreview = function(valid)\n{\n\tthis.shape.strokewidth = this.getEdgeWidth(valid);\n\tthis.shape.stroke = this.getEdgeColor(valid);\n};\n\n/**\n * Function: getEdgeColor\n * \n * Returns the color used to draw the preview edge. This returns green if\n * there is no edge validation error and red otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the color for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.getEdgeColor = function(valid)\n{\n\treturn (valid) ? mxConstants.VALID_COLOR : mxConstants.INVALID_COLOR;\n};\n\t\n/**\n * Function: getEdgeWidth\n * \n * Returns the width used to draw the preview edge. This returns 3 if\n * there is no edge validation error and 1 otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the width for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.getEdgeWidth = function(valid)\n{\n\treturn (valid) ? 3 : 1;\n};\n\n/**\n * Function: connect\n * \n * Connects the given source and target using a new edge. This\n * implementation uses <createEdge> to create the edge.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * evt - Mousedown event of the connect gesture.\n * dropTarget - <mxCell> that represents the cell under the mouse when it was\n * released.\n */\nmxConnectionHandler.prototype.connect = function(source, target, evt, dropTarget)\n{\n\tif (target != null || this.isCreateTarget(evt) || this.graph.allowDanglingEdges)\n\t{\n\t\t// Uses the common parent of source and target or\n\t\t// the default parent to insert the edge\n\t\tvar model = this.graph.getModel();\n\t\tvar terminalInserted = false;\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (source != null && target == null && !this.graph.isIgnoreTerminalEvent(evt) && this.isCreateTarget(evt))\n\t\t\t{\n\t\t\t\ttarget = this.createTargetVertex(evt, source);\n\t\t\t\t\n\t\t\t\tif (target != null)\n\t\t\t\t{\n\t\t\t\t\tdropTarget = this.graph.getDropTarget([target], evt, dropTarget);\n\t\t\t\t\tterminalInserted = true;\n\t\t\t\t\t\n\t\t\t\t\t// Disables edges as drop targets if the target cell was created\n\t\t\t\t\t// FIXME: Should not shift if vertex was aligned (same in Java)\n\t\t\t\t\tif (dropTarget == null || !this.graph.getModel().isEdge(dropTarget))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pstate = this.graph.getView().getState(dropTarget);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (pstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tmp = model.getGeometry(target);\n\t\t\t\t\t\t\ttmp.x -= pstate.origin.x;\n\t\t\t\t\t\t\ttmp.y -= pstate.origin.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdropTarget = this.graph.getDefaultParent();\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\tthis.graph.addCell(target, dropTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar parent = this.graph.getDefaultParent();\n\n\t\t\tif (source != null && target != null &&\n\t\t\t\tmodel.getParent(source) == model.getParent(target) &&\n\t\t\t\tmodel.getParent(model.getParent(source)) != model.getRoot())\n\t\t\t{\n\t\t\t\tparent = model.getParent(source);\n\n\t\t\t\tif ((source.geometry != null && source.geometry.relative) &&\n\t\t\t\t\t(target.geometry != null && target.geometry.relative))\n\t\t\t\t{\n\t\t\t\t\tparent = model.getParent(parent);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Uses the value of the preview edge state for inserting\n\t\t\t// the new edge into the graph\n\t\t\tvar value = null;\n\t\t\tvar style = null;\n\t\t\t\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tvalue = this.edgeState.cell.value;\n\t\t\t\tstyle = this.edgeState.cell.style;\n\t\t\t}\n\n\t\t\tedge = this.insertEdge(parent, null, value, source, target, style);\n\t\t\t\n\t\t\tif (edge != null)\n\t\t\t{\n\t\t\t\t// Updates the connection constraints\n\t\t\t\tthis.graph.setConnectionConstraint(edge, source, true, this.sourceConstraint);\n\t\t\t\tthis.graph.setConnectionConstraint(edge, target, false, this.constraintHandler.currentConstraint);\n\t\t\t\t\n\t\t\t\t// Uses geometry of the preview edge state\n\t\t\t\tif (this.edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tmodel.setGeometry(edge, this.edgeState.cell.geometry);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar parent = model.getParent(source);\n\t\t\t\t\n\t\t\t\t// Inserts edge before source\n\t\t\t\tif (this.isInsertBefore(edge, source, target, evt, dropTarget))\n\t\t\t\t{\n\t\t\t\t\tvar index = null;\n\t\t\t\t\tvar tmp = source;\n\n\t\t\t\t\twhile (tmp.parent != null && tmp.geometry != null &&\n\t\t\t\t\t\ttmp.geometry.relative && tmp.parent != edge.parent)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = this.graph.model.getParent(tmp);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tmp != null && tmp.parent != null && tmp.parent == edge.parent)\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.add(parent, edge, tmp.parent.getIndex(tmp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Makes sure the edge has a non-null, relative geometry\n\t\t\t\tvar geo = model.getGeometry(edge);\n\n\t\t\t\tif (geo == null)\n\t\t\t\t{\n\t\t\t\t\tgeo = new mxGeometry();\n\t\t\t\t\tgeo.relative = true;\n\t\t\t\t\t\n\t\t\t\t\tmodel.setGeometry(edge, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Uses scaled waypoints in geometry\n\t\t\t\tif (this.waypoints != null && this.waypoints.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\tvar tr = this.graph.view.translate;\n\t\t\t\t\tgeo.points = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < this.waypoints.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pt = this.waypoints[i];\n\t\t\t\t\t\tgeo.points.push(new mxPoint(pt.x / s - tr.x, pt.y / s - tr.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\tvar t = this.graph.view.translate;\n\t\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\tvar pt = (this.originalPoint != null) ?\n\t\t\t\t\t\t\tnew mxPoint(this.originalPoint.x / s - t.x, this.originalPoint.y / s - t.y) :\n\t\t\t\t\t\tnew mxPoint(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n\t\t\t\t\tpt.x -= this.graph.panDx / this.graph.view.scale;\n\t\t\t\t\tpt.y -= this.graph.panDy / this.graph.view.scale;\n\t\t\t\t\tgeo.setTerminalPoint(pt, false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CONNECT, 'cell', edge, 'terminal', target,\n\t\t\t\t\t'event', evt, 'target', dropTarget, 'terminalInserted', terminalInserted));\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxLog.show();\n\t\t\tmxLog.debug(e.message);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t\t\n\t\tif (this.select)\n\t\t{\n\t\t\tthis.selectCells(edge, (terminalInserted) ? target : null);\n\t\t}\n\t}\n};\n\n/**\n * Function: selectCells\n * \n * Selects the given edge after adding a new connection. The target argument\n * contains the target vertex if one has been inserted.\n */\nmxConnectionHandler.prototype.selectCells = function(edge, target)\n{\n\tthis.graph.setSelectionCell(edge);\n};\n\n/**\n * Function: insertEdge\n * \n * Creates, inserts and returns the new edge for the given parameters. This\n * implementation does only use <createEdge> if <factoryMethod> is defined,\n * otherwise <mxGraph.insertEdge> will be used.\n */\nmxConnectionHandler.prototype.insertEdge = function(parent, id, value, source, target, style)\n{\n\tif (this.factoryMethod == null)\n\t{\n\t\treturn this.graph.insertEdge(parent, id, value, source, target, style);\n\t}\n\telse\n\t{\n\t\tvar edge = this.createEdge(value, source, target, style);\n\t\tedge = this.graph.addEdge(edge, parent, source, target);\n\t\t\n\t\treturn edge;\n\t}\n};\n\n/**\n * Function: createTargetVertex\n * \n * Hook method for creating new vertices on the fly if no target was\n * under the mouse. This is only called if <createTarget> is true and\n * returns null.\n * \n * Parameters:\n * \n * evt - Mousedown event of the connect gesture.\n * source - <mxCell> that represents the source terminal.\n */\nmxConnectionHandler.prototype.createTargetVertex = function(evt, source)\n{\n\t// Uses the first non-relative source\n\tvar geo = this.graph.getCellGeometry(source);\n\t\n\twhile (geo != null && geo.relative)\n\t{\n\t\tsource = this.graph.getModel().getParent(source);\n\t\tgeo = this.graph.getCellGeometry(source);\n\t}\n\t\n\tvar clone = this.graph.cloneCell(source);\n\tvar geo = this.graph.getModel().getGeometry(clone);\n\t\n\tif (geo != null)\n\t{\n\t\tvar t = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\tvar point = new mxPoint(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n\t\tgeo.x = Math.round(point.x - geo.width / 2 - this.graph.panDx / s);\n\t\tgeo.y = Math.round(point.y - geo.height / 2 - this.graph.panDy / s);\n\n\t\t// Aligns with source if within certain tolerance\n\t\tvar tol = this.getAlignmentTolerance();\n\t\t\n\t\tif (tol > 0)\n\t\t{\n\t\t\tvar sourceState = this.graph.view.getState(source);\n\t\t\t\n\t\t\tif (sourceState != null)\n\t\t\t{\n\t\t\t\tvar x = sourceState.x / s - t.x;\n\t\t\t\tvar y = sourceState.y / s - t.y;\n\t\t\t\t\n\t\t\t\tif (Math.abs(x - geo.x) <= tol)\n\t\t\t\t{\n\t\t\t\t\tgeo.x = Math.round(x);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(y - geo.y) <= tol)\n\t\t\t\t{\n\t\t\t\t\tgeo.y = Math.round(y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn clone;\t\t\n};\n\n/**\n * Function: getAlignmentTolerance\n * \n * Returns the tolerance for aligning new targets to sources. This returns the grid size / 2.\n */\nmxConnectionHandler.prototype.getAlignmentTolerance = function(evt)\n{\n\treturn (this.graph.isGridEnabled()) ? this.graph.gridSize / 2 : this.graph.tolerance;\n};\n\n/**\n * Function: createEdge\n * \n * Creates and returns a new edge using <factoryMethod> if one exists. If\n * no factory method is defined, then a new default edge is returned. The\n * source and target arguments are informal, the actual connection is\n * setup later by the caller of this function.\n * \n * Parameters:\n * \n * value - Value to be used for creating the edge.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * style - Optional style from the preview edge.\n */\nmxConnectionHandler.prototype.createEdge = function(value, source, target, style)\n{\n\tvar edge = null;\n\t\n\t// Creates a new edge using the factoryMethod\n\tif (this.factoryMethod != null)\n\t{\n\t\tedge = this.factoryMethod(source, target, style);\n\t}\n\t\n\tif (edge == null)\n\t{\n\t\tedge = new mxCell(value || '');\n\t\tedge.setEdge(true);\n\t\tedge.setStyle(style);\n\t\t\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\tedge.setGeometry(geo);\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This should be\n * called on all instances. It is called automatically for the built-in\n * instance created for each <mxGraph>.\n */\nmxConnectionHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.destroy();\n\t\tthis.marker = null;\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.destroy();\n\t\tthis.constraintHandler = null;\n\t}\n\n\tif (this.changeHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t\tthis.graph.getView().removeListener(this.changeHandler);\n\t\tthis.changeHandler = null;\n\t}\n\t\n\tif (this.drillHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.drillHandler);\n\t\tthis.graph.getView().removeListener(this.drillHandler);\n\t\tthis.drillHandler = null;\n\t}\n\t\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n};\n\n__mxOutput.mxConnectionHandler = typeof mxConnectionHandler !== 'undefined' ? mxConnectionHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConstraintHandler\n *\n * Handles constraints on connection targets. This class is in charge of\n * showing fixed points when the mouse is over a vertex and handles constraints\n * to establish new connections.\n *\n * Constructor: mxConstraintHandler\n *\n * Constructs an new constraint handler.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * factoryMethod - Optional function to create the edge. The function takes\n * the source and target <mxCell> as the first and second argument and\n * returns the <mxCell> that represents the new edge.\n */\nfunction mxConstraintHandler(graph)\n{\n\tthis.graph = graph;\n\t\n\t// Adds a graph model listener to update the current focus on changes\n\tthis.resetHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.currentFocus != null && this.graph.view.getState(this.currentFocus.cell) == null)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.redraw();\n\t\t}\n\t});\n\t\n\tthis.graph.model.addListener(mxEvent.CHANGE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE_AND_TRANSLATE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.TRANSLATE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE, this.resetHandler);\n\tthis.graph.addListener(mxEvent.ROOT, this.resetHandler);\n};\n\n/**\n * Variable: pointImage\n * \n * <mxImage> to be used as the image for fixed connection points.\n */\nmxConstraintHandler.prototype.pointImage = new mxImage(mxClient.imageBasePath + '/point.gif', 5, 5);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxConstraintHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxConstraintHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightColor\n * \n * Specifies the color for the highlight. Default is <mxConstants.DEFAULT_VALID_COLOR>.\n */\nmxConstraintHandler.prototype.highlightColor = mxConstants.DEFAULT_VALID_COLOR;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxConstraintHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxConstraintHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxConstraintHandler.prototype.reset = function()\n{\n\tif (this.focusIcons != null)\n\t{\n\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t{\n\t\t\tthis.focusIcons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.focusIcons = null;\n\t}\n\t\n\tif (this.focusHighlight != null)\n\t{\n\t\tthis.focusHighlight.destroy();\n\t\tthis.focusHighlight = null;\n\t}\n\t\n\tthis.currentConstraint = null;\n\tthis.currentFocusArea = null;\n\tthis.currentPoint = null;\n\tthis.currentFocus = null;\n\tthis.focusPoints = null;\n};\n\n/**\n * Function: getTolerance\n * \n * Returns the tolerance to be used for intersecting connection points. This\n * implementation returns <mxGraph.tolerance>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> whose tolerance should be returned.\n */\nmxConstraintHandler.prototype.getTolerance = function(me)\n{\n\treturn this.graph.getTolerance();\n};\n\n/**\n * Function: getImageForConstraint\n * \n * Returns the tolerance to be used for intersecting connection points.\n */\nmxConstraintHandler.prototype.getImageForConstraint = function(state, constraint, point)\n{\n\treturn this.pointImage;\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the given <mxMouseEvent> should be ignored in <update>. This\n * implementation always returns false.\n */\nmxConstraintHandler.prototype.isEventIgnored = function(me, source)\n{\n\treturn false;\n};\n\n/**\n * Function: isStateIgnored\n * \n * Returns true if the given state should be ignored. This always returns false.\n */\nmxConstraintHandler.prototype.isStateIgnored = function(state, source)\n{\n\treturn false;\n};\n\n/**\n * Function: destroyIcons\n * \n * Destroys the <focusIcons> if they exist.\n */\nmxConstraintHandler.prototype.destroyIcons = function()\n{\n\tif (this.focusIcons != null)\n\t{\n\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t{\n\t\t\tthis.focusIcons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.focusIcons = null;\n\t\tthis.focusPoints = null;\n\t}\n};\n\n/**\n * Function: destroyFocusHighlight\n * \n * Destroys the <focusHighlight> if one exists.\n */\nmxConstraintHandler.prototype.destroyFocusHighlight = function()\n{\n\tif (this.focusHighlight != null)\n\t{\n\t\tthis.focusHighlight.destroy();\n\t\tthis.focusHighlight = null;\n\t}\n};\n\n/**\n * Function: isKeepFocusEvent\n * \n * Returns true if the current focused state should not be changed for the given event.\n * This returns true if shift and alt are pressed.\n */\nmxConstraintHandler.prototype.isKeepFocusEvent = function(me)\n{\n\treturn mxEvent.isShiftDown(me.getEvent());\n};\n\n/**\n * Function: getCellForEvent\n * \n * Returns the cell for the given event.\n */\nmxConstraintHandler.prototype.getCellForEvent = function(me, point)\n{\n\tvar cell = me.getCell();\n\t\n\t// Gets cell under actual point if different from event location\n\tif (cell == null && point != null && (me.getGraphX() != point.x || me.getGraphY() != point.y))\n\t{\n\t\tcell = this.graph.getCellAt(point.x, point.y);\n\t}\n\t\n\t// Uses connectable parent vertex if one exists\n\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\n\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t{\n\t\t\tcell = parent;\n\t\t}\n\t}\n\t\n\treturn (this.graph.isCellLocked(cell)) ? null : cell;\n};\n\n/**\n * Function: update\n * \n * Updates the state of this handler based on the given <mxMouseEvent>.\n * Source is a boolean indicating if the cell is a source or target.\n */\nmxConstraintHandler.prototype.update = function(me, source, existingEdge, point)\n{\n\tif (this.isEnabled() && !this.isEventIgnored(me))\n\t{\n\t\t// Lazy installation of mouseleave handler\n\t\tif (this.mouseleaveHandler == null && this.graph.container != null)\n\t\t{\n\t\t\tthis.mouseleaveHandler = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.reset();\n\t\t\t});\n\n\t\t\tmxEvent.addListener(this.graph.container, 'mouseleave', this.resetHandler);\t\n\t\t}\n\t\t\n\t\tvar tol = this.getTolerance(me);\n\t\tvar x = (point != null) ? point.x : me.getGraphX();\n\t\tvar y = (point != null) ? point.y : me.getGraphY();\n\t\tvar grid = new mxRectangle(x - tol, y - tol, 2 * tol, 2 * tol);\n\t\tvar mouse = new mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol);\n\t\tvar state = this.graph.view.getState(this.getCellForEvent(me, point));\n\n\t\t// Keeps focus icons visible while over vertex bounds and no other cell under mouse or shift is pressed\n\t\tif (!this.isKeepFocusEvent(me) && (this.currentFocusArea == null || this.currentFocus == null ||\n\t\t\t(state != null) || !this.graph.getModel().isVertex(this.currentFocus.cell) ||\n\t\t\t!mxUtils.intersects(this.currentFocusArea, mouse)) && (state != this.currentFocus))\n\t\t{\n\t\t\tthis.currentFocusArea = null;\n\t\t\tthis.currentFocus = null;\n\t\t\tthis.setFocus(me, state, source);\n\t\t}\n\n\t\tthis.currentConstraint = null;\n\t\tthis.currentPoint = null;\n\t\tvar minDistSq = null;\n\t\t\n\t\tif (this.focusIcons != null && this.constraints != null &&\n\t\t\t(state == null || this.currentFocus == state))\n\t\t{\n\t\t\tvar cx = mouse.getCenterX();\n\t\t\tvar cy = mouse.getCenterY();\n\t\t\t\n\t\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t\t{\n\t\t\t\tvar dx = cx - this.focusIcons[i].bounds.getCenterX();\n\t\t\t\tvar dy = cy - this.focusIcons[i].bounds.getCenterY();\n\t\t\t\tvar tmp = dx * dx + dy * dy;\n\t\t\t\t\n\t\t\t\tif ((this.intersects(this.focusIcons[i], mouse, source, existingEdge) || (point != null &&\n\t\t\t\t\tthis.intersects(this.focusIcons[i], grid, source, existingEdge))) &&\n\t\t\t\t\t(minDistSq == null || tmp < minDistSq))\n\t\t\t\t{\n\t\t\t\t\tthis.currentConstraint = this.constraints[i];\n\t\t\t\t\tthis.currentPoint = this.focusPoints[i];\n\t\t\t\t\tminDistSq = tmp;\n\t\t\t\t\t\n\t\t\t\t\tvar tmp = this.focusIcons[i].bounds.clone();\n\t\t\t\t\ttmp.grow(mxConstants.HIGHLIGHT_SIZE + 1);\n\t\t\t\t\ttmp.width -= 1;\n\t\t\t\t\ttmp.height -= 1;\n\t\t\t\t\t\n\t\t\t\t\tif (this.focusHighlight == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar hl = this.createHighlightShape();\n\t\t\t\t\t\thl.dialect = (this.graph.dialect == mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\t\t\tmxConstants.DIALECT_SVG : mxConstants.DIALECT_VML;\n\t\t\t\t\t\thl.pointerEvents = false;\n\n\t\t\t\t\t\thl.init(this.graph.getView().getOverlayPane());\n\t\t\t\t\t\tthis.focusHighlight = hl;\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar getState = mxUtils.bind(this, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn (this.currentFocus != null) ? this.currentFocus : state;\n\t\t\t\t\t\t});\n\t\n\t\t\t\t\t\tmxEvent.redirectMouseEvents(hl.node, this.graph, getState);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.focusHighlight.bounds = tmp;\n\t\t\t\t\tthis.focusHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.currentConstraint == null)\n\t\t{\n\t\t\tthis.destroyFocusHighlight();\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.currentConstraint = null;\n\t\tthis.currentFocus = null;\n\t\tthis.currentPoint = null;\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Transfers the focus to the given state as a source or target terminal. If\n * the handler is not enabled then the outline is painted, but the constraints\n * are ignored.\n */\nmxConstraintHandler.prototype.redraw = function()\n{\n\tif (this.currentFocus != null && this.constraints != null && this.focusIcons != null)\n\t{\n\t\tvar state = this.graph.view.getState(this.currentFocus.cell);\n\t\tthis.currentFocus = state;\n\t\tthis.currentFocusArea = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\n\t\tfor (var i = 0; i < this.constraints.length; i++)\n\t\t{\n\t\t\tvar cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n\t\t\tvar img = this.getImageForConstraint(state, this.constraints[i], cp);\n\n\t\t\tvar bounds = new mxRectangle(Math.round(cp.x - img.width / 2),\n\t\t\t\tMath.round(cp.y - img.height / 2), img.width, img.height);\n\t\t\tthis.focusIcons[i].bounds = bounds;\n\t\t\tthis.focusIcons[i].redraw();\n\t\t\tthis.currentFocusArea.add(this.focusIcons[i].bounds);\n\t\t\tthis.focusPoints[i] = cp;\n\t\t}\n\t}\t\n};\n\n/**\n * Function: setFocus\n * \n * Transfers the focus to the given state as a source or target terminal. If\n * the handler is not enabled then the outline is painted, but the constraints\n * are ignored.\n */\nmxConstraintHandler.prototype.setFocus = function(me, state, source)\n{\n\tthis.constraints = (state != null && !this.isStateIgnored(state, source) &&\n\t\tthis.graph.isCellConnectable(state.cell)) ? ((this.isEnabled()) ?\n\t\t(this.graph.getAllConnectionConstraints(state, source) || []) : []) : null;\n\n\t// Only uses cells which have constraints\n\tif (this.constraints != null)\n\t{\n\t\tthis.currentFocus = state;\n\t\tthis.currentFocusArea = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\n\t\tif (this.focusIcons != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t\t{\n\t\t\t\tthis.focusIcons[i].destroy();\n\t\t\t}\n\t\t\t\n\t\t\tthis.focusIcons = null;\n\t\t\tthis.focusPoints = null;\n\t\t}\n\t\t\n\t\tthis.focusPoints = [];\n\t\tthis.focusIcons = [];\n\t\t\n\t\tfor (var i = 0; i < this.constraints.length; i++)\n\t\t{\n\t\t\tvar cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n\t\t\tvar img = this.getImageForConstraint(state, this.constraints[i], cp);\n\n\t\t\tvar src = img.src;\n\t\t\tvar bounds = new mxRectangle(Math.round(cp.x - img.width / 2),\n\t\t\t\tMath.round(cp.y - img.height / 2), img.width, img.height);\n\t\t\tvar icon = new mxImageShape(bounds, src);\n\t\t\ticon.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\t\ticon.preserveImageAspect = false;\n\t\t\ticon.init(this.graph.getView().getDecoratorPane());\n\t\t\t\n\t\t\t// Fixes lost event tracking for images in quirks / IE8 standards\n\t\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(icon.node, 'dragstart', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// Move the icon behind all other overlays\n\t\t\tif (icon.node.previousSibling != null)\n\t\t\t{\n\t\t\t\ticon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n\t\t\t}\n\n\t\t\tvar getState = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\treturn (this.currentFocus != null) ? this.currentFocus : state;\n\t\t\t});\n\t\t\t\n\t\t\ticon.redraw();\n\n\t\t\tmxEvent.redirectMouseEvents(icon.node, this.graph, getState);\n\t\t\tthis.currentFocusArea.add(icon.bounds);\n\t\t\tthis.focusIcons.push(icon);\n\t\t\tthis.focusPoints.push(cp);\n\t\t}\n\t\t\n\t\tthis.currentFocusArea.grow(this.getTolerance(me));\n\t}\n\telse\n\t{\n\t\tthis.destroyIcons();\n\t\tthis.destroyFocusHighlight();\n\t}\n};\n\n/**\n * Function: createHighlightShape\n * \n * Create the shape used to paint the highlight.\n * \n * Returns true if the given icon intersects the given point.\n */\nmxConstraintHandler.prototype.createHighlightShape = function()\n{\n\tvar hl = new mxRectangleShape(null, this.highlightColor, this.highlightColor, mxConstants.HIGHLIGHT_STROKEWIDTH);\n\thl.opacity = mxConstants.HIGHLIGHT_OPACITY;\n\t\n\treturn hl;\n};\n\n/**\n * Function: intersects\n * \n * Returns true if the given icon intersects the given rectangle.\n */\nmxConstraintHandler.prototype.intersects = function(icon, mouse, source, existingEdge)\n{\n\treturn mxUtils.intersects(icon.bounds, mouse);\n};\n\n/**\n * Function: destroy\n * \n * Destroy this handler.\n */\nmxConstraintHandler.prototype.destroy = function()\n{\n\tthis.reset();\n\t\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.graph.model.removeListener(this.resetHandler);\n\t\tthis.graph.view.removeListener(this.resetHandler);\n\t\tthis.graph.removeListener(this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\t\n\tif (this.mouseleaveHandler != null && this.graph.container != null)\n\t{\n\t\tmxEvent.removeListener(this.graph.container, 'mouseleave', this.mouseleaveHandler);\n\t\tthis.mouseleaveHandler = null;\n\t}\n};\n\n__mxOutput.mxConstraintHandler = typeof mxConstraintHandler !== 'undefined' ? mxConstraintHandler : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\n/**\n * Class: mxRubberband\n * \n * Event handler that selects rectangular regions. This is not built-into\n * <mxGraph>. To enable rubberband selection in a graph, use the following code.\n * \n * Example:\n * \n * (code)\n * var rubberband = new mxRubberband(graph);\n * (end)\n * \n * Constructor: mxRubberband\n * \n * Constructs an event handler that selects rectangular regions in the graph\n * using rubberband selection.\n */\nfunction mxRubberband(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force rubberband event\n\t\tthis.forceRubberbandHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\t\t\t\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForceRubberbandEvent(me))\n\t\t\t{\n\t\t\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\t\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\t\t\torigin.x -= offset.x;\n\t\t\t\torigin.y -= offset.y;\n\t\t\t\tthis.start(me.getX() + origin.x, me.getY() + origin.y);\n\t\t\t\tme.consume(false);\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forceRubberbandHandler);\n\t\t\n\t\t// Repaints the marquee after autoscroll\n\t\tthis.panHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.repaint();\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\t\t\n\t\t// Does not show menu if any touch gestures take place after the trigger\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.first != null)\n\t\t\t{\n\t\t\t\tthis.reset();\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: defaultOpacity\n * \n * Specifies the default opacity to be used for the rubberband div. Default\n * is 20.\n */\nmxRubberband.prototype.defaultOpacity = 20;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxRubberband.prototype.enabled = true;\n\n/**\n * Variable: div\n * \n * Holds the DIV element which is currently visible.\n */\nmxRubberband.prototype.div = null;\n\n/**\n * Variable: sharedDiv\n * \n * Holds the DIV element which is used to display the rubberband.\n */\nmxRubberband.prototype.sharedDiv = null;\n\n/**\n * Variable: currentX\n * \n * Holds the value of the x argument in the last call to <update>.\n */\nmxRubberband.prototype.currentX = 0;\n\n/**\n * Variable: currentY\n * \n * Holds the value of the y argument in the last call to <update>.\n */\nmxRubberband.prototype.currentY = 0;\n\n/**\n * Variable: fadeOut\n * \n * Optional fade out effect. Default is false.\n */\nmxRubberband.prototype.fadeOut = false;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxRubberband.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation updates\n * <enabled>.\n */\nmxRubberband.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isForceRubberbandEvent\n * \n * Returns true if the given <mxMouseEvent> should start rubberband selection.\n * This implementation returns true if the alt key is pressed.\n */\nmxRubberband.prototype.isForceRubberbandEvent = function(me)\n{\n\treturn mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a rubberband selection. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxRubberband.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() == null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\torigin.x -= offset.x;\n\t\torigin.y -= offset.y;\n\t\tthis.start(me.getX() + origin.x, me.getY() + origin.y);\n\n\t\t// Does not prevent the default for this event so that the\n\t\t// event processing chain is still executed even if we start\n\t\t// rubberbanding. This is required eg. in ExtJs to hide the\n\t\t// current context menu. In mouseMove we'll make sure we're\n\t\t// not selecting anything while we're rubberbanding.\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: start\n * \n * Sets the start point for the rubberband selection.\n */\nmxRubberband.prototype.start = function(x, y)\n{\n\tthis.first = new mxPoint(x, y);\n\n\tvar container = this.graph.container;\n\t\n\tfunction createMouseEvent(evt)\n\t{\n\t\tvar me = new mxMouseEvent(evt);\n\t\tvar pt = mxUtils.convertPoint(container, me.getX(), me.getY());\n\t\t\n\t\tme.graphX = pt.x;\n\t\tme.graphY = pt.y;\n\t\t\n\t\treturn me;\n\t};\n\n\tthis.dragHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseMove(this.graph, createMouseEvent(evt));\n\t});\n\n\tthis.dropHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseUp(this.graph, createMouseEvent(evt));\n\t});\n\n\t// Workaround for rubberband stopping if the mouse leaves the container in Firefox\n\tif (mxClient.IS_FF)\n\t{\n\t\tmxEvent.addGestureListeners(document, null, this.dragHandler, this.dropHandler);\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating therubberband selection.\n */\nmxRubberband.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && this.first != null)\n\t{\n\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\torigin.x -= offset.x;\n\t\torigin.y -= offset.y;\n\t\tvar x = me.getX() + origin.x;\n\t\tvar y = me.getY() + origin.y;\n\t\tvar dx = this.first.x - x;\n\t\tvar dy = this.first.y - y;\n\t\tvar tol = this.graph.tolerance;\n\t\t\n\t\tif (this.div != null || Math.abs(dx) > tol ||  Math.abs(dy) > tol)\n\t\t{\n\t\t\tif (this.div == null)\n\t\t\t{\n\t\t\t\tthis.div = this.createShape();\n\t\t\t}\n\t\t\t\n\t\t\t// Clears selection while rubberbanding. This is required because\n\t\t\t// the event is not consumed in mouseDown.\n\t\t\tmxUtils.clearSelection();\n\t\t\t\n\t\t\tthis.update(x, y);\n\t\t\tme.consume();\n\t\t}\n\t}\n};\n\n/**\n * Function: createShape\n * \n * Creates the rubberband selection shape.\n */\nmxRubberband.prototype.createShape = function()\n{\n\tif (this.sharedDiv == null)\n\t{\n\t\tthis.sharedDiv = document.createElement('div');\n\t\tthis.sharedDiv.className = 'mxRubberband';\n\t\tmxUtils.setOpacity(this.sharedDiv, this.defaultOpacity);\n\t}\n\n\tthis.graph.container.appendChild(this.sharedDiv);\n\tvar result = this.sharedDiv;\n\t\n\tif (mxClient.IS_SVG && (!mxClient.IS_IE || document.documentMode >= 10) && this.fadeOut)\n\t{\n\t\tthis.sharedDiv = null;\n\t}\n\t\t\n\treturn result;\n};\n\n/**\n * Function: isActive\n * \n * Returns true if this handler is active.\n */\nmxRubberband.prototype.isActive = function(sender, me)\n{\n\treturn this.div != null && this.div.style.display != 'none';\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by selecting the region of the rubberband using\n * <mxGraph.selectRegion>.\n */\nmxRubberband.prototype.mouseUp = function(sender, me)\n{\n\tvar active = this.isActive();\n\tthis.reset();\n\t\n\tif (active)\n\t{\n\t\tthis.execute(me.getEvent());\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: execute\n * \n * Resets the state of this handler and selects the current region\n * for the given event.\n */\nmxRubberband.prototype.execute = function(evt)\n{\n\tvar rect = new mxRectangle(this.x, this.y, this.width, this.height);\n\tthis.graph.selectRegion(rect, evt);\n};\n\n/**\n * Function: reset\n * \n * Resets the state of the rubberband selection.\n */\nmxRubberband.prototype.reset = function()\n{\n\tif (this.div != null)\n\t{\n\t\tif (mxClient.IS_SVG && (!mxClient.IS_IE || document.documentMode >= 10) && this.fadeOut)\n\t\t{\n\t\t\tvar temp = this.div;\n\t\t\tmxUtils.setPrefixedStyle(temp.style, 'transition', 'all 0.2s linear');\n\t\t\ttemp.style.pointerEvents = 'none';\n\t\t\ttemp.style.opacity = 0;\n\t\t    \n\t\t    window.setTimeout(function()\n\t\t    \t{\n\t\t    \t\ttemp.parentNode.removeChild(temp);\n\t\t    \t}, 200);\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t}\n\n\tmxEvent.removeGestureListeners(document, null, this.dragHandler, this.dropHandler);\n\tthis.dragHandler = null;\n\tthis.dropHandler = null;\n\t\n\tthis.currentX = 0;\n\tthis.currentY = 0;\n\tthis.first = null;\n\tthis.div = null;\n};\n\n/**\n * Function: update\n * \n * Sets <currentX> and <currentY> and calls <repaint>.\n */\nmxRubberband.prototype.update = function(x, y)\n{\n\tthis.currentX = x;\n\tthis.currentY = y;\n\t\n\tthis.repaint();\n};\n\n/**\n * Function: repaint\n * \n * Computes the bounding box and updates the style of the <div>.\n */\nmxRubberband.prototype.repaint = function()\n{\n\tif (this.div != null)\n\t{\n\t\tvar x = this.currentX - this.graph.panDx;\n\t\tvar y = this.currentY - this.graph.panDy;\n\t\t\n\t\tthis.x = Math.min(this.first.x, x);\n\t\tthis.y = Math.min(this.first.y, y);\n\t\tthis.width = Math.max(this.first.x, x) - this.x;\n\t\tthis.height =  Math.max(this.first.y, y) - this.y;\n\n\t\tvar dx = (mxClient.IS_VML) ? this.graph.panDx : 0;\n\t\tvar dy = (mxClient.IS_VML) ? this.graph.panDy : 0;\n\t\t\n\t\tthis.div.style.left = (this.x + dx) + 'px';\n\t\tthis.div.style.top = (this.y + dy) + 'px';\n\t\tthis.div.style.width = Math.max(1, this.width) + 'px';\n\t\tthis.div.style.height = Math.max(1, this.height) + 'px';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This does\n * normally not need to be called, it is called automatically when the\n * window unloads.\n */\nmxRubberband.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\t\tthis.graph.removeMouseListener(this);\n\t\tthis.graph.removeListener(this.forceRubberbandHandler);\n\t\tthis.graph.removeListener(this.panHandler);\n\t\tthis.reset();\n\t\t\n\t\tif (this.sharedDiv != null)\n\t\t{\n\t\t\tthis.sharedDiv = null;\n\t\t}\n\t}\n};\n\n__mxOutput.mxRubberband = typeof mxRubberband !== 'undefined' ? mxRubberband : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHandle\n * \n * Implements a single custom handle for vertices.\n * \n * Constructor: mxHandle\n * \n * Constructs a new handle for the given state.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be handled.\n */\nfunction mxHandle(state, cursor, image, shape)\n{\n\tthis.graph = state.view.graph;\n\tthis.state = state;\n\tthis.cursor = (cursor != null) ? cursor : this.cursor;\n\tthis.image = (image != null) ? image : this.image;\n\tthis.shape = (shape != null) ? shape : null;\n\tthis.init();\n};\n\n/**\n * Variable: cursor\n * \n * Specifies the cursor to be used for this handle. Default is 'default'.\n */\nmxHandle.prototype.cursor = 'default';\n\n/**\n * Variable: image\n * \n * Specifies the <mxImage> to be used to render the handle. Default is null.\n */\nmxHandle.prototype.image = null;\n\n/**\n * Variable: ignoreGrid\n * \n * Default is false.\n */\nmxHandle.prototype.ignoreGrid = false;\n\n/**\n * Function: getPosition\n * \n * Hook for subclassers to return the current position of the handle.\n */\nmxHandle.prototype.getPosition = function(bounds) { };\n\n/**\n * Function: setPosition\n * \n * Hooks for subclassers to update the style in the <state>.\n */\nmxHandle.prototype.setPosition = function(bounds, pt, me) { };\n\n/**\n * Function: execute\n * \n * Hook for subclassers to execute the handle.\n */\nmxHandle.prototype.execute = function(me) { };\n\n/**\n * Function: copyStyle\n * \n * Sets the cell style with the given name to the corresponding value in <state>.\n */\nmxHandle.prototype.copyStyle = function(key)\n{\n\tthis.graph.setCellStyles(key, this.state.style[key], [this.state.cell]);\n};\n\n/**\n * Function: processEvent\n * \n * Processes the given <mxMouseEvent> and invokes <setPosition>.\n */\nmxHandle.prototype.processEvent = function(me)\n{\n\tvar scale = this.graph.view.scale;\n\tvar tr = this.graph.view.translate;\n\tvar pt = new mxPoint(me.getGraphX() / scale - tr.x, me.getGraphY() / scale - tr.y);\n\t\n\t// Center shape on mouse cursor\n\tif (this.shape != null && this.shape.bounds != null)\n\t{\n\t\tpt.x -= this.shape.bounds.width / scale / 4;\n\t\tpt.y -= this.shape.bounds.height / scale / 4;\n\t}\n\n\t// Snaps to grid for the rotated position then applies the rotation for the direction after that\n\tvar alpha1 = -mxUtils.toRadians(this.getRotation());\n\tvar alpha2 = -mxUtils.toRadians(this.getTotalRotation()) - alpha1;\n\tpt = this.flipPoint(this.rotatePoint(this.snapPoint(this.rotatePoint(pt, alpha1),\n\t\t\tthis.ignoreGrid || !this.graph.isGridEnabledEvent(me.getEvent())), alpha2));\n\tthis.setPosition(this.state.getPaintBounds(), pt, me);\n\tthis.redraw();\n};\n\n/**\n * Function: positionChanged\n * \n * Should be called after <setPosition> in <processEvent>.\n * This repaints the state using <mxCellRenderer>.\n */\nmxHandle.prototype.positionChanged = function()\n{\n\tif (this.state.text != null)\n\t{\n\t\tthis.state.text.apply(this.state);\n\t}\n\t\n\tif (this.state.shape != null)\n\t{\n\t\tthis.state.shape.apply(this.state);\n\t}\n\t\n\tthis.graph.cellRenderer.redraw(this.state, true);\n};\n\n/**\n * Function: getRotation\n * \n * Returns the rotation defined in the style of the cell.\n */\nmxHandle.prototype.getRotation = function()\n{\n\tif (this.state.shape != null)\n\t{\n\t\treturn this.state.shape.getRotation();\n\t}\n\t\n\treturn 0;\n};\n\n/**\n * Function: getTotalRotation\n * \n * Returns the rotation from the style and the rotation from the direction of\n * the cell.\n */\nmxHandle.prototype.getTotalRotation = function()\n{\n\tif (this.state.shape != null)\n\t{\n\t\treturn this.state.shape.getShapeRotation();\n\t}\n\t\n\treturn 0;\n};\n\n/**\n * Function: init\n * \n * Creates and initializes the shapes required for this handle.\n */\nmxHandle.prototype.init = function()\n{\n\tvar html = this.isHtmlRequired();\n\t\n\tif (this.image != null)\n\t{\n\t\tthis.shape = new mxImageShape(new mxRectangle(0, 0, this.image.width, this.image.height), this.image.src);\n\t\tthis.shape.preserveImageAspect = false;\n\t}\n\telse if (this.shape == null)\n\t{\n\t\tthis.shape = this.createShape(html);\n\t}\n\t\n\tthis.initShape(html);\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the shape for this handle.\n */\nmxHandle.prototype.createShape = function(html)\n{\n\tvar bounds = new mxRectangle(0, 0, mxConstants.HANDLE_SIZE, mxConstants.HANDLE_SIZE);\n\t\n\treturn new mxRectangleShape(bounds, mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n};\n\n/**\n * Function: initShape\n * \n * Initializes <shape> and sets its cursor.\n */\nmxHandle.prototype.initShape = function(html)\n{\n\tif (html && this.shape.isHtmlAllowed())\n\t{\n\t\tthis.shape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tthis.shape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tthis.shape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\t\n\t\tif (this.cursor != null)\n\t\t{\n\t\t\tthis.shape.init(this.graph.getView().getOverlayPane());\n\t\t}\n\t}\n\n\tmxEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n\tthis.shape.node.style.cursor = this.cursor;\n};\n\n/**\n * Function: redraw\n * \n * Renders the shape for this handle.\n */\nmxHandle.prototype.redraw = function()\n{\n\tif (this.shape != null && this.state.shape != null)\n\t{\n\t\tvar pt = this.getPosition(this.state.getPaintBounds());\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tvar alpha = mxUtils.toRadians(this.getTotalRotation());\n\t\t\tpt = this.rotatePoint(this.flipPoint(pt), alpha);\n\t\n\t\t\tvar scale = this.graph.view.scale;\n\t\t\tvar tr = this.graph.view.translate;\n\t\t\tthis.shape.bounds.x = Math.floor((pt.x + tr.x) * scale - this.shape.bounds.width / 2);\n\t\t\tthis.shape.bounds.y = Math.floor((pt.y + tr.y) * scale - this.shape.bounds.height / 2);\n\t\t\t\n\t\t\t// Needed to force update of text bounds\n\t\t\tthis.shape.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: isHtmlRequired\n * \n * Returns true if this handle should be rendered in HTML. This returns true if\n * the text node is in the graph container.\n */\nmxHandle.prototype.isHtmlRequired = function()\n{\n\treturn this.state.text != null && this.state.text.node.parentNode == this.graph.container;\n};\n\n/**\n * Function: rotatePoint\n * \n * Rotates the point by the given angle.\n */\nmxHandle.prototype.rotatePoint = function(pt, alpha)\n{\n\tvar bounds = this.state.getCellBounds();\n\tvar cx = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\tvar cos = Math.cos(alpha);\n\tvar sin = Math.sin(alpha); \n\n\treturn mxUtils.getRotatedPoint(pt, cos, sin, cx);\n};\n\n/**\n * Function: flipPoint\n * \n * Flips the given point vertically and/or horizontally.\n */\nmxHandle.prototype.flipPoint = function(pt)\n{\n\tif (this.state.shape != null)\n\t{\n\t\tvar bounds = this.state.getCellBounds();\n\t\t\n\t\tif (this.state.shape.flipH)\n\t\t{\n\t\t\tpt.x = 2 * bounds.x + bounds.width - pt.x;\n\t\t}\n\t\t\n\t\tif (this.state.shape.flipV)\n\t\t{\n\t\t\tpt.y = 2 * bounds.y + bounds.height - pt.y;\n\t\t}\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: snapPoint\n * \n * Snaps the given point to the grid if ignore is false. This modifies\n * the given point in-place and also returns it.\n */\nmxHandle.prototype.snapPoint = function(pt, ignore)\n{\n\tif (!ignore)\n\t{\n\t\tpt.x = this.graph.snap(pt.x);\n\t\tpt.y = this.graph.snap(pt.y);\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: setVisible\n * \n * Shows or hides this handle.\n */\nmxHandle.prototype.setVisible = function(visible)\n{\n\tif (this.shape != null && this.shape.node != null)\n\t{\n\t\tthis.shape.node.style.display = (visible) ? '' : 'none';\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handle by setting its visibility to true.\n */\nmxHandle.prototype.reset = function()\n{\n\tthis.setVisible(true);\n\tthis.state.style = this.graph.getCellStyle(this.state.cell);\n\tthis.positionChanged();\n};\n\n/**\n * Function: destroy\n * \n * Destroys this handle.\n */\nmxHandle.prototype.destroy = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n};\n\n__mxOutput.mxHandle = typeof mxHandle !== 'undefined' ? mxHandle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxVertexHandler\n * \n * Event handler for resizing cells. This handler is automatically created in\n * <mxGraph.createHandler>.\n * \n * Constructor: mxVertexHandler\n * \n * Constructs an event handler that allows to resize vertices\n * and groups.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be resized.\n */\nfunction mxVertexHandler(state)\n{\n\tif (state != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tif (this.livePreview && this.index != null)\n\t\t\t{\n\t\t\t\t// Redraws the live preview\n\t\t\t\tthis.state.view.graph.cellRenderer.redraw(this.state, true);\n\t\t\t\t\n\t\t\t\t// Redraws connected edges\n\t\t\t\tthis.state.view.invalidate(this.state.cell);\n\t\t\t\tthis.state.invalid = false;\n\t\t\t\tthis.state.view.validate();\n\t\t\t}\n\t\t\t\n\t\t\tthis.reset();\n\t\t});\n\t\t\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxVertexHandler.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState> being modified.\n */\nmxVertexHandler.prototype.state = null;\n\n/**\n * Variable: singleSizer\n * \n * Specifies if only one sizer handle at the bottom, right corner should be\n * used. Default is false.\n */\nmxVertexHandler.prototype.singleSizer = false;\n\n/**\n * Variable: index\n * \n * Holds the index of the current handle.\n */\nmxVertexHandler.prototype.index = null;\n\n/**\n * Variable: allowHandleBoundsCheck\n * \n * Specifies if the bounds of handles should be used for hit-detection in IE or\n * if <tolerance> > 0. Default is true.\n */\nmxVertexHandler.prototype.allowHandleBoundsCheck = true;\n\n/**\n * Variable: handleImage\n * \n * Optional <mxImage> to be used as handles. Default is null.\n */\nmxVertexHandler.prototype.handleImage = null;\n\n/**\n * Variable: handlesVisible\n * \n * If handles are currently visible.\n */\nmxVertexHandler.prototype.handlesVisible = true;\n\n/**\n * Variable: tolerance\n * \n * Optional tolerance for hit-detection in <getHandleForEvent>. Default is 0.\n */\nmxVertexHandler.prototype.tolerance = 0;\n\n/**\n * Variable: rotationEnabled\n * \n * Specifies if a rotation handle should be visible. Default is false.\n */\nmxVertexHandler.prototype.rotationEnabled = false;\n\n/**\n * Variable: parentHighlightEnabled\n * \n * Specifies if the parent should be highlighted if a child cell is selected.\n * Default is false.\n */\nmxVertexHandler.prototype.parentHighlightEnabled = false;\n\n/**\n * Variable: rotationRaster\n * \n * Specifies if rotation steps should be \"rasterized\" depening on the distance\n * to the handle. Default is true.\n */\nmxVertexHandler.prototype.rotationRaster = true;\n\n/**\n * Variable: rotationCursor\n * \n * Specifies the cursor for the rotation handle. Default is 'crosshair'.\n */\nmxVertexHandler.prototype.rotationCursor = 'crosshair';\n\n/**\n * Variable: livePreview\n * \n * Specifies if resize should change the cell in-place. This is an experimental\n * feature for non-touch devices. Default is false.\n */\nmxVertexHandler.prototype.livePreview = false;\n\n/**\n * Variable: movePreviewToFront\n * \n * Specifies if the live preview should be moved to the front.\n */\nmxVertexHandler.prototype.movePreviewToFront = false;\n\n/**\n * Variable: manageSizers\n * \n * Specifies if sizers should be hidden and spaced if the vertex is small.\n * Default is false.\n */\nmxVertexHandler.prototype.manageSizers = false;\n\n/**\n * Variable: constrainGroupByChildren\n * \n * Specifies if the size of groups should be constrained by the children.\n * Default is false.\n */\nmxVertexHandler.prototype.constrainGroupByChildren = false;\n\n/**\n * Variable: rotationHandleVSpacing\n * \n * Vertical spacing for rotation icon. Default is -16.\n */\nmxVertexHandler.prototype.rotationHandleVSpacing = -16;\n\n/**\n * Variable: horizontalOffset\n * \n * The horizontal offset for the handles. This is updated in <redrawHandles>\n * if <manageSizers> is true and the sizers are offset horizontally.\n */\nmxVertexHandler.prototype.horizontalOffset = 0;\n\n/**\n * Variable: verticalOffset\n * \n * The horizontal offset for the handles. This is updated in <redrawHandles>\n * if <manageSizers> is true and the sizers are offset vertically.\n */\nmxVertexHandler.prototype.verticalOffset = 0;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxVertexHandler.prototype.init = function()\n{\n\tthis.graph = this.state.view.graph;\n\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);\n\tthis.selectionBorder = this.createSelectionShape(this.bounds);\n\tthis.state.cell.highlightShape = this.selectionBorder;\n\t// VML dialect required here for event transparency in IE\n\tthis.selectionBorder.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tthis.selectionBorder.pointerEvents = false;\n\tthis.selectionBorder.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\tthis.selectionBorder.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(this.selectionBorder.node, this.graph, this.state);\n\t\n\tif (this.graph.isCellMovable(this.state.cell))\n\t{\n\t\tthis.selectionBorder.setCursor(mxConstants.CURSOR_MOVABLE_VERTEX);\n\t}\n\n\t// Adds the sizer handles\n\tif (mxGraphHandler.prototype.maxCells <= 0 || this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells)\n\t{\n\t\tvar resizable = this.graph.isCellResizable(this.state.cell);\n\t\tthis.sizers = [];\n\n\t\tif (resizable || (this.graph.isLabelMovable(this.state.cell) &&\n\t\t\tthis.state.width >= 2 && this.state.height >= 2))\n\t\t{\n\t\t\tvar i = 0;\n\n\t\t\tif (resizable)\n\t\t\t{\n\t\t\t\tif (!this.singleSizer)\n\t\t\t\t{\n\t\t\t\t\tthis.sizers.push(this.createSizer('nw-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('n-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('ne-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('w-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('e-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('sw-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('s-resize', i++));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.sizers.push(this.createSizer('se-resize', i++));\n\t\t\t}\n\t\t\t\n\t\t\tvar geo = this.graph.model.getGeometry(this.state.cell);\n\t\t\t\n\t\t\tif (geo != null && !geo.relative && !this.graph.isSwimlane(this.state.cell) &&\n\t\t\t\tthis.graph.isLabelMovable(this.state.cell))\n\t\t\t{\n\t\t\t\t// Marks this as the label handle for getHandleForEvent\n\t\t\t\tthis.labelShape = this.createSizer(mxConstants.CURSOR_LABEL_HANDLE, mxEvent.LABEL_HANDLE,\n\t\t\t\t\tmxConstants.LABEL_HANDLE_SIZE, mxConstants.LABEL_HANDLE_FILLCOLOR);\n\t\t\t\tthis.sizers.push(this.labelShape);\n\t\t\t}\n\t\t}\n\t\telse if (this.graph.isCellMovable(this.state.cell) && !this.graph.isCellResizable(this.state.cell) &&\n\t\t\tthis.state.width < 2 && this.state.height < 2)\n\t\t{\n\t\t\tthis.labelShape = this.createSizer(mxConstants.CURSOR_MOVABLE_VERTEX,\n\t\t\t\tmxEvent.LABEL_HANDLE, null, mxConstants.LABEL_HANDLE_FILLCOLOR);\n\t\t\tthis.sizers.push(this.labelShape);\n\t\t}\n\t}\n\t\n\t// Adds the rotation handler\n\tif (this.isRotationHandleVisible())\n\t{\n\t\tthis.rotationShape = this.createSizer(this.rotationCursor, mxEvent.ROTATION_HANDLE,\n\t\t\tmxConstants.HANDLE_SIZE + 3, mxConstants.HANDLE_FILLCOLOR);\n\t\tthis.sizers.push(this.rotationShape);\n\t}\n\n\tthis.customHandles = this.createCustomHandles();\n\tthis.redraw();\n\t\n\tif (this.constrainGroupByChildren)\n\t{\n\t\tthis.updateMinBounds();\n\t}\n};\n\n/**\n * Function: isRotationHandleVisible\n * \n * Returns true if the rotation handle should be showing.\n */\nmxVertexHandler.prototype.isRotationHandleVisible = function()\n{\n\treturn this.graph.isEnabled() && this.rotationEnabled && this.graph.isCellRotatable(this.state.cell) &&\n\t\t(mxGraphHandler.prototype.maxCells <= 0 || this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells);\n};\n\n/**\n * Function: isConstrainedEvent\n * \n * Returns true if the aspect ratio if the cell should be maintained.\n */\nmxVertexHandler.prototype.isConstrainedEvent = function(me)\n{\n\treturn mxEvent.isShiftDown(me.getEvent()) || this.state.style[mxConstants.STYLE_ASPECT] == 'fixed';\n};\n\n/**\n * Function: isCenteredEvent\n * \n * Returns true if the center of the vertex should be maintained during the resize.\n */\nmxVertexHandler.prototype.isCenteredEvent = function(state, me)\n{\n\treturn false;\n};\n\n/**\n * Function: createCustomHandles\n * \n * Returns an array of custom handles. This implementation returns null.\n */\nmxVertexHandler.prototype.createCustomHandles = function()\n{\n\treturn null;\n};\n\n/**\n * Function: updateMinBounds\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxVertexHandler.prototype.updateMinBounds = function()\n{\n\tvar children = this.graph.getChildCells(this.state.cell);\n\t\n\tif (children.length > 0)\n\t{\n\t\tthis.minBounds = this.graph.view.getBounds(children);\n\t\t\n\t\tif (this.minBounds != null)\n\t\t{\n\t\t\tvar s = this.state.view.scale;\n\t\t\tvar t = this.state.view.translate;\n\n\t\t\tthis.minBounds.x -= this.state.x;\n\t\t\tthis.minBounds.y -= this.state.y;\n\t\t\tthis.minBounds.x /= s;\n\t\t\tthis.minBounds.y /= s;\n\t\t\tthis.minBounds.width /= s;\n\t\t\tthis.minBounds.height /= s;\n\t\t\tthis.x0 = this.state.x / s - t.x;\n\t\t\tthis.y0 = this.state.y / s - t.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: getSelectionBounds\n * \n * Returns the mxRectangle that defines the bounds of the selection\n * border.\n */\nmxVertexHandler.prototype.getSelectionBounds = function(state)\n{\n\treturn new mxRectangle(Math.round(state.x), Math.round(state.y), Math.round(state.width), Math.round(state.height));\n};\n\n/**\n * Function: createParentHighlightShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxVertexHandler.prototype.createParentHighlightShape = function(bounds)\n{\n\treturn this.createSelectionShape(bounds);\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxVertexHandler.prototype.createSelectionShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(\n\t\tmxRectangle.fromRectangle(bounds),\n\t\tnull, this.getSelectionColor());\n\tshape.strokewidth = this.getSelectionStrokeWidth();\n\tshape.isDashed = this.graph.container.contains(document.activeElement) ? this.isSelectionDashed() : false;\n\treturn shape;\n};\n\n/**\n * Function: getSelectionColor\n * \n * Returns <mxConstants.VERTEX_SELECTION_COLOR>.\n */\nmxVertexHandler.prototype.getSelectionColor = function()\n{\n\treturn this.state.style[mxConstants.STYLE_CELL_HIGHLIGHT_COLOR] ?? mxConstants.VERTEX_SELECTION_COLOR;\n};\n\n/**\n * Function: getSelectionStrokeWidth\n * \n * Returns <mxConstants.VERTEX_SELECTION_STROKEWIDTH>.\n */\nmxVertexHandler.prototype.getSelectionStrokeWidth = function()\n{\n\treturn this.state.style[mxConstants.STYLE_CELL_HIGHLIGHT_STROKE_WIDTH] ?? mxConstants.VERTEX_SELECTION_STROKEWIDTH;\n};\n\n/**\n * Function: isSelectionDashed\n * \n * Returns <mxConstants.VERTEX_SELECTION_DASHED>.\n */\nmxVertexHandler.prototype.isSelectionDashed = function()\n{\n\treturn this.state.style[mxConstants.STYLE_CELL_HIGHLIGHT_DASHED] ?? mxConstants.VERTEX_SELECTION_DASHED;\n};\n\n/**\n * Function: createSizer\n * \n * Creates a sizer handle for the specified cursor and index and returns\n * the new <mxRectangleShape> that represents the handle.\n */\nmxVertexHandler.prototype.createSizer = function(cursor, index, size, fillColor)\n{\n\tsize = size || mxConstants.HANDLE_SIZE;\n\t\n\tvar bounds = new mxRectangle(0, 0, size, size);\n\tvar sizer = this.createSizerShape(bounds, index, fillColor);\n\n\tif (sizer.isHtmlAllowed() && this.state.text != null && this.state.text.node.parentNode == this.graph.container)\n\t{\n\t\tsizer.bounds.height -= 1;\n\t\tsizer.bounds.width -= 1;\n\t\tsizer.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tsizer.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tsizer.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\tsizer.init(this.graph.getView().getOverlayPane());\n\t}\n\n\tmxEvent.redirectMouseEvents(sizer.node, this.graph, this.state);\n\t\n\tif (this.graph.isEnabled())\n\t{\n\t\tsizer.setCursor(cursor);\n\t}\n\t\n\tif (!this.isSizerVisible(index))\n\t{\n\t\tsizer.visible = false;\n\t}\n\t\n\treturn sizer;\n};\n\n/**\n * Function: isSizerVisible\n * \n * Returns true if the sizer for the given index is visible.\n * This returns true for all given indices.\n */\nmxVertexHandler.prototype.isSizerVisible = function(index)\n{\n\treturn true;\n};\n\n/**\n * Function: createSizerShape\n * \n * Creates the shape used for the sizer handle for the specified bounds an\n * index. Only images and rectangles should be returned if support for HTML\n * labels with not foreign objects is required.\n */\nmxVertexHandler.prototype.createSizerShape = function(bounds, index, fillColor)\n{\n\tif (this.handleImage != null)\n\t{\n\t\tbounds = new mxRectangle(bounds.x, bounds.y, this.handleImage.width, this.handleImage.height);\n\t\tvar shape = new mxImageShape(bounds, this.handleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse if (index == mxEvent.ROTATION_HANDLE)\n\t{\n\t\treturn new mxEllipse(bounds, fillColor || mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n\telse\n\t{\n\t\treturn new mxRectangleShape(bounds, fillColor || mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: createBounds\n * \n * Helper method to create an <mxRectangle> around the given centerpoint\n * with a width and height of 2*s or 6, if no s is given.\n */\nmxVertexHandler.prototype.moveSizerTo = function(shape, x, y)\n{\n\tif (shape != null)\n\t{\n\t\tshape.bounds.x = Math.floor(x - shape.bounds.width / 2);\n\t\tshape.bounds.y = Math.floor(y - shape.bounds.height / 2);\n\t\t\n\t\t// Fixes visible inactive handles in VML\n\t\tif (shape.node != null && shape.node.style.display != 'none')\n\t\t{\n\t\t\tshape.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getHandleForEvent\n * \n * Returns the index of the handle for the given event. This returns the index\n * of the sizer from where the event originated or <mxEvent.LABEL_INDEX>.\n */\nmxVertexHandler.prototype.getHandleForEvent = function(me)\n{\n\t// Connection highlight may consume events before they reach sizer handle\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 1;\n\tvar hit = (this.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\n\tvar checkShape = mxUtils.bind(this, function(shape)\n\t{\n\t\tvar st = (shape != null && shape.constructor != mxImageShape &&\n\t\t\tthis.allowHandleBoundsCheck) ? shape.strokewidth + shape.svgStrokeTolerance : null;\n\t\tvar real = (st != null) ? new mxRectangle(me.getGraphX() - Math.floor(st / 2),\n\t\t\tme.getGraphY() - Math.floor(st / 2), st, st) : hit;\n\n\t\treturn shape != null && (me.isSource(shape) || (real != null && mxUtils.intersects(shape.bounds, real) &&\n\t\t\tshape.node.style.display != 'none' && shape.node.style.visibility != 'hidden'));\n\t});\n\t\n\tif (checkShape(this.rotationShape))\n\t{\n\t\treturn mxEvent.ROTATION_HANDLE;\n\t}\n\telse if (checkShape(this.labelShape))\n\t{\n\t\treturn mxEvent.LABEL_HANDLE;\n\t}\n\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.sizers[i]))\n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.customHandles != null && this.isCustomHandleEvent(me))\n\t{\n\t\t// Inverse loop order to match display order\n\t\tfor (var i = this.customHandles.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tif (checkShape(this.customHandles[i].shape))\n\t\t\t{\n\t\t\t\t// LATER: Return reference to active shape\n\t\t\t\treturn mxEvent.CUSTOM_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: isCustomHandleEvent\n * \n * Returns true if the given event allows custom handles to be changed. This\n * implementation returns true.\n */\nmxVertexHandler.prototype.isCustomHandleEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event if a handle has been clicked. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxVertexHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.graph.isEnabled())\n\t{\n\t\tvar handle = this.getHandleForEvent(me);\n\n\t\tif (handle != null)\n\t\t{\n\t\t\tthis.start(me.getGraphX(), me.getGraphY(), handle);\n\t\t\tme.consume();\n\t\t}\n\t}\n};\n\n/**\n * Function: isLivePreviewBorder\n * \n * Called if <livePreview> is enabled to check if a border should be painted.\n * This implementation returns true if the shape is transparent.\n */\nmxVertexHandler.prototype.isLivePreviewBorder = function()\n{\n\treturn this.state.shape != null && this.state.shape.fill == null && this.state.shape.stroke == null;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.start = function(x, y, index)\n{\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.livePreviewActive = this.livePreview && this.graph.model.getChildCount(this.state.cell) == 0;\n\t\tthis.inTolerance = true;\n\t\tthis.childOffsetX = 0;\n\t\tthis.childOffsetY = 0;\n\t\tthis.index = index;\n\t\tthis.startX = x;\n\t\tthis.startY = y;\n\t\t\n\t\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.isGhostPreview())\n\t\t{\n\t\t\tthis.ghostPreview = this.createGhostPreview();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Saves reference to parent state\n\t\t\tvar model = this.state.view.graph.model;\n\t\t\tvar parent = model.getParent(this.state.cell);\n\t\t\t\n\t\t\tif (this.state.view.currentRoot != parent && (model.isVertex(parent) || model.isEdge(parent)))\n\t\t\t{\n\t\t\t\tthis.parentState = this.state.view.graph.view.getState(parent);\n\t\t\t}\n\t\t\t\n\t\t\t// Creates a preview that can be on top of any HTML label\n\t\t\tthis.selectionBorder.node.style.display = (index == mxEvent.ROTATION_HANDLE) ? 'inline' : 'none';\n\t\t\t\n\t\t\t// Creates the border that represents the new bounds\n\t\t\tif (!this.livePreviewActive || this.isLivePreviewBorder())\n\t\t\t{\n\t\t\t\tthis.preview = this.createSelectionShape(this.bounds);\n\t\t\t\t\n\t\t\t\tif (!(mxClient.IS_SVG && Number(this.state.style[mxConstants.STYLE_ROTATION] || '0') != 0) &&\n\t\t\t\t\tthis.state.text != null && this.state.text.node.parentNode == this.graph.container)\n\t\t\t\t{\n\t\t\t\t\tthis.preview.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\t\t\t\tthis.preview.init(this.graph.container);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.preview.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.preview.init(this.graph.view.getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\t// With the rotation handle in a corner, need the angle and distance\n\t\t\t\tvar pos = this.getRotationHandlePosition();\n\t\t\t\t\n\t\t\t\tvar dx = pos.x - this.state.getCenterX();\n\t\t\t\tvar dy = pos.y - this.state.getCenterY();\n\t\t\t\t\n\t\t\t\tthis.startAngle = (dx != 0) ? Math.atan(dy / dx) * 180 / Math.PI + 90 : 0;\n\t\t\t\tthis.startDist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t}\n\t\n\t\t\t// Prepares the handles for live preview\n\t\t\tif (this.livePreviewActive)\n\t\t\t{\n\t\t\t\tthis.hideSizers();\n\t\t\t\t\n\t\t\t\tif (index == mxEvent.ROTATION_HANDLE)\n\t\t\t\t{\n\t\t\t\t\tthis.rotationShape.node.style.display = '';\n\t\t\t\t}\n\t\t\t\telse if (index == mxEvent.LABEL_HANDLE)\n\t\t\t\t{\n\t\t\t\t\tthis.labelShape.node.style.display = '';\n\t\t\t\t}\n\t\t\t\telse if (this.sizers != null && this.sizers[index] != null)\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[index].node.style.display = '';\n\t\t\t\t}\n\t\t\t\telse if (index <= mxEvent.CUSTOM_HANDLE && this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].setVisible(true);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Gets the array of connected edge handlers for redrawing\n\t\t\t\tvar edges = this.graph.getEdges(this.state.cell);\n\t\t\t\tthis.edgeHandlers = [];\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar handler = this.graph.selectionCellsHandler.getHandler(edges[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (handler != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.edgeHandlers.push(handler);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: createGhostPreview\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.createGhostPreview = function()\n{\n\tvar shape = this.graph.cellRenderer.createShape(this.state);\n\tshape.init(this.graph.view.getOverlayPane());\n\tshape.scale = this.state.view.scale;\n\tshape.bounds = this.bounds;\n\tshape.outline = true;\n\t\n\treturn shape;\n};\n\n/**\n * Function: hideHandles\n * \n * Shortcut to <hideSizers>.\n */\nmxVertexHandler.prototype.setHandlesVisible = function(visible)\n{\n\tthis.handlesVisible = visible;\n\t\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tthis.sizers[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].setVisible(visible);\n\t\t}\n\t}\n};\n\n/**\n * Function: hideSizers\n * \n * Hides all sizers except.\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.hideSizers = function()\n{\n\tthis.setHandlesVisible(false);\n};\n\n/**\n * Function: checkTolerance\n * \n * Checks if the coordinates for the given event are within the\n * <mxGraph.tolerance>. If the event is a mouse event then the tolerance is\n * ignored.\n */\nmxVertexHandler.prototype.checkTolerance = function(me)\n{\n\tif (this.inTolerance && this.startX != null && this.startY != null)\n\t{\n\t\tif (mxEvent.isMouseEvent(me.getEvent()) ||\n\t\t\tMath.abs(me.getGraphX() - this.startX) > this.graph.tolerance ||\n\t\t\tMath.abs(me.getGraphY() - this.startY) > this.graph.tolerance)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxVertexHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxVertexHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundAngle\n * \n * Hook for rounding the angle. This uses Math.round.\n */\nmxVertexHandler.prototype.roundAngle = function(angle)\n{\n\treturn Math.round(angle * 10) / 10;\n};\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled width or height. This uses Math.round.\n */\nmxVertexHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length * 100) / 100;\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview.\n */\nmxVertexHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && this.index != null)\n\t{\n\t\t// Checks tolerance for ignoring single clicks\n\t\tthis.checkTolerance(me);\n\n\t\tif (!this.inTolerance)\n\t\t{\n\t\t\tif (this.index <= mxEvent.CUSTOM_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].active = true;\n\t\t\t\t\t\n\t\t\t\t\tif (this.ghostPreview != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.ghostPreview.apply(this.state);\n\t\t\t\t\t\tthis.ghostPreview.strokewidth = this.getSelectionStrokeWidth() /\n\t\t\t\t\t\t\tthis.ghostPreview.scale / this.ghostPreview.scale;\n\t\t\t\t\t\tthis.ghostPreview.isDashed = this.isSelectionDashed();\n\t\t\t\t\t\tthis.ghostPreview.stroke = this.getSelectionColor();\n\t\t\t\t\t\tthis.ghostPreview.redraw();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.selectionBounds != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.selectionBorder.node.style.display = 'none';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.movePreviewToFront)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.moveToFront();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].positionChanged();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.index == mxEvent.LABEL_HANDLE)\n\t\t\t{\n\t\t\t\tthis.moveLabel(me);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.index == mxEvent.ROTATION_HANDLE)\n\t\t\t\t{\n\t\t\t\t\tthis.rotateVertex(me);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.resizeVertex(me);\n\t\t\t\t}\n\n\t\t\t\tthis.updateHint(me);\n\t\t\t}\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n\t// Workaround for disabling the connect highlight when over handle\n\telse if (!this.graph.isMouseDown && this.getHandleForEvent(me) != null)\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: isGhostPreview\n * \n * Returns true if a ghost preview should be used for custom handles.\n */\nmxVertexHandler.prototype.isGhostPreview = function()\n{\n\treturn this.state.view.graph.model.getChildCount(this.state.cell) > 0;\n};\n\n/**\n * Function: moveLabel\n * \n * Moves the label.\n */\nmxVertexHandler.prototype.moveLabel = function(me)\n{\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar tr = this.graph.view.translate;\n\tvar scale = this.graph.view.scale;\n\t\n\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tpoint.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n\t\tpoint.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n\t}\n\n\tvar index = (this.rotationShape != null) ? this.sizers.length - 2 : this.sizers.length - 1;\n\tthis.moveSizerTo(this.sizers[index], point.x, point.y);\n};\n\n/**\n * Function: rotateVertex\n * \n * Rotates the vertex.\n */\nmxVertexHandler.prototype.rotateVertex = function(me)\n{\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar dx = this.state.x + this.state.width / 2 - point.x;\n\tvar dy = this.state.y + this.state.height / 2 - point.y;\n\tthis.currentAlpha = (dx != 0) ? Math.atan(dy / dx) * 180 / Math.PI + 90 : ((dy < 0) ? 180 : 0);\n\t\n\tif (dx > 0)\n\t{\n\t\tthis.currentAlpha -= 180;\n\t}\n\t\n\tthis.currentAlpha -= this.startAngle;\n\t\n\t// Rotation raster\n\tif (this.rotationRaster && this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tvar dx = point.x - this.state.getCenterX();\n\t\tvar dy = point.y - this.state.getCenterY();\n\t\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\n\t\tif (dist - this.startDist < 2)\n\t\t{\n\t\t\traster = 15;\n\t\t}\n\t\telse if (dist - this.startDist < 25)\n\t\t{\n\t\t\traster = 5;\n\t\t}\n\t\telse\n\t\t{\n\t\t\traster = 1;\n\t\t}\n\t\t\n\t\tthis.currentAlpha = Math.round(this.currentAlpha / raster) * raster;\n\t}\n\telse\n\t{\n\t\tthis.currentAlpha = this.roundAngle(this.currentAlpha);\n\t}\n\n\tthis.selectionBorder.rotation = this.currentAlpha;\n\tthis.selectionBorder.redraw();\n\t\t\t\t\t\n\tif (this.livePreviewActive)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Function: resizeVertex\n * \n * Risizes the vertex.\n */\nmxVertexHandler.prototype.resizeVertex = function(me)\n{\n\tvar ct = new mxPoint(this.state.getCenterX(), this.state.getCenterY());\n\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar tr = this.graph.view.translate;\n\tvar scale = this.graph.view.scale;\n\tvar cos = Math.cos(-alpha);\n\tvar sin = Math.sin(-alpha);\n\t\n\tvar dx = point.x - this.startX;\n\tvar dy = point.y - this.startY;\n\n\t// Rotates vector for mouse gesture\n\tvar tx = cos * dx - sin * dy;\n\tvar ty = sin * dx + cos * dy;\n\t\n\tdx = tx;\n\tdy = ty;\n\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\tthis.unscaledBounds = this.union(geo, dx / scale, dy / scale, this.index,\n\t\tthis.graph.isGridEnabledEvent(me.getEvent()), 1,\n\t\tnew mxPoint(0, 0), this.isConstrainedEvent(me),\n\t\tthis.isCenteredEvent(this.state, me));\n\t\n\t// Keeps vertex within maximum graph or parent bounds\n\tif (!geo.relative)\n\t{\n\t\tvar max = this.graph.getMaximumGraphBounds();\n\t\t\n\t\t// Handles child cells\n\t\tif (max != null && this.parentState != null)\n\t\t{\n\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\n\t\t\tmax.x -= (this.parentState.x - tr.x * scale) / scale;\n\t\t\tmax.y -= (this.parentState.y - tr.y * scale) / scale;\n\t\t}\n\t\t\n\t\tif (this.graph.isConstrainChild(this.state.cell))\n\t\t{\n\t\t\tvar tmp = this.graph.getCellContainmentArea(this.state.cell);\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar overlap = this.graph.getOverlap(this.state.cell);\n\t\t\t\t\n\t\t\t\tif (overlap > 0)\n\t\t\t\t{\n\t\t\t\t\ttmp = mxRectangle.fromRectangle(tmp);\n\t\t\t\t\t\n\t\t\t\t\ttmp.x -= tmp.width * overlap;\n\t\t\t\t\ttmp.y -= tmp.height * overlap;\n\t\t\t\t\ttmp.width += 2 * tmp.width * overlap;\n\t\t\t\t\ttmp.height += 2 * tmp.height * overlap;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (max == null)\n\t\t\t\t{\n\t\t\t\t\tmax = tmp;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\tmax.intersect(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tif (max != null)\n\t\t{\n\t\t\tif (this.unscaledBounds.x < max.x)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.width -= max.x - this.unscaledBounds.x;\n\t\t\t\tthis.unscaledBounds.x = max.x;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.y < max.y)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.height -= max.y - this.unscaledBounds.y;\n\t\t\t\tthis.unscaledBounds.y = max.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.x + this.unscaledBounds.width > max.x + max.width)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.width -= this.unscaledBounds.x +\n\t\t\t\t\tthis.unscaledBounds.width - max.x - max.width;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.y + this.unscaledBounds.height > max.y + max.height)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.height -= this.unscaledBounds.y +\n\t\t\t\t\tthis.unscaledBounds.height - max.y - max.height;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar old = this.bounds;\n\tthis.bounds = new mxRectangle(((this.parentState != null) ? this.parentState.x : tr.x * scale) +\n\t\t(this.unscaledBounds.x) * scale, ((this.parentState != null) ? this.parentState.y : tr.y * scale) +\n\t\t(this.unscaledBounds.y) * scale, this.unscaledBounds.width * scale, this.unscaledBounds.height * scale);\n\n\tif (geo.relative && this.parentState != null)\n\t{\n\t\tthis.bounds.x += this.state.x - this.parentState.x;\n\t\tthis.bounds.y += this.state.y - this.parentState.y;\n\t}\n\n\tcos = Math.cos(alpha);\n\tsin = Math.sin(alpha);\n\t\n\tvar c2 = new mxPoint(this.bounds.getCenterX(), this.bounds.getCenterY());\n\n\tvar dx = c2.x - ct.x;\n\tvar dy = c2.y - ct.y;\n\t\n\tvar dx2 = cos * dx - sin * dy;\n\tvar dy2 = sin * dx + cos * dy;\n\t\n\tvar dx3 = dx2 - dx;\n\tvar dy3 = dy2 - dy;\n\t\n\tvar dx4 = this.bounds.x - this.state.x;\n\tvar dy4 = this.bounds.y - this.state.y;\n\t\n\tvar dx5 = cos * dx4 - sin * dy4;\n\tvar dy5 = sin * dx4 + cos * dy4;\n\t\n\tthis.bounds.x += dx3;\n\tthis.bounds.y += dy3;\n\t\n\t// Rounds unscaled bounds to int\n\tthis.unscaledBounds.x = this.roundLength(this.unscaledBounds.x + dx3 / scale);\n\tthis.unscaledBounds.y = this.roundLength(this.unscaledBounds.y + dy3 / scale);\n\tthis.unscaledBounds.width = this.roundLength(this.unscaledBounds.width);\n\tthis.unscaledBounds.height = this.roundLength(this.unscaledBounds.height);\n\t\n\t// Shifts the children according to parent offset\n\tif (!this.graph.isCellCollapsed(this.state.cell) && (dx3 != 0 || dy3 != 0))\n\t{\n\t\tthis.childOffsetX = this.state.x - this.bounds.x + dx5;\n\t\tthis.childOffsetY = this.state.y - this.bounds.y + dy5;\n\t}\n\telse\n\t{\n\t\tthis.childOffsetX = 0;\n\t\tthis.childOffsetY = 0;\n\t}\n\t\t\t\n\tif (!old.equals(this.bounds))\n\t{\t\n\t\tif (this.livePreviewActive)\n\t\t{\n\t\t\tthis.updateLivePreview(me);\n\t\t}\n\t\t\n\t\tif (this.preview != null)\n\t\t{\n\t\t\tthis.drawPreview();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateParentHighlight();\n\t\t}\n\t}\n};\n\n/**\n * Function: updateLivePreview\n * \n * Repaints the live preview.\n */\nmxVertexHandler.prototype.updateLivePreview = function(me)\n{\n\t// TODO: Apply child offset to children in live preview\n\tvar scale = this.graph.view.scale;\n\tvar tr = this.graph.view.translate;\n\t\n\t// Saves current state\n\tvar tempState = this.state.clone();\n\n\t// Temporarily changes size and origin\n\tthis.state.x = this.bounds.x;\n\tthis.state.y = this.bounds.y;\n\tthis.state.origin = new mxPoint(this.state.x / scale - tr.x, this.state.y / scale - tr.y);\n\tthis.state.width = this.bounds.width;\n\tthis.state.height = this.bounds.height;\n\t\n\t// Redraws cell and handles\n\tvar off = this.state.absoluteOffset;\n\toff = new mxPoint(off.x, off.y);\n\n\t// Required to store and reset absolute offset for updating label position\n\tthis.state.absoluteOffset.x = 0;\n\tthis.state.absoluteOffset.y = 0;\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\t\t\t\t\n\n\tif (geo != null)\n\t{\n\t\tvar offset = geo.offset || this.EMPTY_POINT;\n\n\t\tif (offset != null && !geo.relative)\n\t\t{\n\t\t\tthis.state.absoluteOffset.x = this.state.view.scale * offset.x;\n\t\t\tthis.state.absoluteOffset.y = this.state.view.scale * offset.y;\n\t\t}\n\t\t\n\t\tthis.state.view.updateVertexLabelOffset(this.state);\n\t}\n\t\n\t// Draws the live preview\n\tthis.state.view.graph.cellRenderer.redraw(this.state, true);\n\t\n\t// Redraws connected edges TODO: Include child edges\n\tthis.state.view.invalidate(this.state.cell);\n\tthis.state.invalid = false;\n\tthis.state.view.validate();\n\tthis.redrawHandles();\n\t\n\t// Moves live preview to front\n\tif (this.movePreviewToFront)\n\t{\n\t\tthis.moveToFront();\n\t}\n\t\n\t// Hides folding icon\n\tif (this.state.control != null && this.state.control.node != null)\n\t{\n\t\tthis.state.control.node.style.visibility = 'hidden';\n\t}\n\t\n\t// Restores current state\n\tthis.state.setState(tempState);\n};\n\n/**\n * Function: moveToFront\n * \n * Handles the event by applying the changes to the geometry.\n */\nmxVertexHandler.prototype.moveToFront = function()\n{\n\tif ((this.state.text != null && this.state.text.node != null &&\n\t\tthis.state.text.node.nextSibling != null) ||\n\t\t(this.state.shape != null && this.state.shape.node != null &&\n\t\tthis.state.shape.node.nextSibling != null && (this.state.text == null ||\n\t\tthis.state.shape.node.nextSibling != this.state.text.node)))\n\t{\n\t\tif (this.state.shape != null && this.state.shape.node != null)\n\t\t{\n\t\t\tthis.state.shape.node.parentNode.appendChild(this.state.shape.node);\n\t\t}\n\t\t\n\t\tif (this.state.text != null && this.state.text.node != null)\n\t\t{\n\t\t\tthis.state.text.node.parentNode.appendChild(this.state.text.node);\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the changes to the geometry.\n */\nmxVertexHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.index != null && this.state != null)\n\t{\n\t\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\tvar index = this.index;\n\t\tthis.index = null;\n\t\n\t\tif (this.ghostPreview == null)\n\t\t{\n\t\t\t// Required to restore order in case of no change\n\t\t\tthis.state.view.invalidate(this.state.cell, false, false);\n\t\t\tthis.state.view.validate();\n\t\t}\n\t\t\n\t\tthis.graph.getModel().beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (index <= mxEvent.CUSTOM_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\t// Creates style before changing cell state\n\t\t\t\t\tvar style = this.state.view.graph.getCellStyle(this.state.cell);\n\t\t\t\t\t\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].active = false;\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].execute(me);\n\t\t\t\t\t\n\t\t\t\t\t// Sets style and apply on shape to force repaint and\n\t\t\t\t\t// check if execute has removed custom handles\n\t\t\t\t\tif (this.customHandles != null &&\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.style = style;\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].positionChanged();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.currentAlpha != null)\n\t\t\t\t{\n\t\t\t\t\tvar delta = this.currentAlpha - (this.state.style[mxConstants.STYLE_ROTATION] || 0);\n\t\t\t\t\t\n\t\t\t\t\tif (delta != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rotateCell(this.state.cell, delta);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.rotateClick();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar gridEnabled = this.graph.isGridEnabledEvent(me.getEvent());\n\t\t\t\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\t\n\t\t\t\tvar dx = point.x - this.startX;\n\t\t\t\tvar dy = point.y - this.startY;\n\t\t\t\t\n\t\t\t\t// Rotates vector for mouse gesture\n\t\t\t\tvar tx = cos * dx - sin * dy;\n\t\t\t\tvar ty = sin * dx + cos * dy;\n\t\t\t\t\n\t\t\t\tdx = tx;\n\t\t\t\tdy = ty;\n\t\t\t\t\n\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\tvar recurse = this.isRecursiveResize(this.state, me);\n\t\t\t\tthis.resizeCell(this.state.cell, this.roundLength(dx / s), this.roundLength(dy / s),\n\t\t\t\t\tindex, gridEnabled, this.isConstrainedEvent(me), recurse);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.graph.getModel().endUpdate();\n\t\t}\n\n\t\tme.consume();\n\t\tthis.reset();\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Function: isRecursiveResize\n * \n * Returns the recursiveResize of the give state.\n * \n * Parameters:\n * \n * state - the given <mxCellState>. This implementation takes \n * the value of this state.\n * me - the mouse event.\n */\nmxVertexHandler.prototype.isRecursiveResize = function(state, me)\n{\n\treturn this.graph.isRecursiveResize(this.state);\n};\n\n/**\n * Function: rotateClick\n * \n * Hook for subclassers to implement a single click on the rotation handle.\n * This code is executed as part of the model transaction. This implementation\n * is empty.\n */\nmxVertexHandler.prototype.rotateClick = function() { };\n\n/**\n * Function: rotateCell\n * \n * Rotates the given cell and its children by the given angle in degrees.\n * \n * Parameters:\n * \n * cell - <mxCell> to be rotated.\n * angle - Angle in degrees.\n */\nmxVertexHandler.prototype.rotateCell = function(cell, angle, parent)\n{\n\tif (angle != 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isVertex(cell) || model.isEdge(cell))\n\t\t{\n\t\t\tif (!model.isEdge(cell))\n\t\t\t{\n\t\t\t\tvar style = this.graph.getCurrentCellStyle(cell);\n\t\t\t\tvar total = (style[mxConstants.STYLE_ROTATION] || 0) + angle;\n\t\t\t\tthis.graph.setCellStyles(mxConstants.STYLE_ROTATION, total, [cell]);\n\t\t\t}\n\t\t\t\n\t\t\tvar geo = this.graph.getCellGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar pgeo = this.graph.getCellGeometry(parent);\n\t\t\t\t\n\t\t\t\tif (pgeo != null && !model.isEdge(parent))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\tgeo.rotate(angle, new mxPoint(pgeo.width / 2, pgeo.height / 2));\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((model.isVertex(cell) && !geo.relative) || model.isEdge(cell))\n\t\t\t\t{\n\t\t\t\t\t// Recursive rotation\n\t\t\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rotateCell(model.getChildAt(cell, i), angle, cell);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxVertexHandler.prototype.reset = function()\n{\n\tif (this.sizers != null && this.index != null && this.sizers[this.index] != null &&\n\t\tthis.sizers[this.index].node.style.display == 'none')\n\t{\n\t\tthis.sizers[this.index].node.style.display = '';\n\t}\n\n\tthis.currentAlpha = null;\n\tthis.inTolerance = null;\n\tthis.index = null;\n\n\t// TODO: Reset and redraw cell states for live preview\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.destroy();\n\t\tthis.preview = null;\n\t}\n\t\n\tif (this.ghostPreview != null)\n\t{\n\t\tthis.ghostPreview.destroy();\n\t\tthis.ghostPreview = null;\n\t}\n\n\tif (this.livePreviewActive && this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (this.sizers[i] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[i].node.style.display = '';\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Shows folding icon\n\t\tif (this.state.control != null && this.state.control.node != null)\n\t\t{\n\t\t\tthis.state.control.node.style.visibility = '';\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tif (this.customHandles[i].active)\n\t\t\t{\n\t\t\t\tthis.customHandles[i].active = false;\n\t\t\t\tthis.customHandles[i].reset();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.customHandles[i].setVisible(true);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Checks if handler has been destroyed\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.node.style.display = 'inline';\n\t\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\t\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y,\n\t\t\tthis.selectionBounds.width, this.selectionBounds.height);\n\t\tthis.drawPreview();\n\t}\n\n\tthis.removeHint();\n\tthis.redrawHandles();\n\tthis.edgeHandlers = null;\n\tthis.handlesVisible = true;\n\tthis.unscaledBounds = null;\n\tthis.livePreviewActive = null;\n};\n\n/**\n * Function: resizeCell\n * \n * Uses the given vector to change the bounds of the given cell\n * in the graph using <mxGraph.resizeCell>.\n */\nmxVertexHandler.prototype.resizeCell = function(cell, dx, dy, index, gridEnabled, constrained, recurse)\n{\n\tvar geo = this.graph.model.getGeometry(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tif (index == mxEvent.LABEL_HANDLE)\n\t\t{\n\t\t\tvar alpha = -mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\t\t\tvar scale = this.graph.view.scale;\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(\n\t\t\t\tMath.round((this.labelShape.bounds.getCenterX() - this.startX) / scale),\n\t\t\t\tMath.round((this.labelShape.bounds.getCenterY() - this.startY) / scale)),\n\t\t\t\tcos, sin);\n\n\t\t\tgeo = geo.clone();\n\t\t\t\n\t\t\tif (geo.offset == null)\n\t\t\t{\n\t\t\t\tgeo.offset = pt;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgeo.offset.x += pt.x;\n\t\t\t\tgeo.offset.y += pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tthis.graph.model.setGeometry(cell, geo);\n\t\t}\n\t\telse if (this.unscaledBounds != null)\n\t\t{\n\t\t\tvar scale = this.graph.view.scale;\n\n\t\t\tif (this.childOffsetX != 0 || this.childOffsetY != 0)\n\t\t\t{\n\t\t\t\tthis.moveChildren(cell, Math.round(this.childOffsetX / scale), Math.round(this.childOffsetY / scale));\n\t\t\t}\n\n\t\t\tthis.graph.resizeCell(cell, this.unscaledBounds, recurse);\n\t\t}\n\t}\n};\n\n/**\n * Function: moveChildren\n * \n * Moves the children of the given cell by the given vector.\n */\nmxVertexHandler.prototype.moveChildren = function(cell, dx, dy)\n{\n\tvar model = this.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\t\tvar geo = this.graph.getCellGeometry(child);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.translate(dx, dy);\n\t\t\tmodel.setGeometry(child, geo);\n\t\t}\n\t}\n};\n/**\n * Function: union\n * \n * Returns the union of the given bounds and location for the specified\n * handle index.\n * \n * To override this to limit the size of vertex via a minWidth/-Height style,\n * the following code can be used.\n * \n * (code)\n * var vertexHandlerUnion = mxVertexHandler.prototype.union;\n * mxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained)\n * {\n *   var result = vertexHandlerUnion.apply(this, arguments);\n *   \n *   result.width = Math.max(result.width, mxUtils.getNumber(this.state.style, 'minWidth', 0));\n *   result.height = Math.max(result.height, mxUtils.getNumber(this.state.style, 'minHeight', 0));\n *   \n *   return result;\n * };\n * (end)\n * \n * The minWidth/-Height style can then be used as follows:\n * \n * (code)\n * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'minWidth=100;minHeight=100;');\n * (end)\n * \n * To override this to update the height for a wrapped text if the width of a vertex is\n * changed, the following can be used.\n * \n * (code)\n * var mxVertexHandlerUnion = mxVertexHandler.prototype.union;\n * mxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained)\n * {\n *   var result = mxVertexHandlerUnion.apply(this, arguments);\n *   var s = this.state;\n *   \n *   if (this.graph.isHtmlLabel(s.cell) && (index == 3 || index == 4) &&\n *       s.text != null && s.style[mxConstants.STYLE_WHITE_SPACE] == 'wrap')\n *   {\n *     var label = this.graph.getLabel(s.cell);\n *     var fontSize = mxUtils.getNumber(s.style, mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE);\n *     var ww = result.width / s.view.scale - s.text.spacingRight - s.text.spacingLeft\n *     \n *     result.height = mxUtils.getSizeForString(label, fontSize, s.style[mxConstants.STYLE_FONTFAMILY], ww).height;\n *   }\n *   \n *   return result;\n * };\n * (end)\n */\nmxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained, centered)\n{\n\tgridEnabled = (gridEnabled != null) ? gridEnabled && this.graph.gridEnabled : this.graph.gridEnabled;\n\t\n\tif (this.singleSizer)\n\t{\n\t\tvar x = bounds.x + bounds.width + dx;\n\t\tvar y = bounds.y + bounds.height + dy;\n\t\t\n\t\tif (gridEnabled)\n\t\t{\n\t\t\tx = this.graph.snap(x / scale) * scale;\n\t\t\ty = this.graph.snap(y / scale) * scale;\n\t\t}\n\t\t\n\t\tvar rect = new mxRectangle(bounds.x, bounds.y, 0, 0);\n\t\trect.add(new mxRectangle(x, y, 0, 0));\n\t\t\n\t\treturn rect;\n\t}\n\telse\n\t{\n\t\tvar w0 = bounds.width;\n\t\tvar h0 = bounds.height;\n\t\tvar left = bounds.x - tr.x * scale;\n\t\tvar right = left + w0;\n\t\tvar top = bounds.y - tr.y * scale;\n\t\tvar bottom = top + h0;\n\t\t\n\t\tvar cx = left + w0 / 2;\n\t\tvar cy = top + h0 / 2;\n\t\t\n\t\tif (index > 4 /* Bottom Row */)\n\t\t{\n\t\t\tbottom = bottom + dy;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tbottom = this.graph.snap(bottom / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbottom = Math.round(bottom / scale) * scale;\n\t\t\t}\n\t\t}\n\t\telse if (index < 3 /* Top Row */)\n\t\t{\n\t\t\ttop = top + dy;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\ttop = this.graph.snap(top / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttop = Math.round(top / scale) * scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (index == 0 || index == 3 || index == 5 /* Left */)\n\t\t{\n\t\t\tleft += dx;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tleft = this.graph.snap(left / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tleft = Math.round(left / scale) * scale;\n\t\t\t}\n\t\t}\n\t\telse if (index == 2 || index == 4 || index == 7 /* Right */)\n\t\t{\n\t\t\tright += dx;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tright = this.graph.snap(right / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tright = Math.round(right / scale) * scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar width = right - left;\n\t\tvar height = bottom - top;\n\n\t\tif (constrained)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar aspect = geo.width / geo.height;\n\t\t\t\t\n\t\t\t\tif (index== 1 || index== 2 || index == 7 || index == 6)\n\t\t\t\t{\n\t\t\t\t\twidth = height * aspect;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\theight = width / aspect;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (index == 0)\n\t\t\t\t{\n\t\t\t\t\tleft = right - width;\n\t\t\t\t\ttop = bottom - height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (centered)\n\t\t{\n\t\t\twidth += (width - w0);\n\t\t\theight += (height - h0);\n\t\t\t\n\t\t\tvar cdx = cx - (left + width / 2);\n\t\t\tvar cdy = cy - (top + height / 2);\n\n\t\t\tleft += cdx;\n\t\t\ttop += cdy;\n\t\t\tright += cdx;\n\t\t\tbottom += cdy;\n\t\t}\n\n\t\t// Flips over left side\n\t\tif (width < 0)\n\t\t{\n\t\t\tleft += width;\n\t\t\twidth = Math.abs(width);\n\t\t}\n\t\t\n\t\t// Flips over top side\n\t\tif (height < 0)\n\t\t{\n\t\t\ttop += height;\n\t\t\theight = Math.abs(height);\n\t\t}\n\n\t\tvar result = new mxRectangle(left + tr.x * scale, top + tr.y * scale, width, height);\n\t\t\n\t\tif (this.minBounds != null)\n\t\t{\n\t\t\tresult.width = Math.max(result.width, this.minBounds.x * scale + this.minBounds.width * scale +\n\t\t\t\tMath.max(0, this.x0 * scale - result.x));\n\t\t\tresult.height = Math.max(result.height, this.minBounds.y * scale + this.minBounds.height * scale +\n\t\t\t\tMath.max(0, this.y0 * scale - result.y));\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Redraws the handles and the preview.\n */\n mxVertexHandler.prototype.redraw = function(ignoreHandles)\n {\n\t this.selectionBounds = this.getSelectionBounds(this.state);\n\t this.bounds = this.selectionBounds;\n\t //Sometimes, the text boundingBox is not initialized and needs to be manually updated.\n\t if(this.state.text){\n\t\t this.state.text.updateBoundingBox();\n\t }\n\t if(this.state && this.state?.text?.boundingBox && this.selectionBounds){\n\t\t const x = this.state.text ? Math.min(this.selectionBounds.x, this.state.text.boundingBox.x) : this.selectionBounds.x;\n\t\t const y = this.state.text ? Math.min(this.selectionBounds.y, this.state.text.boundingBox.y) : this.selectionBounds.y;\n\t\t const w = this.state.text ? Math.max(this.selectionBounds.x + this.selectionBounds.width, this.state.text.boundingBox.x + this.state.text.boundingBox.width) - x : this.selectionBounds.width;\n\t\t const h = this.state.text ? Math.max(this.selectionBounds.y + this.selectionBounds.height, this.state.text.boundingBox.y + this.state.text.boundingBox.height) - y : this.selectionBounds.height;\n\t\t this.bounds = new mxRectangle(x-2, y-2, w+5, h+3);\n\t }\n \n\t this.drawPreview();\n \n\t if (!ignoreHandles)\n\t {\n\t\t this.redrawHandles();\n\t }\n };\n/**\n * Returns the padding to be used for drawing handles for the current <bounds>.\n */\nmxVertexHandler.prototype.getHandlePadding = function()\n{\n\t// KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n\tvar result = new mxPoint(0, 0);\n\tvar tol = this.tolerance;\n\n\tif (this.sizers != null && this.sizers.length > 0 && this.sizers[0] != null &&\n\t\t(this.bounds.width < 2 * this.sizers[0].bounds.width + 2 * tol ||\n\t\tthis.bounds.height < 2 * this.sizers[0].bounds.height + 2 * tol))\n\t{\n\t\ttol /= 2;\n\t\t\n\t\tresult.x = this.sizers[0].bounds.width + tol;\n\t\tresult.y = this.sizers[0].bounds.height + tol;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getSizerBounds\n * \n * Returns the bounds used to paint the resize handles.\n */\nmxVertexHandler.prototype.getSizerBounds = function()\n{\n\treturn this.bounds;\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the handles. To hide certain handles the following code can be used.\n * \n * (code)\n * mxVertexHandler.prototype.redrawHandles = function()\n * {\n *   mxVertexHandlerRedrawHandles.apply(this, arguments);\n *   \n *   if (this.sizers != null && this.sizers.length > 7)\n *   {\n *     this.sizers[1].node.style.display = 'none';\n *     this.sizers[6].node.style.display = 'none';\n *   }\n * };\n * (end)\n */\nmxVertexHandler.prototype.redrawHandles = function()\n{\n\tvar s = this.getSizerBounds();\n\tvar tol = this.tolerance;\n\tthis.horizontalOffset = 0;\n\tthis.verticalOffset = 0;\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tvar temp = this.customHandles[i].shape.node.style.display;\n\t\t\tthis.customHandles[i].redraw();\n\t\t\tthis.customHandles[i].shape.node.style.display = temp;\n\n\t\t\t// Hides custom handles during text editing\n\t\t\tthis.customHandles[i].shape.node.style.visibility =\n\t\t\t\t(this.handlesVisible && this.isCustomHandleVisible(\n\t\t\t\t\tthis.customHandles[i])) ? '' : 'hidden';\n\t\t}\n\t}\n\n\tif (this.sizers != null && this.sizers.length > 0 && this.sizers[0] != null)\n\t{\n\t\tif (this.index == null && this.manageSizers && this.sizers.length >= 8)\n\t\t{\n\t\t\t// KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n\t\t\tvar padding = this.getHandlePadding();\n\t\t\tthis.horizontalOffset = padding.x;\n\t\t\tthis.verticalOffset = padding.y;\n\t\t\t\n\t\t\tif (this.horizontalOffset != 0 || this.verticalOffset != 0)\n\t\t\t{\n\t\t\t\ts = new mxRectangle(s.x, s.y, s.width, s.height);\n\n\t\t\t\ts.x -= this.horizontalOffset / 2;\n\t\t\t\ts.width += this.horizontalOffset;\n\t\t\t\ts.y -= this.verticalOffset / 2;\n\t\t\t\ts.height += this.verticalOffset;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.sizers.length >= 8)\n\t\t\t{\n\t\t\t\tif ((s.width < 2 * this.sizers[0].bounds.width + 2 * tol) ||\n\t\t\t\t\t(s.height < 2 * this.sizers[0].bounds.height + 2 * tol))\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[0].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[2].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[5].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[7].node.style.display = 'none';\n\t\t\t\t}\n\t\t\t\telse if (this.handlesVisible)\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[0].node.style.display = '';\n\t\t\t\t\tthis.sizers[2].node.style.display = '';\n\t\t\t\t\tthis.sizers[5].node.style.display = '';\n\t\t\t\t\tthis.sizers[7].node.style.display = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar r = s.x + s.width;\n\t\tvar b = s.y + s.height;\n\t\t\n\t\tif (this.singleSizer)\n\t\t{\n\t\t\tthis.moveSizerTo(this.sizers[0], r, b);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar cx = s.x + s.width / 2;\n\t\t\tvar cy = s.y + s.height / 2;\n\t\t\t\n\t\t\tif (this.sizers.length >= 8)\n\t\t\t{\n\t\t\t\tvar crs = ['nw-resize', 'n-resize', 'ne-resize', 'e-resize', 'se-resize', 's-resize', 'sw-resize', 'w-resize'];\n\t\t\t\t\n\t\t\t\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tvar cos = Math.cos(alpha);\n\t\t\t\tvar sin = Math.sin(alpha);\n\t\t\t\t\n\t\t\t\tvar da = Math.round(alpha * 4 / Math.PI);\n\t\t\t\t\n\t\t\t\tvar ct = new mxPoint(s.getCenterX(), s.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(s.x, s.y), cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[0], pt.x, pt.y);\n\t\t\t\tthis.sizers[0].setCursor(crs[mxUtils.mod(0 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = cx;\n\t\t\t\tpt.y = s.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[1], pt.x, pt.y);\n\t\t\t\tthis.sizers[1].setCursor(crs[mxUtils.mod(1 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = s.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[2], pt.x, pt.y);\n\t\t\t\tthis.sizers[2].setCursor(crs[mxUtils.mod(2 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = s.x;\n\t\t\t\tpt.y = cy;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[3], pt.x, pt.y);\n\t\t\t\tthis.sizers[3].setCursor(crs[mxUtils.mod(7 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = cy;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[4], pt.x, pt.y);\n\t\t\t\tthis.sizers[4].setCursor(crs[mxUtils.mod(3 + da, crs.length)]);\n\n\t\t\t\tpt.x = s.x;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[5], pt.x, pt.y);\n\t\t\t\tthis.sizers[5].setCursor(crs[mxUtils.mod(6 + da, crs.length)]);\n\n\t\t\t\tpt.x = cx;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[6], pt.x, pt.y);\n\t\t\t\tthis.sizers[6].setCursor(crs[mxUtils.mod(5 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[7], pt.x, pt.y);\n\t\t\t\tthis.sizers[7].setCursor(crs[mxUtils.mod(4 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = cx + this.state.absoluteOffset.x;\n\t\t\t\tpt.y = cy + this.state.absoluteOffset.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\tthis.moveSizerTo(this.sizers[8], pt.x, pt.y);\n\t\t\t}\n\t\t\telse if (this.state.width >= 2 && this.state.height >= 2)\n\t\t\t{\n\t\t\t\tthis.moveSizerTo(this.sizers[0], cx + this.state.absoluteOffset.x, cy + this.state.absoluteOffset.y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.moveSizerTo(this.sizers[0], this.state.x, this.state.y);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.rotationShape != null)\n\t{\n\t\tvar alpha = mxUtils.toRadians((this.currentAlpha != null) ? this.currentAlpha : this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\t\t\n\t\tvar ct = new mxPoint(this.state.getCenterX(), this.state.getCenterY());\n\t\tvar pt = mxUtils.getRotatedPoint(this.getRotationHandlePosition(), cos, sin, ct);\n\n\t\tif (this.rotationShape.node != null)\n\t\t{\n\t\t\tthis.moveSizerTo(this.rotationShape, pt.x, pt.y);\n\n\t\t\t// Hides rotation handle during text editing\n\t\t\tthis.rotationShape.node.style.visibility = (this.state.view.graph.isEditing() ||\n\t\t\t\t!this.handlesVisible) ? 'hidden' : '';\n\t\t}\n\t}\n\t\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t}\n\t\n\tif (this.edgeHandlers != null)\n\t{\t\t\n\t\tfor (var i = 0; i < this.edgeHandlers.length; i++)\n\t\t{\n\t\t\tthis.edgeHandlers[i].redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: isCustomHandleVisible\n * \n * Returns true if the given custom handle is visible.\n */\nmxVertexHandler.prototype.isCustomHandleVisible = function(handle)\n{\n\treturn !this.graph.isEditing() && this.state.view.graph.getSelectionCount() == 1;\n};\n\n/**\n * Function: getRotationHandlePosition\n * \n * Returns an <mxPoint> that defines the rotation handle position.\n */\nmxVertexHandler.prototype.getRotationHandlePosition = function()\n{\n\treturn new mxPoint(this.bounds.x + this.bounds.width / 2, this.bounds.y + this.rotationHandleVSpacing)\n};\n\n/**\n * Function: isParentHighlightVisible\n * \n * Returns true if the parent highlight should be visible. This implementation\n * always returns true.\n */\nmxVertexHandler.prototype.isParentHighlightVisible = function()\n{\n\treturn !this.graph.isCellSelected(this.graph.model.getParent(this.state.cell));\n};\n\n/**\n * Function: updateParentHighlight\n * \n * Updates the highlight of the parent if <parentHighlightEnabled> is true.\n */\nmxVertexHandler.prototype.updateParentHighlight = function()\n{\n\tif (!this.isDestroyed())\n\t{\n\t\tvar visible = this.isParentHighlightVisible();\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\tvar pstate = this.graph.view.getState(parent);\n\n\t\tif (this.parentHighlight != null)\n\t\t{\n\t\t\tif (this.graph.model.isVertex(parent) && visible)\n\t\t\t{\n\t\t\t\tvar b = this.parentHighlight.bounds;\n\t\t\t\t\n\t\t\t\tif (pstate != null && (b.x != pstate.x || b.y != pstate.y ||\n\t\t\t\t\tb.width != pstate.width || b.height != pstate.height))\n\t\t\t\t{\n\t\t\t\t\tthis.parentHighlight.bounds = mxRectangle.fromRectangle(pstate);\n\t\t\t\t\tthis.parentHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (pstate != null && pstate.parentHighlight == this.parentHighlight)\n\t\t\t\t{\n\t\t\t\t\tpstate.parentHighlight = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.parentHighlight.destroy();\n\t\t\t\tthis.parentHighlight = null;\n\t\t\t}\n\t\t}\n\t\telse if (this.parentHighlightEnabled && visible)\n\t\t{\n\t\t\tif (this.graph.model.isVertex(parent) && pstate != null &&\n\t\t\t\tpstate.parentHighlight == null)\n\t\t\t{\n\t\t\t\tthis.parentHighlight = this.createParentHighlightShape(pstate);\n\t\t\t\t// VML dialect required here for event transparency in IE\n\t\t\t\tthis.parentHighlight.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\tthis.parentHighlight.pointerEvents = false;\n\t\t\t\tthis.parentHighlight.rotation = Number(pstate.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tthis.parentHighlight.init(this.graph.getView().getOverlayPane());\n\t\t\t\tthis.parentHighlight.redraw();\n\t\t\t\t\n\t\t\t\t// Shows highlight once per parent\n\t\t\t\tpstate.parentHighlight = this.parentHighlight;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview.\n */\nmxVertexHandler.prototype.drawPreview = function()\n{\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.bounds = this.bounds;\n\t\t\n\t\tif (this.preview.node.parentNode == this.graph.container)\n\t\t{\n\t\t\tthis.preview.bounds.width = Math.max(0, this.preview.bounds.width - 1);\n\t\t\tthis.preview.bounds.height = Math.max(0, this.preview.bounds.height - 1);\n\t\t}\n\t\n\t\tthis.preview.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\tthis.preview.redraw();\n\t}\n\t\n\tthis.selectionBorder.bounds = this.getSelectionBorderBounds();\n\tthis.selectionBorder.redraw();\n\tthis.updateParentHighlight();\n};\n\n/**\n * Function: getSelectionBorderBounds\n * \n * Returns the bounds for the selection border.\n */\nmxVertexHandler.prototype.getSelectionBorderBounds = function()\n{\n\treturn this.bounds;\n};\n\n/**\n * Function: isDestroyed\n * \n * Returns true if this handler was destroyed or not initialized.\n */\nmxVertexHandler.prototype.isDestroyed = function()\n{\n\treturn this.selectionBorder == null;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxVertexHandler.prototype.destroy = function()\n{\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.state.view.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.destroy();\n\t\tthis.preview = null;\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\tvar pstate = this.graph.view.getState(parent);\n\n\t\tif (pstate != null && pstate.parentHighlight == this.parentHighlight)\n\t\t{\n\t\t\tpstate.parentHighlight = null;\n\t\t}\n\t\t\n\t\tthis.parentHighlight.destroy();\n\t\tthis.parentHighlight = null;\n\t}\n\t\n\tif (this.ghostPreview != null)\n\t{\n\t\tthis.ghostPreview.destroy();\n\t\tthis.ghostPreview = null;\n\t}\n\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.destroy();\n\t\tthis.selectionBorder = null;\n\t}\n\t\n\tthis.labelShape = null;\n\tthis.removeHint();\n\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tthis.sizers[i].destroy();\n\t\t}\n\t\t\n\t\tthis.sizers = null;\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].destroy();\n\t\t}\n\t\t\n\t\tthis.customHandles = null;\n\t}\n};\n\n__mxOutput.mxVertexHandler = typeof mxVertexHandler !== 'undefined' ? mxVertexHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler> for each selected edge.\n * \n * To enable adding/removing control points, the following code can be used:\n * \n * (code)\n * mxEdgeHandler.prototype.addEnabled = true;\n * mxEdgeHandler.prototype.removeEnabled = true;\n * (end)\n * \n * Note: This experimental feature is not recommended for production use.\n * \n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be handled.\n */\nfunction mxEdgeHandler(state)\n{\n\tif (state != null && state.shape != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar dirty = this.index != null;\n\t\t\tthis.reset();\n\t\t\t\n\t\t\tif (dirty)\n\t\t\t{\n\t\t\t\tthis.graph.cellRenderer.redraw(this.state, false, state.view.isRendering());\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxEdgeHandler.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState> being modified.\n */\nmxEdgeHandler.prototype.state = null;\n\n/**\n * Variable: marker\n * \n * Holds the <mxTerminalMarker> which is used for highlighting terminals.\n */\nmxEdgeHandler.prototype.marker = null;\n\n/**\n * Variable: constraintHandler\n * \n * Holds the <mxConstraintHandler> used for drawing and highlighting\n * constraints.\n */\nmxEdgeHandler.prototype.constraintHandler = null;\n\n/**\n * Variable: error\n * \n * Holds the current validation error while a connection is being changed.\n */\nmxEdgeHandler.prototype.error = null;\n\n/**\n * Variable: shape\n * \n * Holds the <mxShape> that represents the preview edge.\n */\nmxEdgeHandler.prototype.shape = null;\n\n/**\n * Variable: bends\n * \n * Holds the <mxShapes> that represent the points.\n */\nmxEdgeHandler.prototype.bends = null;\n\n/**\n * Variable: labelShape\n * \n * Holds the <mxShape> that represents the label position.\n */\nmxEdgeHandler.prototype.labelShape = null;\n\n/**\n * Variable: cloneEnabled\n * \n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxEdgeHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: addEnabled\n * \n * Specifies if adding bends by shift-click is enabled. Default is false.\n * Note: This experimental feature is not recommended for production use.\n */\nmxEdgeHandler.prototype.addEnabled = false;\n\n/**\n * Variable: removeEnabled\n * \n * Specifies if removing bends by shift-click is enabled. Default is false.\n * Note: This experimental feature is not recommended for production use.\n */\nmxEdgeHandler.prototype.removeEnabled = false;\n\n/**\n * Variable: dblClickRemoveEnabled\n * \n * Specifies if removing bends by double click is enabled. Default is false.\n */\nmxEdgeHandler.prototype.dblClickRemoveEnabled = false;\n\n/**\n * Variable: mergeRemoveEnabled\n * \n * Specifies if removing bends by dropping them on other bends is enabled.\n * Default is false.\n */\nmxEdgeHandler.prototype.mergeRemoveEnabled = false;\n\n/**\n * Variable: straightRemoveEnabled\n * \n * Specifies if removing bends by creating straight segments should be enabled.\n * If enabled, this can be overridden by holding down the alt key while moving.\n * Default is false.\n */\nmxEdgeHandler.prototype.straightRemoveEnabled = false;\n\n/**\n * Variable: virtualBendsEnabled\n * \n * Specifies if virtual bends should be added in the center of each\n * segments. These bends can then be used to add new waypoints.\n * Default is false.\n */\nmxEdgeHandler.prototype.virtualBendsEnabled = false;\n\n/**\n * Variable: virtualBendOpacity\n * \n * Opacity to be used for virtual bends (see <virtualBendsEnabled>).\n * Default is 20.\n */\nmxEdgeHandler.prototype.virtualBendOpacity = 20;\n\n/**\n * Variable: parentHighlightEnabled\n * \n * Specifies if the parent should be highlighted if a child cell is selected.\n * Default is false.\n */\nmxEdgeHandler.prototype.parentHighlightEnabled = false;\n\n/**\n * Variable: preferHtml\n * \n * Specifies if bends should be added to the graph container. This is updated\n * in <init> based on whether the edge or one of its terminals has an HTML\n * label in the container.\n */\nmxEdgeHandler.prototype.preferHtml = false;\n\n/**\n * Variable: allowHandleBoundsCheck\n * \n * Specifies if the bounds of handles should be used for hit-detection in IE\n * Default is true.\n */\nmxEdgeHandler.prototype.allowHandleBoundsCheck = true;\n\n/**\n * Variable: snapToTerminals\n * \n * Specifies if waypoints should snap to the routing centers of terminals.\n * Default is false.\n */\nmxEdgeHandler.prototype.snapToTerminals = false;\n\n/**\n * Variable: handleImage\n * \n * Optional <mxImage> to be used as handles. Default is null.\n */\nmxEdgeHandler.prototype.handleImage = null;\n\n/**\n * Variable: tolerance\n * \n * Optional tolerance for hit-detection in <getHandleForEvent>. Default is 0.\n */\nmxEdgeHandler.prototype.tolerance = 0;\n\n/**\n * Variable: outlineConnect\n * \n * Specifies if connections to the outline of a highlighted target should be\n * enabled. This will allow to place the connection point along the outline of\n * the highlighted target. Default is false.\n */\nmxEdgeHandler.prototype.outlineConnect = false;\n\n/**\n * Variable: manageLabelHandle\n * \n * Specifies if the label handle should be moved if it intersects with another\n * handle. Uses <checkLabelHandle> for checking and moving. Default is false.\n */\nmxEdgeHandler.prototype.manageLabelHandle = false;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this edge handler.\n */\nmxEdgeHandler.prototype.init = function()\n{\n\tthis.graph = this.state.view.graph;\n\tthis.marker = this.createMarker();\n\tthis.constraintHandler = new mxConstraintHandler(this.graph);\n\t\n\t// Clones the original points from the cell\n\t// and makes sure at least one point exists\n\tthis.points = [];\n\t\n\t// Uses the absolute points of the state\n\t// for the initial configuration and preview\n\tthis.abspoints = this.getSelectionPoints(this.state);\n\tthis.shape = this.createSelectionShape(this.abspoints);\n\tthis.shape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\tthis.shape.init(this.graph.getView().getOverlayPane());\n\tthis.shape.pointerEvents = false;\n\tthis.shape.setCursor(mxConstants.CURSOR_MOVABLE_EDGE);\n\tmxEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n\n\t// Updates preferHtml\n\tthis.preferHtml = this.state.text != null &&\n\t\tthis.state.text.node.parentNode == this.graph.container;\n\t\n\tif (!this.preferHtml)\n\t{\n\t\t// Checks source terminal\n\t\tvar sourceState = this.state.getVisibleTerminalState(true);\n\t\t\n\t\tif (sourceState != null)\n\t\t{\n\t\t\tthis.preferHtml = sourceState.text != null &&\n\t\t\t\tsourceState.text.node.parentNode == this.graph.container;\n\t\t}\n\t\t\n\t\tif (!this.preferHtml)\n\t\t{\n\t\t\t// Checks target terminal\n\t\t\tvar targetState = this.state.getVisibleTerminalState(false);\n\t\t\t\n\t\t\tif (targetState != null)\n\t\t\t{\n\t\t\t\tthis.preferHtml = targetState.text != null &&\n\t\t\t\ttargetState.text.node.parentNode == this.graph.container;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Creates bends for the non-routed absolute points\n\t// or bends that don't correspond to points\n\tif (this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells ||\n\t\tmxGraphHandler.prototype.maxCells <= 0)\n\t{\n\t\tthis.bends = this.createBends();\n\n\t\tif (this.isVirtualBendsEnabled())\n\t\t{\n\t\t\tthis.virtualBends = this.createVirtualBends();\n\t\t}\n\t}\n\n\t// Adds a rectangular handle for the label position\n\tthis.label = new mxPoint(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n\tthis.labelShape = this.createLabelHandleShape();\n\tthis.initBend(this.labelShape);\n\tthis.labelShape.setCursor(mxConstants.CURSOR_LABEL_HANDLE);\n\t\n\tthis.customHandles = this.createCustomHandles();\n\t\n\tthis.updateParentHighlight();\n\tthis.redraw();\n};\n\n\n/**\n * Function: isParentHighlightVisible\n * \n * Returns true if the parent highlight should be visible. This implementation\n * always returns true.\n */\nmxEdgeHandler.prototype.isParentHighlightVisible = mxVertexHandler.prototype.isParentHighlightVisible;\n\n/**\n * Function: updateParentHighlight\n * \n * Updates the highlight of the parent if <parentHighlightEnabled> is true.\n */\nmxEdgeHandler.prototype.updateParentHighlight = mxVertexHandler.prototype.updateParentHighlight;\n\n/**\n * Function: createCustomHandles\n * \n * Returns an array of custom handles. This implementation returns null.\n */\nmxEdgeHandler.prototype.createCustomHandles = function()\n{\n\treturn null;\n};\n\n/**\n * Function: isVirtualBendsEnabled\n * \n * Returns true if virtual bends should be added. This returns true if\n * <virtualBendsEnabled> is true and the current style allows and\n * renders custom waypoints.\n */\nmxEdgeHandler.prototype.isVirtualBendsEnabled = function(evt)\n{\n\treturn this.virtualBendsEnabled && (this.state.style[mxConstants.STYLE_EDGE] == null ||\n\t\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.NONE ||\n\t\t\tthis.state.style[mxConstants.STYLE_NOEDGESTYLE] == 1)  &&\n\t\t\tmxUtils.getValue(this.state.style, mxConstants.STYLE_SHAPE, null) != 'arrow';\n};\n\n/**\n * Function: isCellEnabled\n * \n * Returns true if the given cell allows new connections to be created. This implementation\n * always returns true.\n */\nmxEdgeHandler.prototype.isCellEnabled = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: isAddPointEvent\n * \n * Returns true if the given event is a trigger to add a new point. This\n * implementation returns true if shift is pressed.\n */\nmxEdgeHandler.prototype.isAddPointEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: isRemovePointEvent\n * \n * Returns true if the given event is a trigger to remove a point. This\n * implementation returns true if shift is pressed.\n */\nmxEdgeHandler.prototype.isRemovePointEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: getSelectionPoints\n * \n * Returns the list of points that defines the selection stroke.\n */\nmxEdgeHandler.prototype.getSelectionPoints = function(state)\n{\n\treturn state.absolutePoints;\n};\n\n/**\n * Function: createParentHighlightShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxEdgeHandler.prototype.createParentHighlightShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(mxRectangle.fromRectangle(bounds),\n\t\tnull, this.getSelectionColor());\n\tshape.strokewidth = this.getSelectionStrokeWidth();\n\tshape.isDashed = this.isSelectionDashed();\n\t\n\treturn shape;\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxEdgeHandler.prototype.createSelectionShape = function(points)\n{\n\tvar shape = new this.state.shape.constructor();\n\tshape.outline = true;\n\tshape.apply(this.state);\n\t\n\tshape.isDashed = this.isSelectionDashed();\n\tshape.stroke = this.getSelectionColor();\n\tshape.isShadow = false;\n\t\n\treturn shape;\n};\n\n/**\n * Function: getSelectionColor\n * \n * Returns <mxConstants.EDGE_SELECTION_COLOR>.\n */\nmxEdgeHandler.prototype.getSelectionColor = function()\n{\n\treturn mxConstants.EDGE_SELECTION_COLOR;\n};\n\n/**\n * Function: getSelectionStrokeWidth\n * \n * Returns <mxConstants.EDGE_SELECTION_STROKEWIDTH>.\n */\nmxEdgeHandler.prototype.getSelectionStrokeWidth = function()\n{\n\treturn mxConstants.EDGE_SELECTION_STROKEWIDTH;\n};\n\n/**\n * Function: isSelectionDashed\n * \n * Returns <mxConstants.EDGE_SELECTION_DASHED>.\n */\nmxEdgeHandler.prototype.isSelectionDashed = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isConnectableCell\n * \n * Returns true if the given cell is connectable. This is a hook to\n * disable floating connections. This implementation returns true.\n */\nmxEdgeHandler.prototype.isConnectableCell = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: getCellAt\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxEdgeHandler.prototype.getCellAt = function(x, y)\n{\n\treturn (!this.outlineConnect) ? this.graph.getCellAt(x, y) : null;\n};\n\n/**\n * Function: createMarker\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxEdgeHandler.prototype.createMarker = function()\n{\n\tvar marker = new mxCellMarker(this.graph);\n\tvar self = this; // closure\n\n\t// Only returns edges if they are connectable and never returns\n\t// the edge that is currently being modified\n\tmarker.getCell = function(me)\n\t{\n\t\tvar cell = mxCellMarker.prototype.getCell.apply(this, arguments);\n\n\t\t// Checks for cell at preview point (with grid)\n\t\tif ((cell == self.state.cell || cell == null) && self.currentPoint != null)\n\t\t{\n\t\t\tcell = self.graph.getCellAt(self.currentPoint.x, self.currentPoint.y);\n\t\t}\n\t\t\n\t\t// Uses connectable parent vertex if one exists\n\t\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\t\n\t\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t\t{\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar model = self.graph.getModel();\n\t\t\n\t\tif ((this.graph.isSwimlane(cell) && self.currentPoint != null &&\n\t\t\tthis.graph.hitsSwimlaneContent(cell, self.currentPoint.x, self.currentPoint.y)) ||\n\t\t\t(!self.isConnectableCell(cell)) || (cell == self.state.cell ||\n\t\t\t(cell != null && !self.graph.connectableEdges && model.isEdge(cell))) ||\n\t\t\tmodel.isAncestor(self.state.cell, cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\tif (!this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\treturn cell;\n\t};\n\n\t// Sets the highlight color according to validateConnection\n\tmarker.isValidState = function(state)\n\t{\n\t\tvar model = self.graph.getModel();\n\t\tvar other = self.graph.view.getTerminalPort(state,\n\t\t\tself.graph.view.getState(model.getTerminal(self.state.cell,\n\t\t\t!self.isSource)), !self.isSource);\n\t\tvar otherCell = (other != null) ? other.cell : null;\n\t\tvar source = (self.isSource) ? state.cell : otherCell;\n\t\tvar target = (self.isSource) ? otherCell : state.cell;\n\t\t\n\t\t// Updates the error message of the handler\n\t\tself.error = self.validateConnection(source, target);\n\n\t\treturn self.error == null;\n\t};\n\t\n\treturn marker;\n};\n\n/**\n * Function: validateConnection\n * \n * Returns the error message or an empty string if the connection for the\n * given source, target pair is not valid. Otherwise it returns null. This\n * implementation uses <mxGraph.getEdgeValidationError>.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxEdgeHandler.prototype.validateConnection = function(source, target)\n{\n\treturn this.graph.getEdgeValidationError(this.state.cell, source, target);\n};\n\n/**\n * Function: createBends\n * \n * Creates and returns the bends used for modifying the edge. This is\n * typically an array of <mxRectangleShapes>.\n */\n mxEdgeHandler.prototype.createBends = function()\n {\n\tvar cell = this.state.cell;\n\tvar bends = [];\n\n\tfor (var i = 0; i < this.abspoints.length; i++)\n\t{\n\t\tif (this.isHandleVisible(i))\n\t\t{\n\t\t\tvar source = i == 0;\n\t\t\tvar target = i == this.abspoints.length - 1;\n\t\t\tvar terminal = source || target;\n\n\t\t\tif (terminal || this.graph.isCellBendable(cell))\n\t\t\t{\n\t\t\t\t(mxUtils.bind(this, function(index)\n\t\t\t\t{\n\t\t\t\t\tvar bend = this.createHandleShape(index);\n\t\t\t\t\tthis.initBend(bend, mxUtils.bind(this, mxUtils.bind(this, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.dblClickRemoveEnabled)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.removePoint(this.state, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t})));\n\t\n\t\t\t\t\tif (this.isHandleEnabled(i))\n\t\t\t\t\t{\n\t\t\t\t\t\tbend.setCursor((terminal) ? mxConstants.CURSOR_TERMINAL_HANDLE : mxConstants.CURSOR_BEND_HANDLE);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbends.push(bend);\n\t\t\t\t\n\t\t\t\t\tif (!terminal)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.points.push(new mxPoint(0,0));\n\t\t\t\t\t\tbend.node.style.visibility = 'hidden';\n\t\t\t\t\t}\n\t\t\t\t}))(i);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bends;\n};\n\n/**\n * Function: createVirtualBends\n * \n * Creates and returns the bends used for modifying the edge. This is\n * typically an array of <mxRectangleShapes>.\n */\n mxEdgeHandler.prototype.createVirtualBends = function()\n {\n\tvar cell = this.state.cell;\n\tvar last = this.abspoints[0];\n\tvar bends = [];\n\n\tif (this.graph.isCellBendable(cell))\n\t{\n\t\tfor (var i = 1; i < this.abspoints.length; i++)\n\t\t{\n\t\t\t(mxUtils.bind(this, function(bend)\n\t\t\t{\n\t\t\t\tthis.initBend(bend);\n\t\t\t\tbend.setCursor(mxConstants.CURSOR_VIRTUAL_BEND_HANDLE);\n\t\t\t\tbends.push(bend);\n\t\t\t}))(this.createHandleShape());\n\t\t}\n\t}\n\n\treturn bends;\n};\n\n/**\n * Function: isHandleEnabled\n * \n * Creates the shape used to display the given bend.\n */\nmxEdgeHandler.prototype.isHandleEnabled = function(index)\n{\n\treturn true;\n};\n\n/**\n * Function: isHandleVisible\n * \n * Returns true if the handle at the given index is visible.\n */\nmxEdgeHandler.prototype.isHandleVisible = function(index)\n{\n\tvar source = this.state.getVisibleTerminalState(true);\n\tvar target = this.state.getVisibleTerminalState(false);\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\tvar edgeStyle = (geo != null) ? this.graph.view.getEdgeStyle(this.state, geo.points, source, target) : null;\n\n\treturn edgeStyle != mxEdgeStyle.EntityRelation || index == 0 || index == this.abspoints.length - 1;\n};\n\n/**\n * Function: createHandleShape\n * \n * Creates the shape used to display the given bend. Note that the index may be\n * null for special cases, such as when called from\n * <mxElbowEdgeHandler.createVirtualBend>. Only images and rectangles should be\n * returned if support for HTML labels with not foreign objects is required.\n * Index if null for virtual handles.\n */\nmxEdgeHandler.prototype.createHandleShape = function(index)\n{\n\tif (this.handleImage != null)\n\t{\n\t\tvar shape = new mxImageShape(new mxRectangle(0, 0, this.handleImage.width, this.handleImage.height), this.handleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse\n\t{\n\t\tvar s = mxConstants.HANDLE_SIZE;\n\t\t\n\t\tif (this.preferHtml)\n\t\t{\n\t\t\ts -= 1;\n\t\t}\n\t\t\n\t\treturn new mxRectangleShape(new mxRectangle(0, 0, s, s), mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: createLabelHandleShape\n * \n * Creates the shape used to display the the label handle.\n */\nmxEdgeHandler.prototype.createLabelHandleShape = function()\n{\n\tif (this.labelHandleImage != null)\n\t{\n\t\tvar shape = new mxImageShape(new mxRectangle(0, 0, this.labelHandleImage.width, this.labelHandleImage.height), this.labelHandleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse\n\t{\n\t\tvar s = mxConstants.LABEL_HANDLE_SIZE;\n\t\treturn new mxRectangleShape(new mxRectangle(0, 0, s, s), mxConstants.LABEL_HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: initBend\n * \n * Helper method to initialize the given bend.\n * \n * Parameters:\n * \n * bend - <mxShape> that represents the bend to be initialized.\n */\nmxEdgeHandler.prototype.initBend = function(bend, dblClick)\n{\n\tif (this.preferHtml)\n\t{\n\t\tbend.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tbend.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tbend.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\tbend.init(this.graph.getView().getOverlayPane());\n\t}\n\n\tmxEvent.redirectMouseEvents(bend.node, this.graph, this.state,\n\t\t\tnull, null, null, dblClick);\n\t\n\t// Fixes lost event tracking for images in quirks / IE8 standards\n\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t{\n\t\tmxEvent.addListener(bend.node, 'dragstart', function(evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t}\n\t\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tbend.node.setAttribute('pointer-events', 'none');\n\t}\n};\n\n/**\n * Function: getHandleForEvent\n * \n * Returns the index of the handle for the given event.\n */\nmxEdgeHandler.prototype.getHandleForEvent = function(me)\n{\n\tvar result = null;\n\t\n\tif (this.state != null)\n\t{\n\t\t// Connection highlight may consume events before they reach sizer handle\n\t\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 1;\n\t\tvar hit = (this.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\t\tvar minDistSq = null;\n\t\n\t\tfunction checkShape(shape)\n\t\t{\n\t\t\tif (shape != null && shape.node != null && shape.node.style.display != 'none' &&\n\t\t\t\tshape.node.style.visibility != 'hidden' &&\n\t\t\t\t(me.isSource(shape) || (hit != null && mxUtils.intersects(shape.bounds, hit))))\n\t\t\t{\n\t\t\t\tvar dx = me.getGraphX() - shape.bounds.getCenterX();\n\t\t\t\tvar dy = me.getGraphY() - shape.bounds.getCenterY();\n\t\t\t\tvar tmp = dx * dx + dy * dy;\n\t\t\t\t\n\t\t\t\tif (minDistSq == null || tmp <= minDistSq)\n\t\t\t\t{\n\t\t\t\t\tminDistSq = tmp;\n\t\t\t\t\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (this.customHandles != null && this.isCustomHandleEvent(me))\n\t\t{\n\t\t\t// Inverse loop order to match display order\n\t\t\tfor (var i = this.customHandles.length - 1; i >= 0; i--)\n\t\t\t{\n\t\t\t\tif (checkShape(this.customHandles[i].shape))\n\t\t\t\t{\n\t\t\t\t\t// LATER: Return reference to active shape\n\t\t\t\t\treturn mxEvent.CUSTOM_HANDLE - i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tif (me.isSource(this.state.text) || checkShape(this.labelShape))\n\t\t{\n\t\t\tresult = mxEvent.LABEL_HANDLE;\n\t\t}\n\t\t\n\t\tif (this.bends != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t\t{\n\t\t\t\tif (checkShape(this.bends[i]))\n\t\t\t\t{\n\t\t\t\t\tresult = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.virtualBends != null && this.isAddVirtualBendEvent(me))\n\t\t{\n\t\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t\t{\n\t\t\t\tif (checkShape(this.virtualBends[i]))\n\t\t\t\t{\n\t\t\t\t\tresult = mxEvent.VIRTUAL_HANDLE - i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isAddVirtualBendEvent\n * \n * Returns true if the given event allows virtual bends to be added. This\n * implementation returns true.\n */\nmxEdgeHandler.prototype.isAddVirtualBendEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: isCustomHandleEvent\n * \n * Returns true if the given event allows custom handles to be changed. This\n * implementation returns true.\n */\nmxEdgeHandler.prototype.isCustomHandleEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by checking if a special element of the handler\n * was clicked, in which case the index parameter is non-null. The\n * indices may be one of <LABEL_HANDLE> or the number of the respective\n * control point. The source and target points are used for reconnecting\n * the edge.\n */\nmxEdgeHandler.prototype.mouseDown = function(sender, me)\n{\n\tvar handle = this.getHandleForEvent(me);\n\t\n\tif (this.bends != null && this.bends[handle] != null)\n\t{\n\t\tvar b = this.bends[handle].bounds;\n\t\tthis.snapPoint = new mxPoint(b.getCenterX(), b.getCenterY());\n\t}\n\t\n\tif (this.addEnabled && handle == null && this.isAddPointEvent(me.getEvent()))\n\t{\n\t\tthis.addPoint(this.state, me.getEvent());\n\t\tme.consume();\n\t}\n\telse if (handle != null && !me.isConsumed() && this.graph.isEnabled())\n\t{\n\t\tif (this.removeEnabled && this.isRemovePointEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.removePoint(this.state, handle);\n\t\t}\n\t\telse if (handle != mxEvent.LABEL_HANDLE || this.graph.isLabelMovable(me.getCell()))\n\t\t{\n\t\t\tif (handle <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(this.virtualBends[mxEvent.VIRTUAL_HANDLE - handle].node, 100);\n\t\t\t}\n\t\t\t\n\t\t\tthis.start(me.getX(), me.getY(), handle);\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxEdgeHandler.prototype.start = function(x, y, index)\n{\n\tthis.startX = x;\n\tthis.startY = y;\n\n\tthis.isSource = (this.bends == null) ? false : index == 0;\n\tthis.isTarget = (this.bends == null) ? false : index == this.bends.length - 1;\n\tthis.isLabel = index == mxEvent.LABEL_HANDLE;\n\n\tif (this.isSource || this.isTarget)\n\t{\n\t\tvar cell = this.state.cell;\n\t\tvar terminal = this.graph.model.getTerminal(cell, this.isSource);\n\n\t\tif ((terminal == null && this.graph.isTerminalPointMovable(cell, this.isSource)) ||\n\t\t\t(terminal != null && this.graph.isCellDisconnectable(cell, terminal, this.isSource)))\n\t\t{\n\t\t\tthis.index = index;\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.index = index;\n\t}\n\t\n\t// Hides other custom handles\n\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t{\n\t\tif (this.customHandles != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t\t{\n\t\t\t\tif (i != mxEvent.CUSTOM_HANDLE - this.index)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[i].setVisible(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: clonePreviewState\n * \n * Returns a clone of the current preview state for the given point and terminal.\n */\nmxEdgeHandler.prototype.clonePreviewState = function(point, terminal)\n{\n\treturn this.state.clone();\n};\n\n/**\n * Function: getSnapToTerminalTolerance\n * \n * Returns the tolerance for the guides. Default value is\n * gridSize * scale / 2.\n */\nmxEdgeHandler.prototype.getSnapToTerminalTolerance = function()\n{\n\treturn this.graph.gridSize * this.graph.view.scale / 2;\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxEdgeHandler.prototype.updateHint = function(me, point) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxEdgeHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled width or height. This uses Math.round.\n */\nmxEdgeHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length);\n};\n\n/**\n * Function: isSnapToTerminalsEvent\n * \n * Returns true if <snapToTerminals> is true and if alt is not pressed.\n */\nmxEdgeHandler.prototype.isSnapToTerminalsEvent = function(me)\n{\n\treturn this.snapToTerminals && !mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: getPointForEvent\n * \n * Returns the point for the given event.\n */\nmxEdgeHandler.prototype.getPointForEvent = function(me)\n{\n\tvar view = this.graph.getView();\n\tvar scale = view.scale;\n\tvar point = new mxPoint(this.roundLength(me.getGraphX() / scale) * scale,\n\t\tthis.roundLength(me.getGraphY() / scale) * scale);\n\t\n\tvar tt = this.getSnapToTerminalTolerance();\n\tvar overrideX = false;\n\tvar overrideY = false;\t\t\n\t\n\tif (tt > 0 && this.isSnapToTerminalsEvent(me))\n\t{\n\t\tfunction snapToPoint(pt)\n\t\t{\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar x = pt.x;\n\n\t\t\t\tif (Math.abs(point.x - x) < tt)\n\t\t\t\t{\n\t\t\t\t\tpoint.x = x;\n\t\t\t\t\toverrideX = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar y = pt.y;\n\n\t\t\t\tif (Math.abs(point.y - y) < tt)\n\t\t\t\t{\n\t\t\t\t\tpoint.y = y;\n\t\t\t\t\toverrideY = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Temporary function\n\t\tfunction snapToTerminal(terminal)\n\t\t{\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tsnapToPoint.call(this, new mxPoint(view.getRoutingCenterX(terminal),\n\t\t\t\t\t\tview.getRoutingCenterY(terminal)));\n\t\t\t}\n\t\t};\n\n\t\tsnapToTerminal.call(this, this.state.getVisibleTerminalState(true));\n\t\tsnapToTerminal.call(this, this.state.getVisibleTerminalState(false));\n\n\t\tif (this.state.absolutePoints != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.state.absolutePoints.length; i++)\n\t\t\t{\n\t\t\t\tsnapToPoint.call(this, this.state.absolutePoints[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tvar tr = view.translate;\n\t\t\n\t\tif (!overrideX)\n\t\t{\n\t\t\tpoint.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n\t\t}\n\t\t\n\t\tif (!overrideY)\n\t\t{\n\t\t\tpoint.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n\t\t}\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getPreviewTerminalState\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeHandler.prototype.getPreviewTerminalState = function(me)\n{\n\tthis.constraintHandler.update(me, this.isSource, true, me.isSource(this.marker.highlight.shape) ? null : this.currentPoint);\n\t\n\tif (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null)\n\t{\n\t\t// Handles special case where grid is large and connection point is at actual point in which\n\t\t// case the outline is not followed as long as we're < gridSize / 2 away from that point\n\t\tif (this.marker.highlight != null && this.marker.highlight.state != null &&\n\t\t\tthis.marker.highlight.state.cell == this.constraintHandler.currentFocus.cell)\n\t\t{\n\t\t\t// Direct repaint needed if cell already highlighted\n\t\t\tif (this.marker.highlight.shape.stroke != 'transparent')\n\t\t\t{\n\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n\t\t}\n\t\t\n\t\tvar model = this.graph.getModel();\n\t\tvar other = this.graph.view.getTerminalPort(this.state,\n\t\t\t\tthis.graph.view.getState(model.getTerminal(this.state.cell,\n\t\t\t!this.isSource)), !this.isSource);\n\t\tvar otherCell = (other != null) ? other.cell : null;\n\t\tvar source = (this.isSource) ? this.constraintHandler.currentFocus.cell : otherCell;\n\t\tvar target = (this.isSource) ? otherCell : this.constraintHandler.currentFocus.cell;\n\t\t\n\t\t// Updates the error message of the handler\n\t\tthis.error = this.validateConnection(source, target);\n\t\tvar result = null;\n\t\t\n\t\tif (this.error == null)\n\t\t{\n\t\t\tresult = this.constraintHandler.currentFocus;\n\t\t}\n\t\t\n\t\tif (this.error != null || (result != null &&\n\t\t\t!this.isCellEnabled(result.cell)))\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\telse if (!this.graph.isIgnoreTerminalEvent(me.getEvent()))\n\t{\n\t\tthis.marker.process(me);\n\t\tvar state = this.marker.getValidState();\n\t\t\n\t\tif (state != null && !this.isCellEnabled(state.cell))\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t\tthis.marker.reset();\n\t\t}\n\t\t\n\t\treturn this.marker.getValidState();\n\t}\n\telse\n\t{\n\t\tthis.marker.reset();\n\t\t\n\t\treturn null;\n\t}\n};\n\n/**\n * Function: getPreviewPoints\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n * \n * Parameters:\n * \n * pt - <mxPoint> that contains the current pointer position.\n * me - Optional <mxMouseEvent> that contains the current event.\n */\nmxEdgeHandler.prototype.getPreviewPoints = function(pt, me)\n{\n\tvar geometry = this.graph.getCellGeometry(this.state.cell);\n\tvar points = (geometry.points != null) ? geometry.points.slice() : null;\n\tvar point = new mxPoint(pt.x, pt.y);\n\tvar result = null;\n\t\n\tif (!this.isSource && !this.isTarget)\n\t{\n\t\tthis.convertPoint(point, false);\n\t\t\n\t\tif (points == null)\n\t\t{\n\t\t\tpoints = [point];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Adds point from virtual bend\n\t\t\tif (this.index <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tpoints.splice(mxEvent.VIRTUAL_HANDLE - this.index, 0, point);\n\t\t\t}\n\n\t\t\t// Removes point if dragged on terminal point\n\t\t\tif (!this.isSource && !this.isTarget)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (i != this.index)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar bend = this.bends[i];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bend != null && mxUtils.contains(bend.bounds, pt.x, pt.y))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.index <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.splice(mxEvent.VIRTUAL_HANDLE - this.index, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.splice(this.index - 1, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tresult = points;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Removes point if user tries to straighten a segment\n\t\t\t\tif (result == null && this.straightRemoveEnabled && (me == null || !mxEvent.isAltDown(me.getEvent())))\n\t\t\t\t{\n\t\t\t\t\tvar tol = this.graph.tolerance * this.graph.tolerance;\n\t\t\t\t\tvar abs = this.state.absolutePoints.slice();\n\t\t\t\t\tabs[this.index] = pt;\n\t\t\t\t\t\n\t\t\t\t\t// Handes special case where removing waypoint affects tolerance (flickering)\n\t\t\t\t\tvar src = this.state.getVisibleTerminalState(true);\n\t\t\t\t\t\n\t\t\t\t\tif (src != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c = this.graph.getConnectionConstraint(this.state, src, true);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if point is not fixed\n\t\t\t\t\t\tif (c == null || this.graph.getConnectionPoint(src, c) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tabs[0] = new mxPoint(src.view.getRoutingCenterX(src), src.view.getRoutingCenterY(src));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar trg = this.state.getVisibleTerminalState(false);\n\t\t\t\t\t\n\t\t\t\t\tif (trg != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c = this.graph.getConnectionConstraint(this.state, trg, false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if point is not fixed\n\t\t\t\t\t\tif (c == null || this.graph.getConnectionPoint(trg, c) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tabs[abs.length - 1] = new mxPoint(trg.view.getRoutingCenterX(trg), trg.view.getRoutingCenterY(trg));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfunction checkRemove(idx, tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (idx > 0 && idx < abs.length - 1 &&\n\t\t\t\t\t\t\tmxUtils.ptSegDistSq(abs[idx - 1].x, abs[idx - 1].y,\n\t\t\t\t\t\t\t\tabs[idx + 1].x, abs[idx + 1].y, tmp.x, tmp.y) < tol)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpoints.splice(idx - 1, 1);\n\t\t\t\t\t\t\tresult = points;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t// LATER: Check if other points can be removed if a segment is made straight\n\t\t\t\t\tcheckRemove(this.index, pt);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Updates existing point\n\t\t\tif (result == null && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tpoints[this.index - 1] = point;\n\t\t\t}\n\t\t}\n\t}\n\telse if (this.graph.resetEdgesOnConnect)\n\t{\n\t\tpoints = null;\n\t}\n\t\n\treturn (result != null) ? result : points;\n};\n\n/**\n * Function: isOutlineConnectEvent\n * \n * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n * or shift is pressed.\n */\nmxEdgeHandler.prototype.isOutlineConnectEvent = function(me)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar evt = me.getEvent();\n\t\n\tvar clientX = mxEvent.getClientX(evt);\n\tvar clientY = mxEvent.getClientY(evt);\n\t\n\tvar doc = document.documentElement;\n\tvar left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n\tvar top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);\n\t\n\tvar gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n\tvar gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n\n\treturn this.outlineConnect && !mxEvent.isShiftDown(me.getEvent()) &&\n\t\t(me.isSource(this.marker.highlight.shape) ||\n\t\t(mxEvent.isAltDown(me.getEvent()) && me.getState() != null) ||\n\t\tthis.marker.highlight.isHighlightAt(clientX, clientY) ||\n\t\t((gridX != clientX || gridY != clientY) && me.getState() == null &&\n\t\tthis.marker.highlight.isHighlightAt(gridX, gridY)));\n};\n\n/**\n * Function: updatePreviewState\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeHandler.prototype.updatePreviewState = function(edge, point, terminalState, me, outline)\n{\n\t// Computes the points for the edge style and terminals\n\tvar sourceState = (this.isSource) ? terminalState : this.state.getVisibleTerminalState(true);\n\tvar targetState = (this.isTarget) ? terminalState : this.state.getVisibleTerminalState(false);\n\t\n\tvar sourceConstraint = this.graph.getConnectionConstraint(edge, sourceState, true);\n\tvar targetConstraint = this.graph.getConnectionConstraint(edge, targetState, false);\n\n\tvar constraint = this.constraintHandler.currentConstraint;\n\n\tif (constraint == null && outline)\n\t{\n\t\tif (terminalState != null)\n\t\t{\n\t\t\t// Handles special case where mouse is on outline away from actual end point\n\t\t\t// in which case the grid is ignored and mouse point is used instead\n\t\t\tif (me.isSource(this.marker.highlight.shape))\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\t\t\t\n\t\t\tconstraint = this.graph.getOutlineConstraint(point, terminalState, me);\n\t\t\tthis.constraintHandler.setFocus(me, terminalState, this.isSource);\n\t\t\tthis.constraintHandler.currentConstraint = constraint;\n\t\t\tthis.constraintHandler.currentPoint = point;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconstraint = new mxConnectionConstraint();\n\t\t}\n\t}\n\t\n\tif (this.outlineConnect && this.marker.highlight != null && this.marker.highlight.shape != null)\n\t{\n\t\tvar s = this.graph.view.scale;\n\t\t\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t{\n\t\t\tthis.marker.highlight.shape.stroke = (outline) ? mxConstants.OUTLINE_HIGHLIGHT_COLOR : 'transparent';\n\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\tthis.marker.highlight.repaint();\n\t\t}\n\t\telse if (this.marker.hasValidState())\n\t\t{\n\t\t\tthis.marker.highlight.shape.stroke = (this.graph.isCellConnectable(me.getCell()) &&\n\t\t\t\tthis.marker.getValidState() != me.getState()) ?\n\t\t\t\t'transparent' : mxConstants.DEFAULT_VALID_COLOR;\n\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\tthis.marker.highlight.repaint();\n\t\t}\n\t}\n\t\n\tif (this.isSource)\n\t{\n\t\tsourceConstraint = constraint;\n\t}\n\telse if (this.isTarget)\n\t{\n\t\ttargetConstraint = constraint;\n\t}\n\t\n\tif (this.isSource || this.isTarget)\n\t{\n\t\tif (constraint != null && constraint.point != null)\n\t\t{\n\t\t\tedge.style[(this.isSource) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X] = constraint.point.x;\n\t\t\tedge.style[(this.isSource) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y] = constraint.point.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete edge.style[(this.isSource) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X];\n\t\t\tdelete edge.style[(this.isSource) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y];\n\t\t}\n\t}\n\t\n\tedge.setVisibleTerminalState(sourceState, true);\n\tedge.setVisibleTerminalState(targetState, false);\n\t\n\tif (!this.isSource || sourceState != null)\n\t{\n\t\tedge.view.updateFixedTerminalPoint(edge, sourceState, true, sourceConstraint);\n\t}\n\t\n\tif (!this.isTarget || targetState != null)\n\t{\n\t\tedge.view.updateFixedTerminalPoint(edge, targetState, false, targetConstraint);\n\t}\n\t\n\tif ((this.isSource || this.isTarget) && terminalState == null)\n\t{\n\t\tedge.setAbsoluteTerminalPoint(point, this.isSource);\n\n\t\tif (this.marker.getMarkedState() == null)\n\t\t{\n\t\t\tthis.error = (this.graph.allowDanglingEdges) ? null : '';\n\t\t}\n\t}\n\t\n\tedge.view.updatePoints(edge, this.points, sourceState, targetState);\n\tedge.view.updateFloatingTerminalPoints(edge, sourceState, targetState);\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview.\n */\nmxEdgeHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.index != null && this.marker != null)\n\t{\n\t\tthis.currentPoint = this.getPointForEvent(me);\n\t\tthis.error = null;\n\t\t\n\t\t// Uses the current point from the constraint handler if available\n\t\tif (!this.graph.isIgnoreTerminalEvent(me.getEvent()) && mxEvent.isShiftDown(me.getEvent()) && this.snapPoint != null)\n\t\t{\n\t\t\tif (Math.abs(this.snapPoint.x - this.currentPoint.x) < Math.abs(this.snapPoint.y - this.currentPoint.y))\n\t\t\t{\n\t\t\t\tthis.currentPoint.x = this.snapPoint.x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.currentPoint.y = this.snapPoint.y;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t{\n\t\t\tif (this.customHandles != null)\n\t\t\t{\n\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].positionChanged();\n\t\t\t\t\n\t\t\t\tif (this.shape != null && this.shape.node != null)\n\t\t\t\t{\n\t\t\t\t\tthis.shape.node.style.display = 'none';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.isLabel)\n\t\t{\n\t\t\tthis.label.x = this.currentPoint.x;\n\t\t\tthis.label.y = this.currentPoint.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.points = this.getPreviewPoints(this.currentPoint, me);\n\t\t\tvar terminalState = (this.isSource || this.isTarget) ? this.getPreviewTerminalState(me) : null;\n\t\t\t\n\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t\t{\n\t\t\t\tthis.currentPoint = this.constraintHandler.currentPoint.clone();\n\t\t\t}\n\t\t\telse if (this.outlineConnect)\n\t\t\t{\n\t\t\t\t// Need to check outline before cloning terminal state\n\t\t\t\tvar outline = (this.isSource || this.isTarget) ? this.isOutlineConnectEvent(me) : false\n\t\t\t\t\t\t\n\t\t\t\tif (outline)\n\t\t\t\t{\n\t\t\t\t\tterminalState = this.marker.highlight.state;\n\t\t\t\t}\n\t\t\t\telse if (terminalState != null && terminalState != me.getState() &&\n\t\t\t\t\tthis.graph.isCellConnectable(me.getCell()) &&\n\t\t\t\t\tthis.marker.highlight.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t\tterminalState = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (terminalState != null && !this.isCellEnabled(terminalState.cell))\n\t\t\t{\n\t\t\t\tterminalState = null;\n\t\t\t\tthis.marker.reset();\n\t\t\t}\n\t\t\t\n\t\t\tvar clone = this.clonePreviewState(this.currentPoint, (terminalState != null) ? terminalState.cell : null);\n\t\t\tthis.updatePreviewState(clone, this.currentPoint, terminalState, me, outline);\n\n\t\t\t// Sets the color of the preview to valid or invalid, updates the\n\t\t\t// points of the preview and redraws\n\t\t\tvar color = (this.error == null) ? this.marker.validColor : this.marker.invalidColor;\n\t\t\tthis.setPreviewColor(color);\n\t\t\tthis.abspoints = clone.absolutePoints;\n\t\t\tthis.active = true;\n\t\t\tthis.updateHint(me, this.currentPoint);\n\t\t}\n\n\t\t// This should go before calling isOutlineConnectEvent above. As a workaround\n\t\t// we add an offset of gridSize to the hint to avoid problem with hit detection\n\t\t// in highlight.isHighlightAt (which uses comonentFromPoint)\n\t\tthis.drawPreview();\n\t\tmxEvent.consume(me.getEvent());\n\t\tme.consume();\n\t}\n\t// Workaround for disabling the connect highlight when over handle\n\telse if (mxClient.IS_IE && this.getHandleForEvent(me) != null)\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event to applying the previewed changes on the edge by\n * using <moveLabel>, <connect> or <changePoints>.\n */\nmxEdgeHandler.prototype.mouseUp = function(sender, me)\n{\n\t// Workaround for wrong event source in Webkit\n\tif (this.index != null && this.marker != null)\n\t{\n\t\tif (this.shape != null && this.shape.node != null)\n\t\t{\n\t\t\tthis.shape.node.style.display = '';\n\t\t}\n\t\t\n\t\tvar edge = this.state.cell;\n\t\tvar index = this.index;\n\t\tthis.index = null;\n\n\t\t// Ignores event if mouse has not been moved\n\t\tif (me.getX() != this.startX || me.getY() != this.startY)\n\t\t{\n\t\t\tvar clone = !this.graph.isIgnoreTerminalEvent(me.getEvent()) && this.graph.isCloneEvent(me.getEvent()) &&\n\t\t\t\tthis.cloneEnabled && this.graph.isCellsCloneable();\n\t\t\t\n\t\t\t// Displays the reason for not carriying out the change\n\t\t\t// if there is an error message with non-zero length\n\t\t\tif (this.error != null)\n\t\t\t{\n\t\t\t\tif (this.error.length > 0)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.validationAlert(this.error);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (index <= mxEvent.CUSTOM_HANDLE && index > mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\t\t\n\t\t\t\t\tmodel.beginUpdate();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].execute(me);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.shape != null && this.shape.node != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.shape.apply(this.state);\n\t\t\t\t\t\t\tthis.shape.redraw();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.isLabel)\n\t\t\t{\n\t\t\t\tthis.moveLabel(this.state, this.label.x, this.label.y);\n\t\t\t}\n\t\t\telse if (this.isSource || this.isTarget)\n\t\t\t{\n\t\t\t\tvar terminal = null;\n\t\t\t\t\n\t\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t\t\t{\n\t\t\t\t\tterminal = this.constraintHandler.currentFocus.cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (terminal == null && this.marker.hasValidState() && this.marker.highlight != null &&\n\t\t\t\t\tthis.marker.highlight.shape != null &&\n\t\t\t\t\tthis.marker.highlight.shape.stroke != 'transparent' &&\n\t\t\t\t\tthis.marker.highlight.shape.stroke != 'white')\n\t\t\t\t{\n\t\t\t\t\tterminal = this.marker.validState.cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (terminal != null)\n\t\t\t\t{\n\t\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\t\tvar parent = model.getParent(edge);\n\t\t\t\t\t\n\t\t\t\t\tmodel.beginUpdate();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t// Clones and adds the cell\n\t\t\t\t\t\tif (clone)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar geo = model.getGeometry(edge);\n\t\t\t\t\t\t\tvar clone = this.graph.cloneCell(edge);\n\t\t\t\t\t\t\tmodel.add(parent, clone, model.getChildCount(parent));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\tmodel.setGeometry(clone, geo);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar other = model.getTerminal(edge, !this.isSource);\n\t\t\t\t\t\t\tthis.graph.connectCell(clone, other, !this.isSource);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tedge = clone;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tedge = this.connect(edge, terminal, this.isSource, clone, me);\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.graph.isAllowDanglingEdges())\n\t\t\t\t{\n\t\t\t\t\tvar pt = this.abspoints[(this.isSource) ? 0 : this.abspoints.length - 1];\n\t\t\t\t\tpt.x = this.roundLength(pt.x / this.graph.view.scale - this.graph.view.translate.x);\n\t\t\t\t\tpt.y = this.roundLength(pt.y / this.graph.view.scale - this.graph.view.translate.y);\n\n\t\t\t\t\tvar pstate = this.graph.getView().getState(\n\t\t\t\t\t\t\tthis.graph.getModel().getParent(edge));\n\t\t\t\t\t\t\t\n\t\t\t\t\tif (pstate != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt.x -= pstate.origin.x;\n\t\t\t\t\t\tpt.y -= pstate.origin.y;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tpt.x -= this.graph.panDx / this.graph.view.scale;\n\t\t\t\t\tpt.y -= this.graph.panDy / this.graph.view.scale;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t// Destroys and recreates this handler\n\t\t\t\t\tedge = this.changeTerminalPoint(edge, pt, this.isSource, clone);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.active)\n\t\t\t{\n\t\t\t\tedge = this.changePoints(edge, this.points, clone);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.graph.getView().invalidate(this.state.cell);\n\t\t\t\tthis.graph.getView().validate(this.state.cell);\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\telse if (this.graph.isToggleEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.graph.selectCellForEvent(this.state.cell, me.getEvent());\n\t\t}\n\n\t\t// Resets the preview color the state of the handler if this\n\t\t// handler has not been recreated\n\t\tif (this.marker != null)\n\t\t{\n\t\t\tthis.reset();\n\n\t\t\t// Updates the selection if the edge has been cloned\n\t\t\tif (edge != this.state.cell)\n\t\t\t{\n\t\t\t\tthis.graph.setSelectionCell(edge);\n\t\t\t}\n\t\t}\n\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxEdgeHandler.prototype.reset = function()\n{\n\tif (this.active)\n\t{\n\t\tthis.refresh();\n\t}\n\t\n\tthis.error = null;\n\tthis.index = null;\n\tthis.label = null;\n\tthis.points = null;\n\tthis.snapPoint = null;\n\tthis.isLabel = false;\n\tthis.isSource = false;\n\tthis.isTarget = false;\n\tthis.active = false;\n\t\n\tif (this.livePreview && this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (this.sizers[i] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[i].node.style.display = '';\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.reset();\n\t}\n\t\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.reset();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].reset();\n\t\t}\n\t}\n\n\tthis.setPreviewColor(mxConstants.EDGE_SELECTION_COLOR);\n\tthis.removeHint();\n\tthis.redraw();\n};\n\n/**\n * Function: setPreviewColor\n * \n * Sets the color of the preview to the given value.\n */\nmxEdgeHandler.prototype.setPreviewColor = function(color)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.stroke = color;\n\t}\n};\n\n\n/**\n * Function: convertPoint\n * \n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid. Returns the given, modified\n * point instance.\n * \n * Parameters:\n * \n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\t\t\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\t\n\tpoint.x = Math.round(point.x / scale - tr.x);\n\tpoint.y = Math.round(point.y / scale - tr.y);\n\n\tvar pstate = this.graph.getView().getState(\n\t\tthis.graph.getModel().getParent(this.state.cell));\n\n\tif (pstate != null)\n\t{\n\t\tpoint.x -= pstate.origin.x;\n\t\tpoint.y -= pstate.origin.y;\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: moveLabel\n * \n * Changes the coordinates for the label of the given edge.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge.\n * x - Integer that specifies the x-coordinate of the new location.\n * y - Integer that specifies the y-coordinate of the new location.\n */\nmxEdgeHandler.prototype.moveLabel = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\t\n\tif (geometry != null)\n\t{\n\t\tvar scale = this.graph.getView().scale;\n\t\tgeometry = geometry.clone();\n\t\t\n\t\tif (geometry.relative)\n\t\t{\n\t\t\t// Resets the relative location stored inside the geometry\n\t\t\tvar pt = this.graph.getView().getRelativePoint(edgeState, x, y);\n\t\t\tgeometry.x = Math.round(pt.x * 10000) / 10000;\n\t\t\tgeometry.y = Math.round(pt.y);\n\t\t\t\n\t\t\t// Resets the offset inside the geometry to find the offset\n\t\t\t// from the resulting point\n\t\t\tgeometry.offset = new mxPoint(0, 0);\n\t\t\tvar pt = this.graph.view.getPoint(edgeState, geometry);\n\t\t\tgeometry.offset = new mxPoint(Math.round((x - pt.x) / scale), Math.round((y - pt.y) / scale));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar points = edgeState.absolutePoints;\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\t\t\t\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar cx = p0.x + (pe.x - p0.x) / 2;\n\t\t\t\tvar cy = p0.y + (pe.y - p0.y) / 2;\n\t\t\t\t\n\t\t\t\tgeometry.offset = new mxPoint(Math.round((x - cx) / scale), Math.round((y - cy) / scale));\n\t\t\t\tgeometry.x = 0;\n\t\t\t\tgeometry.y = 0;\n\t\t\t}\n\t\t}\n\n\t\tmodel.setGeometry(edgeState.cell, geometry);\n\t}\n};\n\n/**\n * Function: connect\n * \n * Changes the terminal or terminal point of the given edge in the graph\n * model.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be reconnected.\n * terminal - <mxCell> that represents the new terminal.\n * isSource - Boolean indicating if the new terminal is the source or\n * target terminal.\n * isClone - Boolean indicating if the new connection should be a clone of\n * the old edge.\n * me - <mxMouseEvent> that contains the mouse up event.\n */\nmxEdgeHandler.prototype.connect = function(edge, terminal, isSource, isClone, me)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(edge);\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar constraint = this.constraintHandler.currentConstraint;\n\t\t\n\t\tif (constraint == null)\n\t\t{\n\t\t\tconstraint = new mxConnectionConstraint();\n\t\t}\n\n\t\tthis.graph.connectCell(edge, terminal, isSource, constraint);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: changeTerminalPoint\n * \n * Changes the terminal point of the given edge.\n */\nmxEdgeHandler.prototype.changeTerminalPoint = function(edge, point, isSource, clone)\n{\n\tvar model = this.graph.getModel();\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (clone)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\t\t\tvar terminal = model.getTerminal(edge, !isSource);\n\t\t\tedge = this.graph.cloneCell(edge);\n\t\t\tmodel.add(parent, edge, model.getChildCount(parent));\n\t\t\tmodel.setTerminal(edge, terminal, !isSource);\n\t\t}\n\n\t\tvar geo = model.getGeometry(edge);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.setTerminalPoint(point, isSource);\n\t\t\tmodel.setGeometry(edge, geo);\n\t\t\tthis.graph.connectCell(edge, null, isSource, new mxConnectionConstraint());\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: changePoints\n * \n * Changes the control points of the given edge in the graph model.\n */\nmxEdgeHandler.prototype.changePoints = function(edge, points, clone)\n{\n\tvar model = this.graph.getModel();\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (clone)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\t\t\tvar source = model.getTerminal(edge, true);\n\t\t\tvar target = model.getTerminal(edge, false);\n\t\t\tedge = this.graph.cloneCell(edge);\n\t\t\tmodel.add(parent, edge, model.getChildCount(parent));\n\t\t\tmodel.setTerminal(edge, source, true);\n\t\t\tmodel.setTerminal(edge, target, false);\n\t\t}\n\t\t\n\t\tvar geo = model.getGeometry(edge);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.points = points;\n\t\t\t\n\t\t\tmodel.setGeometry(edge, geo);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: addPoint\n * \n * Adds a control point for the given state and event.\n */\nmxEdgeHandler.prototype.addPoint = function(state, evt)\n{\n\tvar pt = mxUtils.convertPoint(this.graph.container, mxEvent.getClientX(evt),\n\t\t\tmxEvent.getClientY(evt));\n\tvar gridEnabled = this.graph.isGridEnabledEvent(evt);\n\tthis.convertPoint(pt, gridEnabled);\n\tthis.addPointAt(state, pt.x, pt.y);\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: addPointAt\n * \n * Adds a control point at the given point.\n */\nmxEdgeHandler.prototype.addPointAt = function(state, x, y)\n{\n\tvar geo = this.graph.getCellGeometry(state.cell);\n\tvar pt = new mxPoint(x, y);\n\t\n\tif (geo != null)\n\t{\n\t\tgeo = geo.clone();\n\t\tvar t = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\tvar offset = new mxPoint(t.x * s, t.y * s);\n\t\t\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\t\n\t\tif (this.graph.model.isVertex(parent))\n\t\t{\n\t\t\tvar pState = this.graph.view.getState(parent);\n\t\t\toffset = new mxPoint(pState.x, pState.y);\n\t\t}\n\t\t\n\t\tvar index = mxUtils.findNearestSegment(state, pt.x * s + offset.x, pt.y * s + offset.y);\n\n\t\tif (geo.points == null)\n\t\t{\n\t\t\tgeo.points = [pt];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeo.points.splice(index, 0, pt);\n\t\t}\n\t\t\n\t\tthis.graph.getModel().setGeometry(state.cell, geo);\n\t\tthis.refresh();\t\n\t\tthis.redraw();\n\t}\n};\n\n/**\n * Function: removePoint\n * \n * Removes the control point at the given index from the given state.\n */\nmxEdgeHandler.prototype.removePoint = function(state, index)\n{\n\tif (index > 0 && index < this.abspoints.length - 1)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\t\t\n\t\tif (geo != null && geo.points != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.points.splice(index - 1, 1);\n\t\t\tthis.graph.getModel().setGeometry(state.cell, geo);\n\t\t\tthis.refresh();\n\t\t\tthis.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getHandleFillColor\n * \n * Returns the fillcolor for the handle at the given index.\n */\nmxEdgeHandler.prototype.getHandleFillColor = function(index)\n{\n\tvar isSource = index == 0;\n\tvar cell = this.state.cell;\n\tvar terminal = this.graph.getModel().getTerminal(cell, isSource);\n\tvar color = mxConstants.HANDLE_FILLCOLOR;\n\t\n\tif ((terminal != null && !this.graph.isCellDisconnectable(cell, terminal, isSource)) ||\n\t\t(terminal == null && !this.graph.isTerminalPointMovable(cell, isSource)))\n\t{\n\t\tcolor = mxConstants.LOCKED_HANDLE_FILLCOLOR;\n\t}\n\telse if (terminal != null && this.graph.isCellDisconnectable(cell, terminal, isSource))\n\t{\n\t\tcolor = mxConstants.CONNECT_HANDLE_FILLCOLOR;\n\t}\n\t\n\treturn color;\n};\n\n/**\n * Function: redraw\n * \n * Redraws the preview, and the bends- and label control points.\n */\nmxEdgeHandler.prototype.redraw = function(ignoreHandles)\n{\n\tif (this.state != null)\n\t{\n\t\tthis.abspoints = this.state.absolutePoints.slice();\n\t\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\t\t\n\t\tif (g != null)\n\t\t{\n\t\t\tvar pts = g.points;\n\t\t\n\t\t\tif (this.bends != null && this.bends.length > 0)\n\t\t\t{\n\t\t\t\tif (pts != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.points == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.points = [];\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 1; i < this.bends.length - 1; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.bends[i] != null && this.abspoints[i] != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.points[i - 1] = pts[i - 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.drawPreview();\n\t\t\n\t\tif (!ignoreHandles)\n\t\t{\n\t\t\tthis.redrawHandles();\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the handles.\n */\nmxEdgeHandler.prototype.redrawHandles = function()\n{\n\tvar cell = this.state.cell;\n\n\t// Updates the handle for the label position\n\tvar b = this.labelShape.bounds;\n\tthis.label = new mxPoint(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n\tthis.labelShape.bounds = new mxRectangle(Math.round(this.label.x - b.width / 2),\n\t\tMath.round(this.label.y - b.height / 2), b.width, b.height);\n\n\t// Shows or hides the label handle depending on the label\n\tvar lab = this.graph.getLabel(cell);\n\tthis.labelShape.visible = (lab != null && lab.length > 0 && this.graph.isLabelMovable(cell));\n\t\n\tif (this.bends != null && this.bends.length > 0)\n\t{\n\t\tvar n = this.abspoints.length - 1;\n\t\t\n\t\tvar p0 = this.abspoints[0];\n\t\tvar x0 = p0.x;\n\t\tvar y0 = p0.y;\n\t\t\n\t\tb = this.bends[0].bounds;\n\t\tthis.bends[0].bounds = new mxRectangle(Math.floor(x0 - b.width / 2),\n\t\t\t\tMath.floor(y0 - b.height / 2), b.width, b.height);\n\t\tthis.bends[0].fill = this.getHandleFillColor(0);\n\t\tthis.bends[0].redraw();\n\t\t\n\t\tif (this.manageLabelHandle)\n\t\t{\n\t\t\tthis.checkLabelHandle(this.bends[0].bounds);\n\t\t}\n\t\t\t\t\n\t\tvar pe = this.abspoints[n];\n\t\tvar xn = pe.x;\n\t\tvar yn = pe.y;\n\t\t\n\t\tvar bn = this.bends.length - 1;\n\t\tb = this.bends[bn].bounds;\n\t\tthis.bends[bn].bounds = new mxRectangle(Math.floor(xn - b.width / 2),\n\t\t\t\tMath.floor(yn - b.height / 2), b.width, b.height);\n\t\tthis.bends[bn].fill = this.getHandleFillColor(bn);\n\t\tthis.bends[bn].redraw();\n\t\t\t\t\n\t\tif (this.manageLabelHandle)\n\t\t{\n\t\t\tthis.checkLabelHandle(this.bends[bn].bounds);\n\t\t}\n\t\t\n\t\tthis.redrawInnerBends(p0, pe);\n\t}\n\n\tif (this.abspoints != null && this.virtualBends != null && this.virtualBends.length > 0)\n\t{\n\t\tvar last = this.abspoints[0];\n\t\t\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tif (this.virtualBends[i] != null && this.abspoints[i + 1] != null)\n\t\t\t{\n\t\t\t\tvar pt = this.abspoints[i + 1];\n\t\t\t\tvar b = this.virtualBends[i];\n\t\t\t\tvar x = last.x + (pt.x - last.x) / 2;\n\t\t\t\tvar y = last.y + (pt.y - last.y) / 2;\n\t\t\t\tb.bounds = new mxRectangle(Math.floor(x - b.bounds.width / 2),\n\t\t\t\t\t\tMath.floor(y - b.bounds.height / 2), b.bounds.width, b.bounds.height);\n\t\t\t\tb.redraw();\n\t\t\t\tmxUtils.setOpacity(b.node, this.virtualBendOpacity);\n\t\t\t\tlast = pt;\n\t\t\t\t\n\t\t\t\tif (this.manageLabelHandle)\n\t\t\t\t{\n\t\t\t\t\tthis.checkLabelHandle(b.bounds);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.redraw();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tvar temp = this.customHandles[i].shape.node.style.display;\n\t\t\tthis.customHandles[i].redraw();\n\t\t\tthis.customHandles[i].shape.node.style.display = temp;\n\n\t\t\t// Hides custom handles during text editing\n\t\t\tthis.customHandles[i].shape.node.style.visibility =\n\t\t\t\t(this.isCustomHandleVisible(this.customHandles[i])) ?\n\t\t\t\t'' : 'hidden';\n\t\t}\n\t}\n};\n\n/**\n * Function: isCustomHandleVisible\n * \n * Returns true if the given custom handle is visible.\n */\nmxEdgeHandler.prototype.isCustomHandleVisible = function(handle)\n{\n\treturn !this.graph.isEditing() && this.state.view.graph.getSelectionCount() == 1;\n};\n\n/**\n * Function: hideHandles\n * \n * Shortcut to <hideSizers>.\n */\nmxEdgeHandler.prototype.setHandlesVisible = function(visible)\n{\n\tif (this.bends != null)\n\t{\n\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t{\n\t\t\tthis.bends[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\t\n\tif (this.virtualBends != null)\n\t{\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tthis.virtualBends[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.node.style.display = (visible) ? '' : 'none';\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].setVisible(visible);\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates and redraws the inner bends.\n * \n * Parameters:\n * \n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tfor (var i = 1; i < this.bends.length - 1; i++)\n\t{\n\t\tif (this.bends[i] != null)\n\t\t{\n\t\t\tif (this.abspoints[i] != null)\n\t\t\t{\n\t\t\t\tvar x = this.abspoints[i].x;\n\t\t\t\tvar y = this.abspoints[i].y;\n\t\t\t\t\n\t\t\t\tvar b = this.bends[i].bounds;\n\t\t\t\tthis.bends[i].node.style.visibility = 'visible';\n\t\t\t\tthis.bends[i].bounds = new mxRectangle(Math.round(x - b.width / 2),\n\t\t\t\t\t\tMath.round(y - b.height / 2), b.width, b.height);\n\t\t\t\t\n\t\t\t\tif (this.manageLabelHandle)\n\t\t\t\t{\n\t\t\t\t\tthis.checkLabelHandle(this.bends[i].bounds);\n\t\t\t\t}\n\t\t\t\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(this.bends[i].bounds, this.labelShape.bounds))\n\t\t\t\t{\n\t\t\t\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\t\t\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\t\t\t\tthis.bends[i].bounds = new mxRectangle(Math.round(x - w / 2), Math.round(y - h / 2), w, h);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.bends[i].redraw();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.bends[i].destroy();\n\t\t\t\tthis.bends[i] = null;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: checkLabelHandle\n * \n * Checks if the label handle intersects the given bounds and moves it if it\n * intersects.\n */\nmxEdgeHandler.prototype.checkLabelHandle = function(b)\n{\n\tif (this.labelShape != null)\n\t{\n\t\tvar b2 = this.labelShape.bounds;\n\t\t\n\t\tif (mxUtils.intersects(b, b2))\n\t\t{\n\t\t\tif (b.getCenterY() < b2.getCenterY())\n\t\t\t{\n\t\t\t\tb2.y = b.y + b.height;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tb2.y = b.y - b2.height;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview.\n */\nmxEdgeHandler.prototype.drawPreview = function()\n{\n\ttry\n\t{\n\t\tif (this.isLabel)\n\t\t{\n\t\t\tvar b = this.labelShape.bounds;\n\t\t\tvar bounds = new mxRectangle(Math.round(this.label.x - b.width / 2),\n\t\t\t\tMath.round(this.label.y - b.height / 2), b.width, b.height);\n\t\t\t\n\t\t\tif (!this.labelShape.bounds.equals(bounds))\n\t\t\t{\n\t\t\t\tthis.labelShape.bounds = bounds;\n\t\t\t\tthis.labelShape.redraw();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.shape != null && !mxUtils.equalPoints(this.shape.points, this.abspoints))\n\t\t{\n\t\t\tthis.shape.apply(this.state);\n\t\t\tthis.shape.points = this.abspoints.slice();\n\t\t\tthis.shape.scale = this.state.view.scale;\n\t\t\tthis.shape.isDashed = this.isSelectionDashed();\n\t\t\tthis.shape.stroke = this.getSelectionColor();\n\t\t\tthis.shape.strokewidth = this.getSelectionStrokeWidth() / this.shape.scale / this.shape.scale;\n\t\t\tthis.shape.isShadow = false;\n\t\t\tthis.shape.redraw();\n\t\t}\n\t\t\n\t\tthis.updateParentHighlight();\n\t}\n\tcatch (e)\n\t{\n\t\t// ignore\n\t}\n};\n\n/**\n * Function: refresh\n * \n * Refreshes the bends of this handler.\n */\nmxEdgeHandler.prototype.refresh = function()\n{\n\tif (this.state != null)\n\t{\n\t\tthis.abspoints = this.getSelectionPoints(this.state);\n\t\tthis.points = [];\n\t\n\t\tif (this.bends != null)\n\t\t{\n\t\t\tthis.destroyBends(this.bends);\n\t\t\tthis.bends = this.createBends();\n\t\t}\n\t\t\n\t\tif (this.virtualBends != null)\n\t\t{\n\t\t\tthis.destroyBends(this.virtualBends);\n\t\t\tthis.virtualBends = this.createVirtualBends();\n\t\t}\n\t\t\n\t\tif (this.customHandles != null)\n\t\t{\n\t\t\tthis.destroyBends(this.customHandles);\n\t\t\tthis.customHandles = this.createCustomHandles();\n\t\t}\n\t\t\n\t\t// Puts label node on top of bends\n\t\tif (this.labelShape != null && this.labelShape.node != null && this.labelShape.node.parentNode != null)\n\t\t{\n\t\t\tthis.labelShape.node.parentNode.appendChild(this.labelShape.node);\n\t\t}\n\t}\n};\n\n/**\n * Function: isDestroyed\n * \n * Returns true if <destroy> was called.\n */\nmxEdgeHandler.prototype.isDestroyed = function()\n{\n\treturn this.shape == null;\n};\n\n/**\n * Function: destroyBends\n * \n * Destroys all elements in <bends>.\n */\nmxEdgeHandler.prototype.destroyBends = function(bends)\n{\n\tif (bends != null)\n\t{\n\t\tfor (var i = 0; i < bends.length; i++)\n\t\t{\n\t\t\tif (bends[i] != null)\n\t\t\t{\n\t\t\t\tbends[i].destroy();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This does\n * normally not need to be called as handlers are destroyed automatically\n * when the corresponding cell is deselected.\n */\nmxEdgeHandler.prototype.destroy = function()\n{\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.state.view.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.destroy();\n\t\tthis.marker = null;\n\t}\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\tvar pstate = this.graph.view.getState(parent);\n\n\t\tif (pstate != null && pstate.parentHighlight == this.parentHighlight)\n\t\t{\n\t\t\tpstate.parentHighlight = null;\n\t\t}\n\t\t\n\t\tthis.parentHighlight.destroy();\n\t\tthis.parentHighlight = null;\n\t}\n\t\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.destroy();\n\t\tthis.labelShape = null;\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.destroy();\n\t\tthis.constraintHandler = null;\n\t}\n\t\n\tthis.destroyBends(this.virtualBends);\n\tthis.virtualBends = null;\n\t\n\tthis.destroyBends(this.customHandles);\n\tthis.customHandles = null;\n\n\tthis.destroyBends(this.bends);\n\tthis.bends = null;\n\t\n\tthis.removeHint();\n};\n\n__mxOutput.mxEdgeHandler = typeof mxEdgeHandler !== 'undefined' ? mxEdgeHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxElbowEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler>. It extends <mxEdgeHandler>.\n * \n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be modified.\n */\nfunction mxElbowEdgeHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxElbowEdgeHandler, mxEdgeHandler);\n\n/**\n * Specifies if a double click on the middle handle should call\n * <mxGraph.flipEdge>. Default is true.\n */\nmxElbowEdgeHandler.prototype.flipEnabled = true;\n\n/**\n * Variable: doubleClickOrientationResource\n * \n * Specifies the resource key for the tooltip to be displayed on the single\n * control point for routed edges. If the resource for this key does not\n * exist then the value is used as the error message. Default is\n * 'doubleClickOrientation'.\n */\nmxElbowEdgeHandler.prototype.doubleClickOrientationResource =\n\t(mxClient.language != 'none') ? 'doubleClickOrientation' : '';\n\n/**\n * Function: createBends\n * \n * Overrides <mxEdgeHandler.createBends> to create custom bends.\n */\n mxElbowEdgeHandler.prototype.createBends = function()\n {\n\tvar bends = [];\n\t\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\t// Virtual\n\tbends.push(this.createVirtualBend(mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt) && this.flipEnabled)\n\t\t{\n\t\t\tthis.graph.flipEdge(this.state.cell, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t})));\n\t\n\tthis.points.push(new mxPoint(0,0));\n\n\t// Target\n\tbend = this.createHandleShape(2);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\t\n\treturn bends;\n };\n\n/**\n * Function: createVirtualBend\n * \n * Creates a virtual bend that supports double clicking and calls\n * <mxGraph.flipEdge>.\n */\nmxElbowEdgeHandler.prototype.createVirtualBend = function(dblClickHandler)\n{\n\tvar bend = this.createHandleShape();\n\tthis.initBend(bend, dblClickHandler);\n\n\tbend.setCursor(this.getCursorForBend());\n\n\tif (!this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tbend.node.style.display = 'none';\n\t}\n\n\treturn bend;\n};\n\n/**\n * Function: getCursorForBend\n * \n * Returns the cursor to be used for the bend.\n */\nmxElbowEdgeHandler.prototype.getCursorForBend = function()\n{\n\treturn (this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.TopToBottom ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_TOPTOBOTTOM ||\n\t\t((this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.ElbowConnector ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_ELBOW)&&\n\t\tthis.state.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL)) ? \n\t\t'row-resize' : 'col-resize';\n};\n\n/**\n * Function: getTooltipForNode\n * \n * Returns the tooltip for the given node.\n */\nmxElbowEdgeHandler.prototype.getTooltipForNode = function(node)\n{\n\tvar tip = null;\n\t\n\tif (this.bends != null && this.bends[1] != null && (node == this.bends[1].node ||\n\t\tnode.parentNode == this.bends[1].node))\n\t{\n\t\ttip = this.doubleClickOrientationResource;\n\t\ttip = mxResources.get(tip) || tip; // translate\n\t}\n\n\treturn tip;\n};\n\n/**\n * Function: convertPoint\n * \n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid.\n * \n * Parameters:\n * \n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxElbowEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\tvar origin = this.state.origin;\n\t\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\t\n\tpoint.x = Math.round(point.x / scale - tr.x - origin.x);\n\tpoint.y = Math.round(point.y / scale - tr.y - origin.y);\n\t\n\treturn point;\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates and redraws the inner bends.\n * \n * Parameters:\n * \n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxElbowEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\tvar pts = this.state.absolutePoints;\n\tvar pt = null;\n\n\t// Keeps the virtual bend on the edge shape\n\tif (pts.length > 1)\n\t{\n\t\tp0 = pts[1];\n\t\tpe = pts[pts.length - 2];\n\t}\n\telse if (g.points != null && g.points.length > 0)\n\t{\n\t\tpt = pts[0];\n\t}\n\t\n\tif (pt == null)\n\t{\n\t\tpt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint(this.graph.getView().scale * (pt.x + this.graph.getView().translate.x + this.state.origin.x),\n\t\t\t\tthis.graph.getView().scale * (pt.y + this.graph.getView().translate.y + this.state.origin.y));\n\t}\n\n\t// Makes handle slightly bigger if the yellow  label handle\n\t// exists and intersects this green handle\n\tvar b = this.bends[1].bounds;\n\tvar w = b.width;\n\tvar h = b.height;\n\tvar bounds = new mxRectangle(Math.round(pt.x - w / 2), Math.round(pt.y - h / 2), w, h);\n\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(bounds);\n\t}\n\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(bounds, this.labelShape.bounds))\n\t{\n\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\tbounds = new mxRectangle(Math.floor(pt.x - w / 2), Math.floor(pt.y - h / 2), w, h);\n\t}\n\n\tthis.bends[1].bounds = bounds;\n\tthis.bends[1].redraw();\n\t\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(this.bends[1].bounds);\n\t}\n};\n\n__mxOutput.mxElbowEdgeHandler = typeof mxElbowEdgeHandler !== 'undefined' ? mxElbowEdgeHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nfunction mxEdgeSegmentHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxEdgeSegmentHandler, mxElbowEdgeHandler);\n\n/**\n * Function: getCurrentPoints\n * \n * Returns the current absolute points.\n */\nmxEdgeSegmentHandler.prototype.getCurrentPoints = function()\n{\n\tvar pts = this.state.absolutePoints;\n\t\n\tif (pts != null)\n\t{\n\t\t// Special case for straight edges where we add a virtual middle handle for moving the edge\n\t\tvar tol = Math.max(1, this.graph.view.scale);\n\t\t\n\t\tif (pts.length == 2 || (pts.length == 3 &&\n\t\t\t(Math.abs(pts[0].x - pts[1].x) < tol && Math.abs(pts[1].x - pts[2].x) < tol ||\n\t\t\tMath.abs(pts[0].y - pts[1].y) < tol && Math.abs(pts[1].y - pts[2].y) < tol)))\n\t\t{\n\t\t\tvar cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n\t\t\tvar cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n\t\t\t\n\t\t\tpts = [pts[0], new mxPoint(cx, cy), new mxPoint(cx, cy), pts[pts.length - 1]];\t\n\t\t}\n\t}\n\n\treturn pts;\n};\n\n/**\n * Function: getPreviewPoints\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeSegmentHandler.prototype.getPreviewPoints = function(point)\n{\n\tif (this.isSource || this.isTarget)\n\t{\n\t\treturn mxElbowEdgeHandler.prototype.getPreviewPoints.apply(this, arguments);\n\t}\n\telse\n\t{\n\t\tvar pts = this.getCurrentPoints();\n\t\tvar last = this.convertPoint(pts[0].clone(), false);\n\t\tpoint = this.convertPoint(point.clone(), false);\n\t\tvar result = [];\n\n\t\tfor (var i = 1; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt = this.convertPoint(pts[i].clone(), false);\n\t\t\t\n\t\t\tif (i == this.index)\n\t\t\t{\n\t\t\t\tif (Math.round(last.x - pt.x) == 0)\n\t\t \t\t{\n\t\t\t\t\tlast.x = point.x;\n\t\t\t\t\tpt.x = point.x;\n\t\t \t\t}\n\t\t \t\t\n\t\t\t\tif (Math.round(last.y - pt.y) == 0)\n\t\t \t\t{\n\t\t \t\t\tlast.y = point.y;\n\t\t \t\t\tpt.y = point.y;\n\t\t \t\t}\n\t\t\t}\n\n\t\t\tif (i < pts.length - 1)\n\t\t\t{\n\t\t\t\tresult.push(pt);\n\t\t\t}\n\n\t\t\tlast = pt;\n\t\t}\n\t\t\n\t\t// Replaces single point that intersects with source or target\n\t\tif (result.length == 1)\n\t\t{\n\t\t\tvar source = this.state.getVisibleTerminalState(true);\n\t\t\tvar target = this.state.getVisibleTerminalState(false);\n\t\t\tvar scale = this.state.view.getScale();\n\t\t\tvar tr = this.state.view.getTranslate();\n\t\t\t\n\t\t\tvar x = result[0].x * scale + tr.x;\n\t\t\tvar y = result[0].y * scale + tr.y;\n\t\t\t\n\t\t\tif ((source != null && mxUtils.contains(source, x, y)) ||\n\t\t\t\t(target != null && mxUtils.contains(target, x, y)))\n\t\t\t{\n\t\t\t\tresult = [point, point];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: updatePreviewState\n * \n * Overridden to perform optimization of the edge style result.\n */\nmxEdgeSegmentHandler.prototype.updatePreviewState = function(edge, point, terminalState, me)\n{\n\tmxEdgeHandler.prototype.updatePreviewState.apply(this, arguments);\n\n\t// Checks and corrects preview by running edge style again\n\tif (!this.isSource && !this.isTarget)\n\t{\n\t\tpoint = this.convertPoint(point.clone(), false);\n\t\tvar pts = edge.absolutePoints;\n\t\tvar pt0 = pts[0];\n\t\tvar pt1 = pts[1];\n\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 2; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt2 = pts[i];\n\t\t\n\t\t\t// Merges adjacent segments only if more than 2 to allow for straight edges\n\t\t\tif ((Math.round(pt0.x - pt1.x) != 0 || Math.round(pt1.x - pt2.x) != 0) &&\n\t\t\t\t(Math.round(pt0.y - pt1.y) != 0 || Math.round(pt1.y - pt2.y) != 0))\n\t\t\t{\n\t\t\t\tresult.push(this.convertPoint(pt1.clone(), false));\n\t\t\t}\n\n\t\t\tpt0 = pt1;\n\t\t\tpt1 = pt2;\n\t\t}\n\t\t\n\t\tvar source = this.state.getVisibleTerminalState(true);\n\t\tvar target = this.state.getVisibleTerminalState(false);\n\t\tvar rpts = this.state.absolutePoints;\n\t\t\n\t\t// A straight line is represented by 3 handles\n\t\tif (result.length == 0 && (Math.round(pts[0].x - pts[pts.length - 1].x) == 0 ||\n\t\t\tMath.round(pts[0].y - pts[pts.length - 1].y) == 0))\n\t\t{\n\t\t\tresult = [point, point];\n\t\t}\n\t\t// Handles special case of transitions from straight vertical to routed\n\t\telse if (pts.length == 5 && result.length == 2 && source != null && target != null &&\n\t\t\t\trpts != null && Math.round(rpts[0].x - rpts[rpts.length - 1].x) == 0)\n\t\t{\n\t\t\tvar view = this.graph.getView();\n\t\t\tvar scale = view.getScale();\n\t\t\tvar tr = view.getTranslate();\n\t\t\t\n\t\t\tvar y0 = view.getRoutingCenterY(source) / scale - tr.y;\n\t\t\t\n\t\t\t// Use fixed connection point y-coordinate if one exists\n\t\t\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\t\t\t\n\t\t\tif (sc != null)\n\t\t\t{\n\t\t\t\tvar pt = this.graph.getConnectionPoint(source, sc);\n\t\t\t\t\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tthis.convertPoint(pt, false);\n\t\t\t\t\ty0 = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar ye = view.getRoutingCenterY(target) / scale - tr.y;\n\t\t\t\n\t\t\t// Use fixed connection point y-coordinate if one exists\n\t\t\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\t\t\t\n\t\t\tif (tc)\n\t\t\t{\n\t\t\t\tvar pt = this.graph.getConnectionPoint(target, tc);\n\t\t\t\t\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tthis.convertPoint(pt, false);\n\t\t\t\t\tye = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult = [new mxPoint(point.x, y0), new mxPoint(point.x, ye)];\n\t\t}\n\n\t\tthis.points = result;\n\n\t\t// LATER: Check if points and result are different\n\t\tedge.view.updateFixedTerminalPoints(edge, source, target);\n\t\tedge.view.updatePoints(edge, this.points, source, target);\n\t\tedge.view.updateFloatingTerminalPoints(edge, source, target);\n\t}\n};\n\n/**\n * Overriden to merge edge segments.\n */\nmxEdgeSegmentHandler.prototype.connect = function(edge, terminal, isSource, isClone, me)\n{\n\tvar model = this.graph.getModel();\n\tvar geo = model.getGeometry(edge);\n\tvar result = null;\n\t\n\t// Merges adjacent edge segments\n\tif (geo != null && geo.points != null && geo.points.length > 0)\n\t{\n\t\tvar pts = this.abspoints;\n\t\tvar pt0 = pts[0];\n\t\tvar pt1 = pts[1];\n\t\tresult = [];\n\t\t\n\t\tfor (var i = 2; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt2 = pts[i];\n\t\t\n\t\t\t// Merges adjacent segments only if more than 2 to allow for straight edges\n\t\t\tif ((Math.round(pt0.x - pt1.x) != 0 || Math.round(pt1.x - pt2.x) != 0) &&\n\t\t\t\t(Math.round(pt0.y - pt1.y) != 0 || Math.round(pt1.y - pt2.y) != 0))\n\t\t\t{\n\t\t\t\tresult.push(this.convertPoint(pt1.clone(), false));\n\t\t\t}\n\t\n\t\t\tpt0 = pt1;\n\t\t\tpt1 = pt2;\n\t\t}\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (result != null)\n\t\t{\n\t\t\tvar geo = model.getGeometry(edge);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.points = result;\n\t\t\t\t\n\t\t\t\tmodel.setGeometry(edge, geo);\n\t\t\t}\n\t\t}\n\t\t\n\t\tedge = mxEdgeHandler.prototype.connect.apply(this, arguments);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: getTooltipForNode\n * \n * Returns no tooltips.\n */\nmxEdgeSegmentHandler.prototype.getTooltipForNode = function(node)\n{\n\treturn null;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxEdgeSegmentHandler.prototype.start = function(x, y, index)\n{\n\tmxEdgeHandler.prototype.start.apply(this, arguments);\n\t\n\tif (this.bends != null && this.bends[index] != null &&\n\t\t!this.isSource && !this.isTarget)\n\t{\n\t\tmxUtils.setOpacity(this.bends[index].node, 100);\n\t}\n};\n\n/**\n * Function: createBends\n * \n * Adds custom bends for the center of each segment.\n */\nmxEdgeSegmentHandler.prototype.createBends = function()\n{\n\tvar bends = [];\n\t\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\tvar pts = this.getCurrentPoints();\n\n\t// Waypoints (segment handles)\n\tif (this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tif (this.points == null)\n\t\t{\n\t\t\tthis.points = [];\n\t\t}\n\n\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t{\n\t\t\tbend = this.createVirtualBend();\n\t\t\tbends.push(bend);\n\t\t\tvar horizontal = Math.round(pts[i].x - pts[i + 1].x) == 0;\n\t\t\t\n\t\t\t// Special case where dy is 0 as well\n\t\t\tif (Math.round(pts[i].y - pts[i + 1].y) == 0 && i < pts.length - 2)\n\t\t\t{\n\t\t\t\thorizontal = Math.round(pts[i].x - pts[i + 2].x) == 0;\n\t\t\t}\n\t\t\t\n\t\t\tbend.setCursor((horizontal) ? 'col-resize' : 'row-resize');\n\t\t\tthis.points.push(new mxPoint(0,0));\n\t\t}\n\t}\n\n\t// Target\n\tvar bend = this.createHandleShape(pts.length);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\treturn bends;\n};\n\n/**\n * Function: redraw\n * \n * Overridden to invoke <refresh> before the redraw.\n */\nmxEdgeSegmentHandler.prototype.redraw = function()\n{\n\tthis.refresh();\n\tmxEdgeHandler.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates the position of the custom bends.\n */\nmxEdgeSegmentHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tif (this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tvar pts = this.getCurrentPoints();\n\t\t\n\t\tif (pts != null && pts.length > 1)\n\t\t{\n\t\t\tvar straight = false;\n\t\t\t\n\t\t\t// Puts handle in the center of straight edges\n\t\t\tif (pts.length == 4 && Math.round(pts[1].x - pts[2].x) == 0 && Math.round(pts[1].y - pts[2].y) == 0)\n\t\t\t{\n\t\t\t\tstraight = true;\n\t\t\t\t\n\t\t\t\tif (Math.round(pts[0].y - pts[pts.length - 1].y) == 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n\t\t\t\t\tpts[1] = new mxPoint(cx, pts[1].y);\n\t\t\t\t\tpts[2] = new mxPoint(cx, pts[2].y);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n\t\t\t\t\tpts[1] = new mxPoint(pts[1].x, cy);\n\t\t\t\t\tpts[2] = new mxPoint(pts[2].x, cy);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t\t{\n\t\t\t\tif (this.bends[i + 1] != null)\n\t\t\t\t{\n\t\t \t\t\tvar p0 = pts[i];\n\t \t\t\t\tvar pe = pts[i + 1];\n\t\t\t \t\tvar pt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t\t\t \t\tvar b = this.bends[i + 1].bounds;\n\t\t\t \t\tthis.bends[i + 1].bounds = new mxRectangle(Math.floor(pt.x - b.width / 2),\n\t\t\t \t\t\t\tMath.floor(pt.y - b.height / 2), b.width, b.height);\n\t\t\t\t \tthis.bends[i + 1].redraw();\n\t\t\t\t \t\n\t\t\t\t \tif (this.manageLabelHandle)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.checkLabelHandle(this.bends[i + 1].bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (straight)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(this.bends[1].node, this.virtualBendOpacity);\n\t\t\t\tmxUtils.setOpacity(this.bends[3].node, this.virtualBendOpacity);\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxEdgeSegmentHandler = typeof mxEdgeSegmentHandler !== 'undefined' ? mxEdgeSegmentHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxKeyHandler\n *\n * Event handler that listens to keystroke events. This is not a singleton,\n * however, it is normally only required once if the target is the document\n * element (default).\n * \n * This handler installs a key event listener in the topmost DOM node and\n * processes all events that originate from descandants of <mxGraph.container>\n * or from the topmost DOM node. The latter means that all unhandled keystrokes\n * are handled by this object regardless of the focused state of the <graph>.\n * \n * Example:\n * \n * The following example creates a key handler that listens to the delete key\n * (46) and deletes the selection cells if the graph is enabled.\n * \n * (code)\n * var keyHandler = new mxKeyHandler(graph);\n * keyHandler.bindKey(46, function(evt)\n * {\n *   if (graph.isEnabled())\n *   {\n *     graph.removeCells();\n *   }\n * });\n * (end)\n * \n * Keycodes:\n * \n * See http://tinyurl.com/yp8jgl or http://tinyurl.com/229yqw for a list of\n * keycodes or install a key event listener into the document element and print\n * the key codes of the respective events to the console.\n * \n * To support the Command key and the Control key on the Mac, the following\n * code can be used.\n *\n * (code)\n * keyHandler.getFunction = function(evt)\n * {\n *   if (evt != null)\n *   {\n *     return (mxEvent.isControlDown(evt) || (mxClient.IS_MAC && evt.metaKey)) ? this.controlKeys[evt.keyCode] : this.normalKeys[evt.keyCode];\n *   }\n *   \n *   return null;\n * };\n * (end)\n * \n * Constructor: mxKeyHandler\n *\n * Constructs an event handler that executes functions bound to specific\n * keystrokes.\n * \n * Parameters:\n * \n * graph - Reference to the associated <mxGraph>.\n * target - Optional reference to the event target. If null, the document\n * element is used as the event target, that is, the object where the key\n * event listener is installed.\n */\nfunction mxKeyHandler(graph, target)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.target = target || document.documentElement;\n\t\t\n\t\t// Creates the arrays to map from keycodes to functions\n\t\tthis.normalKeys = [];\n\t\tthis.shiftKeys = [];\n\t\tthis.controlKeys = [];\n\t\tthis.controlShiftKeys = [];\n\t\t\n\t\tthis.keydownHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.keyDown(evt);\n\t\t});\n\n\t\t// Installs the keystroke listener in the target\n\t\tmxEvent.addListener(this.target, 'keydown', this.keydownHandler);\n\t\t\n\t\t// Automatically deallocates memory in IE\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the <mxGraph> associated with this handler.\n */\nmxKeyHandler.prototype.graph = null;\n\n/**\n * Variable: target\n * \n * Reference to the target DOM, that is, the DOM node where the key event\n * listeners are installed.\n */\nmxKeyHandler.prototype.target = null;\n\n/**\n * Variable: normalKeys\n * \n * Maps from keycodes to functions for non-pressed control keys.\n */\nmxKeyHandler.prototype.normalKeys = null;\n\n/**\n * Variable: shiftKeys\n * \n * Maps from keycodes to functions for pressed shift keys.\n */\nmxKeyHandler.prototype.shiftKeys = null;\n\n/**\n * Variable: controlKeys\n * \n * Maps from keycodes to functions for pressed control keys.\n */\nmxKeyHandler.prototype.controlKeys = null;\n\n/**\n * Variable: controlShiftKeys\n * \n * Maps from keycodes to functions for pressed control and shift keys.\n */\nmxKeyHandler.prototype.controlShiftKeys = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxKeyHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxKeyHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling by updating <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxKeyHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: bindKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control key is not pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindKey = function(code, funct)\n{\n\tthis.normalKeys[code] = funct;\n};\n\n/**\n * Function: bindShiftKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the shift key is pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindShiftKey = function(code, funct)\n{\n\tthis.shiftKeys[code] = funct;\n};\n\n/**\n * Function: bindControlKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control key is pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlKey = function(code, funct)\n{\n\tthis.controlKeys[code] = funct;\n};\n\n/**\n * Function: bindControlShiftKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control and shift key are pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlShiftKey = function(code, funct)\n{\n\tthis.controlShiftKeys[code] = funct;\n};\n\n/**\n * Function: isControlDown\n * \n * Returns true if the control key is pressed. This uses <mxEvent.isControlDown>.\n * \n * Parameters:\n * \n * evt - Key event whose control key pressed state should be returned.\n */\nmxKeyHandler.prototype.isControlDown = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: getFunction\n * \n * Returns the function associated with the given key event or null if no\n * function is associated with the given event.\n * \n * Parameters:\n * \n * evt - Key event whose associated function should be returned.\n */\nmxKeyHandler.prototype.getFunction = function(evt)\n{\n\tif (evt != null && !mxEvent.isAltDown(evt))\n\t{\n\t\tif (this.isControlDown(evt))\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.controlShiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.controlKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.shiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.normalKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\t\n/**\n * Function: isGraphEvent\n * \n * Returns true if the event should be processed by this handler, that is,\n * if the event source is either the target, one of its direct children, a\n * descendant of the <mxGraph.container>, or the <mxGraph.cellEditor> of the\n * <graph>.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isGraphEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\t\n\t// Accepts events from the target object or\n\t// in-place editing inside graph\n\tif ((source == this.target || source.parentNode == this.target) ||\n\t\t(this.graph.cellEditor != null && this.graph.cellEditor.isEventSource(evt)))\n\t{\n\t\treturn true;\n\t}\n\t\n\t// Accepts events from inside the container\n\treturn mxUtils.isAncestorNode(this.graph.container, source);\n};\n\n/**\n * Function: keyDown\n * \n * Handles the event by invoking the function bound to the respective keystroke\n * if <isEnabledForEvent> returns true for the given event and if\n * <isEventIgnored> returns false, except for escape for which\n * <isEventIgnored> is not invoked.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.keyDown = function(evt)\n{\n\tif (this.isEnabledForEvent(evt))\n\t{\n\t\t// Cancels the editing if escape is pressed\n\t\tif (evt.keyCode == 27 /* Escape */)\n\t\t{\n\t\t\tthis.escape(evt);\n\t\t}\n\t\t\n\t\t// Invokes the function for the keystroke\n\t\telse if (!this.isEventIgnored(evt))\n\t\t{\n\t\t\tvar boundFunction = this.getFunction(evt);\n\t\t\t\n\t\t\tif (boundFunction != null)\n\t\t\t{\n\t\t\t\tboundFunction(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isEnabledForEvent\n * \n * Returns true if the given event should be handled. <isEventIgnored> is\n * called later if the event is not an escape key stroke, in which case\n * <escape> is called. This implementation returns true if <isEnabled>\n * returns true for both, this handler and <graph>, if the event is not\n * consumed and if <isGraphEvent> returns true.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEnabledForEvent = function(evt)\n{\n\treturn (this.graph.isEnabled() && !mxEvent.isConsumed(evt) &&\n\t\tthis.isGraphEvent(evt) && this.isEnabled());\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the given keystroke should be ignored. This returns\n * graph.isEditing().\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEventIgnored = function(evt)\n{\n\treturn this.graph.isEditing();\n};\n\n/**\n * Function: escape\n * \n * Hook to process ESCAPE keystrokes. This implementation invokes\n * <mxGraph.stopEditing> to cancel the current editing, connecting\n * and/or other ongoing modifications.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke. Possible keycode in this\n * case is 27 (ESCAPE).\n */\nmxKeyHandler.prototype.escape = function(evt)\n{\n\tif (this.graph.isEscapeEnabled())\n\t{\n\t\tthis.graph.escape(evt);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its references into the DOM. This does\n * normally not need to be called, it is called automatically when the\n * window unloads (in IE).\n */\nmxKeyHandler.prototype.destroy = function()\n{\n\tif (this.target != null && this.keydownHandler != null)\n\t{\n\t\tmxEvent.removeListener(this.target, 'keydown', this.keydownHandler);\n\t\tthis.keydownHandler = null;\n\t}\n\t\n\tthis.target = null;\n};\n\n__mxOutput.mxKeyHandler = typeof mxKeyHandler !== 'undefined' ? mxKeyHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxTooltipHandler\n * \n * Graph event handler that displays tooltips. <mxGraph.getTooltip> is used to\n * get the tooltip for a cell or handle. This handler is built-into\n * <mxGraph.tooltipHandler> and enabled using <mxGraph.setTooltips>.\n *\n * Example:\n * \n * (code>\n * new mxTooltipHandler(graph);\n * (end)\n * \n * Constructor: mxTooltipHandler\n * \n * Constructs an event handler that displays tooltips with the specified\n * delay (in milliseconds). If no delay is specified then a default delay\n * of 500 ms (0.5 sec) is used.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * delay - Optional delay in milliseconds.\n */\nfunction mxTooltipHandler(graph, delay)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.delay = delay || 500;\n\t\tthis.graph.addMouseListener(this);\n\t}\n};\n\nmxTooltipHandler.prototype.isVisible = false;\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the tooltip and its shadow. Default is 10005.\n */\nmxTooltipHandler.prototype.zIndex = 10005;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxTooltipHandler.prototype.graph = null;\n\n/**\n * Variable: delay\n * \n * Delay to show the tooltip in milliseconds. Default is 500.\n */\nmxTooltipHandler.prototype.delay = null;\n\n/**\n * Variable: ignoreTouchEvents\n * \n * Specifies if touch and pen events should be ignored. Default is true.\n */\nmxTooltipHandler.prototype.ignoreTouchEvents = true;\n\n/**\n * Variable: hideOnHover\n * \n * Specifies if the tooltip should be hidden if the mouse is moved over the\n * current cell. Default is false.\n */\nmxTooltipHandler.prototype.hideOnHover = false;\n\n/**\n * Variable: destroyed\n * \n * True if this handler was destroyed using <destroy>.\n */\nmxTooltipHandler.prototype.destroyed = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxTooltipHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxTooltipHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n */\nmxTooltipHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isHideOnHover\n * \n * Returns <hideOnHover>.\n */\nmxTooltipHandler.prototype.isHideOnHover = function()\n{\n\treturn this.hideOnHover;\n};\n\n/**\n * Function: setHideOnHover\n * \n * Sets <hideOnHover>.\n */\nmxTooltipHandler.prototype.setHideOnHover = function(value)\n{\n\tthis.hideOnHover = value;\n};\n\n/**\n * Function: init\n * \n * Initializes the DOM nodes required for this tooltip handler.\n */\nmxTooltipHandler.prototype.init = function()\n{\n\tif (document.body != null)\n\t{\n\t\tthis.div = document.createElement('div');\n\t\tthis.div.className = 'mxTooltip';\n\t\tthis.div.style.visibility = 'hidden';\n\t\tthis.div.setAttribute('role', 'tooltip');\n\t\tthis.div.setAttribute('aria-live','polite');\n\n\t\tdocument.body.appendChild(this.div);\n\n\t\tmxEvent.addGestureListeners(this.div, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tvar source = mxEvent.getSource(evt);\n\t\t\t\n\t\t\tif (source.nodeName != 'A')\n\t\t\t{\n\t\t\t\tthis.hideTooltip();\n\t\t\t}\n\t\t}));\n\n\t\t/**\n\t\t * {{SQL CARBON EDIT}} we only want to show the tooltip when the mouse is over the cell.\n\t\t * To track that when the tooltip is present over the cell we use this event.\n\t\t * As soon as the cursor goes outside the cell bound (over the tooltip) we hide the tooltip\n\t\t */\n\t\tmxEvent.addListener(this.div, 'mousemove', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tvar pt = mxUtils.convertPoint(this.graph.container, evt.clientX, evt.clientY);\n\t\t\t\n\t\t\tif( this.sourceCell !== undefined &&\n\t\t\t\tpt.x < this.sourceCell?.geometry?.x ||\n\t\t\t\tpt.x > (this.sourceCell?.geometry?.x + this.sourceCell?.geometry?.width) ||\n\t\t\t\tpt.y < (this.sourceCell?.geometry?.y) ||\n\t\t\t\tpt.y > (this.sourceCell?.geometry?.y + this.sourceCell?.geometry?.height)\n\t\t\t){\n\t\t\t\tthis.hideTooltip();\n\t\t\t}\n\t\t}));\n\n\t\t/**\n\t\t * {{SQL CARBON EDIT}} Handling an edge case when the both cell and tooltip are at the edge of \n\t\t * the screen. When the mouse goes outside the screen we close the tooltip\n\t\t */\n\t\t mxEvent.addListener(this.div, 'mouseleave', mxUtils.bind(this, function(evt)\n\t\t {\n\t\t\tthis.hideTooltip();\n\t\t }));\n\t}\n};\n\n/**\n * Function: getStateForEvent\n * \n * Returns the <mxCellState> to be used for showing a tooltip for this event.\n */\nmxTooltipHandler.prototype.getStateForEvent = function(me)\n{\n\treturn me.getState();\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a rubberband selection. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxTooltipHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.reset(me, false);\n\tthis.hideTooltip();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the rubberband selection.\n */\nmxTooltipHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (me.getX() != this.lastX || me.getY() != this.lastY)\n\t{\n\t\tthis.reset(me, true);\n\t\tvar state = this.getStateForEvent(me);\n\n\t\n\t\tif (this.isHideOnHover() || state != this.state || (me.getSource() != this.node &&\n\t\t\t(!this.stateSource || (state != null && this.stateSource ==\n\t\t\t(me.isSource(state.shape) || !me.isSource(state.text))))))\n\t\t{\t\n\t\t\tif(this.sourceCell?.cellDivs?.container){\n\t\t\t\tconst container = this.sourceCell.cellDivs.container;\n\t\t\t\tconst containerRect = container.getBoundingClientRect();\n\t\t\t\tif(me.evt.x < containerRect.x || me.evt.x > containerRect.x + containerRect.width || me.evt.y < containerRect.y || me.evt.y > containerRect.y + containerRect.height){\n\t\t\t\t\tthis.hideTooltip();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.hideTooltip();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.lastX = me.getX();\n\tthis.lastY = me.getY();\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by resetting the tooltip timer or hiding the existing\n * tooltip.\n */\nmxTooltipHandler.prototype.mouseUp = function(sender, me)\n{\n\tthis.reset(me, true);\n\tthis.hideTooltip();\n};\n\n\n/**\n * Function: resetTimer\n * \n * Resets the timer.\n */\nmxTooltipHandler.prototype.resetTimer = function()\n{\n\tif (this.thread != null)\n\t{\n\t\twindow.clearTimeout(this.thread);\n\t\tthis.thread = null;\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets and/or restarts the timer to trigger the display of the tooltip.\n */\nmxTooltipHandler.prototype.reset = function(me, restart, state)\n{\n\tif (!this.ignoreTouchEvents || mxEvent.isMouseEvent(me.getEvent()))\n\t{\n\t\tthis.resetTimer();\n\t\tstate = (state != null) ? state : this.getStateForEvent(me);\n\t\t\n\t\tif (restart && this.isEnabled() && state != null && (this.div == null ||\n\t\t\tthis.div.style.visibility == 'hidden'))\n\t\t{\n\t\t\tvar node = me.getSource();\n\t\t\tvar x = me.getX();\n\t\t\tvar y = me.getY();\n\t\t\tvar stateSource = me.isSource(state.shape) || me.isSource(state.text);\n\t\n\t\t\tthis.thread = window.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\t// {{SQL CARBON EDIT}} saving source cell to be used in the events for hiding the tooltip\n\t\t\t\tthis.sourceCell = me.sourceState.cell;\n\t\t\t\tif (!this.graph.isEditing() && !this.graph.popupMenuHandler.isMenuShowing() && !this.graph.isMouseDown)\n\t\t\t\t{\n\t\t\t\t\t// Uses information from inside event cause using the event at\n\t\t\t\t\t// this (delayed) point in time is not possible in IE as it no\n\t\t\t\t\t// longer contains the required information (member not found)\n\t\t\t\t\tvar tip = this.graph.getTooltip(state, node, x, y);\n\t\t\t\t\tthis.show(tip, x, y);\n\t\t\t\t\tthis.state = state;\n\t\t\t\t\tthis.node = node;\n\t\t\t\t\tthis.stateSource = stateSource;\n\t\t\t\t}\n\t\t\t}), this.delay);\n\t\t}\n\t}\n};\n\n/**\n * Function: hide\n * \n * Hides the tooltip and resets the timer.\n */\nmxTooltipHandler.prototype.hide = function()\n{\n\tthis.resetTimer();\n\tthis.hideTooltip();\n};\n\n/**\n * Function: hideTooltip\n * \n * Hides the tooltip.\n */\nmxTooltipHandler.prototype.hideTooltip = function()\n{\n\tif (this.div != null)\n\t{\n\t\tthis.div.style.visibility = 'hidden';\n\t\tthis.div.innerHTML = '';\n\t\tthis.isVisible = false;\n\t}\n\t// {{SQL CARBON EDIT}} setting sourceCell to undefined when we hide the tooltip\n\tthis.sourceCell = undefined;\n};\n\n/**\n * Function: show\n * \n * Shows the tooltip for the specified cell and optional index at the\n * specified location (with a vertical offset of 10 pixels).\n */\nmxTooltipHandler.prototype.show = function(tip, x, y, cell)\n{\n\tif(cell){\n\t\tthis.sourceCell = cell;\n\t}\n\tif (!this.destroyed && tip != null && tip.length > 0)\n\t{\n\t\t// Initializes the DOM nodes if required\n\t\tif (this.div == null)\n\t\t{\n\t\t\tthis.init();\n\t\t}\n\t\t\n\t\tvar origin = mxUtils.getScrollOrigin();\n\n\t\tthis.div.style.zIndex = this.zIndex;\n\t\tthis.div.style.left = (x + origin.x) + 'px';\n\t\tthis.div.style.top = (y + mxConstants.TOOLTIP_VERTICAL_OFFSET +\n\t\t\torigin.y) + 'px';\n\n\t\tif (!mxUtils.isNode(tip))\n\t\t{\t\n\t\t\tthis.div.innerHTML = tip.replace(/\\n/g, '<br>');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.div.innerHTML = '';\n\t\t\tthis.div.appendChild(tip);\n\t\t}\n\n\t\t/**\n\t\t * {{SQL CARBON EDIT}} Adding smart placement of tooltip for better viewing.\n\t\t * This takes into account the tooltip width and height and sees if the tooltip \n\t\t * is visible within in the window if not then it adjusts the position of the tooltip\n\t\t */\n\t\tconst tooltipPadding = 4;\n\t\tconst tooltipWidth = this.div.offsetWidth + tooltipPadding;\n\t\tconst tooltipHeight = this.div.offsetHeight + tooltipPadding;\n\n\t\tconst windowWidth = window.innerWidth;\n\t\tconst windowHeight = window.innerHeight;\n\n\t\tif ((windowWidth - x) < tooltipWidth) {\n\t\t\tthis.div.style.left = Math.max(window.scrollX, windowWidth - tooltipWidth) + \"px\";\n\t\t}\n\n\t\tif ((windowHeight - y) < tooltipHeight) {\n\t\t\tthis.div.style.top =  Math.max(window.scrollY,  windowHeight - tooltipHeight) + \"px\";\n\t\t}\n\n\t\t/**\n\t\t * {{SQL CARBON EDIT}} end of code\n\t\t */\n\t\tthis.div.style.visibility = '';\n\t\t/**\n\t\t * {{SQL CARBON EDIT}} Commenting out the check to see if the tooltip \n\t\t * fits in the screen or not as we always want to show it.\n\t\t */\n\t\t//mxUtils.fit(this.div); \n\t\tthis.isVisible = true;\n\n\t\tthis.graph.fireEvent(new mxEventObject(mxEvent.TOOLTIP_SHOWN, 'tooltip', this.div, 'x', x, 'y', y));\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxTooltipHandler.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxEvent.release(this.div);\n\t\t\n\t\tif (this.div != null && this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.destroyed = true;\n\t\tthis.div = null;\n\t\tthis.isVisible = false;\n\t}\n};\n\n__mxOutput.mxTooltipHandler = typeof mxTooltipHandler !== 'undefined' ? mxTooltipHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellTracker\n * \n * Event handler that highlights cells. Inherits from <mxCellMarker>.\n * \n * Example:\n * \n * (code)\n * new mxCellTracker(graph, '#00FF00');\n * (end)\n * \n * For detecting dragEnter, dragOver and dragLeave on cells, the following\n * code can be used:\n * \n * (code)\n * graph.addMouseListener(\n * {\n *   cell: null,\n *   mouseDown: function(sender, me) { },\n *   mouseMove: function(sender, me)\n *   {\n *     var tmp = me.getCell();\n *     \n *     if (tmp != this.cell)\n *     {\n *       if (this.cell != null)\n *       {\n *         this.dragLeave(me.getEvent(), this.cell);\n *       }\n *       \n *       this.cell = tmp;\n *       \n *       if (this.cell != null)\n *       {\n *         this.dragEnter(me.getEvent(), this.cell);\n *       }\n *     }\n *     \n *     if (this.cell != null)\n *     {\n *       this.dragOver(me.getEvent(), this.cell);\n *     }\n *   },\n *   mouseUp: function(sender, me) { },\n *   dragEnter: function(evt, cell)\n *   {\n *     mxLog.debug('dragEnter', cell.value);\n *   },\n *   dragOver: function(evt, cell)\n *   {\n *     mxLog.debug('dragOver', cell.value);\n *   },\n *   dragLeave: function(evt, cell)\n *   {\n *     mxLog.debug('dragLeave', cell.value);\n *   }\n * });\n * (end)\n * \n * Constructor: mxCellTracker\n * \n * Constructs an event handler that highlights cells.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * color - Color of the highlight. Default is blue.\n * funct - Optional JavaScript function that is used to override\n * <mxCellMarker.getCell>.\n */\nfunction mxCellTracker(graph, color, funct)\n{\n\tmxCellMarker.call(this, graph, color);\n\n\tthis.graph.addMouseListener(this);\n\t\n\tif (funct != null)\n\t{\n\t\tthis.getCell = funct;\n\t}\n\t\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\t}\n};\n\n/**\n * Extends mxCellMarker.\n */\nmxUtils.extend(mxCellTracker, mxCellMarker);\n\n/**\n * Function: mouseDown\n * \n * Ignores the event. The event is not consumed.\n */\nmxCellTracker.prototype.mouseDown = function(sender, me) { };\n\n/**\n * Function: mouseMove\n * \n * Handles the event by highlighting the cell under the mousepointer if it\n * is over the hotspot region of the cell.\n */\nmxCellTracker.prototype.mouseMove = function(sender, me)\n{\n\tif (this.isEnabled())\n\t{\n\t\tthis.process(me);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by reseting the highlight.\n */\nmxCellTracker.prototype.mouseUp = function(sender, me) { };\n\n/**\n * Function: destroy\n * \n * Destroys the object and all its resources and DOM nodes. This doesn't\n * normally need to be called. It is called automatically when the window\n * unloads.\n */\nmxCellTracker.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxCellMarker.prototype.destroy.apply(this);\n\t}\n};\n\n__mxOutput.mxCellTracker = typeof mxCellTracker !== 'undefined' ? mxCellTracker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellHighlight\n * \n * A helper class to highlight cells. Here is an example for a given cell.\n * \n * (code)\n * var highlight = new mxCellHighlight(graph, '#ff0000', 2);\n * highlight.highlight(graph.view.getState(cell)));\n * (end)\n * \n * Constructor: mxCellHighlight\n * \n * Constructs a cell highlight.\n */\nfunction mxCellHighlight(graph, highlightColor, strokeWidth, dashed)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.highlightColor = (highlightColor != null) ? highlightColor : mxConstants.DEFAULT_VALID_COLOR;\n\t\tthis.strokeWidth = (strokeWidth != null) ? strokeWidth : mxConstants.HIGHLIGHT_STROKEWIDTH;\n\t\tthis.dashed = (dashed != null) ? dashed : false;\n\t\tthis.opacity = mxConstants.HIGHLIGHT_OPACITY;\n\n\t\t// Updates the marker if the graph changes\n\t\tthis.repaintHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Updates reference to state\n\t\t\tif (this.state != null)\n\t\t\t{\n\t\t\t\tvar tmp = this.graph.view.getState(this.state.cell);\n\t\t\t\t\n\t\t\t\tif (tmp == null)\n\t\t\t\t{\n\t\t\t\t\tthis.hide();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.state = tmp;\n\t\t\t\t\tthis.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.getView().addListener(mxEvent.SCALE, this.repaintHandler);\n\t\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.repaintHandler);\n\t\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.repaintHandler);\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.repaintHandler);\n\t\t\n\t\t// Hides the marker if the current root changes\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.hide();\n\t\t});\n\n\t\tthis.graph.getView().addListener(mxEvent.DOWN, this.resetHandler);\n\t\tthis.graph.getView().addListener(mxEvent.UP, this.resetHandler);\n\t}\n};\n\n/**\n * Variable: keepOnTop\n * \n * Specifies if the highlights should appear on top of everything\n * else in the overlay pane. Default is false.\n */\nmxCellHighlight.prototype.keepOnTop = false;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellHighlight.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState>.\n */\nmxCellHighlight.prototype.state = null;\n\n/**\n * Variable: spacing\n * \n * Specifies the spacing between the highlight for vertices and the vertex.\n * Default is 2.\n */\nmxCellHighlight.prototype.spacing = 2;\n\n/**\n * Variable: resetHandler\n * \n * Holds the handler that automatically invokes reset if the highlight\n * should be hidden.\n */\nmxCellHighlight.prototype.resetHandler = null;\n\n/**\n * Function: setHighlightColor\n * \n * Sets the color of the rectangle used to highlight drop targets.\n * \n * Parameters:\n * \n * color - String that represents the new highlight color.\n */\nmxCellHighlight.prototype.setHighlightColor = function(color)\n{\n\tthis.highlightColor = color;\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.stroke = color;\n\t}\n};\n\n/**\n * Function: drawHighlight\n * \n * Creates and returns the highlight shape for the given state.\n */\nmxCellHighlight.prototype.drawHighlight = function()\n{\n\tthis.shape = this.createShape();\n\tthis.repaint();\n\n\tif (!this.keepOnTop && this.shape.node.parentNode.firstChild != this.shape.node)\n\t{\n\t\tthis.shape.node.parentNode.insertBefore(this.shape.node, this.shape.node.parentNode.firstChild);\n\t}\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the highlight shape for the given state.\n */\nmxCellHighlight.prototype.createShape = function()\n{\n\tvar shape = this.graph.cellRenderer.createShape(this.state);\n\t\n\tshape.svgStrokeTolerance = this.graph.tolerance;\n\tshape.points = this.state.absolutePoints;\n\tshape.apply(this.state);\n\tshape.stroke = this.highlightColor;\n\tshape.opacity = this.opacity;\n\tshape.isDashed = this.dashed;\n\tshape.isShadow = false;\n\t\n\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tshape.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(shape.node, this.graph, this.state);\n\t\n\tif (this.graph.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.pointerEvents = false;\n\t}\n\telse\n\t{\n\t\tshape.svgPointerEvents = 'stroke';\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: getStrokeWidth\n * \n * Returns the stroke width.\n */\nmxCellHighlight.prototype.getStrokeWidth = function(state)\n{\n\treturn this.strokeWidth;\n};\n\n/**\n * Function: repaint\n * \n * Updates the highlight after a change of the model or view.\n */\nmxCellHighlight.prototype.repaint = function()\n{\n\tif (this.state != null && this.shape != null)\n\t{\n\t\tthis.shape.scale = this.state.view.scale;\n\t\t\n\t\tif (this.graph.model.isEdge(this.state.cell))\n\t\t{\n\t\t\tthis.shape.strokewidth = this.getStrokeWidth();\n\t\t\tthis.shape.points = this.state.absolutePoints;\n\t\t\tthis.shape.outline = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconst x = this.state.text ? Math.min(this.state.x, this.state.text.boundingBox.x) : this.state.x;\n\t\t\tconst y = this.state.text ? Math.min(this.state.y, this.state.text.boundingBox.y) : this.state.y;\n\t\t\tconst w = this.state.text ? Math.max(this.state.x + this.state.width, this.state.text.boundingBox.x + this.state.text.boundingBox.width) - x : this.state.width;\n\t\t\tconst h = this.state.text ? Math.max(this.state.y + this.state.height, this.state.text.boundingBox.y + this.state.text.boundingBox.height) - y : this.state.height;\n\t\t\tthis.shape.bounds = new mxRectangle(x - 2, y - 2, w + 5, h + 3);\n\n\t\t\tthis.shape.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\tthis.shape.strokewidth = this.getStrokeWidth() / this.state.view.scale;\n\t\t\tthis.shape.outline = true;\n\t\t}\n\n\t\t// Uses cursor from shape in highlight\n\t\tif (this.state.shape != null)\n\t\t{\n\t\t\tthis.shape.setCursor(this.state.shape.getCursor());\n\t\t}\n\t\t\n\t\t// Workaround for event transparency in VML with transparent color\n\t\t// is to use a non-transparent color with near zero opacity\n\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t{\n\t\t\tif (this.shape.stroke == 'transparent')\n\t\t\t{\n\t\t\t\t// KNOWN: Quirks mode does not seem to catch events if\n\t\t\t\t// we do not force an update of the DOM via a change such\n\t\t\t\t// as mxLog.debug. Since IE6 is EOL we do not add a fix.\n\t\t\t\tthis.shape.stroke = 'white';\n\t\t\t\tthis.shape.opacity = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.shape.opacity = this.opacity;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: hide\n * \n * Resets the state of the cell marker.\n */\nmxCellHighlight.prototype.hide = function()\n{\n\tthis.highlight(null);\n};\n\n/**\n * Function: mark\n * \n * Marks the <markedState> and fires a <mark> event.\n */\nmxCellHighlight.prototype.highlight = function(state)\n{\n\tif (this.state != state)\n\t{\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.destroy();\n\t\t\tthis.shape = null;\n\t\t}\n\n\t\tthis.state = state;\n\t\t\n\t\tif (this.state != null)\n\t\t{\n\t\t\tthis.drawHighlight();\n\t\t}\n\t}\n};\n\n/**\n * Function: isHighlightAt\n * \n * Returns true if this highlight is at the given position.\n */\nmxCellHighlight.prototype.isHighlightAt = function(x, y)\n{\n\tvar hit = false;\n\t\n\t// Quirks mode is currently not supported as it used a different coordinate system\n\tif (this.shape != null && document.elementFromPoint != null && !mxClient.IS_QUIRKS)\n\t{\n\t\tvar elt = document.elementFromPoint(x, y);\n\n\t\twhile (elt != null)\n\t\t{\n\t\t\tif (elt == this.shape.node)\n\t\t\t{\n\t\t\t\thit = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\telt = elt.parentNode;\n\t\t}\n\t}\n\t\n\treturn hit;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxCellHighlight.prototype.destroy = function()\n{\n\tthis.graph.getView().removeListener(this.resetHandler);\n\tthis.graph.getView().removeListener(this.repaintHandler);\n\tthis.graph.getModel().removeListener(this.repaintHandler);\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n};\n\n__mxOutput.mxCellHighlight = typeof mxCellHighlight !== 'undefined' ? mxCellHighlight : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultKeyHandler\n *\n * Binds keycodes to actionnames in an editor. This aggregates an internal\n * <handler> and extends the implementation of <mxKeyHandler.escape> to not\n * only cancel the editing, but also hide the properties dialog and fire an\n * <mxEditor.escape> event via <editor>. An instance of this class is created\n * by <mxEditor> and stored in <mxEditor.keyHandler>.\n * \n * Example:\n * \n * Bind the delete key to the delete action in an existing editor.\n * \n * (code)\n * var keyHandler = new mxDefaultKeyHandler(editor);\n * keyHandler.bindAction(46, 'delete');\n * (end)\n *\n * Codec:\n * \n * This class uses the <mxDefaultKeyHandlerCodec> to read configuration\n * data into an existing instance. See <mxDefaultKeyHandlerCodec> for a\n * description of the configuration format.\n * \n * Keycodes:\n * \n * See <mxKeyHandler>.\n * \n * An <mxEvent.ESCAPE> event is fired via the editor if the escape key is\n * pressed.\n * \n * Constructor: mxDefaultKeyHandler\n *\n * Constructs a new default key handler for the <mxEditor.graph> in the\n * given <mxEditor>. (The editor may be null if a prototypical instance for\n * a <mxDefaultKeyHandlerCodec> is created.)\n * \n * Parameters:\n * \n * editor - Reference to the enclosing <mxEditor>.\n */\nfunction mxDefaultKeyHandler(editor)\n{\n\tif (editor != null)\n\t{\n\t\tthis.editor = editor;\n\t\tthis.handler = new mxKeyHandler(editor.graph);\n\t\t\n\t\t// Extends the escape function of the internal key\n\t\t// handle to hide the properties dialog and fire\n\t\t// the escape event via the editor instance\n\t\tvar old = this.handler.escape;\n\t\t\n\t\tthis.handler.escape = function(evt)\n\t\t{\n\t\t\told.apply(this, arguments);\n\t\t\teditor.hideProperties();\n\t\t\teditor.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n\t\t};\n\t}\n};\n\t\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.editor = null;\n\n/**\n * Variable: handler\n *\n * Holds the <mxKeyHandler> for key event handling.\n */\nmxDefaultKeyHandler.prototype.handler = null;\n\n/**\n * Function: bindAction\n *\n * Binds the specified keycode to the given action in <editor>. The\n * optional control flag specifies if the control key must be pressed\n * to trigger the action.\n *\n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * action - Name of the action to execute in <editor>.\n * control - Optional boolean that specifies if control must be pressed.\n * Default is false.\n */\nmxDefaultKeyHandler.prototype.bindAction = function (code, action, control)\n{\n\tvar keyHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\n\t// Binds the function to control-down keycode\n\tif (control)\n\t{\n\t\tthis.handler.bindControlKey(code, keyHandler);\n\t}\n\n\t// Binds the function to the normal keycode\n\telse\n\t{\n\t\tthis.handler.bindKey(code, keyHandler);\t\t\t\t\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the <handler> associated with this object. This does normally\n * not need to be called, the <handler> is destroyed automatically when the\n * window unloads (in IE) by <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.destroy = function ()\n{\n\tthis.handler.destroy();\n\tthis.handler = null;\n};\n\n__mxOutput.mxDefaultKeyHandler = typeof mxDefaultKeyHandler !== 'undefined' ? mxDefaultKeyHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultPopupMenu\n *\n * Creates popupmenus for mouse events. This object holds an XML node\n * which is a description of the popup menu to be created. In\n * <createMenu>, the configuration is applied to the context and\n * the resulting menu items are added to the menu dynamically. See\n * <createMenu> for a description of the configuration format.\n * \n * This class does not create the DOM nodes required for the popup menu, it\n * only parses an XML description to invoke the respective methods on an\n * <mxPopupMenu> each time the menu is displayed.\n *\n * Codec:\n * \n * This class uses the <mxDefaultPopupMenuCodec> to read configuration\n * data into an existing instance, however, the actual parsing is done\n * by this class during program execution, so the format is described\n * below.\n * \n * Constructor: mxDefaultPopupMenu\n *\n * Constructs a new popupmenu-factory based on given configuration.\n *\n * Paramaters:\n *\n * config - XML node that contains the configuration data.\n */\nfunction mxDefaultPopupMenu(config)\n{\n\tthis.config = config;\n};\n\n/**\n * Variable: imageBasePath\n *\n * Base path for all icon attributes in the config. Default is null.\n */\nmxDefaultPopupMenu.prototype.imageBasePath = null;\n\n/**\n * Variable: config\n *\n * XML node used as the description of new menu items. This node is\n * used in <createMenu> to dynamically create the menu items if their\n * respective conditions evaluate to true for the given arguments.\n */\nmxDefaultPopupMenu.prototype.config = null;\n\n/**\n * Function: createMenu\n *\n * This function is called from <mxEditor> to add items to the\n * given menu based on <config>. The config is a sequence of\n * the following nodes and attributes.\n *\n * Child Nodes: \n *\n * add - Adds a new menu item. See below for attributes.\n * separator - Adds a separator. No attributes.\n * condition - Adds a custom condition. Name attribute.\n * \n * The add-node may have a child node that defines a function to be invoked\n * before the action is executed (or instead of an action to be executed).\n *\n * Attributes:\n *\n * as - Resource key for the label (needs entry in property file).\n * action - Name of the action to execute in enclosing editor.\n * icon - Optional icon (relative/absolute URL).\n * iconCls - Optional CSS class for the icon.\n * if - Optional name of condition that must be true (see below).\n * enabled-if - Optional name of condition that specifies if the menu item\n * should be enabled.\n * name - Name of custom condition. Only for condition nodes.\n *\n * Conditions:\n *\n * nocell - No cell under the mouse.\n * ncells - More than one cell selected.\n * notRoot - Drilling position is other than home.\n * cell - Cell under the mouse.\n * notEmpty - Exactly one cell with children under mouse.\n * expandable - Exactly one expandable cell under mouse.\n * collapsable - Exactly one collapsable cell under mouse.\n * validRoot - Exactly one cell which is a possible root under mouse.\n * swimlane - Exactly one cell which is a swimlane under mouse.\n *\n * Example:\n *\n * To add a new item for a given action to the popupmenu:\n * \n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"delete\" action=\"delete\" icon=\"images/delete.gif\" if=\"cell\"/>\n * </mxDefaultPopupMenu>\n * (end)\n * \n * To add a new item for a custom function:\n * \n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"action1\"><![CDATA[\n *\t\tfunction (editor, cell, evt)\n *\t\t{\n *\t\t\teditor.execute('action1', cell, 'myArg');\n *\t\t}\n *   ]]></add>\n * </mxDefaultPopupMenu>\n * (end)\n * \n * The above example invokes action1 with an additional third argument via\n * the editor instance. The third argument is passed to the function that\n * defines action1. If the add-node has no action-attribute, then only the\n * function defined in the text content is executed, otherwise first the\n * function and then the action defined in the action-attribute is\n * executed. The function in the text content has 3 arguments, namely the\n * <mxEditor> instance, the <mxCell> instance under the mouse, and the\n * native mouse event.\n *\n * Custom Conditions:\n *\n * To add a new condition for popupmenu items:\n *  \n * (code)\n * <condition name=\"condition1\"><![CDATA[\n *   function (editor, cell, evt)\n *   {\n *     return cell != null;\n *   }\n * ]]></condition>\n * (end)\n * \n * The new condition can then be used in any item as follows:\n * \n * (code)\n * <add as=\"action1\" action=\"action1\" icon=\"action1.gif\" if=\"condition1\"/>\n * (end)\n * \n * The order in which the items and conditions appear is not significant as\n * all connditions are evaluated before any items are created.\n * \n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu. \n */\nmxDefaultPopupMenu.prototype.createMenu = function(editor, menu, cell, evt)\n{\n\tif (this.config != null)\n\t{\n\t\tvar conditions = this.createConditions(editor, cell, evt);\n\t\tvar item = this.config.firstChild;\n\n\t\tthis.addItems(editor, menu, cell, evt, conditions, item, null);\n\t}\n};\n\n/**\n * Function: addItems\n * \n * Recursively adds the given items and all of its children into the given menu.\n * \n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu.\n * conditions - Array of names boolean conditions.\n * item - XML node that represents the current menu item.\n * parent - DOM node that represents the parent menu item.\n */\nmxDefaultPopupMenu.prototype.addItems = function(editor, menu, cell, evt, conditions, item, parent)\n{\n\tvar addSeparator = false;\n\t\n\twhile (item != null)\n\t{\n\t\tif (item.nodeName == 'add')\n\t\t{\n\t\t\tvar condition = item.getAttribute('if');\n\t\t\t\n\t\t\tif (condition == null || conditions[condition])\n\t\t\t{\n\t\t\t\tvar as = item.getAttribute('as');\n\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(item));\n\t\t\t\tvar action = item.getAttribute('action');\n\t\t\t\tvar icon = item.getAttribute('icon');\n\t\t\t\tvar iconCls = item.getAttribute('iconCls');\n\t\t\t\tvar enabledCond = item.getAttribute('enabled-if');\n\t\t\t\tvar enabled = enabledCond == null || conditions[enabledCond];\n\t\t\t\t\n\t\t\t\tif (addSeparator)\n\t\t\t\t{\n\t\t\t\t\tmenu.addSeparator(parent);\n\t\t\t\t\taddSeparator = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (icon != null && this.imageBasePath)\n\t\t\t\t{\n\t\t\t\t\ticon = this.imageBasePath + icon;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar row = this.addAction(menu, editor, as, icon, funct, action, cell, parent, iconCls, enabled);\n\t\t\t\tthis.addItems(editor, menu, cell, evt, conditions, item.firstChild, row);\n\t\t\t}\n\t\t}\n\t\telse if (item.nodeName == 'separator')\n\t\t{\n\t\t\taddSeparator = true;\n\t\t}\n\t\t\n\t\titem = item.nextSibling;\n\t}\n};\n\n/**\n * Function: addAction\n *\n * Helper method to bind an action to a new menu item.\n * \n * Parameters:\n *\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * editor - Enclosing <mxEditor> instance.\n * lab - String that represents the label of the menu item.\n * icon - Optional URL that represents the icon of the menu item.\n * action - Optional name of the action to execute in the given editor.\n * funct - Optional function to execute before the optional action. The\n * function takes an <mxEditor>, the <mxCell> under the mouse and the\n * mouse event that triggered the call.\n * cell - Optional <mxCell> to use as an argument for the action.\n * parent - DOM node that represents the parent menu item.\n * iconCls - Optional CSS class for the menu icon.\n * enabled - Optional boolean that specifies if the menu item is enabled.\n * Default is true.\n */\nmxDefaultPopupMenu.prototype.addAction = function(menu, editor, lab, icon, funct, action, cell, parent, iconCls, enabled)\n{\n\tvar clickHandler = function(evt)\n\t{\n\t\tif (typeof(funct) == 'function')\n\t\t{\n\t\t\tfunct.call(editor, editor, cell, evt);\n\t\t}\n\t\t\n\t\tif (action != null)\n\t\t{\n\t\t\teditor.execute(action, cell, evt);\n\t\t}\n\t};\n\t\n\treturn menu.addItem(lab, icon, clickHandler, parent, iconCls, enabled);\n};\n\n/**\n * Function: createConditions\n * \n * Evaluates the default conditions for the given context.\n */\nmxDefaultPopupMenu.prototype.createConditions = function(editor, cell, evt)\n{\n\t// Creates array with conditions\n\tvar model = editor.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\t\n\t// Adds some frequently used conditions\n\tvar conditions = [];\n\tconditions['nocell'] = cell == null;\n\tconditions['ncells'] = editor.graph.getSelectionCount() > 1;\n\tconditions['notRoot'] = model.getRoot() !=\n\t\tmodel.getParent(editor.graph.getDefaultParent());\n\tconditions['cell'] = cell != null;\n\t\n\tvar isCell = cell != null && editor.graph.getSelectionCount() == 1;\n\tconditions['nonEmpty'] = isCell && childCount > 0;\n\tconditions['expandable'] = isCell && editor.graph.isCellFoldable(cell, false);\n\tconditions['collapsable'] = isCell && editor.graph.isCellFoldable(cell, true);\n\tconditions['validRoot'] = isCell && editor.graph.isValidRoot(cell);\n\tconditions['emptyValidRoot'] = conditions['validRoot'] && childCount == 0;\n\tconditions['swimlane'] = isCell && editor.graph.isSwimlane(cell);\n\n\t// Evaluates dynamic conditions from config file\n\tvar condNodes = this.config.getElementsByTagName('condition');\n\t\n\tfor (var i=0; i<condNodes.length; i++)\n\t{\n\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(condNodes[i]));\n\t\tvar name = condNodes[i].getAttribute('name');\n\t\t\n\t\tif (name != null && typeof(funct) == 'function')\n\t\t{\n\t\t\tconditions[name] = funct(editor, cell, evt);\n\t\t}\n\t}\n\t\n\treturn conditions;\n};\n\n__mxOutput.mxDefaultPopupMenu = typeof mxDefaultPopupMenu !== 'undefined' ? mxDefaultPopupMenu : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbar\n *\n * Toolbar for the editor. This modifies the state of the graph\n * or inserts new cells upon mouse clicks.\n * \n * Example:\n * \n * Create a toolbar with a button to copy the selection into the clipboard,\n * and a combo box with one action to paste the selection from the clipboard\n * into the graph.\n * \n * (code)\n * var toolbar = new mxDefaultToolbar(container, editor);\n * toolbar.addItem('Copy', null, 'copy');\n * \n * var combo = toolbar.addActionCombo('More actions...');\n * toolbar.addActionOption(combo, 'Paste', 'paste');\n * (end) \n *\n * Codec:\n * \n * This class uses the <mxDefaultToolbarCodec> to read configuration\n * data into an existing instance. See <mxDefaultToolbarCodec> for a\n * description of the configuration format.\n * \n * Constructor: mxDefaultToolbar\n *\n * Constructs a new toolbar for the given container and editor. The\n * container and editor may be null if a prototypical instance for a\n * <mxDefaultKeyHandlerCodec> is created.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n * editor - Reference to the enclosing <mxEditor>. \n */\nfunction mxDefaultToolbar(container, editor)\n{\n\tthis.editor = editor;\n\n\tif (container != null && editor != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\t\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultToolbar.prototype.editor = null;\n\n/**\n * Variable: toolbar\n *\n * Holds the internal <mxToolbar>.\n */\nmxDefaultToolbar.prototype.toolbar = null;\n\n/**\n * Variable: resetHandler\n *\n * Reference to the function used to reset the <toolbar>.\n */\nmxDefaultToolbar.prototype.resetHandler = null;\n\n/**\n * Variable: spacing\n *\n * Defines the spacing between existing and new vertices in\n * gridSize units when a new vertex is dropped on an existing\n * cell. Default is 4 (40 pixels).\n */\nmxDefaultToolbar.prototype.spacing = 4;\n\n/**\n * Variable: connectOnDrop\n * \n * Specifies if elements should be connected if new cells are dropped onto\n * connectable elements. Default is false.\n */\nmxDefaultToolbar.prototype.connectOnDrop = false;\n\n/**\n * Function: init\n * \n * Constructs the <toolbar> for the given container and installs a listener\n * that updates the <mxEditor.insertFunction> on <editor> if an item is\n * selected in the toolbar. This assumes that <editor> is not null.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nmxDefaultToolbar.prototype.init = function(container)\n{\n\tif (container != null)\n\t{\n\t\tthis.toolbar = new mxToolbar(container);\n\t\t\n\t\t// Installs the insert function in the editor if an item is\n\t\t// selected in the toolbar\n\t\tthis.toolbar.addListener(mxEvent.SELECT, mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar funct = evt.getProperty('function');\n\t\t\t\n\t\t\tif (funct != null)\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = mxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tfunct.apply(this, arguments);\n\t\t\t\t\tthis.toolbar.resetMode();\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = null;\n\t\t\t}\n\t\t}));\n\t\t\n\t\t// Resets the selected tool after a doubleclick or escape keystroke\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.toolbar != null)\n\t\t\t{\n\t\t\t\tthis.toolbar.resetMode(true);\n\t\t\t}\n\t\t});\n\n\t\tthis.editor.graph.addListener(mxEvent.DOUBLE_CLICK, this.resetHandler);\n\t\tthis.editor.addListener(mxEvent.ESCAPE, this.resetHandler);\n\t}\n};\n\n/**\n * Function: addItem\n *\n * Adds a new item that executes the given action in <editor>. The title,\n * icon and pressedIcon are used to display the toolbar item.\n * \n * Parameters:\n *\n * title - String that represents the title (tooltip) for the item.\n * icon - URL of the icon to be used for displaying the item.\n * action - Name of the action to execute when the item is clicked.\n * pressed - Optional URL of the icon for the pressed state.\n */\nmxDefaultToolbar.prototype.addItem = function(title, icon, action, pressed)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (action != null && action.length > 0)\n\t\t{\n\t\t\tthis.editor.execute(action);\n\t\t}\n\t});\n\t\n\treturn this.toolbar.addItem(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addSeparator\n *\n * Adds a vertical separator using the optional icon.\n * \n * Parameters:\n * \n * icon - Optional URL of the icon that represents the vertical separator.\n * Default is <mxClient.imageBasePath> + '/separator.gif'.\n */\nmxDefaultToolbar.prototype.addSeparator = function(icon)\n{\n\ticon = icon || mxClient.imageBasePath + '/separator.gif';\n\tthis.toolbar.addSeparator(icon);\n};\n\t\n/**\n * Function: addCombo\n *\n * Helper method to invoke <mxToolbar.addCombo> on <toolbar> and return the\n * resulting DOM node.\n */\nmxDefaultToolbar.prototype.addCombo = function()\n{\n\treturn this.toolbar.addCombo();\n};\n\t\t\n/**\n * Function: addActionCombo\n *\n * Helper method to invoke <mxToolbar.addActionCombo> on <toolbar> using\n * the given title and return the resulting DOM node.\n * \n * Parameters:\n * \n * title - String that represents the title of the combo.\n */\nmxDefaultToolbar.prototype.addActionCombo = function(title)\n{\n\treturn this.toolbar.addActionCombo(title);\n};\n\n/**\n * Function: addActionOption\n *\n * Binds the given action to a option with the specified label in the\n * given combo. Combo is an object returned from an earlier call to\n * <addCombo> or <addActionCombo>.\n * \n * Parameters:\n * \n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * action - Name of the action to execute in <editor>.\n */\nmxDefaultToolbar.prototype.addActionOption = function(combo, title, action)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\t\n\tthis.addOption(combo, title, clickHandler);\n};\n\n/**\n * Function: addOption\n *\n * Helper method to invoke <mxToolbar.addOption> on <toolbar> and return\n * the resulting DOM node that represents the option.\n * \n * Parameters:\n * \n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * value - Object that represents the value of the option.\n */\nmxDefaultToolbar.prototype.addOption = function(combo, title, value)\n{\n\treturn this.toolbar.addOption(combo, title, value);\n};\n\t\n/**\n * Function: addMode\n *\n * Creates an item for selecting the given mode in the <editor>'s graph.\n * Supported modenames are select, connect and pan.\n * \n * Parameters:\n * \n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * mode - String that represents the mode name to be used in\n * <mxEditor.setMode>.\n * pressed - Optional URL of the icon that represents the pressed state.\n * funct - Optional JavaScript function that takes the <mxEditor> as the\n * first and only argument that is executed after the mode has been\n * selected.\n */\nmxDefaultToolbar.prototype.addMode = function(title, icon, mode, pressed, funct)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.setMode(mode);\n\t\t\n\t\tif (funct != null)\n\t\t{\n\t\t\tfunct(this.editor);\n\t\t}\n\t});\n\t\n\treturn this.toolbar.addSwitchMode(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addPrototype\n *\n * Creates an item for inserting a clone of the specified prototype cell into\n * the <editor>'s graph. The ptype may either be a cell or a function that\n * returns a cell.\n * \n * Parameters:\n * \n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * ptype - Function or object that represents the prototype cell. If ptype\n * is a function then it is invoked with no arguments to create new\n * instances.\n * pressed - Optional URL of the icon that represents the pressed state.\n * insert - Optional JavaScript function that handles an insert of the new\n * cell. This function takes the <mxEditor>, new cell to be inserted, mouse\n * event and optional <mxCell> under the mouse pointer as arguments.\n * toggle - Optional boolean that specifies if the item can be toggled.\n * Default is true.\n */\nmxDefaultToolbar.prototype.addPrototype = function(title, icon, ptype, pressed, insert, toggle)\n{\n\t// Creates a wrapper function that is in charge of constructing\n\t// the new cell instance to be inserted into the graph\n\tvar factory = mxUtils.bind(this, function()\n\t{\n\t\tif (typeof(ptype) == 'function')\n\t\t{\n\t\t\treturn ptype();\n\t\t}\n\t\telse if (ptype != null)\n\t\t{\n\t\t\treturn this.editor.graph.cloneCell(ptype);\n\t\t}\n\t\t\n\t\treturn null;\n\t});\n\t\n\t// Defines the function for a click event on the graph\n\t// after this item has been selected in the toolbar\n\tvar clickHandler = mxUtils.bind(this, function(evt, cell)\n\t{\n\t\tif (typeof(insert) == 'function')\n\t\t{\n\t\t\tinsert(this.editor, factory(), evt, cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.drop(factory(), evt, cell);\n\t\t}\n\t\t\n\t\tthis.toolbar.resetMode();\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tvar img = this.toolbar.addMode(title, icon, clickHandler, pressed, null, toggle);\n\t\t\t\t\n\t// Creates a wrapper function that calls the click handler without\n\t// the graph argument\n\tvar dropHandler = function(graph, evt, cell)\n\t{\n\t\tclickHandler(evt, cell);\n\t};\n\t\n\tthis.installDropHandler(img, dropHandler);\n\t\n\treturn img;\n};\n\n/**\n * Function: drop\n * \n * Handles a drop from a toolbar item to the graph. The given vertex\n * represents the new cell to be inserted. This invokes <insert> or\n * <connect> depending on the given target cell.\n * \n * Parameters:\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * target - Optional <mxCell> that represents the drop target.\n */\nmxDefaultToolbar.prototype.drop = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\t\n\tif (target == null ||\n\t\tmodel.isEdge(target) ||\n\t\t!this.connectOnDrop ||\n\t\t!graph.isCellConnectable(target))\n\t{\n\t\twhile (target != null &&\n\t\t\t!graph.isValidDropTarget(target, [vertex], evt))\n\t\t{\n\t\t\ttarget = model.getParent(target);\n\t\t}\n\t\t\n\t\tthis.insert(vertex, evt, target);\n\t}\n\telse\n\t{\n\t\tthis.connect(vertex, evt, target);\n\t}\n};\n\n/**\n * Function: insert\n *\n * Handles a drop by inserting the given vertex into the given parent cell\n * or the default parent if no parent is specified.\n * \n * Parameters:\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * parent - Optional <mxCell> that represents the parent.\n */\nmxDefaultToolbar.prototype.insert = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\t\n\tif (graph.canImportCell(vertex))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\n\t\t// Splits the target edge or inserts into target group\n\t\tif (graph.isSplitEnabled() &&\n\t\t\tgraph.isSplitTarget(target, [vertex], evt))\n\t\t{\n\t\t\treturn graph.splitEdge(target, [vertex], null, pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.editor.addVertex(target, vertex, pt.x, pt.y);\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: connect\n * \n * Handles a drop by connecting the given vertex to the given source cell.\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * source - Optional <mxCell> that represents the source terminal.\n */\nmxDefaultToolbar.prototype.connect = function(vertex, evt, source)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\t\n\tif (source != null &&\n\t\tgraph.isCellConnectable(vertex) &&\n\t\tgraph.isEdgeValid(null, source, vertex))\n\t{\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar geo = model.getGeometry(source);\n\t\t\tvar g = model.getGeometry(vertex).clone();\n\t\t\t\n\t\t\t// Moves the vertex away from the drop target that will\n\t\t\t// be used as the source for the new connection\n\t\t\tg.x = geo.x + (geo.width - g.width) / 2;\n\t\t\tg.y = geo.y + (geo.height - g.height) / 2;\n\t\t\t\n\t\t\tvar step = this.spacing * graph.gridSize;\n\t\t\tvar dist = model.getDirectedEdgeCount(source, true) * 20;\n\t\t\t\n\t\t\tif (this.editor.horizontalFlow)\n\t\t\t{\n\t\t\t\tg.x += (g.width + geo.width) / 2 + step + dist;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.y += (g.height + geo.height) / 2 + step + dist;\n\t\t\t}\n\t\t\t\n\t\t\tvertex.setGeometry(g);\n\t\t\t\n\t\t\t// Fires two add-events with the code below - should be fixed\n\t\t\t// to only fire one add event for both inserts\n\t\t\tvar parent = model.getParent(source);\n\t\t\tgraph.addCell(vertex, parent);\n\t\t\tgraph.constrainChild(vertex);\n\n\t\t\t// Creates the edge using the editor instance and calls\n\t\t\t// the second function that fires an add event\n\t\t\tedge = this.editor.createEdge(source, vertex);\n\t\t\t\n\t\t\tif (model.getGeometry(edge) == null)\n\t\t\t{\n\t\t\t\tvar edgeGeometry = new mxGeometry();\n\t\t\t\tedgeGeometry.relative = true;\n\t\t\t\t\n\t\t\t\tmodel.setGeometry(edge, edgeGeometry);\n\t\t\t}\n\t\t\t\n\t\t\tgraph.addEdge(edge, parent, source, vertex);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t\t\n\t\tgraph.setSelectionCells([vertex, edge]);\n\t\tgraph.scrollCellToVisible(vertex);\n\t}\n};\n\n/**\n * Function: installDropHandler\n * \n * Makes the given img draggable using the given function for handling a\n * drop event.\n * \n * Parameters:\n * \n * img - DOM node that represents the image.\n * dropHandler - Function that handles a drop of the image.\n */\nmxDefaultToolbar.prototype.installDropHandler = function (img, dropHandler)\n{\n\tvar sprite = document.createElement('img');\n\tsprite.setAttribute('src', img.getAttribute('src'));\n\n\t// Handles delayed loading of the images\n\tvar loader = mxUtils.bind(this, function(evt)\n\t{\n\t\t// Preview uses the image node with double size. Later this can be\n\t\t// changed to use a separate preview and guides, but for this the\n\t\t// dropHandler must use the additional x- and y-arguments and the\n\t\t// dragsource which makeDraggable returns much be configured to\n\t\t// use guides via mxDragSource.isGuidesEnabled.\n\t\tsprite.style.width = (2 * img.offsetWidth) + 'px';\n\t\tsprite.style.height = (2 * img.offsetHeight) + 'px';\n\n\t\tmxUtils.makeDraggable(img, this.editor.graph, dropHandler,\n\t\t\tsprite);\n\t\tmxEvent.removeListener(sprite, 'load', loader);\n\t});\n\n\tif (mxClient.IS_IE)\n\t{\n\t\tloader();\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(sprite, 'load', loader);\n\t}\t\n};\n\n/**\n * Function: destroy\n * \n * Destroys the <toolbar> associated with this object and removes all\n * installed listeners. This does normally not need to be called, the\n * <toolbar> is destroyed automatically when the window unloads (in IE) by\n * <mxEditor>.\n */\nmxDefaultToolbar.prototype.destroy = function ()\n{\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.editor.graph.removeListener('dblclick', this.resetHandler);\n\t\tthis.editor.removeListener('escape', this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\t\n\tif (this.toolbar != null)\n\t{\n\t\tthis.toolbar.destroy();\n\t\tthis.toolbar = null;\n\t}\n};\n\n__mxOutput.mxDefaultToolbar = typeof mxDefaultToolbar !== 'undefined' ? mxDefaultToolbar : undefined;\n\n/**\n * Copyright (c) 2006-2019, JGraph Ltd\n * Copyright (c) 2006-2019, draw.io AG\n */\n/**\n * Class: mxEditor\n *\n * Extends <mxEventSource> to implement an application wrapper for a graph that\n * adds <actions>, I/O using <mxCodec>, auto-layout using <mxLayoutManager>,\n * command history using <undoManager>, and standard dialogs and widgets, eg.\n * properties, help, outline, toolbar, and popupmenu. It also adds <templates>\n * to be used as cells in toolbars, auto-validation using the <validation>\n * flag, attribute cycling using <cycleAttributeValues>, higher-level events\n * such as <root>, and backend integration using <urlPost> and <urlImage>.\n *\n * Actions:\n *\n * Actions are functions stored in the <actions> array under their names. The\n * functions take the <mxEditor> as the first, and an optional <mxCell> as the\n * second argument and are invoked using <execute>. Any additional arguments\n * passed to execute are passed on to the action as-is.\n *\n * A list of built-in actions is available in the <addActions> description.\n *\n * Read/write Diagrams:\n *\n * To read a diagram from an XML string, for example from a textfield within the\n * page, the following code is used:\n *\n * (code)\n * var doc = mxUtils.parseXML(xmlString);\n * var node = doc.documentElement;\n * editor.readGraphModel(node);\n * (end)\n *\n * For reading a diagram from a remote location, use the <open> method.\n *\n * To save diagrams in XML on a server, you can set the <urlPost> variable.\n * This variable will be used in <getUrlPost> to construct a URL for the post\n * request that is issued in the <save> method. The post request contains the\n * XML representation of the diagram as returned by <writeGraphModel> in the\n * xml parameter.\n *\n * On the server side, the post request is processed using standard\n * technologies such as Java Servlets, CGI, .NET or ASP.\n *\n * Here are some examples of processing a post request in various languages.\n *\n * - Java: URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\")\n *\n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image, but not\n * if the XML is passed back to the client-side.\n *\n * - .NET: HttpUtility.UrlDecode(context.Request.Params[\"xml\"])\n * - PHP: urldecode($_POST[\"xml\"])\n *\n * Creating images:\n *\n * A backend (Java, PHP or C#) is required for creating images. The\n * distribution contains an example for each backend (ImageHandler.java,\n * ImageHandler.cs and graph.php). More information about using a backend\n * to create images can be found in the readme.html files. Note that the\n * preview is implemented using VML/SVG in the browser and does not require\n * a backend. The backend is only required to creates images (bitmaps).\n *\n * Special characters:\n *\n * Note There are five characters that should always appear in XML content as\n * escapes, so that they do not interact with the syntax of the markup. These\n * are part of the language for all documents based on XML and for HTML.\n *\n * - &lt; (<)\n * - &gt; (>)\n * - &amp; (&)\n * - &quot; (\")\n * - &apos; (')\n *\n * Although it is part of the XML language, &apos; is not defined in HTML.\n * For this reason the XHTML specification recommends instead the use of\n * &#39; if text may be passed to a HTML user agent.\n *\n * If you are having problems with special characters on the server-side then\n * you may want to try the <escapePostData> flag.\n *\n * For converting decimal escape sequences inside strings, a user has provided\n * us with the following function:\n *\n * (code)\n * function html2js(text)\n * {\n *   var entitySearch = /&#[0-9]+;/;\n *   var entity;\n *\n *   while (entity = entitySearch.exec(text))\n *   {\n *     var charCode = entity[0].substring(2, entity[0].length -1);\n *     text = text.substring(0, entity.index)\n *            + String.fromCharCode(charCode)\n *            + text.substring(entity.index + entity[0].length);\n *   }\n *\n *   return text;\n * }\n * (end)\n *\n * Otherwise try using hex escape sequences and the built-in unescape function\n * for converting such strings.\n *\n * Local Files:\n *\n * For saving and opening local files, no standardized method exists that\n * works across all browsers. The recommended way of dealing with local files\n * is to create a backend that streams the XML data back to the browser (echo)\n * as an attachment so that a Save-dialog is displayed on the client-side and\n * the file can be saved to the local disk.\n *\n * For example, in PHP the code that does this looks as follows.\n *\n * (code)\n * $xml = stripslashes($_POST[\"xml\"]);\n * header(\"Content-Disposition: attachment; filename=\\\"diagram.xml\\\"\");\n * echo($xml);\n * (end)\n *\n * To open a local file, the file should be uploaded via a form in the browser\n * and then opened from the server in the editor.\n *\n * Cell Properties:\n *\n * The properties displayed in the properties dialog are the attributes and\n * values of the cell's user object, which is an XML node. The XML node is\n * defined in the templates section of the config file.\n *\n * The templates are stored in <mxEditor.templates> and contain cells which\n * are cloned at insertion time to create new vertices by use of drag and\n * drop from the toolbar. Each entry in the toolbar for adding a new vertex\n * must refer to an existing template.\n *\n * In the following example, the task node is a business object and only the\n * mxCell node and its mxGeometry child contain graph information:\n *\n * (code)\n * <Task label=\"Task\" description=\"\">\n *   <mxCell vertex=\"true\">\n *     <mxGeometry as=\"geometry\" width=\"72\" height=\"32\"/>\n *   </mxCell>\n * </Task>\n * (end)\n *\n * The idea is that the XML representation is inverse from the in-memory\n * representation: The outer XML node is the user object and the inner node is\n * the cell. This means the user object of the cell is the Task node with no\n * children for the above example:\n *\n * (code)\n * <Task label=\"Task\" description=\"\"/>\n * (end)\n *\n * The Task node can have any tag name, attributes and child nodes. The\n * <mxCodec> will use the XML hierarchy as the user object, while removing the\n * \"known annotations\", such as the mxCell node. At save-time the cell data\n * will be \"merged\" back into the user object. The user object is only modified\n * via the properties dialog during the lifecycle of the cell.\n *\n * In the default implementation of <createProperties>, the user object's\n * attributes are put into a form for editing. Attributes are changed using\n * the <mxCellAttributeChange> action in the model. The dialog can be replaced\n * by overriding the <createProperties> hook or by replacing the showProperties\n * action in <actions>. Alternatively, the entry in the config file's popupmenu\n * section can be modified to invoke a different action.\n *\n * If you want to displey the properties dialog on a doubleclick, you can set\n * <mxEditor.dblClickAction> to showProperties as follows:\n *\n * (code)\n * editor.dblClickAction = 'showProperties';\n * (end)\n *\n * Popupmenu and Toolbar:\n *\n * The toolbar and popupmenu are typically configured using the respective\n * sections in the config file, that is, the popupmenu is defined as follows:\n *\n * (code)\n * <mxEditor>\n *   <mxDefaultPopupMenu as=\"popupHandler\">\n * \t\t<add as=\"cut\" action=\"cut\" icon=\"images/cut.gif\"/>\n *      ...\n * (end)\n *\n * New entries can be added to the toolbar by inserting an add-node into the\n * above configuration. Existing entries may be removed and changed by\n * modifying or removing the respective entries in the configuration.\n * The configuration is read by the <mxDefaultPopupMenuCodec>, the format of the\n * configuration is explained in <mxDefaultPopupMenu.decode>.\n *\n * The toolbar is defined in the mxDefaultToolbar section. Items can be added\n * and removed in this section.\n *\n * (code)\n * <mxEditor>\n *   <mxDefaultToolbar>\n *     <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n *     <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"/>\n *     ...\n * (end)\n *\n * The format of the configuration is described in\n * <mxDefaultToolbarCodec.decode>.\n *\n * Ids:\n *\n * For the IDs, there is an implicit behaviour in <mxCodec>: It moves the Id\n * from the cell to the user object at encoding time and vice versa at decoding\n * time. For example, if the Task node from above has an id attribute, then\n * the <mxCell.id> of the corresponding cell will have this value. If there\n * is no Id collision in the model, then the cell may be retrieved using this\n * Id with the <mxGraphModel.getCell> function. If there is a collision, a new\n * Id will be created for the cell using <mxGraphModel.createId>. At encoding\n * time, this new Id will replace the value previously stored under the id\n * attribute in the Task node.\n *\n * See <mxEditorCodec>, <mxDefaultToolbarCodec> and <mxDefaultPopupMenuCodec>\n * for information about configuring the editor and user interface.\n *\n * Programmatically inserting cells:\n *\n * For inserting a new cell, say, by clicking a button in the document,\n * the following code can be used. This requires an reference to the editor.\n *\n * (code)\n * var userObject = new Object();\n * var parent = editor.graph.getDefaultParent();\n * var model = editor.graph.model;\n * model.beginUpdate();\n * try\n * {\n *   editor.graph.insertVertex(parent, null, userObject, 20, 20, 80, 30);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n *\n * If a template cell from the config file should be inserted, then a clone\n * of the template can be created as follows. The clone is then inserted using\n * the add function instead of addVertex.\n *\n * (code)\n * var template = editor.templates['task'];\n * var clone = editor.graph.model.cloneCell(template);\n * (end)\n *\n * Resources:\n *\n * resources/editor - Language resources for mxEditor\n *\n * Callback: onInit\n *\n * Called from within the constructor. In the callback,\n * \"this\" refers to the editor instance.\n *\n * Cookie: mxgraph=seen\n *\n * Set when the editor is started. Never expires. Use\n * <resetFirstTime> to reset this cookie. This cookie\n * only exists if <onInit> is implemented.\n *\n * Event: mxEvent.OPEN\n *\n * Fires after a file was opened in <open>. The <code>filename</code> property\n * contains the filename that was used. The same value is also available in\n * <filename>.\n *\n * Event: mxEvent.SAVE\n *\n * Fires after the current file was saved in <save>. The <code>url</code>\n * property contains the URL that was used for saving.\n *\n * Event: mxEvent.POST\n *\n * Fires if a successful response was received in <postDiagram>. The\n * <code>request</code> property contains the <mxXmlRequest>, the\n * <code>url</code> and <code>data</code> properties contain the URL and the\n * data that were used in the post request.\n *\n * Event: mxEvent.ROOT\n *\n * Fires when the current root has changed, or when the title of the current\n * root has changed. This event has no properties.\n *\n * Event: mxEvent.BEFORE_ADD_VERTEX\n *\n * Fires before a vertex is added in <addVertex>. The <code>vertex</code>\n * property contains the new vertex and the <code>parent</code> property\n * contains its parent.\n *\n * Event: mxEvent.ADD_VERTEX\n *\n * Fires between begin- and endUpdate in <addVertex>. The <code>vertex</code>\n * property contains the vertex that is being inserted.\n *\n * Event: mxEvent.AFTER_ADD_VERTEX\n *\n * Fires after a vertex was inserted and selected in <addVertex>. The\n * <code>vertex</code> property contains the new vertex.\n *\n * Example:\n *\n * For starting an in-place edit after a new vertex has been added to the\n * graph, the following code can be used.\n *\n * (code)\n * editor.addListener(mxEvent.AFTER_ADD_VERTEX, function(sender, evt)\n * {\n *   var vertex = evt.getProperty('vertex');\n *\n *   if (editor.graph.isCellEditable(vertex))\n *   {\n *   \teditor.graph.startEditingAtCell(vertex);\n *   }\n * });\n * (end)\n *\n * Event: mxEvent.ESCAPE\n *\n * Fires when the escape key is pressed. The <code>event</code> property\n * contains the key event.\n *\n * Constructor: mxEditor\n *\n * Constructs a new editor. This function invokes the <onInit> callback\n * upon completion.\n *\n * Example:\n *\n * (code)\n * var config = mxUtils.load('config/diagrameditor.xml').getDocumentElement();\n * var editor = new mxEditor(config);\n * (end)\n *\n * Parameters:\n *\n * config - Optional XML node that contains the configuration.\n */\nfunction mxEditor(config)\n{\n\tthis.actions = [];\n\tthis.addActions();\n\n\t// Executes the following only if a document has been instanciated.\n\t// That is, don't execute when the editorcodec is setup.\n\tif (document.body != null)\n\t{\n\t\t// Defines instance fields\n\t\tthis.cycleAttributeValues = [];\n\t\tthis.popupHandler = new mxDefaultPopupMenu();\n\t\tthis.undoManager = new mxUndoManager();\n\n\t\t// Creates the graph and toolbar without the containers\n\t\tthis.graph = this.createGraph();\n\t\tthis.toolbar = this.createToolbar();\n\n\t\t// Creates the global keyhandler (requires graph instance)\n\t\tthis.keyHandler = new mxDefaultKeyHandler(this);\n\n\t\t// Configures the editor using the URI\n\t\t// which was passed to the ctor\n\t\tthis.configure(config);\n\n\t\t// Assigns the swimlaneIndicatorColorAttribute on the graph\n\t\tthis.graph.swimlaneIndicatorColorAttribute = this.cycleAttributeName;\n\n\t\t// Checks if the <onInit> hook has been set\n\t\tif (this.onInit != null)\n\t\t{\n\t\t\t// Invokes the <onInit> hook\n\t\t\tthis.onInit();\n\t\t}\n\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\n// disable this call which is failing due to CORS error\n// if (mxLoadResources)\n// {\n// \tmxResources.add(mxClient.basePath + '/resources/editor');\n// }\n// else\n// {\n// \tmxClient.defaultBundles.push(mxClient.basePath + '/resources/editor');\n// }\n\n/**\n * Extends mxEventSource.\n */\nmxEditor.prototype = new mxEventSource();\nmxEditor.prototype.constructor = mxEditor;\n\n/**\n * Group: Controls and Handlers\n */\n\n/**\n * Variable: askZoomResource\n *\n * Specifies the resource key for the zoom dialog. If the resource for this\n * key does not exist then the value is used as the error message. Default\n * is 'askZoom'.\n */\nmxEditor.prototype.askZoomResource = (mxClient.language != 'none') ? 'askZoom' : '';\n\n/**\n * Variable: lastSavedResource\n *\n * Specifies the resource key for the last saved info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'lastSaved'.\n */\nmxEditor.prototype.lastSavedResource = (mxClient.language != 'none') ? 'lastSaved' : '';\n\n/**\n * Variable: currentFileResource\n *\n * Specifies the resource key for the current file info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'currentFile'.\n */\nmxEditor.prototype.currentFileResource = (mxClient.language != 'none') ? 'currentFile' : '';\n\n/**\n * Variable: propertiesResource\n *\n * Specifies the resource key for the properties window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'properties'.\n */\nmxEditor.prototype.propertiesResource = (mxClient.language != 'none') ? 'properties' : '';\n\n/**\n * Variable: tasksResource\n *\n * Specifies the resource key for the tasks window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'tasks'.\n */\nmxEditor.prototype.tasksResource = (mxClient.language != 'none') ? 'tasks' : '';\n\n/**\n * Variable: helpResource\n *\n * Specifies the resource key for the help window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'help'.\n */\nmxEditor.prototype.helpResource = (mxClient.language != 'none') ? 'help' : '';\n\n/**\n * Variable: outlineResource\n *\n * Specifies the resource key for the outline window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'outline'.\n */\nmxEditor.prototype.outlineResource = (mxClient.language != 'none') ? 'outline' : '';\n\n/**\n * Variable: outline\n *\n * Reference to the <mxWindow> that contains the outline. The <mxOutline>\n * is stored in outline.outline.\n */\nmxEditor.prototype.outline = null;\n\n/**\n * Variable: graph\n *\n * Holds a <mxGraph> for displaying the diagram. The graph\n * is created in <setGraphContainer>.\n */\nmxEditor.prototype.graph = null;\n\n/**\n * Variable: graphRenderHint\n *\n * Holds the render hint used for creating the\n * graph in <setGraphContainer>. See <mxGraph>.\n * Default is null.\n */\nmxEditor.prototype.graphRenderHint = null;\n\n/**\n * Variable: toolbar\n *\n * Holds a <mxDefaultToolbar> for displaying the toolbar. The\n * toolbar is created in <setToolbarContainer>.\n */\nmxEditor.prototype.toolbar = null;\n\n/**\n * Variable: status\n *\n * DOM container that holds the statusbar. Default is null.\n * Use <setStatusContainer> to set this value.\n */\nmxEditor.prototype.status = null;\n\n/**\n * Variable: popupHandler\n *\n * Holds a <mxDefaultPopupMenu> for displaying\n * popupmenus.\n */\nmxEditor.prototype.popupHandler = null;\n\n/**\n * Variable: undoManager\n *\n * Holds an <mxUndoManager> for the command history.\n */\nmxEditor.prototype.undoManager = null;\n\n/**\n * Variable: keyHandler\n *\n * Holds a <mxDefaultKeyHandler> for handling keyboard events.\n * The handler is created in <setGraphContainer>.\n */\nmxEditor.prototype.keyHandler = null;\n\n/**\n * Group: Actions and Options\n */\n\n/**\n * Variable: actions\n *\n * Maps from actionnames to actions, which are functions taking\n * the editor and the cell as arguments. Use <addAction>\n * to add or replace an action and <execute> to execute an action\n * by name, passing the cell to be operated upon as the second\n * argument.\n */\nmxEditor.prototype.actions = null;\n\n/**\n * Variable: dblClickAction\n *\n * Specifies the name of the action to be executed\n * when a cell is double clicked. Default is 'edit'.\n *\n * To handle a singleclick, use the following code.\n *\n * (code)\n * editor.graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event');\n *   var cell = evt.getProperty('cell');\n *\n *   if (cell != null && !e.isConsumed())\n *   {\n *     // Do something useful with cell...\n *     e.consume();\n *   }\n * });\n * (end)\n */\nmxEditor.prototype.dblClickAction = 'edit';\n\n/**\n * Variable: swimlaneRequired\n *\n * Specifies if new cells must be inserted\n * into an existing swimlane. Otherwise, cells\n * that are not swimlanes can be inserted as\n * top-level cells. Default is false.\n */\nmxEditor.prototype.swimlaneRequired = false;\n\n/**\n * Variable: disableContextMenu\n *\n * Specifies if the context menu should be disabled in the graph container.\n * Default is true.\n */\nmxEditor.prototype.disableContextMenu = true;\n\n/**\n * Group: Templates\n */\n\n/**\n * Variable: insertFunction\n *\n * Specifies the function to be used for inserting new\n * cells into the graph. This is assigned from the\n * <mxDefaultToolbar> if a vertex-tool is clicked.\n */\nmxEditor.prototype.insertFunction = null;\n\n/**\n * Variable: forcedInserting\n *\n * Specifies if a new cell should be inserted on a single\n * click even using <insertFunction> if there is a cell\n * under the mousepointer, otherwise the cell under the\n * mousepointer is selected. Default is false.\n */\nmxEditor.prototype.forcedInserting = false;\n\n/**\n * Variable: templates\n *\n * Maps from names to protoype cells to be used\n * in the toolbar for inserting new cells into\n * the diagram.\n */\nmxEditor.prototype.templates = null;\n\n/**\n * Variable: defaultEdge\n *\n * Prototype edge cell that is used for creating\n * new edges.\n */\nmxEditor.prototype.defaultEdge = null;\n\n/**\n * Variable: defaultEdgeStyle\n *\n * Specifies the edge style to be returned in <getEdgeStyle>.\n * Default is null.\n */\nmxEditor.prototype.defaultEdgeStyle = null;\n\n/**\n * Variable: defaultGroup\n *\n * Prototype group cell that is used for creating\n * new groups.\n */\nmxEditor.prototype.defaultGroup = null;\n\n/**\n * Variable: groupBorderSize\n *\n * Default size for the border of new groups. If null,\n * then then <mxGraph.gridSize> is used. Default is\n * null.\n */\nmxEditor.prototype.groupBorderSize = null;\n\n/**\n * Group: Backend Integration\n */\n\n/**\n * Variable: filename\n *\n * Contains the URL of the last opened file as a string.\n * Default is null.\n */\nmxEditor.prototype.filename = null;\n\n/**\n * Variable: lineFeed\n *\n * Character to be used for encoding linefeeds in <save>. Default is '&#xa;'.\n */\nmxEditor.prototype.linefeed = '&#xa;';\n\n/**\n * Variable: postParameterName\n *\n * Specifies if the name of the post parameter that contains the diagram\n * data in a post request to the server. Default is 'xml'.\n */\nmxEditor.prototype.postParameterName = 'xml';\n\n/**\n * Variable: escapePostData\n *\n * Specifies if the data in the post request for saving a diagram\n * should be converted using encodeURIComponent. Default is true.\n */\nmxEditor.prototype.escapePostData = true;\n\n/**\n * Variable: urlPost\n *\n * Specifies the URL to be used for posting the diagram\n * to a backend in <save>.\n */\nmxEditor.prototype.urlPost = null;\n\n/**\n * Variable: urlImage\n *\n * Specifies the URL to be used for creating a bitmap of\n * the graph in the image action.\n */\nmxEditor.prototype.urlImage = null;\n\n/**\n * Group: Autolayout\n */\n\n/**\n * Variable: horizontalFlow\n *\n * Specifies the direction of the flow\n * in the diagram. This is used in the\n * layout algorithms. Default is false,\n * ie. vertical flow.\n */\nmxEditor.prototype.horizontalFlow = false;\n\n/**\n * Variable: layoutDiagram\n *\n * Specifies if the top-level elements in the\n * diagram should be layed out using a vertical\n * or horizontal stack depending on the setting\n * of <horizontalFlow>. The spacing between the\n * swimlanes is specified by <swimlaneSpacing>.\n * Default is false.\n *\n * If the top-level elements are swimlanes, then\n * the intra-swimlane layout is activated by\n * the <layoutSwimlanes> switch.\n */\nmxEditor.prototype.layoutDiagram = false;\n\n/**\n * Variable: swimlaneSpacing\n *\n * Specifies the spacing between swimlanes if\n * automatic layout is turned on in\n * <layoutDiagram>. Default is 0.\n */\nmxEditor.prototype.swimlaneSpacing = 0;\n\n/**\n * Variable: maintainSwimlanes\n *\n * Specifies if the swimlanes should be kept at the same\n * width or height depending on the setting of\n * <horizontalFlow>.  Default is false.\n *\n * For horizontal flows, all swimlanes\n * have the same height and for vertical flows, all swimlanes\n * have the same width. Furthermore, the swimlanes are\n * automatically \"stacked\" if <layoutDiagram> is true.\n */\nmxEditor.prototype.maintainSwimlanes = false;\n\n/**\n * Variable: layoutSwimlanes\n *\n * Specifies if the children of swimlanes should\n * be layed out, either vertically or horizontally\n * depending on <horizontalFlow>.\n * Default is false.\n */\nmxEditor.prototype.layoutSwimlanes = false;\n\n/**\n * Group: Attribute Cycling\n */\n\n/**\n * Variable: cycleAttributeValues\n *\n * Specifies the attribute values to be cycled when\n * inserting new swimlanes. Default is an empty\n * array.\n */\nmxEditor.prototype.cycleAttributeValues = null;\n\n/**\n * Variable: cycleAttributeIndex\n *\n * Index of the last consumed attribute index. If a new\n * swimlane is inserted, then the <cycleAttributeValues>\n * at this index will be used as the value for\n * <cycleAttributeName>. Default is 0.\n */\nmxEditor.prototype.cycleAttributeIndex = 0;\n\n/**\n * Variable: cycleAttributeName\n *\n * Name of the attribute to be assigned a <cycleAttributeValues>\n * when inserting new swimlanes. Default is 'fillColor'.\n */\nmxEditor.prototype.cycleAttributeName = 'fillColor';\n\n/**\n * Group: Windows\n */\n\n/**\n * Variable: tasks\n *\n * Holds the <mxWindow> created in <showTasks>.\n */\nmxEditor.prototype.tasks = null;\n\n/**\n * Variable: tasksWindowImage\n *\n * Icon for the tasks window.\n */\nmxEditor.prototype.tasksWindowImage = null;\n\n/**\n * Variable: tasksTop\n *\n * Specifies the top coordinate of the tasks window in pixels.\n * Default is 20.\n */\nmxEditor.prototype.tasksTop = 20;\n\n/**\n * Variable: help\n *\n * Holds the <mxWindow> created in <showHelp>.\n */\nmxEditor.prototype.help = null;\n\n/**\n * Variable: helpWindowImage\n *\n * Icon for the help window.\n */\nmxEditor.prototype.helpWindowImage = null;\n\n/**\n * Variable: urlHelp\n *\n * Specifies the URL to be used for the contents of the\n * Online Help window. This is usually specified in the\n * resources file under urlHelp for language-specific\n * online help support.\n */\nmxEditor.prototype.urlHelp = null;\n\n/**\n * Variable: helpWidth\n *\n * Specifies the width of the help window in pixels.\n * Default is 300.\n */\nmxEditor.prototype.helpWidth = 300;\n\n/**\n * Variable: helpHeight\n *\n * Specifies the height of the help window in pixels.\n * Default is 260.\n */\nmxEditor.prototype.helpHeight = 260;\n\n/**\n * Variable: propertiesWidth\n *\n * Specifies the width of the properties window in pixels.\n * Default is 240.\n */\nmxEditor.prototype.propertiesWidth = 240;\n\n/**\n * Variable: propertiesHeight\n *\n * Specifies the height of the properties window in pixels.\n * If no height is specified then the window will be automatically\n * sized to fit its contents. Default is null.\n */\nmxEditor.prototype.propertiesHeight = null;\n\n/**\n * Variable: movePropertiesDialog\n *\n * Specifies if the properties dialog should be automatically\n * moved near the cell it is displayed for, otherwise the\n * dialog is not moved. This value is only taken into\n * account if the dialog is already visible. Default is false.\n */\nmxEditor.prototype.movePropertiesDialog = false;\n\n/**\n * Variable: validating\n *\n * Specifies if <mxGraph.validateGraph> should automatically be invoked after\n * each change. Default is false.\n */\nmxEditor.prototype.validating = false;\n\n/**\n * Variable: modified\n *\n * True if the graph has been modified since it was last saved.\n */\nmxEditor.prototype.modified = false;\n\n/**\n * Function: isModified\n *\n * Returns <modified>.\n */\nmxEditor.prototype.isModified = function ()\n{\n\treturn this.modified;\n};\n\n/**\n * Function: setModified\n *\n * Sets <modified> to the specified boolean value.\n */\nmxEditor.prototype.setModified = function (value)\n{\n\tthis.modified = value;\n};\n\n/**\n * Function: addActions\n *\n * Adds the built-in actions to the editor instance.\n *\n * save - Saves the graph using <urlPost>.\n * print - Shows the graph in a new print preview window.\n * show - Shows the graph in a new window.\n * exportImage - Shows the graph as a bitmap image using <getUrlImage>.\n * refresh - Refreshes the graph's display.\n * cut - Copies the current selection into the clipboard\n * and removes it from the graph.\n * copy - Copies the current selection into the clipboard.\n * paste - Pastes the clipboard into the graph.\n * delete - Removes the current selection from the graph.\n * group - Puts the current selection into a new group.\n * ungroup - Removes the selected groups and selects the children.\n * undo - Undoes the last change on the graph model.\n * redo - Redoes the last change on the graph model.\n * zoom - Sets the zoom via a dialog.\n * zoomIn - Zooms into the graph.\n * zoomOut - Zooms out of the graph\n * actualSize - Resets the scale and translation on the graph.\n * fit - Changes the scale so that the graph fits into the window.\n * showProperties - Shows the properties dialog.\n * selectAll - Selects all cells.\n * selectNone - Clears the selection.\n * selectVertices - Selects all vertices.\n * selectEdges = Selects all edges.\n * edit - Starts editing the current selection cell.\n * enterGroup - Drills down into the current selection cell.\n * exitGroup - Moves up in the drilling hierachy\n * home - Moves to the topmost parent in the drilling hierarchy\n * selectPrevious - Selects the previous cell.\n * selectNext - Selects the next cell.\n * selectParent - Selects the parent of the selection cell.\n * selectChild - Selects the first child of the selection cell.\n * collapse - Collapses the currently selected cells.\n * expand - Expands the currently selected cells.\n * bold - Toggle bold text style.\n * italic - Toggle italic text style.\n * underline - Toggle underline text style.\n * alignCellsLeft - Aligns the selection cells at the left.\n * alignCellsCenter - Aligns the selection cells in the center.\n * alignCellsRight - Aligns the selection cells at the right.\n * alignCellsTop - Aligns the selection cells at the top.\n * alignCellsMiddle - Aligns the selection cells in the middle.\n * alignCellsBottom - Aligns the selection cells at the bottom.\n * alignFontLeft - Sets the horizontal text alignment to left.\n * alignFontCenter - Sets the horizontal text alignment to center.\n * alignFontRight - Sets the horizontal text alignment to right.\n * alignFontTop - Sets the vertical text alignment to top.\n * alignFontMiddle - Sets the vertical text alignment to middle.\n * alignFontBottom - Sets the vertical text alignment to bottom.\n * toggleTasks - Shows or hides the tasks window.\n * toggleHelp - Shows or hides the help window.\n * toggleOutline - Shows or hides the outline window.\n * toggleConsole - Shows or hides the console window.\n */\nmxEditor.prototype.addActions = function ()\n{\n\tthis.addAction('save', function(editor)\n\t{\n\t\teditor.save();\n\t});\n\n\tthis.addAction('print', function(editor)\n\t{\n\t\tvar preview = new mxPrintPreview(editor.graph, 1);\n\t\tpreview.open();\n\t});\n\n\tthis.addAction('show', function(editor)\n\t{\n\t\tmxUtils.show(editor.graph, null, 10, 10);\n\t});\n\n\tthis.addAction('exportImage', function(editor)\n\t{\n\t\tvar url = editor.getUrlImage();\n\n\t\tif (url == null || mxClient.IS_LOCAL)\n\t\t{\n\t\t\teditor.execute('show');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar node = mxUtils.getViewXml(editor.graph, 1);\n\t\t\tvar xml = mxUtils.getXml(node, '\\n');\n\n\t\t\tmxUtils.submit(url, editor.postParameterName + '=' +\n\t\t\t\tencodeURIComponent(xml), document, '_blank');\n\t\t}\n\t});\n\n\tthis.addAction('refresh', function(editor)\n\t{\n\t\teditor.graph.refresh();\n\t});\n\n\tthis.addAction('cut', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.cut(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('copy', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.copy(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('paste', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.paste(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('delete', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCells();\n\t\t}\n\t});\n\n\tthis.addAction('group', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCell(editor.groupCells());\n\t\t}\n\t});\n\n\tthis.addAction('ungroup', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCells(editor.graph.ungroupCells());\n\t\t}\n\t});\n\n\tthis.addAction('removeFromParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCellsFromParent();\n\t\t}\n\t});\n\n\tthis.addAction('undo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.undo();\n\t\t}\n\t});\n\n\tthis.addAction('redo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.redo();\n\t\t}\n\t});\n\n\tthis.addAction('zoomIn', function(editor)\n\t{\n\t\teditor.graph.zoomIn();\n\t});\n\n\tthis.addAction('zoomOut', function(editor)\n\t{\n\t\teditor.graph.zoomOut();\n\t});\n\n\tthis.addAction('actualSize', function(editor)\n\t{\n\t\teditor.graph.zoomActual();\n\t});\n\n\tthis.addAction('fit', function(editor)\n\t{\n\t\teditor.graph.fit();\n\t});\n\n\tthis.addAction('showProperties', function(editor, cell)\n\t{\n\t\teditor.showProperties(cell);\n\t});\n\n\tthis.addAction('selectAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectAll();\n\t\t}\n\t});\n\n\tthis.addAction('selectNone', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.clearSelection();\n\t\t}\n\t});\n\n\tthis.addAction('selectVertices', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectVertices();\n\t\t}\n\t});\n\n\tthis.addAction('selectEdges', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectEdges();\n\t\t}\n\t});\n\n\tthis.addAction('edit', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled() &&\n\t\t\teditor.graph.isCellEditable(cell))\n\t\t{\n\t\t\teditor.graph.startEditingAtCell(cell);\n\t\t}\n\t});\n\n\tthis.addAction('toBack', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(true);\n\t\t}\n\t});\n\n\tthis.addAction('toFront', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(false);\n\t\t}\n\t});\n\n\tthis.addAction('enterGroup', function(editor, cell)\n\t{\n\t\teditor.graph.enterGroup(cell);\n\t});\n\n\tthis.addAction('exitGroup', function(editor)\n\t{\n\t\teditor.graph.exitGroup();\n\t});\n\n\tthis.addAction('home', function(editor)\n\t{\n\t\teditor.graph.home();\n\t});\n\n\tthis.addAction('selectPrevious', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectPreviousCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectNext', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectNextCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectParentCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectChild', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectChildCell();\n\t\t}\n\t});\n\n\tthis.addAction('collapse', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(true);\n\t\t}\n\t});\n\n\tthis.addAction('collapseAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(true, false, cells);\n\t\t}\n\t});\n\n\tthis.addAction('expand', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(false);\n\t\t}\n\t});\n\n\tthis.addAction('expandAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(false, false, cells);\n\t\t}\n\t});\n\n\tthis.addAction('bold', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_BOLD);\n\t\t}\n\t});\n\n\tthis.addAction('italic', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_ITALIC);\n\t\t}\n\t});\n\n\tthis.addAction('underline', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_UNDERLINE);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsLeft', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_LEFT);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontLeft', function(editor)\n\t{\n\n\t\teditor.graph.setCellStyles(\n\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\tmxConstants.ALIGN_LEFT);\n\t});\n\n\tthis.addAction('alignFontCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\n\tthis.addAction('zoom', function(editor)\n\t{\n\t\tvar current = editor.graph.getView().scale*100;\n\t\tvar scale = parseFloat(mxUtils.prompt(\n\t\t\tmxResources.get(editor.askZoomResource) ||\n\t\t\teditor.askZoomResource,\n\t\t\tcurrent))/100;\n\n\t\tif (!isNaN(scale))\n\t\t{\n\t\t\teditor.graph.getView().setScale(scale);\n\t\t}\n\t});\n\n\tthis.addAction('toggleTasks', function(editor)\n\t{\n\t\tif (editor.tasks != null)\n\t\t{\n\t\t\teditor.tasks.setVisible(!editor.tasks.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showTasks();\n\t\t}\n\t});\n\n\tthis.addAction('toggleHelp', function(editor)\n\t{\n\t\tif (editor.help != null)\n\t\t{\n\t\t\teditor.help.setVisible(!editor.help.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showHelp();\n\t\t}\n\t});\n\n\tthis.addAction('toggleOutline', function(editor)\n\t{\n\t\tif (editor.outline == null)\n\t\t{\n\t\t\teditor.showOutline();\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.outline.setVisible(!editor.outline.isVisible());\n\t\t}\n\t});\n\n\tthis.addAction('toggleConsole', function(editor)\n\t{\n\t\tmxLog.setVisible(!mxLog.isVisible());\n\t});\n};\n\n/**\n * Function: configure\n *\n * Configures the editor using the specified node. To load the\n * configuration from a given URL the following code can be used to obtain\n * the XML node.\n *\n * (code)\n * var node = mxUtils.load(url).getDocumentElement();\n * (end)\n *\n * Parameters:\n *\n * node - XML node that contains the configuration.\n */\nmxEditor.prototype.configure = function (node)\n{\n\tif (node != null)\n\t{\n\t\t// Creates a decoder for the XML data\n\t\t// and uses it to configure the editor\n\t\tvar dec = new mxCodec(node.ownerDocument);\n\t\tdec.decode(node, this);\n\n\t\t// Resets the counters, modified state and\n\t\t// command history\n\t\tthis.resetHistory();\n\t}\n};\n\n/**\n * Function: resetFirstTime\n *\n * Resets the cookie that is used to remember if the editor has already\n * been used.\n */\nmxEditor.prototype.resetFirstTime = function ()\n{\n\tdocument.cookie =\n\t\t'mxgraph=seen; expires=Fri, 27 Jul 2001 02:47:11 UTC; path=/';\n};\n\n/**\n * Function: resetHistory\n *\n * Resets the command history, modified state and counters.\n */\nmxEditor.prototype.resetHistory = function ()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.undoManager.clear();\n\tthis.ignoredChanges = 0;\n\tthis.setModified(false);\n};\n\n/**\n * Function: addAction\n *\n * Binds the specified actionname to the specified function.\n *\n * Parameters:\n *\n * actionname - String that specifies the name of the action\n * to be added.\n * funct - Function that implements the new action. The first\n * argument of the function is the editor it is used\n * with, the second argument is the cell it operates\n * upon.\n *\n * Example:\n * (code)\n * editor.addAction('test', function(editor, cell)\n * {\n * \t\tmxUtils.alert(\"test \"+cell);\n * });\n * (end)\n */\nmxEditor.prototype.addAction = function (actionname, funct)\n{\n\tthis.actions[actionname] = funct;\n};\n\n/**\n * Function: execute\n *\n * Executes the function with the given name in <actions> passing the\n * editor instance and given cell as the first and second argument. All\n * additional arguments are passed to the action as well. This method\n * contains a try-catch block and displays an error message if an action\n * causes an exception. The exception is re-thrown after the error\n * message was displayed.\n *\n * Example:\n *\n * (code)\n * editor.execute(\"showProperties\", cell);\n * (end)\n */\nmxEditor.prototype.execute = function (actionname, cell, evt)\n{\n\tvar action = this.actions[actionname];\n\n\tif (action != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\t// Creates the array of arguments by replacing the actionname\n\t\t\t// with the editor instance in the args of this function\n\t\t\tvar args = arguments;\n\t\t\targs[0] = this;\n\n\t\t\t// Invokes the function on the editor using the args\n\t\t\taction.apply(this, args);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxUtils.error('Cannot execute ' + actionname +\n\t\t\t\t': ' + e.message, 280, true);\n\n\t\t\tthrow e;\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxUtils.error('Cannot find action '+actionname, 280, true);\n\t}\n};\n\n/**\n * Function: addTemplate\n *\n * Adds the specified template under the given name in <templates>.\n */\nmxEditor.prototype.addTemplate = function (name, template)\n{\n\tthis.templates[name] = template;\n};\n\n/**\n * Function: getTemplate\n *\n * Returns the template for the given name.\n */\nmxEditor.prototype.getTemplate = function (name)\n{\n\treturn this.templates[name];\n};\n\n/**\n * Function: createGraph\n *\n * Creates the <graph> for the editor. The graph is created with no\n * container and is initialized from <setGraphContainer>.\n */\nmxEditor.prototype.createGraph = function ()\n{\n\tvar graph = new mxGraph(null, null, this.graphRenderHint);\n\n\t// Enables rubberband, tooltips, panning\n\tgraph.setTooltips(true);\n\tgraph.setPanning(true);\n\n\t// Overrides the dblclick method on the graph to\n\t// invoke the dblClickAction for a cell and reset\n\t// the selection tool in the toolbar\n\tthis.installDblClickHandler(graph);\n\n\t// Installs the command history\n\tthis.installUndoHandler(graph);\n\n\t// Installs the handlers for the root event\n\tthis.installDrillHandler(graph);\n\n\t// Installs the handler for validation\n\tthis.installChangeHandler(graph);\n\n\t// Installs the handler for calling the\n\t// insert function and consume the\n\t// event if an insert function is defined\n\tthis.installInsertHandler(graph);\n\n\t// Redirects the function for creating the\n\t// popupmenu items\n\tgraph.popupMenuHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(menu, cell, evt)\n\t\t{\n\t\t\treturn this.createPopupMenu(menu, cell, evt);\n\t\t});\n\n\t// Redirects the function for creating\n\t// new connections in the diagram\n\tgraph.connectionHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(source, target)\n\t\t{\n\t\t\treturn this.createEdge(source, target);\n\t\t});\n\n\t// Maintains swimlanes and installs autolayout\n\tthis.createSwimlaneManager(graph);\n\tthis.createLayoutManager(graph);\n\n\treturn graph;\n};\n\n/**\n * Function: createSwimlaneManager\n *\n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.createSwimlaneManager = function (graph)\n{\n\tvar swimlaneMgr = new mxSwimlaneManager(graph, false);\n\n\tswimlaneMgr.isHorizontal = mxUtils.bind(this, function()\n\t{\n\t\treturn this.horizontalFlow;\n\t});\n\n\tswimlaneMgr.isEnabled = mxUtils.bind(this, function()\n\t{\n\t\treturn this.maintainSwimlanes;\n\t});\n\n\treturn swimlaneMgr;\n};\n\n/**\n * Function: createLayoutManager\n *\n * Creates a layout manager for the swimlane and diagram layouts, that\n * is, the locally defined inter- and intraswimlane layouts.\n */\nmxEditor.prototype.createLayoutManager = function (graph)\n{\n\tvar layoutMgr = new mxLayoutManager(graph);\n\n\tvar self = this; // closure\n\tlayoutMgr.getLayout = function(cell)\n\t{\n\t\tvar layout = null;\n\t\tvar model = self.graph.getModel();\n\n\t\tif (model.getParent(cell) != null)\n\t\t{\n\t\t\t// Executes the swimlane layout if a child of\n\t\t\t// a swimlane has been changed. The layout is\n\t\t\t// lazy created in createSwimlaneLayout.\n\t\t\tif (self.layoutSwimlanes &&\n\t\t\t\tgraph.isSwimlane(cell))\n\t\t\t{\n\t\t\t\tif (self.swimlaneLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.swimlaneLayout = self.createSwimlaneLayout();\n\t\t\t\t}\n\n\t\t\t\tlayout = self.swimlaneLayout;\n\t\t\t}\n\n\t\t\t// Executes the diagram layout if the modified\n\t\t\t// cell is a top-level cell. The layout is\n\t\t\t// lazy created in createDiagramLayout.\n\t\t\telse if (self.layoutDiagram &&\n\t\t\t\t(graph.isValidRoot(cell) ||\n\t\t\t\tmodel.getParent(model.getParent(cell)) == null))\n\t\t\t{\n\t\t\t\tif (self.diagramLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.diagramLayout = self.createDiagramLayout();\n\t\t\t\t}\n\n\t\t\t\tlayout = self.diagramLayout;\n\t\t\t}\n\t\t}\n\n\t\treturn layout;\n\t};\n\n\treturn layoutMgr;\n};\n\n/**\n * Function: setGraphContainer\n *\n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.setGraphContainer = function (container)\n{\n\tif (this.graph.container == null)\n\t{\n\t\t// Creates the graph instance inside the given container and render hint\n\t\t//this.graph = new mxGraph(container, null, this.graphRenderHint);\n\t\tthis.graph.init(container);\n\n\t\t// Install rubberband selection as the last\n\t\t// action handler in the chain\n\t\tthis.rubberband = new mxRubberband(this.graph);\n\n\t\t// Disables the context menu\n\t\tif (this.disableContextMenu)\n\t\t{\n\t\t\tmxEvent.disableContextMenu(container);\n\t\t}\n\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: installDblClickHandler\n *\n * Overrides <mxGraph.dblClick> to invoke <dblClickAction>\n * on a cell and reset the selection tool in the toolbar.\n */\nmxEditor.prototype.installDblClickHandler = function (graph)\n{\n\t// Installs a listener for double click events\n\tgraph.addListener(mxEvent.DOUBLE_CLICK,\n\t\tmxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar cell = evt.getProperty('cell');\n\n\t\t\tif (cell != null &&\n\t\t\t\tgraph.isEnabled() &&\n\t\t\t\tthis.dblClickAction != null)\n\t\t\t{\n\t\t\t\tthis.execute(this.dblClickAction, cell);\n\t\t\t\tevt.consume();\n\t\t\t}\n\t\t})\n\t);\n};\n\n/**\n * Function: installUndoHandler\n *\n * Adds the <undoManager> to the graph model and the view.\n */\nmxEditor.prototype.installUndoHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tvar edit = evt.getProperty('edit');\n\t\tthis.undoManager.undoableEditHappened(edit);\n\t});\n\n\tgraph.getModel().addListener(mxEvent.UNDO, listener);\n\tgraph.getView().addListener(mxEvent.UNDO, listener);\n\n\t// Keeps the selection state in sync\n\tvar undoHandler = function(sender, evt)\n\t{\n\t\tvar changes = evt.getProperty('edit').changes;\n\t\tgraph.setSelectionCells(graph.getSelectionCellsForChanges(changes));\n\t};\n\n\tthis.undoManager.addListener(mxEvent.UNDO, undoHandler);\n\tthis.undoManager.addListener(mxEvent.REDO, undoHandler);\n};\n\n/**\n * Function: installDrillHandler\n *\n * Installs listeners for dispatching the <root> event.\n */\nmxEditor.prototype.installDrillHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t});\n\n\tgraph.getView().addListener(mxEvent.DOWN, listener);\n\tgraph.getView().addListener(mxEvent.UP, listener);\n};\n\n/**\n * Function: installChangeHandler\n *\n * Installs the listeners required to automatically validate\n * the graph. On each change of the root, this implementation\n * fires a <root> event.\n */\nmxEditor.prototype.installChangeHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\t// Updates the modified state\n\t\tthis.setModified(true);\n\n\t\t// Automatically validates the graph\n\t\t// after each change\n\t\tif (this.validating == true)\n\t\t{\n\t\t\tgraph.validateGraph();\n\t\t}\n\n\t\t// Checks if the root has been changed\n\t\tvar changes = evt.getProperty('edit').changes;\n\n\t\tfor (var i = 0; i < changes.length; i++)\n\t\t{\n\t\t\tvar change = changes[i];\n\n\t\t\tif (change instanceof mxRootChange ||\n\t\t\t\t(change instanceof mxValueChange &&\n\t\t\t\tchange.cell == this.graph.model.root) ||\n\t\t\t\t(change instanceof mxCellAttributeChange &&\n\t\t\t\tchange.cell == this.graph.model.root))\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\tgraph.getModel().addListener(mxEvent.CHANGE, listener);\n};\n\n/**\n * Function: installInsertHandler\n *\n * Installs the handler for invoking <insertFunction> if\n * one is defined.\n */\nmxEditor.prototype.installInsertHandler = function (graph)\n{\n\tvar self = this; // closure\n\tvar insertHandler =\n\t{\n\t\tmouseDown: function(sender, me)\n\t\t{\n\t\t\tif (self.insertFunction != null &&\n\t\t\t\t!me.isPopupTrigger() &&\n\t\t\t\t(self.forcedInserting ||\n\t\t\t\tme.getState() == null))\n\t\t\t{\n\t\t\t\tself.graph.clearSelection();\n\t\t\t\tself.insertFunction(me.getEvent(), me.getCell());\n\n\t\t\t\t// Consumes the rest of the events\n\t\t\t\t// for this gesture (down, move, up)\n\t\t\t\tthis.isActive = true;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\n\t\tmouseMove: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\n\t\tmouseUp: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tthis.isActive = false;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t}\n\t};\n\n\tgraph.addMouseListener(insertHandler);\n};\n\n/**\n * Function: createDiagramLayout\n *\n * Creates the layout instance used to layout the\n * swimlanes in the diagram.\n */\nmxEditor.prototype.createDiagramLayout = function ()\n{\n\tvar gs = this.graph.gridSize;\n\tvar layout = new mxStackLayout(this.graph, !this.horizontalFlow,\n\t\t this.swimlaneSpacing, 2*gs, 2*gs);\n\n\t// Overrides isIgnored to only take into account swimlanes\n\tlayout.isVertexIgnored = function(cell)\n\t{\n\t\treturn !layout.graph.isSwimlane(cell);\n\t};\n\n\treturn layout;\n};\n\n/**\n * Function: createSwimlaneLayout\n *\n * Creates the layout instance used to layout the\n * children of each swimlane.\n */\nmxEditor.prototype.createSwimlaneLayout = function ()\n{\n\treturn new mxCompactTreeLayout(this.graph, this.horizontalFlow);\n};\n\n/**\n * Function: createToolbar\n *\n * Creates the <toolbar> with no container.\n */\nmxEditor.prototype.createToolbar = function ()\n{\n\treturn new mxDefaultToolbar(null, this);\n};\n\n/**\n * Function: setToolbarContainer\n *\n * Initializes the toolbar for the given container.\n */\nmxEditor.prototype.setToolbarContainer = function (container)\n{\n\tthis.toolbar.init(container);\n\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: setStatusContainer\n *\n * Creates the <status> using the specified container.\n *\n * This implementation adds listeners in the editor to\n * display the last saved time and the current filename\n * in the status bar.\n *\n * Parameters:\n *\n * container - DOM node that will contain the statusbar.\n */\nmxEditor.prototype.setStatusContainer = function (container)\n{\n\tif (this.status == null)\n\t{\n\t\tthis.status = container;\n\n\t\t// Prints the last saved time in the status bar\n\t\t// when files are saved\n\t\tthis.addListener(mxEvent.SAVE, mxUtils.bind(this, function()\n\t\t{\n\t\t\tvar tstamp = new Date().toLocaleString();\n\t\t\tthis.setStatus((mxResources.get(this.lastSavedResource) ||\n\t\t\t\tthis.lastSavedResource)+': '+tstamp);\n\t\t}));\n\n\t\t// Updates the statusbar to display the filename\n\t\t// when new files are opened\n\t\tthis.addListener(mxEvent.OPEN, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.setStatus((mxResources.get(this.currentFileResource) ||\n\t\t\t\tthis.currentFileResource)+': '+this.filename);\n\t\t}));\n\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: setStatus\n *\n * Display the specified message in the status bar.\n *\n * Parameters:\n *\n * message - String the specified the message to\n * be displayed.\n */\nmxEditor.prototype.setStatus = function (message)\n{\n\tif (this.status != null && message != null)\n\t{\n\t\tthis.status.innerHTML = message;\n\t}\n};\n\n/**\n * Function: setTitleContainer\n *\n * Creates a listener to update the inner HTML of the\n * specified DOM node with the value of <getTitle>.\n *\n * Parameters:\n *\n * container - DOM node that will contain the title.\n */\nmxEditor.prototype.setTitleContainer = function (container)\n{\n\tthis.addListener(mxEvent.ROOT, mxUtils.bind(this, function(sender)\n\t{\n\t\tcontainer.innerHTML = this.getTitle();\n\t}));\n\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: treeLayout\n *\n * Executes a vertical or horizontal compact tree layout\n * using the specified cell as an argument. The cell may\n * either be a group or the root of a tree.\n *\n * Parameters:\n *\n * cell - <mxCell> to use in the compact tree layout.\n * horizontal - Optional boolean to specify the tree's\n * orientation. Default is true.\n */\nmxEditor.prototype.treeLayout = function (cell, horizontal)\n{\n\tif (cell != null)\n\t{\n\t\tvar layout = new mxCompactTreeLayout(this.graph, horizontal);\n\t\tlayout.execute(cell);\n\t}\n};\n\n/**\n * Function: getTitle\n *\n * Returns the string value for the current root of the\n * diagram.\n */\nmxEditor.prototype.getTitle = function ()\n{\n\tvar title = '';\n\tvar graph = this.graph;\n\tvar cell = graph.getCurrentRoot();\n\n\twhile (cell != null &&\n\t\t   graph.getModel().getParent(\n\t\t\t\tgraph.getModel().getParent(cell)) != null)\n\t{\n\t\t// Append each label of a valid root\n\t\tif (graph.isValidRoot(cell))\n\t\t{\n\t\t\ttitle = ' > ' +\n\t\t\tgraph.convertValueToString(cell) + title;\n\t\t}\n\n\t\tcell = graph.getModel().getParent(cell);\n\t}\n\n\tvar prefix = this.getRootTitle();\n\n\treturn prefix + title;\n};\n\n/**\n * Function: getRootTitle\n *\n * Returns the string value of the root cell in\n * <mxGraph.model>.\n */\nmxEditor.prototype.getRootTitle = function ()\n{\n\tvar root = this.graph.getModel().getRoot();\n\treturn this.graph.convertValueToString(root);\n};\n\n/**\n * Function: undo\n *\n * Undo the last change in <graph>.\n */\nmxEditor.prototype.undo = function ()\n{\n\tthis.undoManager.undo();\n};\n\n/**\n * Function: redo\n *\n * Redo the last change in <graph>.\n */\nmxEditor.prototype.redo = function ()\n{\n\tthis.undoManager.redo();\n};\n\n/**\n * Function: groupCells\n *\n * Invokes <createGroup> to create a new group cell and the invokes\n * <mxGraph.groupCells>, using the grid size of the graph as the spacing\n * in the group's content area.\n */\nmxEditor.prototype.groupCells = function ()\n{\n\tvar border = (this.groupBorderSize != null) ?\n\t\tthis.groupBorderSize :\n\t\tthis.graph.gridSize;\n\treturn this.graph.groupCells(this.createGroup(), border);\n};\n\n/**\n * Function: createGroup\n *\n * Creates and returns a clone of <defaultGroup> to be used\n * as a new group cell in <group>.\n */\nmxEditor.prototype.createGroup = function ()\n{\n\tvar model = this.graph.getModel();\n\n\treturn model.cloneCell(this.defaultGroup);\n};\n\n/**\n * Function: open\n *\n * Opens the specified file synchronously and parses it using\n * <readGraphModel>. It updates <filename> and fires an <open>-event after\n * the file has been opened. Exceptions should be handled as follows:\n *\n * (code)\n * try\n * {\n *   editor.open(filename);\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot open ' + filename +\n *     ': ' + e.message, 280, true);\n * }\n * (end)\n *\n * Parameters:\n *\n * filename - URL of the file to be opened.\n */\nmxEditor.prototype.open = function (filename)\n{\n\tif (filename != null)\n\t{\n\t\tvar xml = mxUtils.load(filename).getXml();\n\t\tthis.readGraphModel(xml.documentElement);\n\t\tthis.filename = filename;\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.OPEN, 'filename', filename));\n\t}\n};\n\n/**\n * Function: readGraphModel\n *\n * Reads the specified XML node into the existing graph model and resets\n * the command history and modified state.\n */\nmxEditor.prototype.readGraphModel = function (node)\n{\n\tvar dec = new mxCodec(node.ownerDocument);\n\tdec.decode(node, this.graph.getModel());\n\tthis.resetHistory();\n};\n\n/**\n * Function: save\n *\n * Posts the string returned by <writeGraphModel> to the given URL or the\n * URL returned by <getUrlPost>. The actual posting is carried out by\n * <postDiagram>. If the URL is null then the resulting XML will be\n * displayed using <mxUtils.popup>. Exceptions should be handled as\n * follows:\n *\n * (code)\n * try\n * {\n *   editor.save();\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot save : ' + e.message, 280, true);\n * }\n * (end)\n */\nmxEditor.prototype.save = function (url, linefeed)\n{\n\t// Gets the URL to post the data to\n\turl = url || this.getUrlPost();\n\n\t// Posts the data if the URL is not empty\n\tif (url != null && url.length > 0)\n\t{\n\t\tvar data = this.writeGraphModel(linefeed);\n\t\tthis.postDiagram(url, data);\n\n\t\t// Resets the modified flag\n\t\tthis.setModified(false);\n\t}\n\n\t// Dispatches a save event\n\tthis.fireEvent(new mxEventObject(mxEvent.SAVE, 'url', url));\n};\n\n/**\n * Function: postDiagram\n *\n * Hook for subclassers to override the posting of a diagram\n * represented by the given node to the given URL. This fires\n * an asynchronous <post> event if the diagram has been posted.\n *\n * Example:\n *\n * To replace the diagram with the diagram in the response, use the\n * following code.\n *\n * (code)\n * editor.addListener(mxEvent.POST, function(sender, evt)\n * {\n *   // Process response (replace diagram)\n *   var req = evt.getProperty('request');\n *   var root = req.getDocumentElement();\n *   editor.graph.readGraphModel(root)\n * });\n * (end)\n */\nmxEditor.prototype.postDiagram = function (url, data)\n{\n\tif (this.escapePostData)\n\t{\n\t\tdata = encodeURIComponent(data);\n\t}\n\n\tmxUtils.post(url, this.postParameterName+'='+data,\n\t\tmxUtils.bind(this, function(req)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.POST,\n\t\t\t\t'request', req, 'url', url, 'data', data));\n\t\t})\n\t);\n};\n\n/**\n * Function: writeGraphModel\n *\n * Hook to create the string representation of the diagram. The default\n * implementation uses an <mxCodec> to encode the graph model as\n * follows:\n *\n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(this.graph.getModel());\n * return mxUtils.getXml(node, this.linefeed);\n * (end)\n *\n * Parameters:\n *\n * linefeed - Optional character to be used as the linefeed. Default is\n * <linefeed>.\n */\nmxEditor.prototype.writeGraphModel = function (linefeed)\n{\n\tlinefeed = (linefeed != null) ? linefeed : this.linefeed;\n\tvar enc = new mxCodec();\n\tvar node = enc.encode(this.graph.getModel());\n\n\treturn mxUtils.getXml(node, linefeed);\n};\n\n/**\n * Function: getUrlPost\n *\n * Returns the URL to post the diagram to. This is used\n * in <save>. The default implementation returns <urlPost>,\n * adding <code>?draft=true</code>.\n */\nmxEditor.prototype.getUrlPost = function ()\n{\n\treturn this.urlPost;\n};\n\n/**\n * Function: getUrlImage\n *\n * Returns the URL to create the image with. This is typically\n * the URL of a backend which accepts an XML representation\n * of a graph view to create an image. The function is used\n * in the image action to create an image. This implementation\n * returns <urlImage>.\n */\nmxEditor.prototype.getUrlImage = function ()\n{\n\treturn this.urlImage;\n};\n\n/**\n * Function: swapStyles\n *\n * Swaps the styles for the given names in the graph's\n * stylesheet and refreshes the graph.\n */\nmxEditor.prototype.swapStyles = function (first, second)\n{\n\tvar style = this.graph.getStylesheet().styles[second];\n\tthis.graph.getView().getStylesheet().putCellStyle(\n\t\tsecond, this.graph.getStylesheet().styles[first]);\n\tthis.graph.getStylesheet().putCellStyle(first, style);\n\tthis.graph.refresh();\n};\n\n/**\n * Function: showProperties\n *\n * Creates and shows the properties dialog for the given\n * cell. The content area of the dialog is created using\n * <createProperties>.\n */\nmxEditor.prototype.showProperties = function (cell)\n{\n\tcell = cell || this.graph.getSelectionCell();\n\n\t// Uses the root node for the properties dialog\n\t// if not cell was passed in and no cell is\n\t// selected\n\tif (cell == null)\n\t{\n\t\tcell = this.graph.getCurrentRoot();\n\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.graph.getModel().getRoot();\n\t\t}\n\t}\n\n\tif (cell != null)\n\t{\n\t\t// Makes sure there is no in-place editor in the\n\t\t// graph and computes the location of the dialog\n\t\tthis.graph.stopEditing(true);\n\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar x = offset.x+10;\n\t\tvar y = offset.y;\n\n\t\t// Avoids moving the dialog if it is alredy open\n\t\tif (this.properties != null && !this.movePropertiesDialog)\n\t\t{\n\t\t\tx = this.properties.getX();\n\t\t\ty = this.properties.getY();\n\t\t}\n\n\t\t// Places the dialog near the cell for which it\n\t\t// displays the properties\n\t\telse\n\t\t{\n\t\t\tvar bounds = this.graph.getCellBounds(cell);\n\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tx += bounds.x+Math.min(200, bounds.width);\n\t\t\t\ty += bounds.y;\n\t\t\t}\n\t\t}\n\n\t\t// Hides the existing properties dialog and creates a new one with the\n\t\t// contents created in the hook method\n\t\tthis.hideProperties();\n\t\tvar node = this.createProperties(cell);\n\n\t\tif (node != null)\n\t\t{\n\t\t\t// Displays the contents in a window and stores a reference to the\n\t\t\t// window for later hiding of the window\n\t\t\tthis.properties = new mxWindow(mxResources.get(this.propertiesResource) ||\n\t\t\t\tthis.propertiesResource, node, x, y, this.propertiesWidth, this.propertiesHeight, false);\n\t\t\tthis.properties.setVisible(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: isPropertiesVisible\n *\n * Returns true if the properties dialog is currently visible.\n */\nmxEditor.prototype.isPropertiesVisible = function ()\n{\n\treturn this.properties != null;\n};\n\n/**\n * Function: createProperties\n *\n * Creates and returns the DOM node that represents the contents\n * of the properties dialog for the given cell. This implementation\n * works for user objects that are XML nodes and display all the\n * node attributes in a form.\n */\nmxEditor.prototype.createProperties = function (cell)\n{\n\tvar model = this.graph.getModel();\n\tvar value = model.getValue(cell);\n\n\tif (mxUtils.isNode(value))\n\t{\n\t\t// Creates a form for the user object inside\n\t\t// the cell\n\t\tvar form = new mxForm('properties');\n\n\t\t// Adds a readonly field for the cell id\n\t\tvar id = form.addText('ID', cell.getId());\n\t\tid.setAttribute('readonly', 'true');\n\n\t\tvar geo = null;\n\t\tvar yField = null;\n\t\tvar xField = null;\n\t\tvar widthField = null;\n\t\tvar heightField = null;\n\n\t\t// Adds fields for the location and size\n\t\tif (model.isVertex(cell))\n\t\t{\n\t\t\tgeo = model.getGeometry(cell);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tyField = form.addText('top', geo.y);\n\t\t\t\txField = form.addText('left', geo.x);\n\t\t\t\twidthField = form.addText('width', geo.width);\n\t\t\t\theightField = form.addText('height', geo.height);\n\t\t\t}\n\t\t}\n\n\t\t// Adds a field for the cell style\n\t\tvar tmp = model.getStyle(cell);\n\t\tvar style = form.addText('Style', tmp || '');\n\n\t\t// Creates textareas for each attribute of the\n\t\t// user object within the cell\n\t\tvar attrs = value.attributes;\n\t\tvar texts = [];\n\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\t// Creates a textarea with more lines for\n\t\t\t// the cell label\n\t\t\tvar val = attrs[i].value;\n\t\t\ttexts[i] = form.addTextarea(attrs[i].nodeName, val,\n\t\t\t\t(attrs[i].nodeName == 'label') ? 4 : 2);\n\t\t}\n\n\t\t// Adds an OK and Cancel button to the dialog\n\t\t// contents and implements the respective\n\t\t// actions below\n\n\t\t// Defines the function to be executed when the\n\t\t// OK button is pressed in the dialog\n\t\tvar okFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\n\t\t\t// Supports undo for the changes on the underlying\n\t\t\t// XML structure / XML node attribute changes.\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\n\t\t\t\t\tgeo.x = parseFloat(xField.value);\n\t\t\t\t\tgeo.y = parseFloat(yField.value);\n\t\t\t\t\tgeo.width = parseFloat(widthField.value);\n\t\t\t\t\tgeo.height = parseFloat(heightField.value);\n\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\n\t\t\t\t// Applies the style\n\t\t\t\tif (style.value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, style.value);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, null);\n\t\t\t\t}\n\n\t\t\t\t// Creates an undoable change for each\n\t\t\t\t// attribute and executes it using the\n\t\t\t\t// model, which will also make the change\n\t\t\t\t// part of the current transaction\n\t\t\t\tfor (var i=0; i<attrs.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar edit = new mxCellAttributeChange(\n\t\t\t\t\t\tcell, attrs[i].nodeName,\n\t\t\t\t\t\ttexts[i].value);\n\t\t\t\t\tmodel.execute(edit);\n\t\t\t\t}\n\n\t\t\t\t// Checks if the graph wants cells to\n\t\t\t\t// be automatically sized and updates\n\t\t\t\t// the size as an undoable step if\n\t\t\t\t// the feature is enabled\n\t\t\t\tif (this.graph.isAutoSizeCell(cell))\n\t\t\t\t{\n\t\t\t\t\tthis.graph.updateCellSize(cell);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t});\n\n\t\t// Defines the function to be executed when the\n\t\t// Cancel button is pressed in the dialog\n\t\tvar cancelFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\t\t});\n\n\t\tform.addButtons(okFunction, cancelFunction);\n\n\t\treturn form.table;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: hideProperties\n *\n * Hides the properties dialog.\n */\nmxEditor.prototype.hideProperties = function ()\n{\n\tif (this.properties != null)\n\t{\n\t\tthis.properties.destroy();\n\t\tthis.properties = null;\n\t}\n};\n\n/**\n * Function: showTasks\n *\n * Shows the tasks window. The tasks window is created using <createTasks>. The\n * default width of the window is 200 pixels, the y-coordinate of the location\n * can be specifies in <tasksTop> and the x-coordinate is right aligned with a\n * 20 pixel offset from the right border. To change the location of the tasks\n * window, the following code can be used:\n *\n * (code)\n * var oldShowTasks = mxEditor.prototype.showTasks;\n * mxEditor.prototype.showTasks = function()\n * {\n *   oldShowTasks.apply(this, arguments); // \"supercall\"\n *\n *   if (this.tasks != null)\n *   {\n *     this.tasks.setLocation(10, 10);\n *   }\n * };\n * (end)\n */\nmxEditor.prototype.showTasks = function ()\n{\n\tif (this.tasks == null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '4px';\n\t\tdiv.style.paddingLeft = '20px';\n\t\tvar w = document.body.clientWidth;\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.tasksResource) ||\n\t\t\tthis.tasksResource,\n\t\t\tdiv, w - 220, this.tasksTop, 200);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\n\t\t// Installs a function to update the contents\n\t\t// of the tasks window on every change of the\n\t\t// model, selection or root.\n\t\tvar funct = mxUtils.bind(this, function(sender)\n\t\t{\n\t\t\tmxEvent.release(div);\n\t\t\tdiv.innerHTML = '';\n\t\t\tthis.createTasks(div);\n\t\t});\n\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.addListener(mxEvent.ROOT, funct);\n\n\t\t// Assigns the icon to the tasks window\n\t\tif (this.tasksWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.tasksWindowImage);\n\t\t}\n\n\t\tthis.tasks = wnd;\n\t\tthis.createTasks(div);\n\t}\n\n\tthis.tasks.setVisible(true);\n};\n\n/**\n * Function: refreshTasks\n *\n * Updates the contents of the tasks window using <createTasks>.\n */\nmxEditor.prototype.refreshTasks = function (div)\n{\n\tif (this.tasks != null)\n\t{\n\t\tvar div = this.tasks.content;\n\t\tmxEvent.release(div);\n\t\tdiv.innerHTML = '';\n\t\tthis.createTasks(div);\n\t}\n};\n\n/**\n * Function: createTasks\n *\n * Updates the contents of the given DOM node to\n * display the tasks associated with the current\n * editor state. This is invoked whenever there\n * is a possible change of state in the editor.\n * Default implementation is empty.\n */\nmxEditor.prototype.createTasks = function (div)\n{\n\t// override\n};\n\n/**\n * Function: showHelp\n *\n * Shows the help window. If the help window does not exist\n * then it is created using an iframe pointing to the resource\n * for the <code>urlHelp</code> key or <urlHelp> if the resource\n * is undefined.\n */\nmxEditor.prototype.showHelp = function (tasks)\n{\n\tif (this.help == null)\n\t{\n\t\tvar frame = document.createElement('iframe');\n\t\tframe.setAttribute('src', mxResources.get('urlHelp') || this.urlHelp);\n\t\tframe.setAttribute('height', '100%');\n\t\tframe.setAttribute('width', '100%');\n\t\tframe.setAttribute('frameBorder', '0');\n\t\tframe.style.backgroundColor = 'white';\n\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\n\t\tvar wnd = new mxWindow(mxResources.get(this.helpResource) || this.helpResource,\n\t\t\tframe, (w-this.helpWidth)/2, (h-this.helpHeight)/3, this.helpWidth, this.helpHeight);\n\t\twnd.setMaximizable(true);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\t\twnd.setResizable(true);\n\n\t\t// Assigns the icon to the help window\n\t\tif (this.helpWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.helpWindowImage);\n\t\t}\n\n\t\t// Workaround for ignored iframe height 100% in FF\n\t\tif (mxClient.IS_NS)\n\t\t{\n\t\t\tvar handler = function(sender)\n\t\t\t{\n\t\t\t\tvar h = wnd.div.offsetHeight;\n\t\t\t\tframe.setAttribute('height', (h-26)+'px');\n\t\t\t};\n\n\t\t\twnd.addListener(mxEvent.RESIZE_END, handler);\n\t\t\twnd.addListener(mxEvent.MAXIMIZE, handler);\n\t\t\twnd.addListener(mxEvent.NORMALIZE, handler);\n\t\t\twnd.addListener(mxEvent.SHOW, handler);\n\t\t}\n\n\t\tthis.help = wnd;\n\t}\n\n\tthis.help.setVisible(true);\n};\n\n/**\n * Function: showOutline\n *\n * Shows the outline window. If the window does not exist, then it is\n * created using an <mxOutline>.\n */\nmxEditor.prototype.showOutline = function ()\n{\n\tvar create = this.outline == null;\n\n\tif (create)\n\t{\n\t\tvar div = document.createElement('div');\n\n\t\tdiv.style.overflow = 'hidden';\n\t\tdiv.style.position = 'relative';\n\t\tdiv.style.width = '100%';\n\t\tdiv.style.height = '100%';\n\t\tdiv.style.background = 'white';\n\t\tdiv.style.cursor = 'move';\n\n\t\tif (document.documentMode == 8)\n\t\t{\n\t\t\tdiv.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n\t\t}\n\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.outlineResource) ||\n\t\t\tthis.outlineResource,\n\t\t\tdiv, 600, 480, 200, 200, false);\n\n\t\t// Creates the outline in the specified div\n\t\t// and links it to the existing graph\n\t\tvar outline = new mxOutline(this.graph, div);\n\t\twnd.setClosable(true);\n\t\twnd.setResizable(true);\n\t\twnd.destroyOnClose = false;\n\n\t\twnd.addListener(mxEvent.RESIZE_END, function()\n\t\t{\n\t\t\toutline.update();\n\t\t});\n\n\t\tthis.outline = wnd;\n\t\tthis.outline.outline = outline;\n\t}\n\n\t// Finally shows the outline\n\tthis.outline.setVisible(true);\n\tthis.outline.outline.update(true);\n};\n\n/**\n * Function: setMode\n *\n * Puts the graph into the specified mode. The following modenames are\n * supported:\n *\n * select - Selects using the left mouse button, new connections\n * are disabled.\n * connect - Selects using the left mouse button or creates new\n * connections if mouse over cell hotspot. See <mxConnectionHandler>.\n * pan - Pans using the left mouse button, new connections are disabled.\n */\nmxEditor.prototype.setMode = function(modename)\n{\n\tif (modename == 'select')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(false);\n\t}\n\telse if (modename == 'connect')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(true);\n\t}\n\telse if (modename == 'pan')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = true;\n\t\tthis.graph.setConnectable(false);\n\t}\n};\n\n/**\n * Function: createPopupMenu\n *\n * Uses <popupHandler> to create the menu in the graph's\n * panning handler. The redirection is setup in\n * <setToolbarContainer>.\n */\nmxEditor.prototype.createPopupMenu = function (menu, cell, evt)\n{\n\tthis.popupHandler.createMenu(this, menu, cell, evt);\n};\n\n/**\n * Function: createEdge\n *\n * Uses <defaultEdge> as the prototype for creating new edges\n * in the connection handler of the graph. The style of the\n * edge will be overridden with the value returned by\n * <getEdgeStyle>.\n */\nmxEditor.prototype.createEdge = function (source, target)\n{\n\t// Clones the defaultedge prototype\n\tvar e = null;\n\n\tif (this.defaultEdge != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\te = model.cloneCell(this.defaultEdge);\n\t}\n\telse\n\t{\n\t\te = new mxCell('');\n\t\te.setEdge(true);\n\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\te.setGeometry(geo);\n\t}\n\n\t// Overrides the edge style\n\tvar style = this.getEdgeStyle();\n\n\tif (style != null)\n\t{\n\t\te.setStyle(style);\n\t}\n\n\treturn e;\n};\n\n/**\n * Function: getEdgeStyle\n *\n * Returns a string identifying the style of new edges.\n * The function is used in <createEdge> when new edges\n * are created in the graph.\n */\nmxEditor.prototype.getEdgeStyle = function ()\n{\n\treturn this.defaultEdgeStyle;\n};\n\n/**\n * Function: consumeCycleAttribute\n *\n * Returns the next attribute in <cycleAttributeValues>\n * or null, if not attribute should be used in the\n * specified cell.\n */\nmxEditor.prototype.consumeCycleAttribute = function (cell)\n{\n\treturn (this.cycleAttributeValues != null &&\n\t\tthis.cycleAttributeValues.length > 0 &&\n\t\tthis.graph.isSwimlane(cell)) ?\n\t\tthis.cycleAttributeValues[this.cycleAttributeIndex++ %\n\t\t\tthis.cycleAttributeValues.length] : null;\n};\n\n/**\n * Function: cycleAttribute\n *\n * Uses the returned value from <consumeCycleAttribute>\n * as the value for the <cycleAttributeName> key in\n * the given cell's style.\n */\nmxEditor.prototype.cycleAttribute = function (cell)\n{\n\tif (this.cycleAttributeName != null)\n\t{\n\t\tvar value = this.consumeCycleAttribute(cell);\n\n\t\tif (value != null)\n\t\t{\n\t\t\tcell.setStyle(cell.getStyle()+';'+\n\t\t\t\tthis.cycleAttributeName+'='+value);\n\t\t}\n\t}\n};\n\n/**\n * Function: addVertex\n *\n * Adds the given vertex as a child of parent at the specified\n * x and y coordinate and fires an <addVertex> event.\n */\nmxEditor.prototype.addVertex = function (parent, vertex, x, y)\n{\n\tvar model = this.graph.getModel();\n\n\twhile (parent != null && !this.graph.isValidDropTarget(parent))\n\t{\n\t\tparent = model.getParent(parent);\n\t}\n\n\tparent = (parent != null) ? parent : this.graph.getSwimlaneAt(x, y);\n\tvar scale = this.graph.getView().scale;\n\n\tvar geo = model.getGeometry(vertex);\n\tvar pgeo = model.getGeometry(parent);\n\n\tif (this.graph.isSwimlane(vertex) &&\n\t\t!this.graph.swimlaneNesting)\n\t{\n\t\tparent = null;\n\t}\n\telse if (parent == null && this.swimlaneRequired)\n\t{\n\t\treturn null;\n\t}\n\telse if (parent != null && pgeo != null)\n\t{\n\t\t// Keeps vertex inside parent\n\t\tvar state = this.graph.getView().getState(parent);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tx -= state.origin.x * scale;\n\t\t\ty -= state.origin.y * scale;\n\n\t\t\tif (this.graph.isConstrainedMoving)\n\t\t\t{\n\t\t\t\tvar width = geo.width;\n\t\t\t\tvar height = geo.height;\n\t\t\t\tvar tmp = state.x+state.width;\n\n\t\t\t\tif (x+width > tmp)\n\t\t\t\t{\n\t\t\t\t\tx -= x+width - tmp;\n\t\t\t\t}\n\n\t\t\t\ttmp = state.y+state.height;\n\n\t\t\t\tif (y+height > tmp)\n\t\t\t\t{\n\t\t\t\t\ty -= y+height - tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (pgeo != null)\n\t\t{\n\t\t\tx -= pgeo.x*scale;\n\t\t\ty -= pgeo.y*scale;\n\t\t}\n\t}\n\n\tgeo = geo.clone();\n\tgeo.x = this.graph.snap(x / scale -\n\t\tthis.graph.getView().translate.x -\n\t\tthis.graph.gridSize/2);\n\tgeo.y = this.graph.snap(y / scale -\n\t\tthis.graph.getView().translate.y -\n\t\tthis.graph.gridSize/2);\n\tvertex.setGeometry(geo);\n\n\tif (parent == null)\n\t{\n\t\tparent = this.graph.getDefaultParent();\n\t}\n\n\tthis.cycleAttribute(vertex);\n\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_ADD_VERTEX,\n\t\t\t'vertex', vertex, 'parent', parent));\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvertex = this.graph.addCell(vertex, parent);\n\n\t\tif (vertex != null)\n\t\t{\n\t\t\tthis.graph.constrainChild(vertex);\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_VERTEX, 'vertex', vertex));\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\n\tif (vertex != null)\n\t{\n\t\tthis.graph.setSelectionCell(vertex);\n\t\tthis.graph.scrollCellToVisible(vertex);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.AFTER_ADD_VERTEX, 'vertex', vertex));\n\t}\n\n\treturn vertex;\n};\n\n/**\n * Function: destroy\n *\n * Removes the editor and all its associated resources. This does not\n * normally need to be called, it is called automatically when the window\n * unloads.\n */\nmxEditor.prototype.destroy = function ()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tif (this.tasks != null)\n\t\t{\n\t\t\tthis.tasks.destroy();\n\t\t}\n\n\t\tif (this.outline != null)\n\t\t{\n\t\t\tthis.outline.destroy();\n\t\t}\n\n\t\tif (this.properties != null)\n\t\t{\n\t\t\tthis.properties.destroy();\n\t\t}\n\n\t\tif (this.keyHandler != null)\n\t\t{\n\t\t\tthis.keyHandler.destroy();\n\t\t}\n\n\t\tif (this.rubberband != null)\n\t\t{\n\t\t\tthis.rubberband.destroy();\n\t\t}\n\n\t\tif (this.toolbar != null)\n\t\t{\n\t\t\tthis.toolbar.destroy();\n\t\t}\n\n\t\tif (this.graph != null)\n\t\t{\n\t\t\tthis.graph.destroy();\n\t\t}\n\n\t\tthis.status = null;\n\t\tthis.templates = null;\n\t}\n};\n\n__mxOutput.mxEditor = typeof mxEditor !== 'undefined' ? mxEditor : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCodecRegistry =\n{\n\t/**\n\t * Class: mxCodecRegistry\n\t *\n\t * Singleton class that acts as a global registry for codecs.\n\t *\n\t * Adding an <mxCodec>:\n\t *\n\t * 1. Define a default codec with a new instance of the \n\t * object to be handled.\n\t *\n\t * (code)\n\t * var codec = new mxObjectCodec(new mxGraphModel());\n\t * (end)\n\t *\n\t * 2. Define the functions required for encoding and decoding\n\t * objects.\n\t *\n\t * (code)\n\t * codec.encode = function(enc, obj) { ... }\n\t * codec.decode = function(dec, node, into) { ... }\n\t * (end)\n\t *\n\t * 3. Register the codec in the <mxCodecRegistry>.\n\t *\n\t * (code)\n\t * mxCodecRegistry.register(codec);\n\t * (end)\n\t *\n\t * <mxObjectCodec.decode> may be used to either create a new \n\t * instance of an object or to configure an existing instance, \n\t * in which case the into argument points to the existing\n\t * object. In this case, we say the codec \"configures\" the\n\t * object.\n\t * \n\t * Variable: codecs\n\t *\n\t * Maps from constructor names to codecs.\n\t */\n\tcodecs: [],\n\t\n\t/**\n\t * Variable: aliases\n\t *\n\t * Maps from classnames to codecnames.\n\t */\n\taliases: [],\n\n\t/**\n\t * Function: register\n\t *\n\t * Registers a new codec and associates the name of the template\n\t * constructor in the codec with the codec object.\n\t *\n\t * Parameters:\n\t *\n\t * codec - <mxObjectCodec> to be registered.\n\t */\n\tregister: function(codec)\n\t{\n\t\tif (codec != null)\n\t\t{\n\t\t\tvar name = codec.getName();\n\t\t\tmxCodecRegistry.codecs[name] = codec;\n\t\t\t\n\t\t\tvar classname = mxUtils.getFunctionName(codec.template.constructor);\n\n\t\t\tif (classname != name)\n\t\t\t{\n\t\t\t\tmxCodecRegistry.addAlias(classname, name);\n\t\t\t}\n\t\t}\n\n\t\treturn codec;\n\t},\n\n\t/**\n\t * Function: addAlias\n\t *\n\t * Adds an alias for mapping a classname to a codecname.\n\t */\n\taddAlias: function(classname, codecname)\n\t{\n\t\tmxCodecRegistry.aliases[classname] = codecname;\n\t},\n\n\t/**\n\t * Function: getCodec\n\t *\n\t * Returns a codec that handles objects that are constructed\n\t * using the given constructor.\n\t *\n\t * Parameters:\n\t *\n\t * ctor - JavaScript constructor function. \n\t */\n\tgetCodec: function(ctor)\n\t{\n\t\tvar codec = null;\n\t\t\n\t\tif (ctor != null)\n\t\t{\n\t\t\tvar name = mxUtils.getFunctionName(ctor);\n\t\t\tvar tmp = mxCodecRegistry.aliases[name];\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tname = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tcodec = mxCodecRegistry.codecs[name];\n\t\t\t\n\t\t\t// Registers a new default codec for the given constructor\n\t\t\t// if no codec has been previously defined.\n\t\t\tif (codec == null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tcodec = new mxObjectCodec(new ctor());\n\t\t\t\t\tmxCodecRegistry.register(codec);\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn codec;\n\t}\n\n};\n\n__mxOutput.mxCodecRegistry = typeof mxCodecRegistry !== 'undefined' ? mxCodecRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCodec\n *\n * XML codec for JavaScript object graphs. See <mxObjectCodec> for a\n * description of the general encoding/decoding scheme. This class uses the\n * codecs registered in <mxCodecRegistry> for encoding/decoding each object.\n * \n * References:\n * \n * In order to resolve references, especially forward references, the mxCodec\n * constructor must be given the document that contains the referenced\n * elements.\n *\n * Examples:\n *\n * The following code is used to encode a graph model.\n *\n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = mxUtils.getXml(result);\n * (end)\n * \n * Example:\n * \n * Using the code below, an XML document is decoded into an existing model. The\n * document may be obtained using one of the functions in mxUtils for loading\n * an XML file, eg. <mxUtils.get>, or using <mxUtils.parseXml> for parsing an\n * XML string.\n * \n * (code)\n * var doc = mxUtils.parseXml(xmlString);\n * var codec = new mxCodec(doc);\n * codec.decode(doc.documentElement, graph.getModel());\n * (end)\n * \n * Example:\n * \n * This example demonstrates parsing a list of isolated cells into an existing\n * graph model. Note that the cells do not have a parent reference so they can\n * be added anywhere in the cell hierarchy after parsing.\n * \n * (code)\n * var xml = '<root><mxCell id=\"2\" value=\"Hello,\" vertex=\"1\"><mxGeometry x=\"20\" y=\"20\" width=\"80\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"3\" value=\"World!\" vertex=\"1\"><mxGeometry x=\"200\" y=\"150\" width=\"80\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"4\" value=\"\" edge=\"1\" source=\"2\" target=\"3\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root>';\n * var doc = mxUtils.parseXml(xml);\n * var codec = new mxCodec(doc);\n * var elt = doc.documentElement.firstChild;\n * var cells = [];\n * \n * while (elt != null)\n * {\n *   cells.push(codec.decode(elt));\n *   elt = elt.nextSibling;\n * }\n * \n * graph.addCells(cells);\n * (end)\n * \n * Example:\n * \n * Using the following code, the selection cells of a graph are encoded and the\n * output is displayed in a dialog box.\n * \n * (code)\n * var enc = new mxCodec();\n * var cells = graph.getSelectionCells();\n * mxUtils.alert(mxUtils.getPrettyXml(enc.encode(cells)));\n * (end)\n * \n * Newlines in the XML can be converted to <br>, in which case a '<br>' argument\n * must be passed to <mxUtils.getXml> as the second argument.\n * \n * Debugging:\n * \n * For debugging I/O you can use the following code to get the sequence of\n * encoded objects:\n * \n * (code)\n * var oldEncode = mxCodec.prototype.encode;\n * mxCodec.prototype.encode = function(obj)\n * {\n *   mxLog.show();\n *   mxLog.debug('mxCodec.encode: obj='+mxUtils.getFunctionName(obj.constructor));\n *   \n *   return oldEncode.apply(this, arguments);\n * };\n * (end)\n * \n * Note that the I/O system adds object codecs for new object automatically. For\n * decoding those objects, the constructor should be written as follows:\n * \n * (code)\n * var MyObj = function(name)\n * {\n *   // ...\n * };\n * (end)\n * \n * Constructor: mxCodec\n *\n * Constructs an XML encoder/decoder for the specified\n * owner document.\n *\n * Parameters:\n *\n * document - Optional XML document that contains the data.\n * If no document is specified then a new document is created\n * using <mxUtils.createXmlDocument>.\n */\nfunction mxCodec(document)\n{\n\tthis.document = document || mxUtils.createXmlDocument();\n\tthis.objects = [];\n};\n\n/**\n * Variable: document\n *\n * The owner document of the codec.\n */\nmxCodec.prototype.document = null;\n\n/**\n * Variable: objects\n *\n * Maps from IDs to objects.\n */\nmxCodec.prototype.objects = null;\n\n/**\n * Variable: elements\n * \n * Lookup table for resolving IDs to elements.\n */\nmxCodec.prototype.elements = null;\n\n/**\n * Variable: encodeDefaults\n *\n * Specifies if default values should be encoded. Default is false.\n */\nmxCodec.prototype.encodeDefaults = false;\n\n\n/**\n * Function: putObject\n * \n * Assoiates the given object with the given ID and returns the given object.\n * \n * Parameters\n * \n * id - ID for the object to be associated with.\n * obj - Object to be associated with the ID.\n */\nmxCodec.prototype.putObject = function(id, obj)\n{\n\tthis.objects[id] = obj;\n\t\n\treturn obj;\n};\n\n/**\n * Function: getObject\n *\n * Returns the decoded object for the element with the specified ID in\n * <document>. If the object is not known then <lookup> is used to find an\n * object. If no object is found, then the element with the respective ID\n * from the document is parsed using <decode>.\n */\nmxCodec.prototype.getObject = function(id)\n{\n\tvar obj = null;\n\n\tif (id != null)\n\t{\n\t\tobj = this.objects[id];\n\t\t\n\t\tif (obj == null)\n\t\t{\n\t\t\tobj = this.lookup(id);\n\t\t\t\n\t\t\tif (obj == null)\n\t\t\t{\n\t\t\t\tvar node = this.getElementById(id);\n\t\t\t\t\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tobj = this.decode(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn obj;\n};\n\n/**\n * Function: lookup\n *\n * Hook for subclassers to implement a custom lookup mechanism for cell IDs.\n * This implementation always returns null.\n *\n * Example:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.lookup = function(id)\n * {\n *   return model.getCell(id);\n * };\n * (end)\n *\n * Parameters:\n *\n * id - ID of the object to be returned.\n */\nmxCodec.prototype.lookup = function(id)\n{\n\treturn null;\n};\n\n/**\n * Function: getElementById\n *\n * Returns the element with the given ID from <document>.\n *\n * Parameters:\n *\n * id - String that contains the ID.\n */\nmxCodec.prototype.getElementById = function(id)\n{\n\tthis.updateElements();\n\t\n\treturn this.elements[id];\n};\n\n/**\n * Function: updateElements\n *\n * Returns the element with the given ID from <document>.\n *\n * Parameters:\n *\n * id - String that contains the ID.\n */\nmxCodec.prototype.updateElements = function()\n{\n\tif (this.elements == null)\n\t{\n\t\tthis.elements = new Object();\n\t\t\n\t\tif (this.document.documentElement != null)\n\t\t{\n\t\t\tthis.addElement(this.document.documentElement);\n\t\t}\n\t}\n};\n\n/**\n * Function: addElement\n *\n * Adds the given element to <elements> if it has an ID.\n */\nmxCodec.prototype.addElement = function(node)\n{\n\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tvar id = node.getAttribute('id');\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tif (this.elements[id] == null)\n\t\t\t{\n\t\t\t\tthis.elements[id] = node;\n\t\t\t}\n\t\t\telse if (this.elements[id] != node)\n\t\t\t{\n\t\t\t\tthrow new Error(id + ': Duplicate ID');\n\t\t\t}\n\t\t}\n\t}\n\t\n\tnode = node.firstChild;\n\t\n\twhile (node != null)\n\t{\n\t\tthis.addElement(node);\n\t\tnode = node.nextSibling;\n\t}\n};\n\n/**\n * Function: getId\n *\n * Returns the ID of the specified object. This implementation\n * calls <reference> first and if that returns null handles\n * the object as an <mxCell> by returning their IDs using\n * <mxCell.getId>. If no ID exists for the given cell, then\n * an on-the-fly ID is generated using <mxCellPath.create>.\n *\n * Parameters:\n *\n * obj - Object to return the ID for.\n */\nmxCodec.prototype.getId = function(obj)\n{\n\tvar id = null;\n\t\n\tif (obj != null)\n\t{\n\t\tid = this.reference(obj);\n\t\t\n\t\tif (id == null && obj instanceof mxCell)\n\t\t{\n\t\t\tid = obj.getId();\n\t\t\t\n\t\t\tif (id == null)\n\t\t\t{\n\t\t\t\t// Uses an on-the-fly Id\n\t\t\t\tid = mxCellPath.create(obj);\n\t\t\t\t\n\t\t\t\tif (id.length == 0)\n\t\t\t\t{\n\t\t\t\t\tid = 'root';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn id;\n};\n\n/**\n * Function: reference\n *\n * Hook for subclassers to implement a custom method\n * for retrieving IDs from objects. This implementation\n * always returns null.\n *\n * Example:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.reference = function(obj)\n * {\n *   return obj.getCustomId();\n * };\n * (end)\n *\n * Parameters:\n *\n * obj - Object whose ID should be returned.\n */\nmxCodec.prototype.reference = function(obj)\n{\n\treturn null;\n};\n\n/**\n * Function: encode\n *\n * Encodes the specified object and returns the resulting\n * XML node.\n *\n * Parameters:\n *\n * obj - Object to be encoded. \n */\nmxCodec.prototype.encode = function(obj)\n{\n\tvar node = null;\n\t\n\tif (obj != null && obj.constructor != null)\n\t{\n\t\tvar enc = mxCodecRegistry.getCodec(obj.constructor);\n\t\t\n\t\tif (enc != null)\n\t\t{\n\t\t\tnode = enc.encode(this, obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxUtils.isNode(obj))\n\t\t\t{\n\t\t\t\tnode = mxUtils.importNode(this.document, obj, true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t    \t\tmxLog.warn('mxCodec.encode: No codec for ' + mxUtils.getFunctionName(obj.constructor));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: decode\n *\n * Decodes the given XML node. The optional \"into\"\n * argument specifies an existing object to be\n * used. If no object is given, then a new instance\n * is created using the constructor from the codec.\n *\n * The function returns the passed in object or\n * the new instance if no object was given.\n *\n * Parameters:\n *\n * node - XML node to be decoded.\n * into - Optional object to be decodec into.\n */\nmxCodec.prototype.decode = function(node, into)\n{\n\tthis.updateElements();\n\tvar obj = null;\n\t\n\tif (node != null && node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tvar ctor = null;\n\t\t\n\t\ttry\n\t\t{\n\t\t\tctor = window[node.nodeName];\n\t\t}\n\t\tcatch (err)\n\t\t{\n\t\t\t// ignore\n\t\t}\n\t\t\n\t\tvar dec = mxCodecRegistry.getCodec(ctor);\n\t\t\n\t\tif (dec != null)\n\t\t{\n\t\t\tobj = dec.decode(this, node, into);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tobj = node.cloneNode(true);\n\t\t\tobj.removeAttribute('as');\n\t\t}\n\t}\n\t\n\treturn obj;\n};\n\n/**\n * Function: encodeCell\n *\n * Encoding of cell hierarchies is built-into the core, but\n * is a higher-level function that needs to be explicitely\n * used by the respective object encoders (eg. <mxModelCodec>,\n * <mxChildChangeCodec> and <mxRootChangeCodec>). This\n * implementation writes the given cell and its children as a\n * (flat) sequence into the given node. The children are not\n * encoded if the optional includeChildren is false. The\n * function is in charge of adding the result into the\n * given node and has no return value.\n *\n * Parameters:\n *\n * cell - <mxCell> to be encoded.\n * node - Parent XML node to add the encoded cell into.\n * includeChildren - Optional boolean indicating if the\n * function should include all descendents. Default is true. \n */\nmxCodec.prototype.encodeCell = function(cell, node, includeChildren)\n{\n\tnode.appendChild(this.encode(cell));\n\t\n\tif (includeChildren == null || includeChildren)\n\t{\n\t\tvar childCount = cell.getChildCount();\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.encodeCell(cell.getChildAt(i), node);\n\t\t}\n\t}\n};\n\n/**\n * Function: isCellCodec\n * \n * Returns true if the given codec is a cell codec. This uses\n * <mxCellCodec.isCellCodec> to check if the codec is of the\n * given type.\n */\nmxCodec.prototype.isCellCodec = function(codec)\n{\n\tif (codec != null && typeof(codec.isCellCodec) == 'function')\n\t{\n\t\treturn codec.isCellCodec();\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: decodeCell\n *\n * Decodes cells that have been encoded using inversion, ie.\n * where the user object is the enclosing node in the XML,\n * and restores the group and graph structure in the cells.\n * Returns a new <mxCell> instance that represents the\n * given node.\n *\n * Parameters:\n *\n * node - XML node that contains the cell data.\n * restoreStructures - Optional boolean indicating whether\n * the graph structure should be restored by calling insert\n * and insertEdge on the parent and terminals, respectively.\n * Default is true.\n */\nmxCodec.prototype.decodeCell = function(node, restoreStructures)\n{\n\trestoreStructures = (restoreStructures != null) ? restoreStructures : true;\n\tvar cell = null;\n\t\n\tif (node != null && node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\t// Tries to find a codec for the given node name. If that does\n\t\t// not return a codec then the node is the user object (an XML node\n\t\t// that contains the mxCell, aka inversion).\n\t\tvar decoder = mxCodecRegistry.getCodec(node.nodeName);\n\t\t\n\t\t// Tries to find the codec for the cell inside the user object.\n\t\t// This assumes all node names inside the user object are either\n\t\t// not registered or they correspond to a class for cells.\n\t\tif (!this.isCellCodec(decoder))\n\t\t{\n\t\t\tvar child = node.firstChild;\n\t\t\t\n\t\t\twhile (child != null && !this.isCellCodec(decoder))\n\t\t\t{\n\t\t\t\tdecoder = mxCodecRegistry.getCodec(child.nodeName);\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!this.isCellCodec(decoder))\n\t\t{\n\t\t\tdecoder = mxCodecRegistry.getCodec(mxCell);\n\t\t}\n\n\t\tcell = decoder.decode(this, node);\n\t\t\n\t\tif (restoreStructures)\n\t\t{\n\t\t\tthis.insertIntoGraph(cell);\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: insertIntoGraph\n *\n * Inserts the given cell into its parent and terminal cells.\n */\nmxCodec.prototype.insertIntoGraph = function(cell)\n{\n\tvar parent = cell.parent;\n\tvar source = cell.getTerminal(true);\n\tvar target = cell.getTerminal(false);\n\n\t// Fixes possible inconsistencies during insert into graph\n\tcell.setTerminal(null, false);\n\tcell.setTerminal(null, true);\n\tcell.parent = null;\n\t\n\tif (parent != null)\n\t{\n\t\tif (parent == cell)\n\t\t{\n\t\t\tthrow new Error(parent.id + ': Self Reference');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparent.insert(cell);\n\t\t}\n\t}\n\n\tif (source != null)\n\t{\n\t\tsource.insertEdge(cell, true);\n\t}\n\n\tif (target != null)\n\t{\n\t\ttarget.insertEdge(cell, false);\n\t}\n};\n\n/**\n * Function: setAttribute\n *\n * Sets the attribute on the specified node to value. This is a\n * helper method that makes sure the attribute and value arguments\n * are not null.\n *\n * Parameters:\n *\n * node - XML node to set the attribute for.\n * attributes - Attributename to be set.\n * value - New value of the attribute.\n */\nmxCodec.prototype.setAttribute = function(node, attribute, value)\n{\n\tif (attribute != null && value != null)\n\t{\n\t\tnode.setAttribute(attribute, value);\n\t}\n};\n\n__mxOutput.mxCodec = typeof mxCodec !== 'undefined' ? mxCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxObjectCodec\n *\n * Generic codec for JavaScript objects that implements a mapping between\n * JavaScript objects and XML nodes that maps each field or element to an\n * attribute or child node, and vice versa.\n * \n * Atomic Values:\n * \n * Consider the following example.\n * \n * (code)\n * var obj = new Object();\n * obj.foo = \"Foo\";\n * obj.bar = \"Bar\";\n * (end)\n * \n * This object is encoded into an XML node using the following.\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(obj);\n * (end)\n * \n * The output of the encoding may be viewed using <mxLog> as follows.\n * \n * (code)\n * mxLog.show();\n * mxLog.debug(mxUtils.getPrettyXml(node));\n * (end)\n * \n * Finally, the result of the encoding looks as follows.\n * \n * (code)\n * <Object foo=\"Foo\" bar=\"Bar\"/>\n * (end)\n * \n * In the above output, the foo and bar fields have been mapped to attributes\n * with the same names, and the name of the constructor was used for the\n * nodename.\n * \n * Booleans:\n *\n * Since booleans are numbers in JavaScript, all boolean values are encoded\n * into 1 for true and 0 for false. The decoder also accepts the string true\n * and false for boolean values.\n * \n * Objects:\n * \n * The above scheme is applied to all atomic fields, that is, to all non-object\n * fields of an object. For object fields, a child node is created with a\n * special attribute that contains the fieldname. This special attribute is\n * called \"as\" and hence, as is a reserved word that should not be used for a\n * fieldname.\n * \n * Consider the following example where foo is an object and bar is an atomic\n * property of foo.\n * \n * (code)\n * var obj = {foo: {bar: \"Bar\"}};\n * (end)\n * \n * This will be mapped to the following XML structure by mxObjectCodec.\n * \n * (code)\n * <Object>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Object>\n * (end)\n * \n * In the above output, the inner Object node contains the as-attribute that\n * specifies the fieldname in the enclosing object. That is, the field foo was\n * mapped to a child node with an as-attribute that has the value foo.\n * \n * Arrays:\n * \n * Arrays are special objects that are either associative, in which case each\n * key, value pair is treated like a field where the key is the fieldname, or\n * they are a sequence of atomic values and objects, which is mapped to a\n * sequence of child nodes. For object elements, the above scheme is applied\n * without the use of the special as-attribute for creating each child. For\n * atomic elements, a special add-node is created with the value stored in the\n * value-attribute.\n * \n * For example, the following array contains one atomic value and one object\n * with a field called bar. Furthermore it contains two associative entries\n * called bar with an atomic value, and foo with an object value.\n * \n * (code)\n * var obj = [\"Bar\", {bar: \"Bar\"}];\n * obj[\"bar\"] = \"Bar\";\n * obj[\"foo\"] = {bar: \"Bar\"};\n * (end)\n * \n * This array is represented by the following XML nodes.\n * \n * (code)\n * <Array bar=\"Bar\">\n *   <add value=\"Bar\"/>\n *   <Object bar=\"Bar\"/>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Array>\n * (end)\n * \n * The Array node name is the name of the constructor. The additional\n * as-attribute in the last child contains the key of the associative entry,\n * whereas the second last child is part of the array sequence and does not\n * have an as-attribute.\n * \n * References:\n * \n * Objects may be represented as child nodes or attributes with ID values,\n * which are used to lookup the object in a table within <mxCodec>. The\n * <isReference> function is in charge of deciding if a specific field should\n * be encoded as a reference or not. Its default implementation returns true if\n * the fieldname is in <idrefs>, an array of strings that is used to configure\n * the <mxObjectCodec>.\n * \n * Using this approach, the mapping does not guarantee that the referenced\n * object itself exists in the document. The fields that are encoded as\n * references must be carefully chosen to make sure all referenced objects\n * exist in the document, or may be resolved by some other means if necessary.\n * \n * For example, in the case of the graph model all cells are stored in a tree\n * whose root is referenced by the model's root field. A tree is a structure\n * that is well suited for an XML representation, however, the additional edges\n * in the graph model have a reference to a source and target cell, which are\n * also contained in the tree. To handle this case, the source and target cell\n * of an edge are treated as references, whereas the children are treated as\n * objects. Since all cells are contained in the tree and no edge references a\n * source or target outside the tree, this setup makes sure all referenced\n * objects are contained in the document.\n * \n * In the case of a tree structure we must further avoid infinite recursion by\n * ignoring the parent reference of each child. This is done by returning true\n * in <isExcluded>, whose default implementation uses the array of excluded\n * fieldnames passed to the mxObjectCodec constructor.\n * \n * References are only used for cells in mxGraph. For defining other\n * referencable object types, the codec must be able to work out the ID of an\n * object. This is done by implementing <mxCodec.reference>. For decoding a\n * reference, the XML node with the respective id-attribute is fetched from the\n * document, decoded, and stored in a lookup table for later reference. For\n * looking up external objects, <mxCodec.lookup> may be implemented.\n * \n * Expressions:\n * \n * For decoding JavaScript expressions, the add-node may be used with a text\n * content that contains the JavaScript expression. For example, the following\n * creates a field called foo in the enclosing object and assigns it the value\n * of <mxConstants.ALIGN_LEFT>.\n * \n * (code)\n * <Object>\n *   <add as=\"foo\">mxConstants.ALIGN_LEFT</add>\n * </Object>\n * (end)\n * \n * The resulting object has a field called foo with the value \"left\". Its XML\n * representation looks as follows.\n * \n * (code)\n * <Object foo=\"left\"/>\n * (end)\n * \n * This means the expression is evaluated at decoding time and the result of\n * the evaluation is stored in the respective field. Valid expressions are all\n * JavaScript expressions, including function definitions, which are mapped to\n * functions on the resulting object.\n * \n * Expressions are only evaluated if <allowEval> is true.\n * \n * Constructor: mxObjectCodec\n *\n * Constructs a new codec for the specified template object.\n * The variables in the optional exclude array are ignored by\n * the codec. Variables in the optional idrefs array are\n * turned into references in the XML. The optional mapping\n * may be used to map from variable names to XML attributes.\n * The argument is created as follows:\n *\n * (code)\n * var mapping = new Object();\n * mapping['variableName'] = 'attribute-name';\n * (end)\n *\n * Parameters:\n *\n * template - Prototypical instance of the object to be\n * encoded/decoded.\n * exclude - Optional array of fieldnames to be ignored.\n * idrefs - Optional array of fieldnames to be converted to/from\n * references.\n * mapping - Optional mapping from field- to attributenames.\n */\nfunction mxObjectCodec(template, exclude, idrefs, mapping)\n{\n\tthis.template = template;\n\t\n\tthis.exclude = (exclude != null) ? exclude : [];\n\tthis.idrefs = (idrefs != null) ? idrefs : [];\n\tthis.mapping = (mapping != null) ? mapping : [];\n\t\n\tthis.reverse = new Object();\n\t\n\tfor (var i in this.mapping)\n\t{\n\t\tthis.reverse[this.mapping[i]] = i;\n\t}\n};\n\n/**\n * Variable: allowEval\n *\n * Static global switch that specifies if expressions in arrays are allowed.\n * Default is false. NOTE: Enabling this carries a possible security risk.\n */\nmxObjectCodec.allowEval = false;\n\n/**\n * Variable: template\n *\n * Holds the template object associated with this codec.\n */\nmxObjectCodec.prototype.template = null;\n\n/**\n * Variable: exclude\n *\n * Array containing the variable names that should be\n * ignored by the codec.\n */\nmxObjectCodec.prototype.exclude = null;\n\n/**\n * Variable: idrefs\n *\n * Array containing the variable names that should be\n * turned into or converted from references. See\n * <mxCodec.getId> and <mxCodec.getObject>.\n */\nmxObjectCodec.prototype.idrefs = null;\n\n/**\n * Variable: mapping\n *\n * Maps from from fieldnames to XML attribute names.\n */\nmxObjectCodec.prototype.mapping = null;\n\n/**\n * Variable: reverse\n *\n * Maps from from XML attribute names to fieldnames.\n */\nmxObjectCodec.prototype.reverse = null;\n\n/**\n * Function: getName\n * \n * Returns the name used for the nodenames and lookup of the codec when\n * classes are encoded and nodes are decoded. For classes to work with\n * this the codec registry automatically adds an alias for the classname\n * if that is different than what this returns. The default implementation\n * returns the classname of the template class.\n */\nmxObjectCodec.prototype.getName = function()\n{\n\treturn mxUtils.getFunctionName(this.template.constructor);\n};\n\n/**\n * Function: cloneTemplate\n * \n * Returns a new instance of the template for this codec.\n */\nmxObjectCodec.prototype.cloneTemplate = function()\n{\n\treturn new this.template.constructor();\n};\n\n/**\n * Function: getFieldName\n * \n * Returns the fieldname for the given attributename.\n * Looks up the value in the <reverse> mapping or returns\n * the input if there is no reverse mapping for the\n * given name.\n */\nmxObjectCodec.prototype.getFieldName = function(attributename)\n{\n\tif (attributename != null)\n\t{\n\t\tvar mapped = this.reverse[attributename];\n\t\t\n\t\tif (mapped != null)\n\t\t{\n\t\t\tattributename = mapped;\n\t\t}\n\t}\n\t\n\treturn attributename;\n};\n\n/**\n * Function: getAttributeName\n * \n * Returns the attributename for the given fieldname.\n * Looks up the value in the <mapping> or returns\n * the input if there is no mapping for the\n * given name.\n */\nmxObjectCodec.prototype.getAttributeName = function(fieldname)\n{\n\tif (fieldname != null)\n\t{\n\t\tvar mapped = this.mapping[fieldname];\n\t\t\n\t\tif (mapped != null)\n\t\t{\n\t\t\tfieldname = mapped;\n\t\t}\n\t}\n\t\n\treturn fieldname;\n};\n\n/**\n * Function: isExcluded\n *\n * Returns true if the given attribute is to be ignored by the codec. This\n * implementation returns true if the given fieldname is in <exclude> or\n * if the fieldname equals <mxObjectIdentity.FIELD_NAME>.\n *\n * Parameters:\n *\n * obj - Object instance that contains the field.\n * attr - Fieldname of the field.\n * value - Value of the field.\n * write - Boolean indicating if the field is being encoded or decoded.\n * Write is true if the field is being encoded, else it is being decoded.\n */\nmxObjectCodec.prototype.isExcluded = function(obj, attr, value, write)\n{\n\treturn attr == mxObjectIdentity.FIELD_NAME ||\n\t\tmxUtils.indexOf(this.exclude, attr) >= 0;\n};\n\n/**\n * Function: isReference\n *\n * Returns true if the given fieldname is to be treated\n * as a textual reference (ID). This implementation returns\n * true if the given fieldname is in <idrefs>.\n *\n * Parameters:\n *\n * obj - Object instance that contains the field.\n * attr - Fieldname of the field.\n * value - Value of the field. \n * write - Boolean indicating if the field is being encoded or decoded.\n * Write is true if the field is being encoded, else it is being decoded.\n */\nmxObjectCodec.prototype.isReference = function(obj, attr, value, write)\n{\n\treturn mxUtils.indexOf(this.idrefs, attr) >= 0;\n};\n\n/**\n * Function: encode\n *\n * Encodes the specified object and returns a node\n * representing then given object. Calls <beforeEncode>\n * after creating the node and <afterEncode> with the \n * resulting node after processing.\n *\n * Enc is a reference to the calling encoder. It is used\n * to encode complex objects and create references.\n *\n * This implementation encodes all variables of an\n * object according to the following rules:\n *\n * - If the variable name is in <exclude> then it is ignored.\n * - If the variable name is in <idrefs> then <mxCodec.getId>\n * is used to replace the object with its ID.\n * - The variable name is mapped using <mapping>.\n * - If obj is an array and the variable name is numeric\n * (ie. an index) then it is not encoded.\n * - If the value is an object, then the codec is used to\n * create a child node with the variable name encoded into\n * the \"as\" attribute.\n * - Else, if <encodeDefaults> is true or the value differs\n * from the template value, then ...\n * - ... if obj is not an array, then the value is mapped to\n * an attribute.\n * - ... else if obj is an array, the value is mapped to an\n * add child with a value attribute or a text child node,\n * if the value is a function.\n *\n * If no ID exists for a variable in <idrefs> or if an object\n * cannot be encoded, a warning is issued using <mxLog.warn>.\n *\n * Returns the resulting XML node that represents the given\n * object.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n */\nmxObjectCodec.prototype.encode = function(enc, obj)\n{\n\tvar node = enc.document.createElement(this.getName());\n\t\n\tobj = this.beforeEncode(enc, obj, node);\n\tthis.encodeObject(enc, obj, node);\n\t\n\treturn this.afterEncode(enc, obj, node);\n};\n\t\n/**\n * Function: encodeObject\n *\n * Encodes the value of each member in then given obj into the given node using\n * <encodeValue>.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node that contains the encoded object.\n */\nmxObjectCodec.prototype.encodeObject = function(enc, obj, node)\n{\n\tenc.setAttribute(node, 'id', enc.getId(obj));\n\t\n    for (var i in obj)\n    {\n\t\tvar name = i;\n\t\tvar value = obj[name];\n\t\t\n    \tif (value != null && !this.isExcluded(obj, name, value, true))\n    \t{\n    \t\tif (mxUtils.isInteger(name))\n    \t\t{\n    \t\t\tname = null;\n    \t\t}\n    \t\t\n    \t\tthis.encodeValue(enc, obj, name, value, node);\n    \t}\n    }\n};\n\n/**\n * Function: encodeValue\n * \n * Converts the given value according to the mappings\n * and id-refs in this codec and uses <writeAttribute>\n * to write the attribute into the given node.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object whose property is going to be encoded.\n * name - XML node that contains the encoded object.\n * value - Value of the property to be encoded.\n * node - XML node that contains the encoded object.\n */\nmxObjectCodec.prototype.encodeValue = function(enc, obj, name, value, node)\n{\n\tif (value != null)\n\t{\n\t\tif (this.isReference(obj, name, value, true))\n\t\t{\n\t\t\tvar tmp = enc.getId(value);\n\t\t\t\n\t\t\tif (tmp == null)\n\t\t\t{\n\t\t    \tmxLog.warn('mxObjectCodec.encode: No ID for ' +\n\t\t    \t\tthis.getName() + '.' + name + '=' + value);\n\t\t    \treturn; // exit\n\t\t    }\n\t\t    \n\t\t    value = tmp;\n\t\t}\n\n\t\tvar defaultValue = this.template[name];\n\t\t\n\t\t// Checks if the value is a default value and\n\t\t// the name is correct\n\t\tif (name == null || enc.encodeDefaults || defaultValue != value)\n\t\t{\n\t\t\tname = this.getAttributeName(name);\n\t\t\tthis.writeAttribute(enc, obj, name, value, node);\t\n\t\t}\n\t}\n};\n\n/**\n * Function: writeAttribute\n * \n * Writes the given value into node using <writePrimitiveAttribute>\n * or <writeComplexAttribute> depending on the type of the value.\n */\nmxObjectCodec.prototype.writeAttribute = function(enc, obj, name, value, node)\n{\n\tif (typeof(value) != 'object' /* primitive type */)\n\t{\n\t\tthis.writePrimitiveAttribute(enc, obj, name, value, node);\n\t}\n\telse /* complex type */\n\t{\n\t\tthis.writeComplexAttribute(enc, obj, name, value, node);\n\t}\n};\n\n/**\n * Function: writePrimitiveAttribute\n * \n * Writes the given value as an attribute of the given node.\n */\nmxObjectCodec.prototype.writePrimitiveAttribute = function(enc, obj, name, value, node)\n{\n\tvalue = this.convertAttributeToXml(enc, obj, name, value, node);\n\t\n\tif (name == null)\n\t{\n\t\tvar child = enc.document.createElement('add');\n\t\t\n\t\tif (typeof(value) == 'function')\n\t\t{\n    \t\tchild.appendChild(enc.document.createTextNode(value));\n    \t}\n    \telse\n    \t{\n    \t\tenc.setAttribute(child, 'value', value);\n    \t}\n    \t\n\t\tnode.appendChild(child);\n\t}\n\telse if (typeof(value) != 'function')\n\t{\n    \tenc.setAttribute(node, name, value);\n\t}\t\t\n};\n\t\n/**\n * Function: writeComplexAttribute\n * \n * Writes the given value as a child node of the given node.\n */\nmxObjectCodec.prototype.writeComplexAttribute = function(enc, obj, name, value, node)\n{\n\tvar child = enc.encode(value);\n\t\n\tif (child != null)\n\t{\n\t\tif (name != null)\n\t\t{\n    \t\tchild.setAttribute('as', name);\n    \t}\n    \t\n    \tnode.appendChild(child);\n\t}\n\telse\n\t{\n\t\tmxLog.warn('mxObjectCodec.encode: No node for ' + this.getName() + '.' + name + ': ' + value);\n\t}\n};\n\n/**\n * Function: convertAttributeToXml\n * \n * Converts true to \"1\" and false to \"0\" is <isBooleanAttribute> returns true.\n * All other values are not converted.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Objec to convert the attribute for.\n * name - Name of the attribute to be converted.\n * value - Value to be converted.\n */\nmxObjectCodec.prototype.convertAttributeToXml = function(enc, obj, name, value)\n{\n\t// Makes sure to encode boolean values as numeric values\n\tif (this.isBooleanAttribute(enc, obj, name, value))\n\t{\t\n\t\t// Checks if the value is true (do not use the value as is, because\n\t\t// this would check if the value is not null, so 0 would be true)\n\t\tvalue = (value == true) ? '1' : '0';\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: isBooleanAttribute\n * \n * Returns true if the given object attribute is a boolean value.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Objec to convert the attribute for.\n * name - Name of the attribute to be converted.\n * value - Value of the attribute to be converted.\n */\nmxObjectCodec.prototype.isBooleanAttribute = function(enc, obj, name, value)\n{\n\treturn (typeof(value.length) == 'undefined' && (value == true || value == false));\n};\n\n/**\n * Function: convertAttributeFromXml\n * \n * Converts booleans and numeric values to the respective types. Values are\n * numeric if <isNumericAttribute> returns true.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be converted.\n * obj - Objec to convert the attribute for.\n */\nmxObjectCodec.prototype.convertAttributeFromXml = function(dec, attr, obj)\n{\n\tvar value = attr.value;\n\t\n\tif (this.isNumericAttribute(dec, attr, obj))\n\t{\n\t\tvalue = parseFloat(value);\n\t\t\n\t\tif (isNaN(value) || !isFinite(value))\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: isNumericAttribute\n * \n * Returns true if the given XML attribute is or should be a numeric value.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be converted.\n * obj - Objec to convert the attribute for.\n */\nmxObjectCodec.prototype.isNumericAttribute = function(dec, attr, obj)\n{\n\t// Handles known numeric attributes for generic objects\n\tvar result = (obj.constructor == mxGeometry &&\n\t\t(attr.name == 'x' || attr.name == 'y' ||\n\t\tattr.name == 'width' || attr.name == 'height')) ||\n\t\t(obj.constructor == mxPoint &&\n\t\t(attr.name == 'x' || attr.name == 'y')) ||\n\t\tmxUtils.isNumeric(attr.value);\n\t\n\treturn result;\n};\n\n/**\n * Function: beforeEncode\n *\n * Hook for subclassers to pre-process the object before\n * encoding. This returns the input object. The return\n * value of this function is used in <encode> to perform\n * the default encoding into the given node.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node to encode the object into.\n */\nmxObjectCodec.prototype.beforeEncode = function(enc, obj, node)\n{\n\treturn obj;\n};\n\n/**\n * Function: afterEncode\n *\n * Hook for subclassers to post-process the node\n * for the given object after encoding and return the\n * post-processed node. This implementation returns \n * the input node. The return value of this method\n * is returned to the encoder from <encode>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node that represents the default encoding.\n */\nmxObjectCodec.prototype.afterEncode = function(enc, obj, node)\n{\n\treturn node;\n};\n\n/**\n * Function: decode\n *\n * Parses the given node into the object or returns a new object\n * representing the given node.\n *\n * Dec is a reference to the calling decoder. It is used to decode\n * complex objects and resolve references.\n *\n * If a node has an id attribute then the object cache is checked for the\n * object. If the object is not yet in the cache then it is constructed\n * using the constructor of <template> and cached in <mxCodec.objects>.\n *\n * This implementation decodes all attributes and childs of a node\n * according to the following rules:\n *\n * - If the variable name is in <exclude> or if the attribute name is \"id\"\n * or \"as\" then it is ignored.\n * - If the variable name is in <idrefs> then <mxCodec.getObject> is used\n * to replace the reference with an object.\n * - The variable name is mapped using a reverse <mapping>.\n * - If the value has a child node, then the codec is used to create a\n * child object with the variable name taken from the \"as\" attribute.\n * - If the object is an array and the variable name is empty then the\n * value or child object is appended to the array.\n * - If an add child has no value or the object is not an array then\n * the child text content is evaluated using <mxUtils.eval>.\n *\n * For add nodes where the object is not an array and the variable name\n * is defined, the default mechanism is used, allowing to override/add\n * methods as follows:\n *\n * (code)\n * <Object>\n *   <add as=\"hello\"><![CDATA[\n *     function(arg1) {\n *       mxUtils.alert('Hello '+arg1);\n *     }\n *   ]]></add>\n * </Object>\n * (end) \n *\n * If no object exists for an ID in <idrefs> a warning is issued\n * using <mxLog.warn>.\n *\n * Returns the resulting object that represents the given XML node\n * or the object given to the method as the into parameter.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * into - Optional objec to encode the node into.\n */\nmxObjectCodec.prototype.decode = function(dec, node, into)\n{\n\tvar id = node.getAttribute('id');\n\tvar obj = dec.objects[id];\n\t\n\tif (obj == null)\n\t{\n\t\tobj = into || this.cloneTemplate();\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.putObject(id, obj);\n\t\t}\n\t}\n\t\n\tnode = this.beforeDecode(dec, node, obj);\n\tthis.decodeNode(dec, node, obj);\n\t\n    return this.afterDecode(dec, node, obj);\n};\t\n\n/**\n * Function: decodeNode\n * \n * Calls <decodeAttributes> and <decodeChildren> for the given node.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeNode = function(dec, node, obj)\n{\n\tif (node != null)\n\t{\n\t\tthis.decodeAttributes(dec, node, obj);\n\t\tthis.decodeChildren(dec, node, obj);\n\t}\n};\n\n/**\n * Function: decodeAttributes\n * \n * Decodes all attributes of the given node using <decodeAttribute>.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeAttributes = function(dec, node, obj)\n{\n\tvar attrs = node.attributes;\n\t\n\tif (attrs != null)\n\t{\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\tthis.decodeAttribute(dec, attrs[i], obj);\n\t\t}\n\t}\n};\n\n/**\n * Function: isIgnoredAttribute\n * \n * Returns true if the given attribute should be ignored. This implementation\n * returns true if the attribute name is \"as\" or \"id\".\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be decoded.\n * obj - Objec to encode the attribute into.\n */\t\nmxObjectCodec.prototype.isIgnoredAttribute = function(dec, attr, obj)\n{\n\treturn attr.nodeName == 'as' || attr.nodeName == 'id';\n};\n\n/**\n * Function: decodeAttribute\n * \n * Reads the given attribute into the specified object.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be decoded.\n * obj - Objec to encode the attribute into.\n */\t\nmxObjectCodec.prototype.decodeAttribute = function(dec, attr, obj)\n{\n\tif (!this.isIgnoredAttribute(dec, attr, obj))\n\t{\n\t\tvar name = attr.nodeName;\n\t\t\n\t\t// Converts the string true and false to their boolean values.\n\t\t// This may require an additional check on the obj to see if\n\t\t// the existing field is a boolean value or uninitialized, in\n\t\t// which case we may want to convert true and false to a string.\n\t\tvar value = this.convertAttributeFromXml(dec, attr, obj);\n\t\tvar fieldname = this.getFieldName(name);\n\t\t\n\t\tif (this.isReference(obj, fieldname, value, false))\n\t\t{\n\t\t\tvar tmp = dec.getObject(value);\n\t\t\t\n\t\t\tif (tmp == null)\n\t\t\t{\n\t\t    \tmxLog.warn('mxObjectCodec.decode: No object for ' +\n\t\t    \t\tthis.getName() + '.' + name + '=' + value);\n\t\t    \treturn; // exit\n\t\t    }\n\t\t    \n\t\t    value = tmp;\n\t\t}\n\n\t\tif (!this.isExcluded(obj, name, value, false))\n\t\t{\n\t\t\t//mxLog.debug(mxUtils.getFunctionName(obj.constructor)+'.'+name+'='+value);\n\t\t\tobj[name] = value;\n\t\t}\n\t}\n};\n\n/**\n * Function: decodeChildren\n * \n * Decodes all children of the given node using <decodeChild>.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeChildren = function(dec, node, obj)\n{\n\tvar child = node.firstChild;\n\t\n\twhile (child != null)\n\t{\n\t\tvar tmp = child.nextSibling;\n\t\t\n\t\tif (child.nodeType == mxConstants.NODETYPE_ELEMENT &&\n\t\t\t!this.processInclude(dec, child, obj))\n\t\t{\n\t\t\tthis.decodeChild(dec, child, obj);\n\t\t}\n\t\t\n\t\tchild = tmp;\n\t}\n};\n\n/**\n * Function: decodeChild\n * \n * Reads the specified child into the given object.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * child - XML child element to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeChild = function(dec, child, obj)\n{\n\tvar fieldname = this.getFieldName(child.getAttribute('as'));\n\t\n\tif (fieldname == null || !this.isExcluded(obj, fieldname, child, false))\n\t{\n\t\tvar template = this.getFieldTemplate(obj, fieldname, child);\n\t\tvar value = null;\n\t\t\n\t\tif (child.nodeName == 'add')\n\t\t{\n\t\t\tvalue = child.getAttribute('value');\n\t\t\t\n\t\t\tif (value == null && mxObjectCodec.allowEval)\n\t\t\t{\n\t\t\t\tvalue = mxUtils.eval(mxUtils.getTextContent(child));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvalue = dec.decode(child, template);\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tthis.addObjectValue(obj, fieldname, value, template);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tthrow new Error(e.message + ' for ' + child.nodeName);\n\t\t}\n\t}\n};\n\n/**\n * Function: getFieldTemplate\n * \n * Returns the template instance for the given field. This returns the\n * value of the field, null if the value is an array or an empty collection\n * if the value is a collection. The value is then used to populate the\n * field for a new instance. For strongly typed languages it may be\n * required to override this to return the correct collection instance\n * based on the encoded child.\n */\t\nmxObjectCodec.prototype.getFieldTemplate = function(obj, fieldname, child)\n{\n\tvar template = obj[fieldname];\n\t\n\t// Non-empty arrays are replaced completely\n    if (template instanceof Array && template.length > 0)\n    {\n        template = null;\n    }\n    \n    return template;\n};\n\n/**\n * Function: addObjectValue\n * \n * Sets the decoded child node as a value of the given object. If the\n * object is a map, then the value is added with the given fieldname as a\n * key. If the fieldname is not empty, then setFieldValue is called or\n * else, if the object is a collection, the value is added to the\n * collection. For strongly typed languages it may be required to\n * override this with the correct code to add an entry to an object.\n */\t\nmxObjectCodec.prototype.addObjectValue = function(obj, fieldname, value, template)\n{\n\tif (value != null && value != template)\n\t{\n\t\tif (fieldname != null && fieldname.length > 0)\n\t\t{\n\t\t\tobj[fieldname] = value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tobj.push(value);\n\t\t}\n\t\t//mxLog.debug('Decoded '+mxUtils.getFunctionName(obj.constructor)+'.'+fieldname+': '+value);\n\t}\n};\n\n/**\n * Function: processInclude\n *\n * Returns true if the given node is an include directive and\n * executes the include by decoding the XML document. Returns\n * false if the given node is not an include directive.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the encoding/decoding process.\n * node - XML node to be checked.\n * into - Optional object to pass-thru to the codec.\n */\nmxObjectCodec.prototype.processInclude = function(dec, node, into)\n{\n\tif (node.nodeName == 'include')\n\t{\n\t\tvar name = node.getAttribute('name');\n\t\t\n\t\tif (name != null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar xml = mxUtils.load(name).getDocumentElement();\n\t\t\t\t\n\t\t\t\tif (xml != null)\n\t\t\t\t{\n\t\t\t\t\tdec.decode(xml, into);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: beforeDecode\n *\n * Hook for subclassers to pre-process the node for\n * the specified object and return the node to be\n * used for further processing by <decode>.\n * The object is created based on the template in the \n * calling method and is never null. This implementation\n * returns the input node. The return value of this\n * function is used in <decode> to perform\n * the default decoding into the given object.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Object to encode the node into.\n */\nmxObjectCodec.prototype.beforeDecode = function(dec, node, obj)\n{\n\treturn node;\n};\n\n/**\n * Function: afterDecode\n *\n * Hook for subclassers to post-process the object after\n * decoding. This implementation returns the given object\n * without any changes. The return value of this method\n * is returned to the decoder from <decode>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * node - XML node to be decoded.\n * obj - Object that represents the default decoding.\n */\nmxObjectCodec.prototype.afterDecode = function(dec, node, obj)\n{\n\treturn obj;\n};\n\n__mxOutput.mxObjectCodec = typeof mxObjectCodec !== 'undefined' ? mxObjectCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxCellCodec\n\t *\n\t * Codec for <mxCell>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - children\n\t * - edges\n\t * - overlays\n\t * - mxTransient\n\t *\n\t * Reference Fields:\n\t *\n\t * - parent\n\t * - source\n\t * - target\n\t * \n\t * Transient fields can be added using the following code:\n\t * \n\t * mxCodecRegistry.getCodec(mxCell).exclude.push('name_of_field');\n\t * \n\t * To subclass <mxCell>, replace the template and add an alias as\n\t * follows.\n\t * \n\t * (code)\n\t * function CustomCell(value, geometry, style)\n\t * {\n\t *   mxCell.apply(this, arguments);\n\t * }\n\t * \n\t * mxUtils.extend(CustomCell, mxCell);\n\t * \n\t * mxCodecRegistry.getCodec(mxCell).template = new CustomCell();\n\t * mxCodecRegistry.addAlias('CustomCell', 'mxCell');\n\t * (end)\n\t */\n\tvar codec = new mxObjectCodec(new mxCell(),\n\t\t['children', 'edges', 'overlays', 'mxTransient'],\n\t\t['parent', 'source', 'target']);\n\n\t/**\n\t * Function: isCellCodec\n\t *\n\t * Returns true since this is a cell codec.\n\t */\n\tcodec.isCellCodec = function()\n\t{\n\t\treturn true;\n\t};\n\n\t/**\n\t * Overidden to disable conversion of value to number.\n\t */\n\tcodec.isNumericAttribute = function(dec, attr, obj)\n\t{\n\t\treturn attr.nodeName !== 'value' && mxObjectCodec.prototype.isNumericAttribute.apply(this, arguments);\n\t};\n\t\n\t/**\n\t * Function: isExcluded\n\t *\n\t * Excludes user objects that are XML nodes.\n\t */ \n\tcodec.isExcluded = function(obj, attr, value, isWrite)\n\t{\n\t\treturn mxObjectCodec.prototype.isExcluded.apply(this, arguments) ||\n\t\t\t(isWrite && attr == 'value' &&\n\t\t\tvalue.nodeType == mxConstants.NODETYPE_ELEMENT);\n\t};\n\t\n\t/**\n\t * Function: afterEncode\n\t *\n\t * Encodes an <mxCell> and wraps the XML up inside the\n\t * XML of the user object (inversion).\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tif (obj.value != null && obj.value.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Wraps the graphical annotation up in the user object (inversion)\n\t\t\t// by putting the result of the default encoding into a clone of the\n\t\t\t// user object (node type 1) and returning this cloned user object.\n\t\t\tvar tmp = node;\n\t\t\tnode = mxUtils.importNode(enc.document, obj.value, true);\n\t\t\tnode.appendChild(tmp);\n\t\t\t\n\t\t\t// Moves the id attribute to the outermost XML node, namely the\n\t\t\t// node which denotes the object boundaries in the file.\n\t\t\tvar id = tmp.getAttribute('id');\n\t\t\tnode.setAttribute('id', id);\n\t\t\ttmp.removeAttribute('id');\n\t\t}\n\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes an <mxCell> and uses the enclosing XML node as\n\t * the user object for the cell (inversion).\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tvar inner = node.cloneNode(true);\n\t\tvar classname = this.getName();\n\t\t\n\t\tif (node.nodeName != classname)\n\t\t{\n\t\t\t// Passes the inner graphical annotation node to the\n\t\t\t// object codec for further processing of the cell.\n\t\t\tvar tmp = node.getElementsByTagName(classname)[0];\n\t\t\t\n\t\t\tif (tmp != null && tmp.parentNode == node)\n\t\t\t{\n\t\t\t\tmxUtils.removeWhitespace(tmp, true);\n\t\t\t\tmxUtils.removeWhitespace(tmp, false);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\tinner = tmp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinner = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Creates the user object out of the XML node\n\t\t\tobj.value = node.cloneNode(true);\n\t\t\tvar id = obj.value.getAttribute('id');\n\t\t\t\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tobj.setId(id);\n\t\t\t\tobj.value.removeAttribute('id');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Uses ID from XML file as ID for cell in model\n\t\t\tobj.setId(node.getAttribute('id'));\n\t\t}\n\t\t\t\n\t\t// Preprocesses and removes all Id-references in order to use the\n\t\t// correct encoder (this) for the known references to cells (all).\n\t\tif (inner != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.idrefs.length; i++)\n\t\t\t{\n\t\t\t\tvar attr = this.idrefs[i];\n\t\t\t\tvar ref = inner.getAttribute(attr);\n\t\t\t\t\n\t\t\t\tif (ref != null)\n\t\t\t\t{\n\t\t\t\t\tinner.removeAttribute(attr);\n\t\t\t\t\tvar object = dec.objects[ref] || dec.lookup(ref);\n\t\t\t\t\t\n\t\t\t\t\tif (object == null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Needs to decode forward reference\n\t\t\t\t\t\tvar element = dec.getElementById(ref);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (element != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar decoder = mxCodecRegistry.codecs[element.nodeName] || this;\n\t\t\t\t\t\t\tobject = decoder.decode(dec, element);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tobj[attr] = object;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn inner;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxCellCodec = typeof mxCellCodec !== 'undefined' ? mxCellCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxModelCodec\n\t *\n\t * Codec for <mxGraphModel>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphModel());\n\n\t/**\n\t * Function: encodeObject\n\t *\n\t * Encodes the given <mxGraphModel> by writing a (flat) XML sequence of\n\t * cell nodes as produced by the <mxCellCodec>. The sequence is\n\t * wrapped-up in a node with the name root.\n\t */\n\tcodec.encodeObject = function(enc, obj, node)\n\t{\n\t\tvar rootNode = enc.document.createElement('root');\n\t\tenc.encodeCell(obj.getRoot(), rootNode);\n\t\tnode.appendChild(rootNode);\n\t};\n\n\t/**\n\t * Function: decodeChild\n\t * \n\t * Overrides decode child to handle special child nodes.\n\t */\t\n\tcodec.decodeChild = function(dec, child, obj)\n\t{\n\t\tif (child.nodeName == 'root')\n\t\t{\n\t\t\tthis.decodeRoot(dec, child, obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxObjectCodec.prototype.decodeChild.apply(this, arguments);\n\t\t}\n\t};\n\n\t/**\n\t * Function: decodeRoot\n\t *\n\t * Reads the cells into the graph model. All cells\n\t * are children of the root element in the node.\n\t */\n\tcodec.decodeRoot = function(dec, root, model)\n\t{\n\t\tvar rootCell = null;\n\t\tvar tmp = root.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tvar cell = dec.decodeCell(tmp);\n\t\t\t\n\t\t\tif (cell != null && cell.getParent() == null)\n\t\t\t{\n\t\t\t\trootCell = cell;\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\n\t\t// Sets the root on the model if one has been decoded\n\t\tif (rootCell != null)\n\t\t{\n\t\t\tmodel.setRoot(rootCell);\n\t\t}\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxModelCodec = typeof mxModelCodec !== 'undefined' ? mxModelCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxRootChangeCodec\n\t *\n\t * Codec for <mxRootChange>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - root\n\t */\n\tvar codec = new mxObjectCodec(new mxRootChange(),\n\t\t['model', 'previous', 'root']);\n\n\t/**\n\t * Function: onEncode\n\t *\n\t * Encodes the child recursively.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tenc.encodeCell(obj.root, node);\n\t\t\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the optional children as cells\n\t * using the respective decoder.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\t\t\t\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.root = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\t\t\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\t\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.root;\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxRootChangeCodec = typeof mxRootChangeCodec !== 'undefined' ? mxRootChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxChildChangeCodec\n\t *\n\t * Codec for <mxChildChange>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - previousIndex\n\t * - child\n\t *\n\t * Reference Fields:\n\t *\n\t * - parent\n\t */\n\tvar codec = new mxObjectCodec(new mxChildChange(),\n\t\t['model', 'child', 'previousIndex'],\n\t\t['parent', 'previous']);\n\n\t/**\n\t * Function: isReference\n\t *\n\t * Returns true for the child attribute if the child\n\t * cell had a previous parent or if we're reading the\n\t * child as an attribute rather than a child node, in\n\t * which case it's always a reference.\n\t */\n\tcodec.isReference = function(obj, attr, value, isWrite)\n\t{\n\t\tif (attr == 'child' && (!isWrite || obj.model.contains(obj.previous)))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn mxUtils.indexOf(this.idrefs, attr) >= 0;\n\t};\n\n\t/**\n\t * Function: isExcluded\n\t *\n\t * Excludes references to parent or previous if not in the model.\n\t */\n  \tcodec.isExcluded = function(obj, attr, value, write)\n  \t{\n  \t\treturn mxObjectCodec.prototype.isExcluded.apply(this, arguments) ||\n  \t\t\t(write && value != null && (attr == 'previous' ||\n  \t\t\tattr == 'parent') && !obj.model.contains(value));\n  \t};\n  \t\n\t/**\n\t * Function: afterEncode\n\t *\n\t * Encodes the child recusively and adds the result\n\t * to the given node.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tif (this.isReference(obj, 'child', obj.child, true))\n\t\t{\n\t\t\t// Encodes as reference (id)\n\t\t\tnode.setAttribute('child', enc.getId(obj.child));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// At this point, the encoder is no longer able to know which cells\n\t\t\t// are new, so we have to encode the complete cell hierarchy and\n\t\t\t// ignore the ones that are already there at decoding time. Note:\n\t\t\t// This can only be resolved by moving the notify event into the\n\t\t\t// execute of the edit.\n\t\t\tenc.encodeCell(obj.child, node);\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the any child nodes as using the respective\n\t * codec from the registry.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\t\t\t\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.child = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\t\t\t\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\t\t\t\t\n\t\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\t// Ignores all existing cells because those do not need to\n\t\t\t\t\t// be re-inserted into the model. Since the encoded version\n\t\t\t\t\t// of these cells contains the new parent, this would leave\n\t\t\t\t\t// to an inconsistent state on the model (ie. a parent\n\t\t\t\t\t// change without a call to parentForCellChanged).\n\t\t\t\t\tvar id = tmp.getAttribute('id');\n\t\t\t\t\t\n\t\t\t\t\tif (dec.lookup(id) == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar childRef = node.getAttribute('child');\n\t\t\tobj.child = dec.getObject(childRef);\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\t\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores object state in the child change.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Cells are decoded here after a complete transaction so the previous\n\t\t// parent must be restored on the cell for the case where the cell was\n\t\t// added. This is needed for the local model to identify the cell as a\n\t\t// new cell and register the ID.\n        if (obj.child != null)\n        {\n            if (obj.child.parent != null && obj.previous != null &&\n                obj.child.parent != obj.previous)\n            {\n                obj.previous = obj.child.parent;\n            }\n\n            obj.child.parent = obj.previous;\n            obj.previous = obj.parent;\n            obj.previousIndex = obj.index;\n        }\n\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxChildChangeCodec = typeof mxChildChangeCodec !== 'undefined' ? mxChildChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxTerminalChangeCodec\n\t *\n\t * Codec for <mxTerminalChange>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t *\n\t * Reference Fields:\n\t *\n\t * - cell\n\t * - terminal\n\t */\n\tvar codec = new mxObjectCodec(new mxTerminalChange(),\n\t\t['model', 'previous'], ['cell', 'terminal']);\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.terminal;\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxTerminalChangeCodec = typeof mxTerminalChangeCodec !== 'undefined' ? mxTerminalChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGenericChangeCodec\n *\n * Codec for <mxValueChange>s, <mxStyleChange>s, <mxGeometryChange>s,\n * <mxCollapseChange>s and <mxVisibleChange>s. This class is created\n * and registered dynamically at load time and used implicitly\n * via <mxCodec> and the <mxCodecRegistry>.\n *\n * Transient Fields:\n *\n * - model\n * - previous\n *\n * Reference Fields:\n *\n * - cell\n * \n * Constructor: mxGenericChangeCodec\n *\n * Factory function that creates a <mxObjectCodec> for\n * the specified change and fieldname.\n *\n * Parameters:\n *\n * obj - An instance of the change object.\n * variable - The fieldname for the change data.\n */\nvar mxGenericChangeCodec = function(obj, variable)\n{\n\tvar codec = new mxObjectCodec(obj,  ['model', 'previous'], ['cell']);\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Allows forward references in sessions. This is a workaround\n\t\t// for the sequence of edits in mxGraph.moveCells and cellsAdded.\n\t\tif (mxUtils.isNode(obj.cell))\n\t\t{\n\t\t\tobj.cell = dec.decodeCell(obj.cell, false);\n\t\t}\n\n\t\tobj.previous = obj[variable];\n\n\t\treturn obj;\n\t};\n\t\n\treturn codec;\n};\n\n// Registers the codecs\nmxCodecRegistry.register(mxGenericChangeCodec(new mxValueChange(), 'value'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxStyleChange(), 'style'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxGeometryChange(), 'geometry'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxCollapseChange(), 'collapsed'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxVisibleChange(), 'visible'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxCellAttributeChange(), 'value'));\n\n__mxOutput.mxGenericChangeCodec = typeof mxGenericChangeCodec !== 'undefined' ? mxGenericChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphCodec\n\t *\n\t * Codec for <mxGraph>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - graphListeners\n\t * - eventListeners\n\t * - view\n\t * - container\n\t * - cellRenderer\n\t * - editor\n\t * - selection\n\t */\n\treturn new mxObjectCodec(new mxGraph(),\n\t\t['graphListeners', 'eventListeners', 'view', 'container',\n\t\t'cellRenderer', 'editor', 'selection']);\n\n}());\n\n__mxOutput.mxGraphCodec = typeof mxGraphCodec !== 'undefined' ? mxGraphCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphViewCodec\n\t *\n\t * Custom encoder for <mxGraphView>s. This class is created\n\t * and registered dynamically at load time and used implicitly via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only writes views\n\t * into a XML format that can be used to create an image for\n\t * the graph, that is, it contains absolute coordinates with\n\t * computed perimeters, edge styles and cell styles.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphView());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes the given <mxGraphView> using <encodeCell>\n\t * starting at the model's root. This returns the\n\t * top-level graph node of the recursive encoding.\n\t */\n\tcodec.encode = function(enc, view)\n\t{\n\t\treturn this.encodeCell(enc, view,\n\t\t\tview.graph.getModel().getRoot());\n\t};\n\n\t/**\n\t * Function: encodeCell\n\t *\n\t * Recursively encodes the specifed cell. Uses layer\n\t * as the default nodename. If the cell's parent is\n\t * null, then graph is used for the nodename. If\n\t * <mxGraphModel.isEdge> returns true for the cell,\n\t * then edge is used for the nodename, else if\n\t * <mxGraphModel.isVertex> returns true for the cell,\n\t * then vertex is used for the nodename.\n\t *\n\t * <mxGraph.getLabel> is used to create the label\n\t * attribute for the cell. For graph nodes and vertices\n\t * the bounds are encoded into x, y, width and height.\n\t * For edges the points are encoded into a points\n\t * attribute as a space-separated list of comma-separated\n\t * coordinate pairs (eg. x0,y0 x1,y1 ... xn,yn). All\n\t * values from the cell style are added as attribute\n\t * values to the node. \n\t */\n\tcodec.encodeCell = function(enc, view, cell)\n\t{\n\t\tvar model = view.graph.getModel();\n\t\tvar state = view.getState(cell);\n\t\tvar parent = model.getParent(cell);\n\t\t\n\t\tif (parent == null || state != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\tvar geo = view.graph.getCellGeometry(cell);\n\t\t\tvar name = null;\n\t\t\t\n\t\t\tif (parent == model.getRoot())\n\t\t\t{\n\t\t\t\tname = 'layer';\n\t\t\t}\n\t\t\telse if (parent == null)\n\t\t\t{\n\t\t\t\tname = 'graph';\n\t\t\t}\n\t\t\telse if (model.isEdge(cell))\n\t\t\t{\n\t\t\t\tname = 'edge';\n\t\t\t}\n\t\t\telse if (childCount > 0 && geo != null)\n\t\t\t{\n\t\t\t\tname = 'group';\n\t\t\t}\n\t\t\telse if (model.isVertex(cell))\n\t\t\t{\n\t\t\t\tname = 'vertex';\n\t\t\t}\n\t\t\t\n\t\t\tif (name != null)\n\t\t\t{\n\t\t\t\tvar node = enc.document.createElement(name);\n\t\t\t\tvar lab = view.graph.getLabel(cell);\n\t\t\t\t\n\t\t\t\tif (lab != null)\n\t\t\t\t{\n\t\t\t\t\tnode.setAttribute('label', view.graph.getLabel(cell));\n\t\t\t\t\t\n\t\t\t\t\tif (view.graph.isHtmlLabel(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('html', true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tif (parent == null)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = view.getGraphBounds();\n\t\t\t\t\t\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(bounds.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(bounds.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(bounds.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(bounds.height));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tnode.setAttribute('scale', view.scale);\n\t\t\t\t}\n\t\t\t\telse if (state != null && geo != null)\n\t\t\t\t{\n\t\t\t\t\t// Writes each key, value in the style pair to an attribute\n\t\t\t\t    for (var i in state.style)\n\t\t\t\t    {\n\t\t\t\t    \tvar value = state.style[i];\n\t\t\n\t\t\t\t    \t// Tries to turn objects and functions into strings\n\t\t\t\t\t    if (typeof(value) == 'function' &&\n\t\t\t\t\t\t\ttypeof(value) == 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t    \tvalue = mxStyleRegistry.getName(value);\n\t\t\t\t        }\n\t\t\t\t    \t\n\t\t\t\t    \tif (value != null &&\n\t\t\t\t    \t\ttypeof(value) != 'function' &&\n\t\t\t\t\t\t\ttypeof(value) != 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute(i, value);\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t    \n\t\t\t\t\tvar abs = state.absolutePoints;\n\t\t\t\t\t\n\t\t\t\t\t// Writes the list of points into one attribute\n\t\t\t\t\tif (abs != null && abs.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pts = Math.round(abs[0].x) + ',' + Math.round(abs[0].y);\n\t\t\n\t\t\t\t\t\tfor (var i=1; i<abs.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpts += ' ' + Math.round(abs[i].x) + ',' +\n\t\t\t\t\t\t\t\tMath.round(abs[i].y);\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\tnode.setAttribute('points', pts);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Writes the bounds into 4 attributes\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(state.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(state.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(state.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(state.height));\t\t\t\t\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tvar offset = state.absoluteOffset;\n\t\t\t\t\t\n\t\t\t\t\t// Writes the offset into 2 attributes\n\t\t\t\t\tif (offset != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (offset.x != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dx', Math.round(offset.x));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (offset.y != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dy', Math.round(offset.y));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tfor (var i=0; i<childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar childNode = this.encodeCell(enc,\n\t\t\t\t\t\t\tview, model.getChildAt(cell, i));\n\t\t\t\t\t\n\t\t\t\t\tif (childNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.appendChild(childNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxGraphViewCodec = typeof mxGraphViewCodec !== 'undefined' ? mxGraphViewCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheetCodec\n *\n * Codec for <mxStylesheet>s. This class is created and registered\n * dynamically at load time and used implicitly via <mxCodec>\n * and the <mxCodecRegistry>.\n */\nvar mxStylesheetCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxStylesheet());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes a stylesheet. See <decode> for a description of the\n\t * format.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\tvar node = enc.document.createElement(this.getName());\n\t\t\n\t\tfor (var i in obj.styles)\n\t\t{\n\t\t\tvar style = obj.styles[i];\n\t\t\tvar styleNode = enc.document.createElement('add');\n\t\t\t\n\t\t\tif (i != null)\n\t\t\t{\n\t\t\t\tstyleNode.setAttribute('as', i);\n\t\t\t\t\n\t\t\t\tfor (var j in style)\n\t\t\t\t{\n\t\t\t\t\tvar value = this.getStringValue(j, style[j]);\n\t\t\t\t\t\n\t\t\t\t\tif (value != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar entry = enc.document.createElement('add');\n\t\t\t\t\t\tentry.setAttribute('value', value);\n\t\t\t\t\t\tentry.setAttribute('as', j);\n\t\t\t\t\t\tstyleNode.appendChild(entry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (styleNode.childNodes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tnode.appendChild(styleNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t    return node;\n\t};\n\n\t/**\n\t * Function: getStringValue\n\t *\n\t * Returns the string for encoding the given value.\n\t */\n\tcodec.getStringValue = function(key, value)\n\t{\n\t\tvar type = typeof(value);\n\t\t\n\t\tif (type == 'function')\n\t\t{\n\t\t\tvalue = mxStyleRegistry.getName(value);\n\t\t}\n\t\telse if (type == 'object')\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new style.\n\t *\n\t * Attributes:\n\t *\n\t * as - Name of the style.\n\t * extend - Name of the style to inherit from.\n\t *\n\t * Each node contains another sequence of add and remove nodes with the following\n\t * attributes:\n\t *\n\t * as - Name of the style (see <mxConstants>).\n\t * value - Value for the style.\n\t *\n\t * Instead of the value-attribute, one can put Javascript expressions into\n\t * the node as follows if <mxStylesheetCodec.allowEval> is true:\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t *\n\t * A remove node will remove the entry with the name given in the as-attribute\n\t * from the style.\n\t * \n\t * Example:\n\t *\n\t * (code)\n\t * <mxStylesheet as=\"stylesheet\">\n\t *   <add as=\"text\">\n\t *     <add as=\"fontSize\" value=\"12\"/>\n\t *   </add>\n\t *   <add as=\"defaultVertex\" extend=\"text\">\n\t *     <add as=\"shape\" value=\"rectangle\"/>\n\t *   </add>\n\t * </mxStylesheet>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar obj = into || new this.template.constructor();\n\t\tvar id = node.getAttribute('id');\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.objects[id] = obj;\n\t\t}\n\t\t\n\t\tnode = node.firstChild;\n\t\t\n\t\twhile (node != null)\n\t\t{\n\t\t\tif (!this.processInclude(dec, node, obj) && node.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\n\t\t\t\tif (as != null)\n\t\t\t\t{\n\t\t\t\t\tvar extend = node.getAttribute('extend');\n\t\t\t\t\tvar style = (extend != null) ? mxUtils.clone(obj.styles[extend]) : null;\n\t\t\t\t\t\n\t\t\t\t\tif (style == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (extend != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxLog.warn('mxStylesheetCodec.decode: stylesheet ' +\n\t\t\t\t\t\t\t\textend + ' not found to extend');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tstyle = new Object();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar entry = node.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (entry != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (entry.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t \tvar key = entry.getAttribute('as');\n\t\t\t\t\t\t \t\n\t\t\t\t\t\t \tif (entry.nodeName == 'add')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \tvar text = mxUtils.getTextContent(entry);\n\t\t\t\t\t\t\t \tvar value = null;\n\t\t\t\t\t\t\t \t\n\t\t\t\t\t\t\t \tif (text != null && text.length > 0 && mxStylesheetCodec.allowEval)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = mxUtils.eval(text);\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t\t \telse\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = entry.getAttribute('value');\n\t\t\t\t\t\t\t \t\t\n\t\t\t\t\t\t\t \t\tif (mxUtils.isNumeric(value))\n\t\t\t\t\t\t\t \t\t{\n\t\t\t\t\t\t\t\t\t\tvalue = parseFloat(value);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t \t}\n\n\t\t\t\t\t\t\t \tif (value != null)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tstyle[key] = value;\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \telse if (entry.nodeName == 'remove')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t \t\tdelete style[key];\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tentry = entry.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tobj.putCellStyle(as, style);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.nextSibling;\n\t\t}\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input.\n */\nmxStylesheetCodec.allowEval = true;\n\n__mxOutput.mxStylesheetCodec = typeof mxStylesheetCodec !== 'undefined' ? mxStylesheetCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultKeyHandlerCodec\n\t *\n\t * Custom codec for configuring <mxDefaultKeyHandler>s. This class is created\n\t * and registered dynamically at load time and used implicitly via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing key handlers, it does not encode or create key handlers.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultKeyHandler());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Binds a keystroke to an actionname.\n\t *\n\t * Attributes:\n\t *\n\t * as - Keycode.\n\t * action - Actionname to execute in editor.\n\t * control - Optional boolean indicating if\n\t * \t\tthe control key must be pressed.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <mxDefaultKeyHandler as=\"keyHandler\">\n\t *   <add as=\"88\" control=\"true\" action=\"cut\"/>\n\t *   <add as=\"67\" control=\"true\" action=\"copy\"/>\n\t *   <add as=\"86\" control=\"true\" action=\"paste\"/>\n\t * </mxDefaultKeyHandler>\n\t * (end)\n\t *\n\t * The keycodes are for the x, c and v keys.\n\t *\n\t * See also: <mxDefaultKeyHandler.bindAction>,\n\t * http://www.js-examples.com/page/tutorials__key_codes.html\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (!this.processInclude(dec, node, into) &&\n\t\t\t\t\tnode.nodeName == 'add')\n\t\t\t\t{\n\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\tvar control = node.getAttribute('control');\n\t\t\t\t\t\n\t\t\t\t\tinto.bindAction(as, action, control);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxDefaultKeyHandlerCodec = typeof mxDefaultKeyHandlerCodec !== 'undefined' ? mxDefaultKeyHandlerCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbarCodec\n *\n * Custom codec for configuring <mxDefaultToolbar>s. This class is created\n * and registered dynamically at load time and used implicitly via\n * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n * data for existing toolbars handlers, it does not encode or create toolbars.\n */\nvar mxDefaultToolbarCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxDefaultToolbar());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new item to the toolbar. See below for attributes.\n\t * separator - Adds a vertical separator. No attributes.\n\t * hr - Adds a horizontal separator. No attributes.\n\t * br - Adds a linefeed. No attributes. \n\t *\n\t * Attributes:\n\t *\n\t * as - Resource key for the label.\n\t * action - Name of the action to execute in enclosing editor.\n\t * mode - Modename (see below).\n\t * template - Template name for cell insertion.\n\t * style - Optional style to override the template style.\n\t * icon - Icon (relative/absolute URL).\n\t * pressedIcon - Optional icon for pressed state (relative/absolute URL).\n\t * id - Optional ID to be used for the created DOM element.\n\t * toggle - Optional 0 or 1 to disable toggling of the element. Default is\n\t * 1 (true).\n\t *\n\t * The action, mode and template attributes are mutually exclusive. The\n\t * style can only be used with the template attribute. The add node may\n\t * contain another sequence of add nodes with as and action attributes\n\t * to create a combo box in the toolbar. If the icon is specified then\n\t * a list of the child node is expected to have its template attribute\n\t * set and the action is ignored instead.\n\t * \n\t * Nodes with a specified template may define a function to be used for\n\t * inserting the cloned template into the graph. Here is an example of such\n\t * a node:\n\t * \n\t * (code)\n\t * <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"><![CDATA[\n\t *   function (editor, cell, evt, targetCell)\n\t *   {\n\t *     var pt = mxUtils.convertPoint(\n\t *       editor.graph.container, mxEvent.getClientX(evt),\n\t *         mxEvent.getClientY(evt));\n\t *     return editor.addVertex(targetCell, cell, pt.x, pt.y);\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t * \n\t * In the above function, editor is the enclosing <mxEditor> instance, cell\n\t * is the clone of the template, evt is the mouse event that represents the\n\t * drop and targetCell is the cell under the mousepointer where the drop\n\t * occurred. The targetCell is retrieved using <mxGraph.getCellAt>.\n\t *\n\t * Futhermore, nodes with the mode attribute may define a function to\n\t * be executed upon selection of the respective toolbar icon. In the\n\t * example below, the default edge style is set when this specific\n\t * connect-mode is activated:\n\t *\n\t * (code)\n\t * <add as=\"connect\" mode=\"connect\"><![CDATA[\n\t *   function (editor)\n\t *   {\n\t *     if (editor.defaultEdge != null)\n\t *     {\n\t *       editor.defaultEdge.style = 'straightEdge';\n\t *     }\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t * \n\t * Both functions require <mxDefaultToolbarCodec.allowEval> to be set to true.\n\t *\n\t * Modes:\n\t *\n\t * select - Left mouse button used for rubberband- & cell-selection.\n\t * connect - Allows connecting vertices by inserting new edges.\n\t * pan - Disables selection and switches to panning on the left button.\n\t *\n\t * Example:\n\t *\n\t * To add items to the toolbar:\n\t * \n\t * (code)\n\t * <mxDefaultToolbar as=\"toolbar\">\n\t *   <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n\t *   <br/><hr/>\n\t *   <add as=\"select\" mode=\"select\" icon=\"images/select.gif\"/>\n\t *   <add as=\"connect\" mode=\"connect\" icon=\"images/connect.gif\"/>\n\t * </mxDefaultToolbar>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\tif (!this.processInclude(dec, node, into))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (node.nodeName == 'separator')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.addSeparator();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'br')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addBreak();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'hr')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addLine();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'add')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\t\t\t\tvar icon = node.getAttribute('icon');\n\t\t\t\t\t\t\tvar pressedIcon = node.getAttribute('pressedIcon');\n\t\t\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\t\t\tvar mode = node.getAttribute('mode');\n\t\t\t\t\t\t\tvar template = node.getAttribute('template');\n\t\t\t\t\t\t\tvar toggle = node.getAttribute('toggle') != '0';\n\t\t\t\t\t\t\tvar text = mxUtils.getTextContent(node);\n\t\t\t\t\t\t\tvar elt = null;\n\n\t\t\t\t\t\t\tif (action != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telt = into.addItem(as, icon, action, pressedIcon);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (mode != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar funct = (mxDefaultToolbarCodec.allowEval) ? mxUtils.eval(text) : null;\n\t\t\t\t\t\t\t\telt = into.addMode(as, icon, mode, pressedIcon, funct);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (template != null || (text != null && text.length > 0))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar cell = editor.templates[template];\n\t\t\t\t\t\t\t\tvar style = node.getAttribute('style');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (cell != null && style != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcell = editor.graph.cloneCell(cell);\n\t\t\t\t\t\t\t\t\tcell.setStyle(style);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar insertFunction = null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (text != null && text.length > 0 && mxDefaultToolbarCodec.allowEval)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tinsertFunction = mxUtils.eval(text);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\telt = into.addPrototype(as, icon, cell, pressedIcon, insertFunction, toggle);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar children = mxUtils.getChildNodes(node);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (children.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (icon == null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar combo = into.addActionCombo(as);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(combo, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar act = child.getAttribute('action');\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addActionOption(combo, lab, act);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar select = null;\n\t\t\t\t\t\t\t\t\t\tvar create = function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar template = editor.templates[select.value];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (template != null)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar clone = template.clone();\n\t\t\t\t\t\t\t\t\t\t\t\tvar style = select.options[select.selectedIndex].cellStyle;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tif (style != null)\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tclone.setStyle(style);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn clone;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tmxLog.warn('Template '+template+' not found');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tvar img = into.addPrototype(as, icon, create, null, null, toggle);\n\t\t\t\t\t\t\t\t\t\tselect = into.addCombo();\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Selects the toolbar icon if a selection change\n\t\t\t\t\t\t\t\t\t\t// is made in the corresponding combobox.\n\t\t\t\t\t\t\t\t\t\tmxEvent.addListener(select, 'change', function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.selectMode(img, function(evt)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar pt = mxUtils.convertPoint(editor.graph.container,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn editor.addVertex(null, funct(), pt.x, pt.y);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.noReset = false;\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Adds the entries to the combobox\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(select, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar tmp = child.getAttribute('template');\n\t\t\t\t\t\t\t\t\t\t\t\tvar option = into.addOption(select, lab, tmp || template);\n\t\t\t\t\t\t\t\t\t\t\t\toption.cellStyle = child.getAttribute('style');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Assigns an ID to the created element to access it later.\n\t\t\t\t\t\t\tif (elt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar id = node.getAttribute('id');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (id != null && id.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\telt.setAttribute('id', id);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input\n */\nmxDefaultToolbarCodec.allowEval = true;\n\n__mxOutput.mxDefaultToolbarCodec = typeof mxDefaultToolbarCodec !== 'undefined' ? mxDefaultToolbarCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultPopupMenuCodec\n\t *\n\t * Custom codec for configuring <mxDefaultPopupMenu>s. This class is created\n\t * and registered dynamically at load time and used implicitly via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing popup menus, it does not encode or create menus. Note\n\t * that this codec only passes the configuration node to the popup menu,\n\t * which uses the config to dynamically create menus. See\n\t * <mxDefaultPopupMenu.createMenu>.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultPopupMenu());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Uses the given node as the config for <mxDefaultPopupMenu>.\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar inc = node.getElementsByTagName('include')[0];\n\t\t\n\t\tif (inc != null)\n\t\t{\n\t\t\tthis.processInclude(dec, inc, into);\n\t\t}\n\t\telse if (into != null)\n\t\t{\n\t\t\tinto.config = node;\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxDefaultPopupMenuCodec = typeof mxDefaultPopupMenuCodec !== 'undefined' ? mxDefaultPopupMenuCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxEditorCodec\n\t *\n\t * Codec for <mxEditor>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - modified\n\t * - lastSnapshot\n\t * - ignoredChanges\n\t * - undoManager\n\t * - graphContainer\n\t * - toolbarContainer\n\t */\n\tvar codec = new mxObjectCodec(new mxEditor(),\n\t\t['modified', 'lastSnapshot', 'ignoredChanges',\n\t\t'undoManager', 'graphContainer', 'toolbarContainer']);\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the ui-part of the configuration node by reading\n\t * a sequence of the following child nodes and attributes\n\t * and passes the control to the default decoding mechanism:\n\t *\n\t * Child Nodes:\n\t *\n\t * stylesheet - Adds a CSS stylesheet to the document.\n\t * resource - Adds the basename of a resource bundle.\n\t * add - Creates or configures a known UI element.\n\t *\n\t * These elements may appear in any order given that the\n\t * graph UI element is added before the toolbar element\n\t * (see Known Keys).\n\t *\n\t * Attributes:\n\t *\n\t * as - Key for the UI element (see below).\n\t * element - ID for the element in the document.\n\t * style - CSS style to be used for the element or window.\n\t * x - X coordinate for the new window.\n\t * y - Y coordinate for the new window.\n\t * width - Width for the new window.\n\t * height - Optional height for the new window.\n\t * name - Name of the stylesheet (absolute/relative URL).\n\t * basename - Basename of the resource bundle (see <mxResources>).\n\t *\n\t * The x, y, width and height attributes are used to create a new\n\t * <mxWindow> if the element attribute is not specified in an add\n\t * node. The name and basename are only used in the stylesheet and\n\t * resource nodes, respectively.\n\t *\n\t * Known Keys:\n\t *\n\t * graph - Main graph element (see <mxEditor.setGraphContainer>).\n\t * title - Title element (see <mxEditor.setTitleContainer>).\n\t * toolbar - Toolbar element (see <mxEditor.setToolbarContainer>).\n\t * status - Status bar element (see <mxEditor.setStatusContainer>).\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <ui>\n\t *   <stylesheet name=\"css/process.css\"/>\n\t *   <resource basename=\"resources/app\"/>\n\t *   <add as=\"graph\" element=\"graph\"\n\t *     style=\"left:70px;right:20px;top:20px;bottom:40px\"/>\n\t *   <add as=\"status\" element=\"status\"/>\n\t *   <add as=\"toolbar\" x=\"10\" y=\"20\" width=\"54\"/>\n\t * </ui>\n\t * (end)\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Assigns the specified templates for edges\n\t\tvar defaultEdge = node.getAttribute('defaultEdge');\n\t\t\n\t\tif (defaultEdge != null)\n\t\t{\n\t\t\tnode.removeAttribute('defaultEdge');\n\t\t\tobj.defaultEdge = obj.templates[defaultEdge];\n\t\t}\n\n\t\t// Assigns the specified templates for groups\n\t\tvar defaultGroup = node.getAttribute('defaultGroup');\n\t\t\n\t\tif (defaultGroup != null)\n\t\t{\n\t\t\tnode.removeAttribute('defaultGroup');\n\t\t\tobj.defaultGroup = obj.templates[defaultGroup];\n\t\t}\n\n\t\treturn obj;\n\t};\n\t\n\t/**\n\t * Function: decodeChild\n\t * \n\t * Overrides decode child to handle special child nodes.\n\t */\t\n\tcodec.decodeChild = function(dec, child, obj)\n\t{\n\t\tif (child.nodeName == 'Array')\n\t\t{\n\t\t\tvar role = child.getAttribute('as');\n\t\t\t\n\t\t\tif (role == 'templates')\n\t\t\t{\n\t\t\t\tthis.decodeTemplates(dec, child, obj);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse if (child.nodeName == 'ui')\n\t\t{\n\t\t\tthis.decodeUi(dec, child, obj);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxObjectCodec.prototype.decodeChild.apply(this, arguments);\n\t};\n\t\t\n\t/**\n\t * Function: decodeUi\n\t *\n\t * Decodes the ui elements from the given node.\n\t */\n\tcodec.decodeUi = function(dec, node, editor)\n\t{\n\t\tvar tmp = node.firstChild;\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = tmp.getAttribute('as');\n\t\t\t\tvar elt = tmp.getAttribute('element');\n\t\t\t\tvar style = tmp.getAttribute('style');\n\t\t\t\tvar element = null;\n\n\t\t\t\tif (elt != null)\n\t\t\t\t{\n\t\t\t\t\telement = document.getElementById(elt);\n\t\t\t\t\t\n\t\t\t\t\tif (element != null && style != null)\n\t\t\t\t\t{\n\t\t\t\t\t\telement.style.cssText += ';' + style;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar x = parseInt(tmp.getAttribute('x'));\n\t\t\t\t\tvar y = parseInt(tmp.getAttribute('y'));\n\t\t\t\t\tvar width = tmp.getAttribute('width');\n\t\t\t\t\tvar height = tmp.getAttribute('height');\n\n\t\t\t\t\t// Creates a new window around the element\n\t\t\t\t\telement = document.createElement('div');\n\t\t\t\t\telement.style.cssText = style;\n\t\t\t\t\t\n\t\t\t\t\tvar wnd = new mxWindow(mxResources.get(as) || as,\n\t\t\t\t\t\telement, x, y, width, height, false, true);\n\t\t\t\t\twnd.setVisible(true);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// TODO: Make more generic\n\t\t\t\tif (as == 'graph')\n\t\t\t\t{\n\t\t\t\t\teditor.setGraphContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'toolbar')\n\t\t\t\t{\n\t\t\t\t\teditor.setToolbarContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'title')\n\t\t\t\t{\n\t\t\t\t\teditor.setTitleContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'status')\n\t\t\t\t{\n\t\t\t\t\teditor.setStatusContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'map')\n\t\t\t\t{\n\t\t\t\t\teditor.setMapContainer(element);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (tmp.nodeName == 'resource')\n\t\t\t{\n\t\t\t\tmxResources.add(tmp.getAttribute('basename'));\n\t\t\t}\n\t\t\telse if (tmp.nodeName == 'stylesheet')\n\t\t\t{\n\t\t\t\tmxClient.link('stylesheet', tmp.getAttribute('name'));\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\t\n\t};\n\t\n\t/**\n\t * Function: decodeTemplates\n\t *\n\t * Decodes the cells from the given node as templates.\n\t */\n\tcodec.decodeTemplates = function(dec, node, editor)\n\t{\n\t\tif (editor.templates == null)\n\t\t{\n\t\t\teditor.templates = [];\n\t\t}\n\t\t\n\t\tvar children = mxUtils.getChildNodes(node);\n\t\tfor (var j=0; j<children.length; j++)\n\t\t{\n\t\t\tvar name = children[j].getAttribute('as');\n\t\t\tvar child = children[j].firstChild;\n\t\t\t\n\t\t\twhile (child != null && child.nodeType != 1)\n\t\t\t{\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\t\t\t\n\t\t\tif (child != null)\n\t\t\t{\n\t\t\t\t// LATER: Only single cells means you need\n\t\t\t\t// to group multiple cells within another\n\t\t\t\t// cell. This should be changed to support\n\t\t\t\t// arrays of cells, or the wrapper must\n\t\t\t\t// be automatically handled in this class.\n\t\t\t\teditor.templates[name] = dec.decodeCell(child);\n\t\t\t}\n\t\t}\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxEditorCodec = typeof mxEditorCodec !== 'undefined' ? mxEditorCodec : undefined;\n\nconst GRAPH_PADDING_RIGHT = 40;\nconst GRAPH_PADDING_TOP = 0;\nconst GRAPH_PADDING_BOTTOM = 80;\nconst GRAPH_PADDING_LEFT = 40;\nconst CELL_WIDTH = 80;\nconst CELL_HEIGHT = 80;\nconst STANDARD_NODE_DISTANCE = 173;\nconst IDEAL_LONG_LABEL_NODE_DISTANCE = 240;\nconst CELL_ICON_HEIGHT = 30;\nconst CELL_COST_HEIGHT = 15;\nconst MAX_ALLOWED_NODE_WIDTH = 200;\nconst MIN_ALLOWED_NODE_WIDTH = 80;\n\n// Setting this to 38 because SSMS truncates labels longer than 38 characters\nconst LABEL_LENGTH_LIMIT = 38;\n\nconst NODE_HEIGHT = 105;\nconst NODE_WIDTH = 100;\n\nclass PolygonRoot {\n    constructor(cell, fillColor, strokeColor, strokeWidth) {\n        this.cell = cell;\n        this.fillColor = fillColor;\n        this.strokeColor = strokeColor;\n        this.strokeWidth = strokeWidth;\n    }\n}\n\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\nclass GraphNodeLayoutHelper {\n    constructor() {\n        this.layoutPoints = [];\n    }\n\n    checkInvariant() {\n        var last = new Point(0, 0);\n\n        for (var i = 0; i < this.layoutPoints.length; i++) {\n            if (last.x > this.layoutPoints[i].x || last.Y > this.layoutPoints[i].y) {\n                console.log('Graph layout failed.');\n                // do not throw exception, in case of failure we render graph incorrectly \n            }\n\n            last = this.layoutPoints[i];\n        }\n    }\n\n    /**\n     * Updated node layout to prevent overlapping nodes\n     * @param {*} nodeLevel: depth of the node from the root of the tree. 0 is the root node.\n     * @param {*} yPosition: y position of the node.\n     * @returns \n     */\n    updateNodeLayout(nodeLevel, yPosition) {\n        this.checkInvariant();\n\n        // First cover edge cases\n\n        // Empty list\n        if (this.layoutPoints.length === 0) {\n            this.layoutPoints.push(new Point(nodeLevel, yPosition));\n            return;\n        }\n\n        // Single Element\n        if (this.layoutPoints.length === 1) {\n            if (nodeLevel < this.layoutPoints[0].x) {\n                this.layoutPoints.unshift(new Point(nodeLevel, yPosition));\n            }\n            else if (nodeLevel === this.layoutPoints[0].x) {\n                this.layoutPoints[0] = new Point(this.layoutPoints[0].x, Math.max(this.layoutPoints[0].y, yPosition));\n            }\n            else {\n                this.layoutPoints.push(new Point(nodeLevel, yPosition));\n            }\n\n            return;\n        }\n\n        // Insert Before First Element\n        if (nodeLevel < this.layoutPoints[0].x &&\n            yPosition < this.layoutPoints[0].y) {\n            this.layoutPoints.unshift(new Point(nodeLevel, yPosition));\n            return;\n        }\n\n        // Insert Last Element\n        if (this.layoutPoints[this.layoutPoints.length - 1].x < nodeLevel &&\n            this.layoutPoints[this.layoutPoints.length - 1].y < yPosition) {\n            this.layoutPoints.push(new Point(nodeLevel, yPosition));\n            return;\n        }\n\n        // Update Last Element\n        if (this.layoutPoints[this.layoutPoints.length - 1].x === nodeLevel) {\n            this.layoutPoints[this.layoutPoints.length - 1] = new Point(nodeLevel, Math.max(this.layoutPoints[this.layoutPoints.length - 1].y, yPosition));\n            return;\n        }\n\n        // Insert Point \n\n        // First find insert index\n        var insertIndex = 0;\n        for (var i = 0; i < this.layoutPoints.length; i++) {\n            if (nodeLevel <= this.layoutPoints[i].x) {\n                insertIndex = i;\n                break;\n            }\n        }\n\n        // Perform Insert or Update.\n        if (nodeLevel === this.layoutPoints[insertIndex].x) {\n            this.layoutPoints[insertIndex] = new Point(nodeLevel, Math.max(this.layoutPoints[insertIndex].y, yPosition));\n        }\n        else {\n            this.layoutPoints.splice(insertIndex, 0, new Point(nodeLevel, yPosition));\n        }\n\n        // After we insert the point we need to remove following points if they have lower Y value.\n        var lastIndex = insertIndex;\n\n        while (lastIndex < this.layoutPoints.length) {\n            if (this.layoutPoints[lastIndex].y > yPosition) {\n                this.layoutPoints.splice(insertIndex + 1, lastIndex - insertIndex - 1);\n                return;\n            }\n            ++lastIndex;\n        }\n\n        // Last insert point had the highest Y value, remove elements after inserted point.\n        this.layoutPoints.splice(insertIndex + 1, this.layoutPoints.length - insertIndex - 1);\n    }\n\n    getYPositionForXPosition(rowX) {\n        this.checkInvariant();\n\n        var yPosition = 0;\n\n        for (var i = 0; i < this.layoutPoints.length; i++) {\n            if (rowX < this.layoutPoints[i].x) {\n                break;\n            }\n\n            yPosition = Math.max(this.layoutPoints[i].y, yPosition);\n        }\n        return yPosition;\n    }\n}\n\n\nfunction azdataQueryPlan(queryPlanConfiguration) {\n    this.queryPlanGraph = queryPlanConfiguration.queryPlanGraph;\n    if (queryPlanConfiguration.container != null && queryPlanConfiguration.iconPaths != null) {\n        this.init(queryPlanConfiguration);\n    }\n}\n\nazdataQueryPlan.prototype.init = function (queryPlanConfiguration) {\n    const { container, iconPaths, badgeIconPaths, expandCollapsePaths, showTooltipOnClick } = queryPlanConfiguration;\n    this.container = container;\n    this.polygonRoots = [];\n    this.drawnPolygons = [];\n    this.badges = [];\n    mxEvent.addListener(window, 'unload', mxUtils.bind(this, function () {\n        this.destroy();\n    }));\n\n    mxEvent.disableContextMenu(container);\n\n    var graph = new azdataGraph(container);\n    this.graph = graph;\n    this.graph.firstLoad = true;\n    this.rubberband = new mxRubberband(graph);\n    this.keyHandler = new mxKeyHandler(graph);\n\n    const arrowRightKey = 39;\n    const selectNext = (evt) => {\n        graph.tooltipHandler.hide();\n        let currentCell = this.graph.getSelectionCell();\n        if (currentCell.collapsed) {\n            return;\n        }\n        if (currentCell && currentCell.vertex) {\n            if (currentCell.edges.length === 1) {\n                if (currentCell.edges[0].target !== currentCell) {\n                    this.graph.setSelectionCell(currentCell.edges[0].target);\n                }\n            }\n            else if (currentCell.edges.length > 1) {\n                this.graph.setSelectionCell(currentCell.edges[1].target);\n            }\n        }\n        else if (currentCell && currentCell.edge) {\n            this.graph.setSelectionCell(currentCell.target);\n        }\n    };\n    this.keyHandler.bindKey(arrowRightKey, selectNext);\n\n    const arrowLeftKey = 37;\n    const selectPrevious = (evt) => {\n        graph.tooltipHandler.hide();\n        let currentCell = this.graph.getSelectionCell();\n        if (currentCell && currentCell.vertex) {\n            if (currentCell.edges.length === 1) {\n                if (currentCell.edges[0].source !== currentCell) {\n                    this.graph.setSelectionCell(currentCell.edges[0].source);\n                }\n            }\n            else if (currentCell.edges.length > 1) {\n                this.graph.setSelectionCell(currentCell.edges[0].source);\n            }\n        }\n        else if (currentCell && currentCell.edge) {\n            this.graph.setSelectionCell(currentCell.source);\n        }\n    };\n    this.keyHandler.bindKey(arrowLeftKey, selectPrevious);\n\n    const arrowUpKey = 38;\n    const selectTop = (evt) => {\n        graph.tooltipHandler.hide();\n        let currentCell = this.graph.getSelectionCell();\n        if (currentCell && currentCell.edge) {\n            let source = currentCell.source;\n\n            let edgeIndex = 0;\n            while (edgeIndex <= source.edges.length) {\n                if (source.edges[edgeIndex] === currentCell) {\n                    break;\n                }\n                ++edgeIndex;\n            }\n\n            --edgeIndex;\n            if (edgeIndex >= 1) {\n                this.graph.setSelectionCell(source.edges[edgeIndex]);\n            }\n        }\n        else if (currentCell && currentCell.vertex) {\n            let source = currentCell.edges[0].source;\n\n            let edgeIndex = 1;\n            while (edgeIndex <= source.edges.length - 1) {\n                if (source.edges[edgeIndex].target === currentCell) {\n                    break;\n                }\n                ++edgeIndex;\n            }\n\n            --edgeIndex;\n            if (edgeIndex >= 1) {\n                let edge = source.edges[edgeIndex];\n                this.graph.setSelectionCell(edge.target);\n            }\n        }\n    };\n    this.keyHandler.bindKey(arrowUpKey, selectTop);\n\n    const arrowDownKey = 40;\n    const selectBottom = (evt) => {\n        graph.tooltipHandler.hide();\n        let currentCell = this.graph.getSelectionCell();\n        if (currentCell && currentCell.edge) {\n            let source = currentCell.source;\n\n            let edgeIndex = 1;\n            while (edgeIndex <= source.edges.length - 1) {\n                if (source.edges[edgeIndex] === currentCell) {\n                    break;\n                }\n                ++edgeIndex;\n            }\n\n            ++edgeIndex;\n            if (edgeIndex <= source.edges.length - 1) {\n                this.graph.setSelectionCell(source.edges[edgeIndex]);\n            }\n        }\n        else if (currentCell && currentCell.vertex) {\n            let source = currentCell.edges[0].source;\n\n            let edgeIndex = 1;\n            while (edgeIndex <= source.edges.length - 1) {\n                if (source.edges[edgeIndex].target === currentCell) {\n                    break;\n                }\n                ++edgeIndex;\n            }\n\n            ++edgeIndex;\n            if (edgeIndex <= source.edges.length - 1) {\n                let edge = source.edges[edgeIndex];\n                this.graph.setSelectionCell(edge.target);\n            }\n        }\n    };\n    this.keyHandler.bindKey(arrowDownKey, selectBottom);\n\n    var style = graph.getStylesheet().getDefaultEdgeStyle();\n    style[mxConstants.STYLE_EDGE] = mxEdgeStyle.ElbowConnector;\n\n    graph.keepEdgesInBackground = true;\n    graph.centerZoom = false;\n    this.enablePanning(true);\n    graph.setTooltips(true);\n    graph.setEnabled(true);\n    graph.setPanning(true);\n    graph.panningHandler.useLeftButtonForPanning = true;\n    graph.centerZoom = false;\n    graph.resizeContainer = false;\n    graph.autoSizeCellsOnAdd = true;\n    graph.autoExtend = false; //disables the size of the graph automatically extending if the mouse goes near the container edge while dragging.\n    graph.getSelectionModel().setSingleSelection(true); //Forcing only single cell selection in graph\n    graph.cellsResizable = false;\n    graph.cellsMovable = false;\n    graph.edgeMovable = false;\n    graph.setHtmlLabels(true);\n    graph.container.firstChild.setAttribute('role', 'group');\n\n    graph.addListener(mxEvent.CLICK, function (sender, evt) {\n\n        var cell = evt.getProperty(\"cell\"); // cell may be null\n        if (cell != null && cell.edge && this.showTooltipOnClick && this.showTooltip) {\n            const tooltip = this.getTooltipForCell(cell);\n            if (tooltip) {\n                this.tooltipHandler.show(tooltip, evt.properties.event.clientX, evt.properties.event.clientY, cell);\n\n            }\n            evt.consume();\n        }\n    });\n\n\n    if (showTooltipOnClick) {\n        this.graph.showTooltipOnClick = showTooltipOnClick;\n        graph.tooltipHandler.setEnabled(false);\n    }\n    graph.showTooltip = true;\n\n    graph.isCellSelectable = (cell) => {\n        if (cell?.isEdge()) {\n            return false;\n        }\n        return true;\n    };\n\n    graph.getSelectionModel().addListener(mxEvent.CHANGE, function (sender, evt) {\n        if (graph.getSelectionCount() === 1) {\n            const cell = graph.getSelectionCell();\n\n            if (evt?.properties?.added) {\n                evt.properties.added.forEach(cell => {\n                    if (cell?.cellDivs?.body) {\n                        if (cell.edge) {\n                            const edgeElement = document.getElementById(cell.id);\n                            edgeElement.tabIndex = -1;\n                        } else {\n                            cell.cellDivs.body.tabIndex = -1;\n                            cell.cellDivs.body.ariaSelected = false;\n                            if(cell.cellDivs.expandCollapse) {\n                                cell.cellDivs.expandCollapse.tabIndex = -1;\n                            }\n                        }\n                    }\n                });\n            }\n\n            if (evt?.properties?.removed) {\n                evt.properties.removed.forEach(cell => {\n                    if (cell?.cellDivs?.body) {\n                        if (cell.edge) {\n                            const edgeElement = document.getElementById(cell.id);\n                            edgeElement.tabIndex = 0;\n                            edgeElement.focus();\n                        } else {\n                            cell.cellDivs.body.tabIndex = 0;\n                            cell.cellDivs.body.ariaSelected = true;\n                            if(cell.cellDivs.expandCollapse) {\n                                cell.cellDivs.expandCollapse.tabIndex = 0;\n                            }\n                            cell.cellDivs.body.focus();\n                        }\n                    }\n                });\n            }\n        }\n    });\n\n    let self = this;\n    graph.convertValueToString = function (cell) {\n        if (cell?.value != null && cell?.value?.label != null) {\n            const cellDivs = new Object();\n\n            // Getting the state of the old tabIndex of the cell. This is needed to restore the old tabIndex after the cell is re-rendered.\n            const oldTabIndex = cell?.cellDivs?.body?.tabIndex ?? -1;\n\n            cell.cellDivs = cellDivs;\n\n            const cellContainer = document.createElement('div');\n            cellDivs.container = cellContainer\n            cellContainer.setAttribute('class', 'graph-cell');\n            const cellBodyContainer = document.createElement('div');\n            cellDivs.body = cellBodyContainer;\n            cellBodyContainer.setAttribute('class', 'graph-cell-body');\n            cellBodyContainer.setAttribute('role', 'treeitem');\n\n            if (cell.isVertex() && cell?.value?.children?.length > 0) {\n                cellBodyContainer.setAttribute('aria-expanded', !cell.collapsed);\n            }\n\n            cellBodyContainer.setAttribute('aria-level', cell.value.depth);\n            cellBodyContainer.setAttribute('aria-posinset', cell.value.posInSet);\n            cellBodyContainer.setAttribute('aria-setsize', cell.value.setSize);\n            if (cell.value.ariaLabel) {\n                cellBodyContainer.setAttribute('aria-label', cell.value.ariaLabel);\n            }\n            cellContainer.appendChild(cellBodyContainer);\n\n            mxEvent.addListener(cellBodyContainer, 'focus', (evt) => {\n\n                this.setSelectionCell(cell);\n                if (cell.highlightShape) {\n                    cell.highlightShape.isDashed = false;\n                    cell.highlightShape.redraw();\n                    cell.highlightShape.updateBoundingBox();\n                }\n            });\n\n            mxEvent.addListener(cellBodyContainer, 'blur', (evt) => {\n                if (cell.highlightShape) {\n                    cell.highlightShape.isDashed = true;\n                    cell.highlightShape.redraw();\n                    cell.highlightShape.updateBoundingBox();\n                }\n                if (this.tooltipHandler.isVisible) {\n                    this.tooltipHandler.hide();\n                }\n            });\n\n            mxEvent.addListener(cellContainer, 'click', (evt) => {\n                if (this.showTooltipOnClick && this.showTooltip) {\n                    const cell = this.getSelectionCell();\n                    const tooltip = this.getTooltipForCell(cell);\n                    if (cell?.geometry) {\n                        const cellContainerRect = cellBodyContainer.getBoundingClientRect();\n                        this.tooltipHandler.show(tooltip, cellContainerRect.x + cellContainerRect.width, cellContainerRect.y + cellContainerRect.height, cell);\n                    }\n                }\n            });\n\n            mxEvent.addListener(cellBodyContainer, 'keydown', (evt) => {\n                if (this.showTooltipOnClick && this.showTooltip) {\n                    if (evt.keyCode === 13) {\n                        if (this.tooltipHandler.isVisible) {\n                            this.tooltipHandler.hide();\n                        } else {\n                            const cell = this.getSelectionCell();\n                            if (cell?.geometry) {\n                                const cellContainerRect = cellBodyContainer.getBoundingClientRect();\n                                this.tooltipHandler.show(this.getTooltipForCell(cell), cellContainerRect.x + cellContainerRect.width, cellContainerRect.y + cellContainerRect.height, cell);\n                            }\n                        }\n                        evt.preventDefault();\n                        evt.stopPropagation();\n                    } else if (evt.key === 'Escape') {\n                        this.tooltipHandler.hide();\n                        evt.preventDefault();\n                        evt.stopPropagation();\n                    }\n                }\n            });\n\n            if (cell.edge) {\n                cellBodyContainer.id = cell.id;\n\n                return cellContainer;\n            }\n\n            const costContainer = document.createElement('div');\n            costContainer.setAttribute('class', 'graph-cell-cost');\n            costContainer.innerHTML = cell.value.costDisplayString;\n            cellBodyContainer.appendChild(costContainer);\n\n            const iconContainer = document.createElement('div');\n            iconContainer.setAttribute('class', 'graph-cell-icon');\n            iconContainer.style.backgroundImage = 'url(' + iconPaths[cell.value.icon] + ')';\n            cellBodyContainer.appendChild(iconContainer);\n\n            if (cell.value.badges) {\n                cell.value.badges.forEach(b => {\n                    const badgeIconPath = badgeIconPaths[b.type];\n                    const badgeIcon = document.createElement('div');\n                    badgeIcon.setAttribute('class', 'graph-icon-badge');\n                    badgeIcon.style.backgroundImage = 'url(' + badgeIconPath + ')';\n                    iconContainer.appendChild(badgeIcon);\n                });\n            }\n\n            let expandCollapse;\n            if (cell.value.children && cell.value.children.length > 0) {\n                expandCollapse = document.createElement('a');\n                expandCollapse.setAttribute('class', 'graph-icon-badge-expand');\n                expandCollapse.setAttribute('role', 'button');\n                expandCollapse.ariaLabel = (cell.collapsed? 'Expand node' : 'Collapse node ') + cell.value.label;\n                const icon = cell.collapsed ? expandCollapsePaths.expand : expandCollapsePaths.collapse;\n                expandCollapse.setAttribute ('class', cell.collapsed? 'graph-icon-badge-expand expanded' : 'graph-icon-badge-expand collapsed');\n                cellContainer.appendChild(expandCollapse);\n                mxEvent.addListener(expandCollapse, 'click', (evt) => {\n\n                    const currentCell = cell;\n                    const collapse = !currentCell.collapsed;\n                    const icon = collapse ? expandCollapsePaths.expand : expandCollapsePaths.collapse;\n                    expandCollapse.setAttribute ('class', cell.collapsed? 'graph-icon-badge-expand expanded' : 'graph-icon-badge-expand collapsed');\n                    expandCollapse.ariaLabel = (cell.collapsed? 'Expand node' : 'Collapse node ') + cell.value.label;\n\n                    // undefined is for the middle parameter since the overwritten definition of foldCells doesn't reference it.\n                    this.foldCells(collapse, undefined, [currentCell]);\n                    currentCell.cellDivs.expandCollapse.focus();\n                    if (!collapse) {\n                        self.redrawExpensiveOperatorHighlighting();\n                    }\n                    expandCollapse.focus();\n                    cell.highlightShape.isDashed = true;\n                    cell.highlightShape.redraw();\n                    cell.highlightShape.updateBoundingBox();\n                });\n                mxEvent.addListener(expandCollapse, 'keydown', (evt) => {\n                    if(evt.keyCode === 13 || evt.keyCode === 32){\n                        const currentCell = cell;\n                        const collapse = !currentCell.collapsed;\n                        const icon = collapse ? expandCollapsePaths.expand : expandCollapsePaths.collapse;\n                        expandCollapse.ariaLabel = (cell.collapsed? 'Expand node' : 'Collapse node ') + cell.value.label;\n                        expandCollapse.style.backgroundImage = 'url(' + icon + ')';\n    \n                        // undefined is for the middle parameter since the overwritten definition of foldCells doesn't reference it.\n                        this.foldCells(collapse, undefined, [currentCell]);\n                        currentCell.cellDivs.expandCollapse.focus();\n                        if (!collapse) {\n                            self.redrawExpensiveOperatorHighlighting();\n                        }\n                        evt.stopPropagation();\n                        evt.preventDefault();\n                        expandCollapse.focus();\n                        cell.highlightShape.isDashed = true;\n                        cell.highlightShape.redraw();\n                        cell.highlightShape.updateBoundingBox();\n                    }\n                });\n\n                cellDivs.expandCollapse = expandCollapse;\n                cellDivs.expandCollapse.tabIndex = oldTabIndex;\n            }\n\n\n            const label = document.createElement('div');\n            label.innerText = cell.value.label;\n            cellBodyContainer.appendChild(label);\n\n\n            // Adding output row count to the left of graph cell;\n            const rows = document.createElement('div');\n            rows.setAttribute('class', 'graph-cell-row-count');\n            rows.innerText = cell.value.rowCountDisplayString;\n            cellContainer.appendChild(rows);\n\n            mxEvent.addListener(cellContainer, 'click', (evt) => {\n                cellBodyContainer.focus();\n            });\n\n            cellDivs.body.tabIndex = oldTabIndex;\n\n            if (this.firstLoad && cell.value.isRoot) {\n                this.firstLoad = false;\n                if(cellDivs.body){\n                    cellDivs.body.tabIndex = 0;\n                    cellDivs.body.ariaSelected = true;\n                }\n                if(cellDivs.expandCollapse){\n                    cellDivs.expandCollapse.tabIndex = 0;\n                }\n            }\n            return cellContainer;\n        }\n        if (cell?.value != null && cell?.value?.label != null) {\n            let hasWindowsEOL = cell.value.label.includes('\\r\\n');\n            const joinStrings = (strArray) => {\n                if (hasWindowsEOL) {\n                    return strArray.join('\\r\\n');\n                }\n                else {\n                    return strArray.join('\\n');\n                }\n            };\n\n\n            let splitLabel = cell.value.label.split(/\\r\\n|\\n/);\n            let cellLabel = splitLabel.map((str, index) => {\n                let label = '';\n                if (index === 0 && !cell.value.icon?.includes('columnstore')) {\n                    // This regex removes any text contained in parenthesis in the operation name\n                    // i.e. \"Clustered Index Seek (Clustered)\" becomes \"Clustered Index Seek\"\n                    label += str.replace(/\\(([^)]+)\\)/g, '');\n                }\n                else if (index === 1 && splitLabel.length >= 3 && str.includes('.')) {\n                    let splitStr = str.split(' ');\n                    splitStr = splitStr.map(str => {\n                        if (str.length >= LABEL_LENGTH_LIMIT) {\n                            // subtracting 3 for ellipse to fit in character limit\n                            return str.substring(0, LABEL_LENGTH_LIMIT - 3) + '...';\n                        }\n                        else {\n                            return str;\n                        }\n                    });\n\n                    label += joinStrings(splitStr);\n                }\n                else {\n                    label += str;\n                }\n\n                return label;\n            });\n\n            cellLabel = joinStrings(cellLabel);\n\n            return cellLabel;\n        }\n\n        return azdataGraph.prototype.convertValueToString.apply(this, arguments); // \"supercall\"\n    };\n\n    graph.isHtmlLabel = function (cell) {\n        return false;\n    };\n\n    graph.isCellEditable = function (cell) {\n        return false;\n    };\n\n    // Defines the position for the folding icon\n    graph.cellRenderer.getControlBounds = function (state) {\n        if (state.control != null) {\n            let controlScale = state.control.scale;\n            let boundWidth = state.control.bounds.width / controlScale;\n            let boundHeight = state.control.bounds.height / controlScale;\n            let scale = self.graph.view.getScale();\n\n            return new mxRectangle(state.x + state.width - 20 * scale,\n                state.cell.geometry.y * scale,\n                boundWidth * scale, boundHeight * scale);\n        }\n\n        return null;\n    };\n\n    graph.foldCells = function (collapse, recurse, cells) {\n        if (cells[0].isVertex() && cells[0]?.value?.children?.length > 0) {\n            cells[0].cellDivs.body.setAttribute('aria-expanded', !collapse);\n        }\n\n        this.model.beginUpdate();\n        try {\n            toggleSubtree(this, cells[0], !collapse);\n            this.model.setCollapsed(cells[0], collapse);\n            self.renderPolygons();\n        }\n        finally {\n            this.model.endUpdate();\n        }\n    };\n\n    graph.getTooltipForCell = azdataGraph.prototype.getStyledTooltipForCell;\n\n    var parent = graph.getDefaultParent();\n    var layout = new mxHierarchicalLayout(graph, mxConstants.DIRECTION_WEST);\n    layout.disableEdgeStyle = false;\n\n    var style = new Object();\n    style = mxUtils.clone(style);\n    style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_LABEL;\n    style[mxConstants.STYLE_STROKECOLOR] = 'transparent';\n    style[mxConstants.STYLE_FILLCOLOR] = 'transparent';\n    style[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n    style[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_TOP;\n    style[mxConstants.STYLE_IMAGE_ALIGN] = mxConstants.ALIGN_CENTER;\n    style[mxConstants.STYLE_IMAGE_VERTICAL_ALIGN] = mxConstants.ALIGN_TOP;\n    style[mxConstants.STYLE_IMAGE_WIDTH] = '32';\n    style[mxConstants.STYLE_IMAGE_HEIGHT] = '32';\n    style[mxConstants.STYLE_SPACING_TOP] = '43';\n    style[mxConstants.STYLE_SPACING] = '8';\n    style[mxConstants.STYLE_CELL_HIGHLIGHT_DASHED] = false;\n\n    var icons = new Array();\n    for (const iconName in iconPaths) {\n        style = mxUtils.clone(style);\n        style[mxConstants.STYLE_IMAGE] = iconPaths[iconName];\n        graph.getStylesheet().putCellStyle('azdataQueryplan-' + iconName, style);\n        icons.push(iconName);\n    }\n\n    graph.getModel().beginUpdate();\n\n    try {\n\n        this.placeGraphNodes();\n\n        var rand = Math.floor((Math.random() * icons.length));\n\n        var iconName = undefined;\n        if (this.queryPlanGraph.icon) {\n            iconName = 'azdataQueryplan-' + this.queryPlanGraph.icon\n        } else {\n            iconName = 'azdataQueryplan-' + icons[rand];\n        }\n\n\n        var cellStyle = new Object();\n        cellStyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n        cellStyle[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n        cellStyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n        cellStyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n        cellStyle[mxConstants.STYLE_FILLCOLOR] = 'transparent';\n        cellStyle[mxConstants.STYLE_STROKECOLOR] = 'transparent';\n        cellStyle[mxConstants.STYLE_CELL_HIGHLIGHT_DASHED] = false;\n        cellStyle[mxConstants.STYLE_CELL_HIGHLIGHT_STROKE_WIDTH] = '3';\n        cellStyle[mxConstants.STYLE_CELL_HIGHLIGHT_COLOR] = '#4AA564';\n\n        graph.getStylesheet().putDefaultVertexStyle(cellStyle);\n\n        var maxX = this.queryPlanGraph.position.x;\n        var maxY = this.queryPlanGraph.position.y;\n\n        var vertex = graph.insertVertex(parent, this.queryPlanGraph.id, this.queryPlanGraph, this.queryPlanGraph.position.x, this.queryPlanGraph.position.y, CELL_WIDTH, CELL_HEIGHT);\n\n        this.queryPlanGraph.depth = 1;\n        this.queryPlanGraph.posInSet = 1;\n        this.queryPlanGraph.setSize = 1;\n        this.queryPlanGraph.isRoot = true;\n\n        var stack =\n            [\n                {\n                    vertex: vertex,\n                    node: this.queryPlanGraph\n                }\n            ];\n\n        while (stack.length > 0) {\n            var entry = stack.pop();\n\n            if (entry.node.children) {\n                for (var i = 0; i < entry.node.children.length; ++i) {\n                    var node = entry.node.children[i];\n                    if (node.icon) {\n                        iconName = 'azdataQueryplan-' + node.icon\n                    } else {\n                        rand = Math.floor((Math.random() * icons.length));\n                        iconName = 'azdataQueryplan-' + icons[rand];\n                    }\n\n                    if (node.position.x > maxX) {\n                        maxX = node.position.x;\n                    }\n\n                    if (node.position.y > maxY) {\n                        maxY = node.position.y;\n                    }\n\n                    vertex = graph.insertVertex(parent, node.id, node, node.position.x, node.position.y, CELL_WIDTH, CELL_HEIGHT);\n\n                    var edge = entry.node.edges[i];\n                    graph.insertWeightedInvertedEdge(parent, edge.id, edge, entry.vertex, vertex);\n                    node.depth = entry.node.depth + 1;\n                    node.posInSet = i + 1;\n                    node.setSize = entry.node.children.length;\n\n                    stack.push(\n                        {\n                            vertex: vertex,\n                            node: node\n                        });\n                }\n            }\n        }\n        // Adding a very small cell to the parent for padding on the bottom right corner of the graph. \n        vertex = graph.insertVertex(parent, 'paddingVertex', undefined, maxX + CELL_WIDTH + GRAPH_PADDING_LEFT, maxY + CELL_HEIGHT + GRAPH_PADDING_BOTTOM, 0.0001, 0.0001, '');\n    }\n    finally {\n        graph.getModel().endUpdate();\n    }\n};\n\n/**\n * Since we need to display query plan in very particular format, we will use this function\n * to add x, y coordinates graph nodes. \n */\nazdataQueryPlan.prototype.placeGraphNodes = function () {\n    // Setting how much Y coords should be increased for each row\n    // for aesthetic  reasons this value is constant across all nodes\n    // for entire showplan. For starters, we set this to 100px. However,\n    // if a node has label with many lines, this value will be updated to \n    // better fit that node.\n    this.spacingY = NODE_HEIGHT;\n\n    // Getting the node padding values from SSMS.\n    this.paddingX = GRAPH_PADDING_RIGHT;\n    this.paddingY = GRAPH_PADDING_TOP;\n\n    // Getting a good enough start value for the root node.\n    var startX = (this.paddingX + 10) / 2;\n    var startY = (this.paddingY + 10) / 2;\n\n    // Recursively layout all nodes starting with root\n    this.setNodePositionRecursive(this.queryPlanGraph, startX, startY);\n};\n\nazdataQueryPlan.prototype.disableNodeCollapse = function (disableCollapse) {\n    const allVertices = this.graph.model.getChildCells(this.graph.getDefaultParent()).filter(v => v?.vertex);\n    allVertices.forEach(v => {\n        let state = this.graph.view.getState(v);\n        if ((!state.control || !state.control.node)) {\n            return;\n        }\n\n        if (disableCollapse) {\n            state.control.node.style.visibility = 'hidden';\n        }\n        else if (this.graph.model.getOutgoingEdges(v).length > 0) {\n            state.control.node.style.visibility = 'visible';\n        }\n    });\n};\n\nazdataQueryPlan.prototype.setNodePositionRecursive = function (node, x, y) {\n\n    // Recursively setting all the x positions in the graph.\n    this.setNodeXPositionRecursive(node, x, 0);\n    var layoutHelper = new GraphNodeLayoutHelper();\n    this.setNodeYPositionRecursive(node, layoutHelper, y);\n};\n\nazdataQueryPlan.prototype.isParentHierarchyTreeStructure = function (node) {\n    while (node != null) {\n        if (node.children.length >= 2) {\n            return true;\n        }\n        node = node.parent;\n    }\n    return false;\n};\n\nazdataQueryPlan.prototype.getCleanedNodeLabel = function (node) {\n    return node.label.replace(/\\n|\\r\\n/g, \"<br>\");\n};\n\nazdataQueryPlan.prototype.getNodeLabelLength = function (node) {\n    this.canvas = this.canvas || document.createElement(\"canvas\");\n    const context = this.canvas.getContext(\"2d\");\n    const metrics = context.measureText(node.label);\n    return metrics.width;\n};\n\nazdataQueryPlan.prototype.getRecommendedNodeXSpacing = function (node) {\n    const currentNodeSize = this.getNodeLabelLength(node);\n    let maxNodeToWidth = 0;\n    node.children.forEach(c => {\n        maxNodeToWidth = Math.max(maxNodeToWidth, this.getNodeLabelLength(c));\n    });\n    let recommendedSpacing = currentNodeSize / 2 + maxNodeToWidth / 2;\n    if (node.children.length > 1) {\n        if (this.isParentHierarchyTreeStructure(node)) {\n            recommendedSpacing += Math.max(maxNodeToWidth - MAX_ALLOWED_NODE_WIDTH, 0);\n        }\n    }\n    return recommendedSpacing < MIN_ALLOWED_NODE_WIDTH ? MIN_ALLOWED_NODE_WIDTH : recommendedSpacing;\n};\n\nazdataQueryPlan.prototype.getNodeHeight = function (node) {\n    const iconHeight = CELL_ICON_HEIGHT;\n    const costHeight = CELL_COST_HEIGHT;\n    const cellSubtextLineCount = node.label.split(/\\r\\n|\\r|\\n/).length\n    const nodeHeight = iconHeight + costHeight + cellSubtextLineCount * 10;\n    return nodeHeight;\n};\n\n\nazdataQueryPlan.prototype.updateSpacingY = function (node) {\n    this.spacingY = Math.max(this.spacingY, this.getNodeHeight(node));\n};\n\nazdataQueryPlan.prototype.setNodeXPositionRecursive = function (node, x, level) {\n    // Place the node at given position\n    node.position = new Point(x, 0);\n    node.level = level;\n\n    // Determining the right height for the node. Here, 50px is the appropriate space for node icons.\n    this.updateSpacingY(node);\n\n    var recommendedMinimumSpacing = this.getRecommendedNodeXSpacing(node);\n    var spacingX = recommendedMinimumSpacing + this.paddingX;\n\n    // Compute locally optimized X position for node's children\n    x += spacingX;\n\n    // Storing the max X position of the children. \n    // This will later help us in determining the y coordinates for them.\n    node.maxChildrenXPosition = node.level;\n\n    node.children.forEach(childNode => {\n        childNode.parent = node;\n        this.setNodeXPositionRecursive(childNode, x, level + 1);\n        node.maxChildrenXPosition = Math.max(node.maxChildrenXPosition, childNode.maxChildrenXPosition);\n    });\n};\n\nazdataQueryPlan.prototype.getYMidPoint = function (fromNode, toNode) {\n    var edgeMidpoint = (fromNode.position.x + this.getNodeLabelLength(fromNode) + toNode.position.x) / 2;\n    for (let i = 0; i < fromNode.children.length; i++) {\n        if (fromNode.children[i] === toNode.id) {\n            break;\n        }\n        const minMidPointSpaceFromNodeBoundingRect = 6;\n        edgeMidpoint = Math.min(edgeMidpoint, fromNode.children[i].position.x - minMidPointSpaceFromNodeBoundingRect);\n    }\n    return edgeMidpoint;\n};\n\nazdataQueryPlan.prototype.setNodeYPositionRecursive = function (node, layoutHelper, y) {\n    var newY = Math.max(y, layoutHelper.getYPositionForXPosition(node.maxChildrenXPosition));\n\n    // Update Node's Y Position\n    node.position.y = newY;\n\n    var yToUpdate = newY + this.spacingY;\n    // Display each child node at the X position just computed\n    node.children.forEach(n => {\n        this.setNodeYPositionRecursive(n, layoutHelper, newY);\n        newY += this.spacingY;\n    });\n\n    layoutHelper.updateNodeLayout(node.level, yToUpdate);\n};\n\nazdataQueryPlan.prototype.shiftParentAndChildNodePositionsHorizontally = function (parent, shiftAmount) {\n    let stack = [...parent.children];\n\n    while (stack.length !== 0) {\n        let currentNode = stack.pop();\n        let currentNodeParent = currentNode.parent;\n        if (currentNode.position.x - currentNodeParent.position.x < IDEAL_LONG_LABEL_NODE_DISTANCE) {\n            currentNode.position.x += shiftAmount;\n        }\n\n        for (let childIndex = 0; childIndex < currentNode.children.length; ++childIndex) {\n            stack.push(currentNode.children[childIndex]);\n        }\n    }\n};\n\nazdataQueryPlan.prototype.getNodesByHorizontalLevel = function (node) {\n    let table = {};\n    let stack = [node];\n\n    while (stack.length !== 0) {\n        let entry = stack.pop();\n        if (entry.position.y in table) {\n            table[entry.position.y].push(entry);\n        }\n        else {\n            table[entry.position.y] = [];\n            table[entry.position.y].push(entry);\n        }\n\n        for (let i = 0; i < entry.children.length; ++i) {\n            stack.push(entry.children[i]);\n        }\n    }\n\n    return table;\n};\n\nazdataQueryPlan.prototype.zoomIn = function () {\n    if (this.graph.view.getScale() * this.graph.zoomFactor <= 2) {\n        this.graph.zoomIn();\n    } else {\n        this.graph.zoomTo(2)\n    }\n    this.renderPolygons();\n};\n\nazdataQueryPlan.prototype.zoomOut = function () {\n    this.graph.zoomOut();\n    this.renderPolygons();\n};\n\nazdataQueryPlan.prototype.zoomToFit = function () {\n    this.graph.fit(undefined, true, 20);\n    this.renderPolygons();\n};\n\nazdataQueryPlan.prototype.registerGraphCallback = function (eventType, callback) {\n    this.graph.addListener(eventType, (sender, event) => {\n        this.graph.graphEventHandler(sender, event, callback);\n    });\n};\n\nazdataQueryPlan.prototype.getZoomLevelPercentage = function () {\n    return this.graph.view.scale * 100;\n};\n\nazdataQueryPlan.prototype.zoomTo = function (zoomPercentage) {\n    const ZOOM_PERCENTAGE_MINIMUM = 1;\n    const ZOOM_PERCENTAGE_MAXIMUM = 200;\n\n    let parsedZoomLevel = parseInt(zoomPercentage);\n    if (isNaN(parsedZoomLevel)) {\n        return;\n    }\n\n    if (parsedZoomLevel < ZOOM_PERCENTAGE_MINIMUM) {\n        parsedZoomLevel = ZOOM_PERCENTAGE_MINIMUM;\n    }\n\n    if (parsedZoomLevel > ZOOM_PERCENTAGE_MAXIMUM) {\n        parsedZoomLevel = ZOOM_PERCENTAGE_MAXIMUM;\n    }\n\n    let zoomScale = parsedZoomLevel / 100;\n    this.graph.zoomTo(zoomScale);\n    this.renderPolygons();\n};\n\nazdataQueryPlan.prototype.addZoomInRectListener = function () {\n    let self = this;\n    mxRubberband.prototype.mouseUp = function (sender, event) {\n        let execute = self.container && this.width !== undefined && this.height !== undefined;\n        this.reset();\n\n        if (execute) {\n            let rect = new mxRectangle(this.x, this.y, this.width, this.height);\n            self.graph.zoomToRect(rect);\n            event.consume();\n        }\n    };\n};\n\nazdataQueryPlan.prototype.enablePanning = function (panning) {\n    this.graph.panningHandler.useLeftButtonForPanning = panning;\n    this.graph.setPanning(panning);\n};\n\nazdataQueryPlan.prototype.setIconBackgroundColor = function (color) {\n    const allVertices = this.graph.model.getChildCells(this.graph.getDefaultParent());\n    this.graph.setCellStyles(mxConstants.STYLE_FILLCOLOR, color, allVertices);\n    this.graph.setCellStyles(mxConstants.STYLE_STROKECOLOR, color, allVertices);\n\n};\n\nazdataQueryPlan.prototype.setTextFontColor = function (color) {\n    this.graph.setCellStyles(mxConstants.STYLE_FONTCOLOR, color, this.graph.model.getChildCells(this.graph.getDefaultParent()));\n};\n\nazdataQueryPlan.prototype.setEdgeColor = function (color) {\n    this.graph.setCellStyles(mxConstants.STYLE_STROKECOLOR, color, this.graph.model.getChildEdges(this.graph.getDefaultParent()));\n};\n\nazdataQueryPlan.prototype.setCellHighLightColor = function (color) {\n    this.graph.setCellStyles(mxConstants.STYLE_CELL_HIGHLIGHT_COLOR, color, this.graph.model.getChildCells(this.graph.getDefaultParent()));\n};\n\nazdataQueryPlan.prototype.destroy = function () {\n    if (!this.destroyed) {\n        this.destroyed = true;\n        this.container = null;\n    }\n};\n\nazdataQueryPlan.prototype.setShowTooltipOnClick = function (showTooltipOnClick) {\n    this.graph.showTooltipOnClick = showTooltipOnClick;\n}\n\nazdataQueryPlan.prototype.showTooltip = function (showTooltip) {\n    this.graph.showTooltip = showTooltip;\n\n    if (!this.graph.showTooltipOnClick) {\n        this.graph.tooltipHandler.setEnabled(showTooltip);\n    }\n}\n\n/**\n * Draws a polygon using the points given\n * @param {*} cell starting cell where the polygon will start to be drawn. \n * @param {*} fillColor string value for the fill color. Supported values are hex, rbg and rbga\n * @param {*} strokeColor string value for the stroke/border color. Supported values are hex, rbg and rbga\n * @param {*} strokeWidth thickness of the stroke\n */\nazdataQueryPlan.prototype.drawPolygon = function (cell, fillColor, strokeColor, strokeWidth) {\n    if (!this.polygonModels) {\n        this.polygonModels = [];\n    }\n    this.polygonModels.push({\n        root: cell,\n        fillColor: fillColor,\n        strokeColor: strokeColor,\n        strokWidth: strokeWidth\n    });\n    this.renderPolygons();\n};\n\n/**\n * Removes all drawn polygons on the execution plan.\n */\nazdataQueryPlan.prototype.removeDrawnPolygons = function () {\n    this.drawnPolygons.forEach(polygon => {\n        polygon.destroy();\n    });\n    this.drawnPolygons = [];\n    this.polygonModels = [];\n};\n\nazdataQueryPlan.prototype.renderPolygons = function () {\n    if (this.drawnPolygons?.length > 0) {\n        this.drawnPolygons.forEach(polygon => {\n            polygon.destroy();\n        });\n    }\n    this.drawnPolygons = [];\n\n    if (this.polygonModels) {\n        this.polygonModels.forEach(p => {\n            const points = this.getPolygonPerimeter(p.root);\n            const scale = this.graph.view.getScale();\n            var polygon = new mxPolygon(\n                points.map(point => new mxPoint(point.x * scale, point.y * scale)),\n                p.fillColor,\n                p.strokeColor,\n                p.strokeWidth\n            );\n            this.drawnPolygons.push(polygon);\n            polygon.init(this.graph.getView().getBackgroundPane());\n            polygon.isDashed = true;\n            polygon.redraw();\n        });\n    }\n};\n\n/**\n * Gets an array of points that represents the perimeter for a polygon.\n * @param {*} cell The starting node where the perimeter will start being outlined.\n * @returns an array of points\n */\nazdataQueryPlan.prototype.getPolygonPerimeter = function (cell) {\n    if (!cell.isVisible()) {\n        return [];\n    }\n\n    let points = [];\n    points = points.concat(this.getLeftSidePoints(cell));\n    let rightSidePoints = this.getRightSidePoints(cell);\n    points = points.concat(this.getBottomSidePoints(cell, rightSidePoints[0].x));\n    points = points.concat(rightSidePoints);\n\n    return points;\n};\n\n/**\n * Gets the left side points for the starting node in the polygon from top to bottom.\n * @param {*} cell The starting node for the left side perimeter points.\n * @returns an array of points for the left side of the starting node in the polygon.\n */\nazdataQueryPlan.prototype.getLeftSidePoints = function (cell) {\n    let points = [];\n\n    // let additionalLeftSideSpacing = longestSubLabel % 10 * 25;\n    let additionalLeftSideSpacing = this.calcAdditionalSpacingForNode(cell);\n\n    let xPosition = cell.geometry.x - 15; // subtracting to push the x coordinate to the left.\n    points.push({ x: xPosition - additionalLeftSideSpacing, y: cell.geometry.y });\n    points.push({ x: xPosition - additionalLeftSideSpacing, y: cell.geometry.y + NODE_HEIGHT });\n\n    return points;\n};\n\n/**\n * Gets the points for what will be the bottom side of the polygon from left to right.\n * @param {*} cell The starting node where highlighting will begin.\n * @returns An array of points for the bottom side of the polygon.\n */\nazdataQueryPlan.prototype.getBottomSidePoints = function (cell, polygonRightSideConstraint) {\n    let points = [];\n    let bottomSideNodes = this.getBottomSideNodes(cell, polygonRightSideConstraint);\n\n    bottomSideNodes.forEach(node => {\n        let lastPoint = points.length > 0 ? points[points.length - 1] : null;\n\n        let newPoint = { x: node.geometry.x, y: node.geometry.y + NODE_HEIGHT };\n\n        if (lastPoint && newPoint.y !== lastPoint.y) {\n            let auxiliaryPoint = { x: lastPoint.x, y: newPoint.y };\n            points.push(auxiliaryPoint);\n        }\n\n        let cell = this.graph.model.getCell(node.id);\n        let additionalSpacing = Math.max(...(cell.value.label.split(/\\r\\n|\\n/).map(str => str.length))) > 20 ? this.calcAdditionalSpacingForNode(cell) : 0;\n\n        points.push({ x: node.geometry.x, y: node.geometry.y + NODE_HEIGHT });\n        points.push({ x: node.geometry.x + NODE_WIDTH + additionalSpacing, y: node.geometry.y + NODE_HEIGHT });\n    });\n\n    return points;\n};\n\nazdataQueryPlan.prototype.getBottomSideNodes = function (cell, polygonRightSideConstraint) {\n    let queue = [cell];\n    let nodes = [];\n\n    while (queue.length !== 0) {\n        let levelNodeCount = queue.length;\n\n        for (let nodeIndex = 0; nodeIndex < levelNodeCount; ++nodeIndex) {\n            let entry = queue.shift();\n\n            if (nodeIndex === levelNodeCount - 1 && entry.geometry.x < polygonRightSideConstraint) {\n                nodes.push(entry)\n            }\n\n            for (let childIndex = 0; childIndex < entry.value.children.length; ++childIndex) {\n                if (entry.geometry.x < polygonRightSideConstraint) {\n                    queue.push(this.graph.model.getCell(entry.value.children[childIndex].id));\n                }\n            }\n        }\n    }\n\n    return nodes;\n};\n\n/**\n * Gets the points for what will be the right side of the polygon from left to right.\n * @param {*} cell The starting node where highlighting will begin.\n * @returns An array of points for the right side of the polygon.\n */\nazdataQueryPlan.prototype.getRightSidePoints = function (cell) {\n    let points = [];\n    let leafNodes = this.getLeafNodes(cell);\n\n    for (let leafIndex = 0; leafIndex < leafNodes.length; ++leafIndex) {\n        let leaf = leafNodes[leafIndex];\n        let additionalRightSideSpacing = this.calcAdditionalSpacingForNode(leaf);\n\n        let lastLeaf = undefined;\n        if (leafIndex > 0) {\n            lastLeaf = leafNodes[leafIndex - 1];\n        }\n\n        let nextLeaf = undefined;\n        if (leafIndex + 1 < leafNodes.length) {\n            nextLeaf = leafNodes[leafIndex + 1];\n        }\n\n        let lastLeafPositionX = -1;\n        if (lastLeaf) {\n            lastLeafPositionX = lastLeaf.geometry.x;\n        }\n\n        let nextLeafPositionX = -1;\n        if (nextLeaf) {\n            nextLeafPositionX = nextLeaf.geometry.x;\n        }\n\n        let leafPositionX = Math.min(Math.max(lastLeafPositionX, leaf.geometry.x), Math.max(nextLeafPositionX, leaf.geometry.x));\n\n        points.push({ x: leafPositionX + NODE_WIDTH + additionalRightSideSpacing, y: leaf.geometry.y + NODE_HEIGHT });\n        points.push({ x: leafPositionX + NODE_WIDTH + additionalRightSideSpacing, y: leaf.geometry.y });\n    }\n\n    return points;\n};\n\nazdataQueryPlan.prototype.calcAdditionalSpacingForNode = function (cell) {\n    let longestSubLabel = Math.max(...(cell.value.label.split(/\\r\\n|\\n/).map(str => str.length)));\n    if (longestSubLabel > LABEL_LENGTH_LIMIT) {\n        longestSubLabel = LABEL_LENGTH_LIMIT;\n    }\n    // These values to work best for drawing regions around labels of different lengths, so the label is always inside the polygon.\n    return longestSubLabel / 10 * 15;\n};\n\n/**\n * Helper function to get the right most nodes of the polygon in a execution plan\n * @param {*} cell The root node that will be used to find all of the leaf nodes\n * @returns An array of leaf nodes for a region from bottom-up\n */\nazdataQueryPlan.prototype.getLeafNodes = function (cell) {\n    let leafNodeTable = {};\n    let stack = [cell];\n\n    while (stack.length !== 0) {\n        let entry = stack.pop();\n\n        if (entry.value.children.length === 0 || !this.isChildCellVisible(entry)) {\n            if (entry.geometry.y in leafNodeTable) {\n                let previouslyCachedEntry = leafNodeTable[entry.geometry.y];\n                if (entry.geometry.x > previouslyCachedEntry.geometry.x) {\n                    leafNodeTable[entry.geometry.y] = entry;\n                }\n            }\n            else {\n                leafNodeTable[entry.geometry.y] = entry;\n            }\n        }\n\n        for (let nodeIndex = 0; nodeIndex < entry.value.children.length && this.isChildCellVisible(entry); ++nodeIndex) {\n            let childCell = this.graph.model.getCell(entry.value.children[nodeIndex].id);\n            stack.push(childCell);\n        }\n    }\n\n    let leafNodes = Object.keys(leafNodeTable).map(key => leafNodeTable[key]).reverse();\n\n    return leafNodes;\n};\n\nazdataQueryPlan.prototype.isChildCellVisible = function (vertex) {\n    if (vertex.value.children.length === 0) {\n        return false;\n    }\n\n    let childCell = this.graph.model.getCell(vertex.value.children[0].id);\n    return childCell.isVisible();\n};\n\nazdataQueryPlan.prototype.clearExpensiveOperatorHighlighting = function () {\n    if (this.expensiveCellHighlighter) {\n        this.expensiveCellHighlighter.destroy();\n    }\n\n    this.expensiveCell = undefined;\n    this.expensiveCellHighlighter = undefined;\n};\n\nazdataQueryPlan.prototype.redrawExpensiveOperatorHighlighting = function () {\n    if (this.expensiveCell && this.expensiveCellHighlighter) {\n        this.expensiveCellHighlighter.highlight(this.graph.view.getState(this.expensiveCell));\n    }\n};\n\n/**\n * Highlights the most expensive operator found in a query execution plan.\n * @param getExpenseMetricValue user defined delegate that takes a node as an argument and returns a number.\n * @returns Flag indicating if an expensive node was found and highlighted.\n */\nazdataQueryPlan.prototype.highlightExpensiveOperator = function (getExpenseMetricValue) {\n    const HIGHLIGHTER_COLOR = '#CD2026'; // Accessible Red\n    const STROKE_WIDTH = 1;\n\n    const expensiveNode = this.findExpensiveOperator(getExpenseMetricValue);\n    if (!expensiveNode) {\n        return undefined;\n    }\n\n    this.expensiveCell = this.graph.model.getCell(expensiveNode.id);\n    this.expensiveCellHighlighter = new mxCellHighlight(this.graph, HIGHLIGHTER_COLOR, STROKE_WIDTH);\n    this.expensiveCellHighlighter.highlight(this.graph.view.getState(this.expensiveCell));\n\n    return expensiveNode.id;\n};\n\n/**\n * Finds the most expensive operator in a query execution plan.\n * @param getExpenseMetricValue user defined delegate that takes a node as an argument and returns a number.\n * @returns The most expensive node found based on the expense metric value or undefined.\n */\nazdataQueryPlan.prototype.findExpensiveOperator = function (getExpenseMetricValue) {\n    const expensiveOperators = [];\n    const expensiveCostValues = [];\n\n    const stack = [this.queryPlanGraph];\n\n    while (stack.length > 0) {\n        const node = stack.pop();\n        const costValue = getExpenseMetricValue(node);\n\n        if (costValue !== undefined && costValue >= 0) {\n            expensiveOperators.push(node);\n            expensiveCostValues.push(costValue);\n        }\n\n        for (let childIndex = 0; childIndex < node.children.length; ++childIndex) {\n            stack.push(node.children[childIndex]);\n        }\n    }\n\n    if (expensiveCostValues.length === 0) {\n        return undefined;\n    }\n\n    const maxCostValue = Math.max(...expensiveCostValues);\n    const maxCostValueIndex = expensiveCostValues.findIndex(c => c === maxCostValue);\n\n    return expensiveOperators[maxCostValueIndex];\n};\n\n// Hides or shows execution plan subtree nodes and corresponding icons\nfunction toggleSubtree(graph, cell, show) {\n    show = (show != null) ? show : true;\n    var cells = [];\n\n    graph.traverse(cell, true, function (vertex) {\n        if (vertex != cell) {\n            cells.push(vertex);\n        }\n\n        return vertex === cell || !graph.isCellCollapsed(vertex);\n    });\n\n    graph.toggleCells(show, cells, true);\n}\n\n__mxOutput.azdataQueryPlan = typeof azdataQueryPlan !== 'undefined' ? azdataQueryPlan : undefined;\nreturn __mxOutput;\n};\n}));", "/// <reference path=\"./mxtypings/index.d.ts\" />\nimport mx from 'mxgraph';\nexport * from 'mxgraph';\nexport * from './schemaDesigner/schemaDesigner';\nexport * from './schemaDesigner/schemaDesignerInterfaces';\nexport * from './schemaDesigner/schemaDesignerEntity';\nexport * from './schemaDesigner/schemaDesignerToolbar';\nexport { mx };", "import factory, { mxGraphExportObject } from 'mxgraph';\n\ndeclare global {\n  interface Window {\n    mxBasePath: string;\n    mxLoadResources: boolean;\n    mxForceIncludes: boolean;\n    mxLoadStylesheets: boolean;\n    mxResourceExtension: string;\n  }\n}\n\n//window.mxBasePath = '../node_modules/mxgraph/javascript/src';\nwindow.mxLoadResources = false;\nwindow.mxForceIncludes = false;\nwindow.mxLoadStylesheets = false;\nwindow.mxResourceExtension = '.txt';\n\nexport const mxGraphFactory: mxGraphExportObject = factory({\n})", "import { mxCell } from \"mxgraph\";\nimport { mxGraphFactory as mx } from '../mx';\n\nexport interface ISchema {\n    tables: ITable[];\n}\n\nexport interface ITable {\n    /**\n     * Id of the table\n     */\n    id: string;\n    /**\n     * Name of the table\n     */\n    name: string;\n    /**\n     * Schema of the table\n     */\n    schema: string;\n    /**\n     * Columns of the table\n     */\n    columns: IColumn[];\n    /**\n     * Foreign keys of the table\n     */\n    foreignKeys: IForeignKey[];\n}\n\nexport interface IColumn {\n    /**\n     * Id of the column\n     */\n    id: string;\n    /**\n     * Name of the column\n     */\n    name: string;\n    /**\n     * Data type of the column\n     */\n    dataType: string;\n    /**\n     * Is the column primary key\n     */\n    isPrimaryKey: boolean;\n    /**\n     * Is the column identity\n     */\n    isIdentity: boolean;\n}\n\nexport interface IForeignKey {\n    /**\n     * Id of the foreign key\n     */\n    id: string;\n    /**\n     * Name of the foreign key\n     */\n    name: string;\n    /**\n     * Parent columns of the relationship\n     */\n    columns: string[];\n    /**\n     * Referenced schema of the relationship\n     */\n    referencedSchemaName: string;\n    /**\n     * Referenced table of the relationship\n     */\n    referencedTableName: string;\n    /**\n     * Referenced columns of the relationship\n     */\n    referencedColumns: string[];\n    /**\n     * On delete action of the relationship\n     */\n    onDeleteAction: OnAction;\n    /**\n     * On update action of the relationship\n     */\n    onUpdateAction: OnAction;\n}\n\nexport enum OnAction {\n    CASCADE = \"0\",\n    NO_ACTION = \"1\",\n    SET_NULL = \"2\",\n    SET_DEFAULT = \"3\"\n}\n\nexport interface SchemaDesignerConfig {\n    /**\n     * Icons for the schema designer\n     */\n    icons: {\n        addTableIcon: string;\n        undoIcon: string;\n        redoIcon: string;\n        zoomInIcon: string;\n        zoomOutIcon: string;\n        zoomFitIcon: string;\n        deleteIcon: string;\n        entityIcon: string;\n        connectorIcon: string;\n        exportIcon: string;\n        autoArrangeCellsIcon: string;\n        editIcon: string;\n        cancelIcon: string;\n        primaryKeyIcon: string;\n        foreignKeyIcon: string;\n    }\n    /**\n     * Colors for the schema designer\n     */\n    colors: {\n        /**\n         * Defines the color to be used for the cell highlight\n         */\n        cellHighlight: string;\n        /**\n         * Defines the color to be used for the cell foreground\n         */\n        cellForeground: string;\n        /**\n         * Defines the color to be used for the cell background\n         */\n        cellBackground: string;\n        /**\n         * Defines the color to be used for the cell border\n         */\n        cellBorder: string;\n        /**\n         * Defines the color to be used for the cell column when the mouse is over it\n         */\n        cellColumnHover: string;\n        /**\n         * Defines the color to be used for dividers in cell html\n         */\n        cellDivider: string;\n        /**\n         * Defines the color to be used for the toolbar background\n         */\n        toolbarBackground: string;\n        /**\n         * Defines the color to be used for the toolbar buttons icons\n         */\n        toolbarForeground: string;\n        /**\n         * Defines the color to be used for the toolbar buttons when the mouse is over them\n         */\n        toolbarHoverBackground: string;\n        /**\n         * Defines the color to be used for the toolbar divider\n         */\n        toolbarDividerBackground: string;\n        /**\n         * Defines the color to be used for the graph background\n         */\n        graphBackground: string;\n        /**\n         * Defines the color to be used for the graph grid dots\n         */\n        graphGrid: string;\n        /**\n         * Defines the color to be used for edges (relationships)\n         */\n        edge: string;\n        /**\n         * Defines the color to be used for the outline sizer fill color\n         */\n        outlineHandleFill: string;\n        /**\n         * Defines the color to be used for the outline rectangle border\n         */\n        outline: string;\n        /**\n         * Specifies the color of the preview shape when the cell is moved\n         */\n        graphHandlePreview: string;\n\n    }\n    /**\n     * Font family for the graph\n     */\n    graphFontFamily: string;\n    /**\n     * If the schema designer is editable\n     */\n    isEditable: boolean;\n    /**\n     * Callback to show the editor to edit the entity\n     * @param cell cell to edit\n     * @param x x coordinate of the editor\n     * @param y y coordinate of the editor\n     * @param scale scale of the graph\n     */\n    editTable: (table: ITable, cell: mxCell, x: number, y: number, scale: number, model: ISchema) => void\n    /**\n     * Update the position of the editor based on changed in the graph\n     * @param x x coordinate of the editor\n     * @param y y coordinate of the editor\n     * @param scale scale of the graph\n     */\n    updateEditorPosition: (x: number, y: number, scale: number) => void;\n    /**\n     * Callback to publish the schema\n     * @param model schema model\n     */\n    publish: (model: ISchema) => void;\n}\n\n/**\n * Interface for edge cells in schema designer\n */\nexport interface EdgeCellValue extends IForeignKey {\n    /**\n     * Source row of the edge\n     */\n    sourceRow: number;\n    /**\n     * Target row of the edge\n     */\n    targetRow: number;\n}\n\nexport class extendedConnectionHandler extends mx.mxConnectionHandler {\n    public currentRow?: number = 0;\n    public sourceRowNode!: HTMLElement;\n    public currentRowNode!: HTMLElement;\n    public updateRow!: (targetNode: HTMLElement) => HTMLElement | null;\n}", "import { mxCellState, mxGraph } from \"mxgraph\";\nimport {mxGraphFactory as mx} from '../mx';\nimport { SchemaDesignerConfig } from \"./schemaDesignerInterfaces\";\n\nexport class SchemaDesignerToolbar {\n    private _toolbarDiv: HTMLElement;\n\n    public buttons: Map<string, HTMLElement> = new Map();\n\n    constructor(private _container: HTMLElement, private _graph: mxGraph, private _config: SchemaDesignerConfig) {\n        this._toolbarDiv = document.createElement(\"div\");\n        this._container.appendChild(this._toolbarDiv);\n        this._toolbarDiv.classList.add(\"sd-toolbar\");\n        this._toolbarDiv.style.color = this._config.colors.toolbarForeground;\n    }\n\n    public addButton(\n        icon: string,\n        title: string,\n        callback: () => void,\n        onDragEndCallback?: (graph: mxGraph, evt: MouseEvent, cell: mxCellState) => void) {\n        const button = document.createElement(\"div\");\n        this._toolbarDiv.appendChild(button);\n        button.classList.add(\"sd-toolbar-button\");\n        button.innerHTML = icon;\n        button.onclick = () => {\n            if (!this.isButtonDisabled(title)) {\n                callback();\n            }\n        }\n        button.title = title;\n        if (onDragEndCallback) {\n            const dragImage = button.cloneNode(true) as HTMLElement;\n            dragImage.style.backgroundColor = this._config.colors.toolbarBackground;\n            const ds = mx.mxUtils.makeDraggable(\n                button,\n                this._graph,\n                onDragEndCallback,\n                dragImage\n            );\n            ds.highlightDropTargets = true;\n        }\n        this.buttons.set(title, button);\n    }\n\n    public disableButton(title: string) {\n        this.buttons.get(title)?.classList.add(\"sd-toolbar-button-disabled\");\n    }\n\n    public enableButton(title: string) {\n        this.buttons.get(title)?.classList.remove(\"sd-toolbar-button-disabled\");\n    }\n\n    public isButtonDisabled(title: string) {\n        return this.buttons.get(title)?.classList.contains(\"sd-toolbar-button-disabled\");\n    }\n\n    public addDivider() {\n        const divider = document.createElement(\"div\");\n        this._toolbarDiv.appendChild(divider);\n        divider.classList.add(\"sd-toolbar-divider\");\n    }\n}", "import { mxCellState } from \"mxgraph\";\n\n/**\n * This function should return the vertical center of the column in an entity\n * @param state cell containing the entity of the column.\n * @param column column element.\n * @returns the vertical center of the column.\n */\nexport function getRowY(state: mxCellState, column: HTMLElement): number {\n    const s = state.view.scale;\n    if (!column) {\n        return state.y;\n    }\n    const div = column.parentNode as HTMLElement;\n    let y = state.y + (column.offsetTop - div.scrollTop + column.offsetHeight / 2) * s; // 5 is the magic number to make the line completely centered to the row.\n    if (div.scrollTop > column.offsetTop) { // If the column is above the visible area of the entity container div then we should use the top of the column container.\n        y = state.y + (div.offsetTop - 15) * s;\n    }\n    if (y > state.y + div.offsetTop * s + div.clientHeight * s) { // If the column is below the visible area of the entity container div then we should use the bottom of the column container.\n        y = state.y + (div.offsetTop + div.clientHeight - 5) * s;\n    }\n    return y;\n}", "export const hashToHex = hash => {\n  const c = (hash & 0x00ffffff).toString(16);\n  return `#${\"00000\".substring(0, 6 - c.length) + c}`;\n};\n", "export const hashToHsl = hash => {\n  const r = ((hash & 0xff0000) >> 16) / 255;\n  const g = ((hash & 0x00ff00) >> 8) / 255;\n  const b = (hash & 0x0000ff) / 255;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = 0;\n  let s = 0;\n  let l = (max + min) / 2;\n\n  if (max === min) {\n    h = s = 0;\n  } else {\n    const d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    switch (max) {\n      case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n      case g: h = (b - r) / d + 2; break;\n      case b: h = (r - g) / d + 4; break;\n    }\n    h /= 6;\n  }\n\n  return `hsl(${Math.round(h * 360)},${Math.round(s * 100)}%,${Math.round(l * 100)}%)`;\n};\n", "export const hashToRgb = hash => `rgb(${(hash & 0xff0000) >> 16},${(hash & 0x00ff00) >> 8},${hash & 0x0000ff})`;\n", "import { hashToHex } from \"./hashToHex\";\nimport { hashToHsl } from \"./hashToHsl\";\nimport { hashToRgb } from \"./hashToRgb\";\n\n/**\n * Generate the permanent color from any string, array or object.\n *\n * @param {string || object || array} str The parameter to generate hash\n * @param {object} args - The point generated by the factory.\n * @param {string} [args.format=\"hex\"] - The format of the returned color.\n *\n * @example\n * import createColor from \"create-color\"\n * const hsl = createColor(\"canThereBeAnyText\", {\n *  format: \"hsl\"\n * })\n *\n * @name createColor\n */\n\nconst createColor = (str, params = { format: \"hex\" }) => {\n  if (str == null) {\n    throw new Error(`[X] You didn't specify an input parameter for the hash`);\n  }\n\n  const hash = getHash(str);\n  const allFormats = {\n    hex: () => hashToHex(hash),\n    rgb: () => hashToRgb(hash),\n    hsl: () => hashToHsl(hash)\n  };\n\n  const format = params && params.format;\n  const keys = Object.keys(allFormats);\n  if (!keys.includes(format)) {\n    throw new Error(`\n      [X] Unknown format: ${format}. \n      The following formats are available: ${keys}\n    `);\n  }\n\n  return allFormats[format]();\n};\n\nconst getHash = str => {\n  const s = JSON.stringify(str);\n  return s.split(\"\").reduce((a, _, i) => (a += s.charCodeAt(i) + (a << 5)), 0);\n};\n\nexport default createColor;\n", "import { mxCellState, mxGraph, mxGraphModel } from \"mxgraph\";\nimport { IColumn, IForeignKey, ITable, SchemaDesignerConfig } from \"./schemaDesignerInterfaces\";\nimport createColor from \"create-color\";\nimport { mxGraphFactory as mx } from '../mx';\nimport { SchemaDesigner } from \"./schemaDesigner\";\n\nexport class SchemaDesignerTable implements ITable {\n    private eventListeners: { target: HTMLElement, eventName: string, callback?: any }[] = [];\n    /**\n     * The id of the table\n     */\n    public id: string;\n    /**\n     * The name of the table\n     */\n    public name: string;\n    /**\n     * The schema of the table\n     */\n    public schema: string;\n    /**\n     * The columns of the table\n     */\n    public columns: IColumn[];\n    /**\n     * Indicates if the table is being edited\n     */\n    public editor: boolean;\n    /**\n     * The parent div of the table\n     */\n    public parentDiv!: HTMLElement;\n    /**\n     * The foreign keys of the table\n     */\n    public foreignKeys: IForeignKey[] = [];\n\n    /**\n     * Creates a new instance of the SchemaDesignerEntity class\n     * @param entity entity to be rendered\n     * @param config schema designer configuration\n     * @param mxGraph mxGraph instance\n     * @param schemaDesigner schema designer instance\n     */\n    constructor(entity: ITable, private schemaDesigner: SchemaDesigner) {\n        this.id = entity.id;\n        this.name = entity.name;\n        this.schema = entity.schema;\n        this.columns = entity.columns;\n        // tracking foreign keys through mxCells instead of this object.\n        this.foreignKeys = [];\n        this.editor = false;\n    }\n\n    /**\n     * Renders the entity\n     * @returns the rendered entity\n     */\n    public render(): HTMLElement {\n        this.removeEventListeners();\n        return this.renderTableDiv();\n    }\n\n    /**\n     * Sets up the entity DOM\n     * @param parentNode node to be set up\n     * @param state state of the node\n     */\n    public setupEntityDOM(parentNode: HTMLElement, state: mxCellState): void {\n        const columnsDiv = parentNode.getElementsByClassName(\"sd-table-columns\")[0];\n        if (columnsDiv !== undefined && columnsDiv !== null) {\n            if (columnsDiv.getAttribute('scrollHandler') === null) {\n                columnsDiv.setAttribute('scrollHandler', 'true');\n                const updateEdges = mx.mxUtils.bind(this, () => {\n                    this.mxGraph.clearSelection();\n                    const edgeCount = this.mxModel.getEdgeCount(state.cell);\n                    // Only updates edges to avoid update in DOM order\n                    // for text label which would reset the scrollbar\n                    for (let i = 0; i < edgeCount; i++) {\n                        const edge = this.mxModel.getEdgeAt(state.cell, i);\n                        this.mxGraph.view.invalidate(edge, true, false);\n                        this.mxGraph.view.validate(edge);\n                    }\n                });\n                mx.mxEvent.addListener(columnsDiv, \"scroll\", () => {\n                    state.cell.value.scrollTop = columnsDiv.scrollTop;\n                    updateEdges();\n                });\n                mx.mxEvent.addListener(columnsDiv, \"mouseup\", updateEdges);\n            }\n        }\n        const editButton = parentNode.getElementsByClassName(\"sd-entity-edit-button\")[0];\n        if (editButton !== undefined && editButton !== null) {\n            if (editButton.getAttribute('clickHandler') !== null) {\n                return;\n            }\n            editButton.setAttribute('clickHandler', 'true');\n            this.addEventListeners(editButton as HTMLElement, \"click\", async () => {\n                this.editTable(state);\n            });\n        }\n    }\n\n    /**\n     * Edits the table\n     * @param state state of the entity\n     */\n    public async editTable(state: mxCellState): Promise<void> {\n        this.schemaDesigner.activeCellState = state;\n        this.editor = true;\n        const mxCellTableValue = state.cell.value as SchemaDesignerTable;\n        const table: ITable = {\n            id: mxCellTableValue.id,\n            name: mxCellTableValue.name,\n            schema: mxCellTableValue.schema,\n            columns: JSON.parse(JSON.stringify(mxCellTableValue.columns)), // clone the columns\n            foreignKeys: JSON.parse(JSON.stringify(mxCellTableValue.schemaDesigner.getForeignKeysForTable(state.cell)))\n        }\n        await this.schemaDesigner.config.editTable(table, state.cell, state.x, state.y, this.mxGraph.view.scale, this.schemaDesigner.schema);\n    }\n\n    /**\n     * Adds event listeners to the entity\n     */\n    public addEventListeners(div: HTMLElement, type: string, callback: (event: Event) => void): void {\n        this.eventListeners.push({\n            target: div,\n            eventName: type,\n            callback: callback\n        });\n        div.addEventListener(type, callback);\n    }\n\n    /**\n     * Removes event listeners from the entity\n     */\n    public removeEventListeners(): void {\n        this.eventListeners.forEach(listener => {\n            listener.target.removeEventListener(listener.eventName, listener.callback);\n        });\n    }\n\n    /**\n     * Gets the mxGraph model\n     */\n    public get mxModel(): mxGraphModel {\n        return this.schemaDesigner.mxGraph.getModel();\n    }\n\n    /**\n     * Gets the mxGraph instance\n     */\n    public get mxGraph(): mxGraph {\n        return this.schemaDesigner.mxGraph;\n    }\n\n    /**\n     * Gets the schema designer configuration\n     */\n    public get schemaDesignerConfig(): SchemaDesignerConfig {\n        return this.schemaDesigner.config;\n    }\n\n    /**\n     * Renders the table div\n     * @returns the table div\n     */\n    private renderTableDiv(): HTMLElement {\n        if (this.parentDiv) {\n            this.removeEventListeners();\n            this.parentDiv.remove();\n        }\n        const parent = document.createElement(\"div\");\n        this.parentDiv = parent;\n        parent.classList.add(\"sd-table\");\n\n        // Tables are colored based on the schema\n        const tableColor = createColor(this.schema, { format: \"hex\" });\n        const colorIndicator = document.createElement(\"div\");\n        colorIndicator.classList.add(\"sd-table-color-indicator\");\n        colorIndicator.style.backgroundColor = tableColor;\n        parent.appendChild(colorIndicator);\n\n        // Table header\n        const header = document.createElement(\"div\");\n        header.classList.add(\"sd-table-header\");\n        const headerIcon = document.createElement(\"div\");\n        headerIcon.innerHTML = this.schemaDesignerConfig.icons.entityIcon;\n        headerIcon.classList.add(\"sd-table-header-icon\");\n        headerIcon.innerHTML = this.schemaDesignerConfig.icons.entityIcon;\n        header.appendChild(headerIcon);\n        const headerText = document.createElement(\"div\");\n        headerText.classList.add(\"sd-table-header-text\");\n        const tableTitle = `${this.schema}.${this.name}`;\n        headerText.innerText = tableTitle;\n        headerText.title = tableTitle;\n        header.appendChild(headerText);\n\n        // Add edit button if the schema designer is editable\n        if (this.schemaDesignerConfig.isEditable) {\n            const button = document.createElement(\"button\");\n            button.type = \"button\";\n            button.classList.add(\"sd-entity-button\", \"sd-entity-edit-button\");\n            button.title = \"Edit\";\n            button.innerHTML = this.schemaDesignerConfig.icons.editIcon;\n            header.appendChild(button);\n        }\n\n        // Adding header to the parent\n        parent.appendChild(header);\n\n        // Adding columns\n        // TODO: Make this keyboard accessible\n        const columns = document.createElement(\"div\");\n        columns.classList.add(\"sd-table-columns\");\n        this.columns.forEach((column, index) => {\n            const columnDiv = document.createElement(\"div\");\n            columnDiv.classList.add(\"sd-table-column\");\n\n            // Add column constraint icon\n            const keyIcon = document.createElement(\"div\");\n            keyIcon.classList.add(\"sd-table-column-icon\");\n            if (column.isPrimaryKey) {\n                keyIcon.innerHTML = this.schemaDesignerConfig.icons.primaryKeyIcon;\n                keyIcon.title = \"Primary key\";\n            }\n            if (this.hasForeignKey(index)) {\n                keyIcon.innerHTML = this.schemaDesignerConfig.icons.foreignKeyIcon;\n                keyIcon.title = \"Foreign key\";\n            }\n            columnDiv.appendChild(keyIcon);\n\n            // Add column name\n            const columnNameDiv = document.createElement(\"div\");\n            columnNameDiv.classList.add(\"sd-table-column-text\");\n            columnNameDiv.title = column.name;\n            columnNameDiv.innerText = column.name;\n            columnNameDiv.title = this.getColumnTooltip(index);\n            columnDiv.appendChild(columnNameDiv);\n\n            // Add column data type\n            const columnDataTypeDiv = document.createElement(\"div\");\n            columnDataTypeDiv.classList.add(\"sd-table-column-datatype-text\");\n            columnDataTypeDiv.innerText = column.dataType;\n            columnDiv.appendChild(columnDataTypeDiv);\n            columnDiv.setAttribute(\"column-id\", index.toString());\n\n            columns.appendChild(columnDiv);\n        });\n        parent.appendChild(columns);\n        return parent;\n    }\n\n    /**\n     * Checks if the columns has a foreign key dependency\n     * @param index index of the column\n     * @returns true if the column has a foreign key dependency\n     */\n    private hasForeignKey(index: number): boolean {\n        const cells = this.mxGraph.getChildCells(this.mxGraph.getDefaultParent());\n        const vertex = cells.find(cell => cell.vertex && cell.value.name === this.name && cell.value.schema === this.schema);\n        if (vertex) {\n            const edges = this.mxGraph.getEdges(vertex);\n            const outgoingEdges = edges.filter(edge => edge.source === vertex);\n            for (const edge of outgoingEdges) {\n                if (edge.value.sourceRow - 1 === index) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Gets the column title for the tooltip\n     * @param index index of the column\n     * @returns column title\n     */\n    private getColumnTooltip(index: number): string {\n        const column = this.columns[index];\n        let columnTitle = `${column.name}`;\n        if (column.isPrimaryKey) {\n            columnTitle += ` Primary key`;\n        }\n        const cells = this.mxGraph.getChildCells(this.mxGraph.getDefaultParent());\n        const vertex = cells.find(cell => cell.vertex && cell.value.name === this.name && cell.value.schema === this.schema);\n        if (vertex) {\n            const edges = this.mxGraph.getEdges(vertex);\n            const outgoingEdges = edges.filter(edge => edge.source === vertex);\n            for (const edge of outgoingEdges) {\n                if (edge.value.sourceRow - 1 === index) {\n                    return columnTitle + ` Foreign key`;\n                }\n            }\n        }\n        return columnTitle;\n    }\n\n    public get width(): number {\n        return 400;\n    }\n\n    public get height(): number {\n        return Math.min(330, 52 + this.columns.length * 28) + 4;\n    }\n}\n", "import { mxCell, mxGraph } from \"mxgraph\";\nimport { mxGraphFactory as mx } from '../mx';\n\nexport class SchemaDesignerLayout extends mx.mxHierarchicalLayout {\n    constructor(graph: mxGraph) {\n        \n        super(graph, mx.mxConstants.DIRECTION_EAST, true);\n        this.isEdgeIgnored = (_edge: mxCell) => {\n            console.log('edge ignored', _edge.value);\n            return true;\n        };\n    }\n\n    public override execute(parent: mxCell): void {\n        \n        this.graph.getModel().beginUpdate();\n        this.interHierarchySpacing = 100;\n        this.orientation = mx.mxConstants.DIRECTION_WEST;\n\n        super.execute(parent);\n\n        // Move all cells to the right by 100px\n        let cells = this.graph.getModel().getChildCells(this.graph.getDefaultParent());\n        this.graph.moveCells(cells, 50, 50, false);\n\n        cells = cells.filter(cell => !cell.edge);\n        const cellSet = new Set(cells.map(cell => cell.id));\n\n        // Find all subgraphs\n        const subGraphs: mxCell[][] = [];\n        for (const cell of cells) {\n            if (cellSet.has(cell.id)) {\n                const subGraph: mxCell[] = [];\n                const queue: mxCell[] = [cell];\n                cellSet.delete(cell.id);\n                while (queue.length > 0) {\n                    const current = queue.shift() as mxCell;\n                    cellSet.delete(current.id);\n                    subGraph.push(current);\n                    const edges = this.graph.getModel().getEdges(current);\n                    for (const edge of edges) {\n                        let nextNode: mxCell | undefined = undefined;\n                        if (edge.source.id === current.id) {\n                            nextNode = edge.target;\n                        } else if (edge.target.id === current.id) {\n                            nextNode = edge.source;\n                        }\n                        if (nextNode !== undefined) {\n                            if (cellSet.has(nextNode!.id)) {\n                                queue.push(nextNode!);\n                                cellSet.delete(nextNode!.id);\n                            }\n                        }\n                    }\n                }\n                subGraphs.push(subGraph);\n            }\n        }\n\n        // Arranging all standalone cells in a grid layout. The grid row width is determined by the width of the biggest subgraph.\n\n        const boundingBoxes = subGraphs.map(subGraph => {\n            let minX = Number.MAX_VALUE;\n            let minY = Number.MAX_VALUE;\n            let maxX = Number.MIN_VALUE;\n            let maxY = Number.MIN_VALUE;\n            for (const cell of subGraph) {\n                const geo = cell.getGeometry();\n                if (geo) {\n                    minX = Math.min(minX, geo.x);\n                    minY = Math.min(minY, geo.y);\n                    maxX = Math.max(maxX, geo.x + geo.width);\n                    maxY = Math.max(maxY, geo.y + geo.height);\n                }\n            }\n            return { minX, minY, maxX, maxY };\n        });\n\n        const maxX = Math.max(...boundingBoxes.map(box => box.maxX));\n\n        const standaloneCells: mxCell[] = [];\n\n        for (const subGraph of subGraphs) {\n            if (subGraph.length === 1) {\n                standaloneCells.push(...subGraph);\n            }\n        }\n\n        const startX = Math.min(...standaloneCells.map(cell => cell.geometry.x));\n        const startY = Math.min(...standaloneCells.map(cell => cell.geometry.y));\n\n        const intercellSpacing = 100;\n\n        let currentX = startX;\n        let currentY = startY;\n        let currentRowMaxHeight = 0;\n        for (let i = 0; i < standaloneCells.length; i++) {\n            if(currentX + intercellSpacing > maxX) {\n                currentX = startX;\n                currentY = currentY + currentRowMaxHeight + intercellSpacing;\n                currentRowMaxHeight = 0;\n            }\n            const cell = standaloneCells[i];\n            cell.geometry.x = currentX;\n            cell.geometry.y = currentY;\n\n            currentX = currentX + cell.geometry.width + intercellSpacing;\n            currentRowMaxHeight = Math.max(currentRowMaxHeight, cell.geometry.height);\n        }\n\n        this.graph.getModel().endUpdate();\n    }\n}", "import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n", "let getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n", "const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default { randomUUID };\n", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n", "import './schemaDesigner.css';\nimport '../../css/common.css';\n\nimport { EdgeCellValue, extendedConnectionHandler, IColumn, IForeignKey, ISchema, ITable, OnAction, SchemaDesignerConfig } from './schemaDesignerInterfaces';\nimport { mxCell, mxCellState, mxEditor, mxGraph, mxGraphLayout, mxGraphModel } from 'mxgraph';\nimport { mxGraphFactory as mx } from '../mx';\nimport { SchemaDesignerToolbar } from './schemaDesignerToolbar';\nimport { getRowY } from './utils';\nimport { SchemaDesignerTable } from './schemaDesignerEntity';\nimport { SchemaDesignerLayout } from './schemaDesignerLayout';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport class SchemaDesigner {\n    /**\n     * Array of registered listeners for cell clicks\n     */\n    private cellClickListeners: ((cell: mxCell) => void)[] = [];\n    /**\n     * mxCellState for the currently edited cell\n     */\n    private _activeCellState!: mxCellState;\n\n    /**\n     * mxEditor instance for the schema designer\n     */\n    public mxEditor!: mxEditor;\n    /**\n     * mxGraph instance for the schema designer\n     */\n    public mxGraph!: mxGraph;\n    /**\n     * mxModel instance for the schema designer\n     */\n    public mxModel!: mxGraphModel;\n    /**\n     * mxLayout instance for the schema designer\n     */\n    public mxLayout!: mxGraphLayout;\n    /**\n     * Toolbar for the schema designer\n     */\n    public toolbar!: SchemaDesignerToolbar;\n\n\n    constructor(\n        private container: HTMLElement,\n        public config: SchemaDesignerConfig\n    ) {\n        this.initializeGraph();\n    }\n\n    /**\n     * Sets up the mxGraph instance for the schema designer\n     */\n    private initializeGraph() {\n        this.overwriteMxGraphDefaults();\n        this.configureEdgeTerminals();\n        this.mxEditor = new mx.mxEditor();\n        this.mxEditor.setGraphContainer(this.container);\n        this.mxGraph = this.mxEditor.graph;\n        this.mxModel = this.mxGraph.getModel();\n        this.configureMxEditor();\n        this.configureMxGraph();\n        this.applyColors();\n        this.configureMxOutline();\n        this.initializeToolbar();\n    }\n\n    /**\n     * Applies the colors from the config to the schema designer\n     */\n    private applyColors() {\n        const body = document.getElementsByTagName(\"body\")[0];\n        body.style.setProperty(\"--sd-toolbar-background-color\", this.config.colors.toolbarBackground);\n        body.style.setProperty(\"--sd-toolbar-foreground-color\", this.config.colors.toolbarForeground);\n        body.style.setProperty(\"--sd-toolbar-hover-background-color\", this.config.colors.toolbarHoverBackground);\n        body.style.setProperty(\"--sd-toolbar-divider-background-color\", this.config.colors.toolbarDividerBackground);\n\n        body.style.setProperty(\"--sd-graph-background-color\", this.config.colors.graphBackground);\n        body.style.setProperty(\"--sd-graph-grid-color\", this.config.colors.graphGrid);\n        body.style.setProperty(\"--sd-border-color\", this.config.colors.cellBorder);\n\n        body.style.setProperty(\"--sd-cell-html-foreground\", this.config.colors.cellForeground);\n        body.style.setProperty(\"--sd-cell-html-hover-column-background\", this.config.colors.cellColumnHover);\n        body.style.setProperty(\"--sd-cell-divider-color\", this.config.colors.cellDivider);\n        body.style.setProperty(\"--sd-graph-background-color\", this.config.colors.cellBackground);\n\n        this.mxGraph.getStylesheet().getDefaultVertexStyle()[mx.mxConstants.STYLE_FILLCOLOR] = this.config.colors.cellBackground;\n        this.mxGraph.getStylesheet().getDefaultVertexStyle()['cellHighlightColor'] = this.config.colors.cellHighlight;\n        this.mxGraph.getStylesheet().getDefaultVertexStyle()['cellHighlightStrokeWidth'] = 3;\n\n        this.mxGraph.getStylesheet().getDefaultEdgeStyle()['cellHighlightColor'] = this.config.colors.cellHighlight;\n        this.mxGraph.getStylesheet().getDefaultEdgeStyle()[\"strokeColor\"] = this.config.colors.edge;\n\n        mx.mxConstants.OUTLINE_HANDLE_FILLCOLOR = this.config.colors.outlineHandleFill\n        mx.mxConstants.OUTLINE_HANDLE_STROKECOLOR = this.config.colors.outlineHandleFill;\n        mx.mxConstants.OUTLINE_COLOR = this.config.colors.outline;\n\n        this.mxGraph.graphHandler.previewColor = this.config.colors.graphHandlePreview;\n    }\n\n    /**\n     * Overwrites the default mxGraph settings\n     */\n    private overwriteMxGraphDefaults() {\n        mx.mxClient.NO_FO = true;\n        mx.mxEvent.disableContextMenu(this.container);\n    }\n\n    /**\n     * Configures the edge terminals for the schema designer for different cardinalities\n     */\n    private configureEdgeTerminals() {\n        mx.mxMarker.addMarker(\"one\", (canvas, _shape, _type, pe, unitX, unitY, size, _source, _sw, _filled) => {\n            return () => {\n                const endX = pe.x - unitX * size;\n                const endY = pe.y - unitY * size;\n\n                const midX = endX - unitY * size;\n                const midY = endY + unitX * size;\n\n                const startX = endX + unitY * size;\n                const startY = endY - unitX * size;\n\n                canvas.begin();\n                canvas.moveTo(startX, startY);\n                canvas.lineTo(midX, midY);\n                canvas.stroke();\n            };\n        });\n\n        mx.mxMarker.addMarker(\"many\", (canvas, _shape, _type, pe, unitX, unitY, size, _source, _sw, _filled) => {\n            return () => {\n                const arrowSize = 1.5;\n                const startX = pe.x - unitX * size * arrowSize;\n                const startY = pe.y - unitY * size * arrowSize;\n\n                const Y1 = pe.y + unitX * size * arrowSize;\n                const X1 = pe.x;\n                const Y2 = pe.y - unitX * size * arrowSize;\n                const X2 = pe.x;\n\n                canvas.begin();\n                canvas.moveTo(startX, startY);\n                canvas.lineTo(X1, Y1);\n                canvas.stroke();\n\n                canvas.begin();\n                canvas.moveTo(startX, startY);\n                canvas.lineTo(X2, Y2);\n                canvas.stroke();\n            };\n        });\n    }\n\n    /**\n     * Configures the mxEditor instance for the schema designer\n     */\n    private configureMxEditor() {\n        this.mxEditor.layoutSwimlanes = true;\n    }\n\n    /**\n     * Configures the mxGraph instance for the schema designer\n     */\n    private configureMxGraph() {\n        this.mxGraph.tooltipHandler.setEnabled(false);\n        this.mxGraph.setConnectable(this.config.isEditable);\n        this.mxGraph.setAllowDanglingEdges(false);\n        this.mxGraph.setHtmlLabels(true);\n        this.mxGraph.connectionHandler.enabled = this.config.isEditable;\n        this.mxGraph.connectionHandler.movePreviewAway = false;\n        this.mxGraph.connectionHandler.moveIconFront = true;\n        this.mxGraph.connectionHandler.connectImage = new mx.mxImage(\n            this.config.icons.connectorIcon,\n            24,\n            24\n        );\n        this.mxGraph.connectionHandler.factoryMethod = null!;\n        this.mxLayout = new SchemaDesignerLayout(this.mxGraph);\n\n        this.mxGraph.setCellsDisconnectable(false);\n        this.mxGraph.autoSizeCellsOnAdd = true;\n        this.mxGraph.getSelectionModel().setSingleSelection(true);\n        this.mxGraph.setPanning(true);\n        this.mxGraph.panningHandler.useLeftButtonForPanning = true;\n\n        this.mxGraph.view.updateFloatingTerminalPoint = function (edge, start, end, source) {\n            const next = this.getNextPoint(edge, end, source);\n            if (start?.text?.node === undefined) {\n                // This means that the start cell doesn't have a label.\n                return;\n            }\n\n            const div = start.text.node.getElementsByClassName(\"sd-table-columns\")[0];\n\n            let x = start.x;\n            let y = start.getCenterY();\n            // Checks on which side of the terminal to leave\n            if (next.x > x + start.width / 2) {\n                x += start.width;\n            }\n\n            if (div !== null && div !== undefined) {\n                y = start.getCenterY() - div.scrollTop;\n                if (\n                    edge.cell.value !== undefined &&\n                    !this.graph.isCellCollapsed(start.cell)\n                ) {\n                    const edgeCellValue = edge.cell.value as EdgeCellValue;\n                    const row = source ? edgeCellValue.sourceRow : edgeCellValue.targetRow;\n                    const columns = div.getElementsByClassName(\"sd-table-column\");\n                    const column = columns[Math.min(columns.length - 1, row - 1)] as HTMLElement;\n                    // Gets vertical center of source or target row\n                    if (column !== undefined || column !== null) {\n                        y = getRowY(start, column);\n                    } else {\n                        return;\n                    }\n                }\n\n                if (edge !== null && edge.absolutePoints !== null) {\n                    next.y = y;\n                }\n            } else {\n                return;\n            }\n\n            edge.setAbsoluteTerminalPoint(new mx.mxPoint(x, y), source);\n\n            if (start.cell.value.scrollTop) {\n                div.scrollTop = start.cell.value.scrollTop;\n            }\n\n            // /**\n            //  * Routes multiple incoming edges along common waypoints if the edges\n            //  * have the common target row\n            //  */\n\n            // if (source && edge.cell.value !== undefined && start !== null && end !== null) {\n            //     let edges = this.graph.getEdgesBetween(start.cell, end.cell, true);\n            //     const tmp = [];\n\n            //     // Filters the edges with the same source row\n            //     const row = (edge.cell.value as EdgeCellValue).targetRow;\n\n            //     for (let i = 0; i < edges.length; i++) {\n            //         if (\n            //             edges[i].value !== undefined &&\n            //             (edges[i].value as EdgeCellValue).targetRow === row\n            //         ) {\n            //             tmp.push(edges[i]);\n            //         }\n            //     }\n\n            //     edges = tmp;\n\n            //     if (edges.length > 1 && edge.cell === edges[edges.length - 1]) {\n            //         // Finds the vertical center\n            //         const states = [];\n            //         let y = 0;\n\n            //         for (let i = 0; i < edges.length; i++) {\n            //             states[i] = this.getState(edges[i]);\n            //             y += states[i].absolutePoints[0].y;\n            //         }\n\n            //         y /= edges.length;\n\n            //         for (let i = 0; i < states.length; i++) {\n            //             const x = states[i].absolutePoints[1].x;\n\n            //             if (states[i].absolutePoints.length < 5) {\n            //                 states[i].absolutePoints.splice(2, 0, new mx.mxPoint(x, y));\n            //             } else {\n            //                 states[i].absolutePoints[2] = new mx.mxPoint(x, y);\n            //             }\n\n            //             // Must redraw the previous edges with the changed point\n            //             if (i < states.length - 1) {\n            //                 this.graph.cellRenderer.redraw(states[i]);\n            //             }\n            //         }\n            //     }\n            // }\n\n        };\n\n        this.mxGraph.getLabel = (cell) => {\n            if (cell?.value?.render !== undefined) {\n                return cell.value.render();\n            }\n            return document.createElement(\"div\");\n        };\n        this.mxGraph.isHtmlLabel = (cell) => {\n            return !this.mxModel.isEdge(cell);\n        }\n        this.mxGraph.isCellEditable = (_cell) => {\n            return false; //this._config.isEditable && !this._model.isEdge(cell);\n        }\n        this.mxGraph.isCellMovable = (cell) => {\n            return this.config.isEditable && !this.mxModel.isEdge(cell);\n        }\n        this.mxGraph.isCellResizable = (_cell) => {\n            return false;\n        }\n        this.mxGraph.isCellFoldable = (_cell) => {\n            return false;\n        }\n        this.mxGraph.convertValueToString = function (cell) {\n            if (cell?.value?.entity?.name !== undefined) {\n                return cell.value.entity.name;\n            }\n            return mx.mxGraph.prototype.convertValueToString.apply(this, [cell]);\n        }\n        this.mxGraph.model.valueForCellChanged = function (cell, value) {\n            const old = {\n                id: cell.value.id,\n                name: cell.value.name,\n                schema: cell.value.schema,\n                columns: cell.value.columns\n            };\n            cell.value.id = value.id;\n            cell.value.name = value.name;\n            cell.value.schema = value.schema;\n            cell.value.columns = value.columns;\n            return old;\n        }\n        const oldRedrawLabel = this.mxGraph.cellRenderer.redrawLabel;\n        this.mxGraph.cellRenderer.redrawLabel = function (state) {\n            oldRedrawLabel.apply(this, arguments as any); // super call;\n            const graph = state.view.graph;\n            const model = graph.model;\n            if (model.isVertex(state.cell) && state.text !== null) {\n                const value = state.cell.value as SchemaDesignerTable;\n                if (value.setupEntityDOM !== undefined) {\n                    value.setupEntityDOM(state.text.node, state);\n                }\n            }\n        };\n\n        (this.mxGraph.connectionHandler as extendedConnectionHandler).updateRow = function (target) {\n            if (target === null) {\n                return target;\n            }\n\n            const column = target.closest(\".sd-table-column\");\n            if (column !== null) {\n                this.currentRow = parseInt(column.getAttribute(\"column-id\")!) + 1;\n                return column as HTMLElement;\n            }\n\n            return null;\n        };\n\n        // Adds placement of the connect icon based on the mouse event target (row)\n        (this.mxGraph.connectionHandler as extendedConnectionHandler).updateIcons = function (state, icons: any, me) {\n            const targetNode = me.getSource() as HTMLElement;\n\n            const columnDiv = this.updateRow(targetNode) as HTMLElement;\n            if (columnDiv !== null && this.currentRow !== undefined) {\n                const columnsDiv = columnDiv.parentElement!;\n                const s = state.view.scale;\n                icons[0].node.style.userSelect = \"none\";\n                icons[0].node.style.visibility = \"visible\";\n                icons[0].bounds.width = s * 24;\n                icons[0].bounds.height = s * 24;\n                icons[0].bounds.x = state.x + columnDiv.offsetWidth * s;\n                icons[0].bounds.y =\n                    state.y +\n                    columnDiv.offsetTop * s +\n                    - columnsDiv.scrollTop +\n                    (columnDiv.offsetHeight * s) / 2 -\n                    icons[0].bounds.height / 2;\n                if (icons[0].node.getAttribute(\"cell-id\") === state.cell.id && icons[0].node.getAttribute(\"row-id\") === this.currentRow.toString()) {\n                    return;\n                }\n                icons[0].node.setAttribute(\"cell-id\", state.cell.id);\n                icons[0].node.setAttribute(\"row-id\", this.currentRow.toString());\n                icons[0].redraw();\n                this.currentRowNode = columnDiv;\n            } else {\n                icons[0].node.style.visibility = \"hidden\";\n            }\n        };\n\n        const oldMouseMove = this.mxGraph.connectionHandler.mouseMove;\n        (this.mxGraph.connectionHandler as extendedConnectionHandler).mouseMove = function (_sender, me) {\n            if (this.edgeState !== null) {\n                this.currentRowNode = this.updateRow(me.getSource() as HTMLElement) as HTMLElement;\n                const cellValue = this.edgeState.cell.value as EdgeCellValue;\n                const sourceTableValue = (this as any).previous.cell.value as SchemaDesignerTable;\n                if (this.currentRow !== null && this.currentRow !== undefined) {\n                    const targetCellState = (this as any).currentState as mxCellState;\n                    if (targetCellState?.cell?.value) {\n                        const targetCellValue = targetCellState.cell.value as SchemaDesignerTable;\n                        if (cellValue) {\n                            const targetColumnName = targetCellValue.columns[this.currentRow - 1].name;\n                            cellValue.targetRow = this.currentRow;\n                            cellValue.referencedColumns = [targetColumnName];\n                            cellValue.referencedSchemaName = targetCellValue.schema;\n                            cellValue.referencedTableName = targetCellValue.name;\n                            cellValue.name = `FK_${sourceTableValue.name}_${cellValue.referencedTableName}`;\n                        }\n                    }\n                } else {\n                    cellValue.targetRow = 0;\n                }\n            }\n            oldMouseMove.apply(this, arguments as any);\n        };\n\n        (this.mxGraph.connectionHandler as extendedConnectionHandler).createEdgeState = function (_me) {\n            const sourceCellState = (this as any).currentState as mxCellState;\n            const sourceCellValue = sourceCellState.cell.value as SchemaDesignerTable;\n            const targetColumnName = sourceCellValue.columns[this.currentRow ? this.currentRow - 1 : 0].name;\n            const foreignKey: EdgeCellValue = {\n                sourceRow: this.currentRow || 0,\n                targetRow: 0,\n                id: uuidv4(),\n                name: '',\n                columns: [targetColumnName],\n                referencedSchemaName: '',\n                referencedTableName: '',\n                referencedColumns: [],\n                onDeleteAction: OnAction.CASCADE,\n                onUpdateAction: OnAction.CASCADE\n            };\n            const edge = this.createEdge(foreignKey);\n            const style = this.graph.getCellStyle(edge);\n            const state = new mx.mxCellState(this.graph.view, edge, style);\n            this.sourceRowNode = this.currentRowNode;\n            return state;\n        };\n\n        (this.mxGraph.connectionHandler as extendedConnectionHandler).isValidTarget = function (_cell) {\n            return this.currentRowNode !== null;\n        };\n\n        (this.mxGraph.connectionHandler as extendedConnectionHandler).validateConnection = function (source, target) {\n            if (this.edgeState === null) {\n                return null!;\n            }\n            if (this.currentRowNode === null) {\n                return \"\";\n            }\n            // No connection to edge cells\n            if (this.graph.model.isEdge(target)) {\n                return \"\";\n            }\n\n            if (source === target) {\n                return \"\";\n            }\n\n            const edgeState = this.edgeState;\n            const edgeStateValue = edgeState.cell.value as EdgeCellValue;\n            const edgeBetweenSourceAndTarget = this.graph.model.getEdgesBetween(source, target);\n            for (let i = 0; i < edgeBetweenSourceAndTarget.length; i++) {\n                const edge = edgeBetweenSourceAndTarget[i];\n                const edgeValue = edge.value as EdgeCellValue;\n                // No repeated edges\n                if (\n                    edgeValue.sourceRow === edgeStateValue.sourceRow &&\n                    edgeValue.targetRow === edgeStateValue.targetRow &&\n                    edge.source === source &&\n                    edge.target === target\n                ) {\n                    return \"\";\n                }\n\n                // No cyclic connections\n                if (\n                    // edgeValue.sourceRow === edgeStateValue.targetRow &&\n                    // edgeValue.targetRow === edgeStateValue.sourceRow &&\n                    edge.source === target &&\n                    edge.target === source\n                ) {\n                    return \"\";\n                }\n            }\n            return null!;\n        };\n\n        (this.mxGraph.connectionHandler as extendedConnectionHandler).getTargetPerimeterPoint = function (state, me) {\n            let y = me.getY();\n            if (this.currentRowNode !== null) {\n                y = getRowY(state, this.currentRowNode);\n            }\n            let x = state.x;\n            if (this.getEventSource().getCenterX() > state.getCenterX()) {\n                x += state.width;\n            }\n            return new mx.mxPoint(x, y);\n        };\n\n        (this.mxGraph.connectionHandler as extendedConnectionHandler).getSourcePerimeterPoint = function (state, next, me) {\n            let y = me.getY();\n            if (this.sourceRowNode !== null) {\n                y = getRowY(state, this.sourceRowNode);\n            }\n\n            // Checks on which side of the terminal to leave\n            let x = state.x;\n\n            if (next.x > state.getCenterX()) {\n                x += state.width;\n            }\n\n            return new mx.mxPoint(x, y);\n        };\n\n        this.mxGraph.connectionHandler.addListener(mx.mxEvent.CONNECT, (_sender, evt) => {\n            const edge = evt.getProperty('cell');\n            const source = this.mxGraph.getModel().getTerminal(edge, true);\n            this.mxGraph.view.invalidate(source, false, false);\n            this.mxGraph.view.validate(source);\n        });\n\n        this.mxGraph.addListener(mx.mxEvent.REMOVE_CELLS, (_sender, evt) => {\n            const removedCell = evt.properties.cells[0];\n            if (removedCell !== undefined && removedCell.edge) {\n                const source = this.mxGraph.getModel().getTerminal(removedCell, true);\n                this.mxGraph.view.invalidate(source, false, false);\n                this.mxGraph.view.validate(source);\n            }\n        });\n\n        this.mxGraph.addListener(mx.mxEvent.DOUBLE_CLICK, (_sender, _evt) => {\n            const cell = this.mxGraph.getSelectionCell();\n            if (cell !== undefined) {\n                this.cellClickListeners.forEach((listener) => listener(cell));\n            }\n        });\n        this.mxGraph.getStylesheet().getDefaultEdgeStyle()['edgeStyle'] = mx.mxEdgeStyle.ElbowConnector;\n    }\n\n    /**\n     * Configures the mxGraph outline for the schema designer\n     */\n    private configureMxOutline() {\n        const outlineContainer = document.createElement(\"div\");\n        outlineContainer.classList.add(\"sd-outline\");\n        this.container.appendChild(outlineContainer);\n        new mx.mxOutline(this.mxGraph, outlineContainer);\n    }\n\n    /**\n     * Initializes the toolbar for the schema designer\n     */\n    private initializeToolbar() {\n        const toolbarBelt = document.createElement(\"div\");\n        toolbarBelt.classList.add(\"sd-toolbar-belt\");\n        (this.container.parentElement as HTMLElement).appendChild(toolbarBelt);\n        this.toolbar = new SchemaDesignerToolbar(toolbarBelt, this.mxGraph, this.config);\n        if (this.config.isEditable) {\n            this.toolbar.addButton(\n                this.config.icons.addTableIcon,\n                \"Add Table\",\n                () => {\n                },\n                (_graph, evt, _cell) => {\n                    this.mxGraph.stopEditing(false);\n                    const pt = this.mxGraph.getPointForEvent(evt, true);\n                    const entity: ITable = this.createTable();\n                    const cell = this.renderTable(entity, pt.x, pt.y);\n                    // Get cell state\n                    const state = this.mxGraph.view.getState(cell);\n                    if (state !== undefined) {\n                        (cell.value as SchemaDesignerTable).editTable(state);\n                    }\n                }\n            );\n            this.toolbar.addDivider();\n            this.toolbar.addButton(\n                this.config.icons.undoIcon,\n                \"Undo\",\n                () => {\n                    this.mxEditor.execute(\"undo\");\n                }\n            );\n            this.toolbar.addButton(\n                this.config.icons.redoIcon,\n                \"Redo\",\n                () => {\n                    this.mxEditor.execute(\"redo\");\n                }\n            );\n            this.toolbar.addDivider();\n        }\n\n\n        this.toolbar.addButton(\n            this.config.icons.zoomInIcon,\n            \"Zoom In\",\n            () => {\n                this.mxEditor.execute(\"zoomIn\");\n                this.redrawEdges();\n                this.updateEditorPosition();\n            }\n        );\n\n        this.toolbar.addButton(\n            this.config.icons.zoomOutIcon,\n            \"Zoom Out\",\n            () => {\n                this.mxEditor.execute(\"zoomOut\");\n                this.redrawEdges();\n                this.updateEditorPosition();\n            }\n        );\n\n        this.toolbar.addButton(\n            this.config.icons.zoomFitIcon,\n            \"Fit\",\n            () => {\n                this.mxGraph.fit(undefined!);\n                this.updateEditorPosition();\n            }\n        );\n\n        this.toolbar.addDivider();\n\n        this.toolbar.addButton(\n            this.config.icons.autoArrangeCellsIcon,\n            \"Auto Arrange\",\n            () => {\n                this.autoLayout();\n            }\n        );\n\n        if (this.config.isEditable) {\n            this.toolbar.addDivider();\n            this.toolbar.addButton(\n                this.config.icons.deleteIcon,\n                \"Delete\",\n                () => {\n                    const cell = this.mxGraph.getSelectionCell();\n                    if (cell !== undefined) {\n                        this.mxEditor.execute(\"delete\", cell);\n                    }\n                }\n            );\n            this.toolbar.addDivider();\n            this.toolbar.addButton(\n                this.config.icons.exportIcon,\n                \"Export\",\n                () => {\n                    const schema = this.schema;\n                    this.config.publish(schema);\n                }\n            );\n        }\n    }\n\n    /**\n     * Redraws the edges in the schema designer\n     */\n    private redrawEdges() {\n        const cells = this.mxModel.getChildCells(this.mxGraph.getDefaultParent());\n        for (let i = 0; i < cells.length; i++) {\n            if (!cells[i].edge) {\n                continue;\n            }\n            const edge = cells[i];\n            this.mxGraph.view.invalidate(edge, true, false);\n            this.mxGraph.view.validate(edge);\n        }\n    }\n\n    /**\n     * Sets the current cell under edit\n     */\n    public set activeCellState(value: mxCellState) {\n        if (this._activeCellState !== undefined && value.cell.id !== this._activeCellState.cell.id\n        ) {\n            this._activeCellState.cell.value.editor = false;\n        }\n        this._activeCellState = value;\n    }\n\n    /**\n     * Renders the schema in the schema designer\n     * @param schema The schema to render\n     * @param cleanUndoManager Whether to clean the undo manager so that the user can't undo the rendering\n     */\n    public renderSchema(schema: ISchema, cleanUndoManager: boolean = false) {\n        const parent = this.mxGraph.getDefaultParent();\n        this.mxModel.beginUpdate();\n        try {\n            this.mxGraph.removeCells(this.mxModel.getChildCells(parent));\n            const tables = schema.tables;\n            for (let i = 0; i < tables.length; i++) {\n                const table = tables[i];\n                this.renderTable(table, 100 + i * 50, 100 + i * 50);\n            }\n\n            for (let i = 0; i < tables.length; i++) {\n                const table = tables[i];\n                for (let j = 0; j < table.foreignKeys.length; j++) {\n                    const foreignKey = table.foreignKeys[j];\n                    this.renderForeignKey(foreignKey, table);\n                }\n            }\n        } finally {\n            this.mxModel.endUpdate();\n            this.mxGraph.view.refresh();\n            const parentCells = [];\n            for (let i = 0; i < this.mxModel.cells.length; i++) {\n                if (this.mxModel.cells[i].vertex) {\n                    if (this.mxModel.getIncomingEdges(this.mxModel.cells[i]).length === 0) {\n                        parentCells.push(this.mxModel.cells[i]);\n                    }\n\n                }\n            }\n            this.autoLayout();\n            if (cleanUndoManager) {\n                this.mxEditor.undoManager.clear();\n            }\n        }\n    }\n\n    /**\n     * Renders an entity in the schema designer\n     * @param entity The entity to render\n     * @param x the x position to render the entity at\n     * @param y the y position to render the entity at\n     * @returns The cell that was rendered\n     */\n    public renderTable(entity: ITable, x: number, y: number): mxCell {\n        const entityValue = new SchemaDesignerTable(entity, this);\n        const entityCell = new mx.mxCell(\n            entityValue,\n            new mx.mxGeometry(\n                0,\n                0,\n                entityValue.width,\n                entityValue.height\n            )\n        );\n        entityCell.setVertex(true);\n        this.mxModel.beginUpdate();\n        try {\n            entityCell.geometry.x = x;\n            entityCell.geometry.y = y;\n            entityCell.geometry.alternateBounds = new mx.mxRectangle(0, 0, entityCell.geometry.width, entityCell.geometry.height);\n            this.mxGraph.addCell(entityCell, this.mxGraph.getDefaultParent());\n        } finally {\n            this.mxModel.endUpdate();\n        }\n        this.mxGraph.setSelectionCell(entityCell);\n        return entityCell;\n    }\n\n    /**\n     * Renders a relationship in the schema designer\n     * @param relationship The relationship to render\n     * @returns The edge that was rendered\n     */\n    public renderForeignKey(foreignKey: IForeignKey, sourceTable: ITable): void {\n        const cells = this.mxModel.getChildCells(this.mxGraph.getDefaultParent());\n        const source = cells.find((cell) => {\n            const value = cell.value as SchemaDesignerTable\n            return value.name === sourceTable.name && value.schema === sourceTable.schema;\n        });\n        const target = cells.find((cell) => {\n            const value = cell.value as SchemaDesignerTable\n            return value.name === foreignKey.referencedTableName && value.schema === foreignKey.referencedSchemaName\n        });\n        if (source === undefined || target === undefined) {\n            return;\n        }\n\n        const sourceValue = source.value as SchemaDesignerTable;\n        const targetValue = target.value as SchemaDesignerTable;\n\n        // One edge for each column mapping\n        for (let i = 0; i < foreignKey.columns.length; i++) {\n            const sourceRowIndex = sourceValue.columns.findIndex((column: IColumn) => column.name === foreignKey.columns[i]) + 1;\n            const targetRowIndex = targetValue.columns.findIndex((column: IColumn) => column.name === foreignKey.referencedColumns[i]) + 1;\n            const edgeValue: EdgeCellValue = {\n                sourceRow: sourceRowIndex,\n                targetRow: targetRowIndex,\n                columns: [foreignKey.columns[i]],\n                name: foreignKey.name,\n                onDeleteAction: foreignKey.onDeleteAction,\n                onUpdateAction: foreignKey.onUpdateAction,\n                referencedTableName: targetValue.name,\n                referencedColumns: [foreignKey.referencedColumns[i]],\n                referencedSchemaName: targetValue.schema,\n                id: foreignKey.id\n            };\n            this.mxGraph.insertEdge(this.mxGraph.getDefaultParent(), null!, edgeValue, source, target);\n        }\n        this.mxGraph.view.invalidate(source, false, false);\n        this.mxGraph.view.validate(source);\n        this.mxGraph.view.invalidate(target, false, false);\n        this.mxGraph.view.validate(target);\n    }\n\n    /**\n     * Gets the current schema from the schema designer\n     */\n    public get schema(): ISchema {\n        const schema: ISchema = {\n            tables: []\n        };\n        const cells = this.mxModel.getChildCells(this.mxGraph.getDefaultParent());\n        for (let i = 0; i < cells.length; i++) {\n            const cell = cells[i];\n            if (cell.vertex) {\n                const table: ITable = {\n                    columns: cell.value.columns,\n                    name: cell.value.name,\n                    schema: cell.value.schema,\n                    foreignKeys: [],\n                    id: cell.value.id\n                };\n                schema.tables.push(table);\n                table.foreignKeys = this.getForeignKeysForTable(cell);\n            }\n        }\n        return schema;\n    }\n\n    /**\n     * Automatically arranges the cells in the schema designer\n     */\n    public autoLayout() {\n        this.mxModel.beginUpdate();\n        this.mxLayout.execute(this.mxGraph.getDefaultParent());\n        this.mxModel.endUpdate();\n    }\n\n    /**\n     * Registers a listener for cell clicks\n     * @param listener The listener to register\n     */\n    public addCellClickListener(listener: (cell: mxCell) => void) {\n        this.cellClickListeners.push(listener);\n    }\n\n    /**\n     * Scrolls to a cell in the schema designer\n     * @param cell The cell to scroll to\n     */\n    public scrollToCell(cell: mxCell) {\n        this.mxGraph.scrollCellToVisible(cell, true);\n    }\n\n    /**\n     * Updates the position of the editor in the schema designer. This is called\n     * when the graph scales or when the graph is moved\n     */\n    public updateEditorPosition() {\n        this.config.updateEditorPosition(this._activeCellState.x, this._activeCellState.y, this.mxGraph.view.scale);\n    }\n\n    /**\n     * Gets the relationships of an entity\n     * @param entityCellState The cell state of the entity\n     * @returns The relationships of the entity\n     */\n    public getTableRelationships(entityCellState: mxCellState): {\n        outgoing: mxCell[];\n        incoming: mxCell[];\n    } {\n        const outgoing: mxCell[] = [];\n        const incoming: mxCell[] = [];\n        const cells = this.mxModel.getChildCells(this.mxGraph.getDefaultParent());\n        for (let i = 0; i < cells.length; i++) {\n            const cell = cells[i];\n            if (cell.edge) {\n                if (cell.source.id === entityCellState.cell.id) {\n                    outgoing.push(cell);\n                } else if (cell.target.id === entityCellState.cell.id) {\n                    incoming.push(cell);\n                }\n            }\n        }\n        return {\n            outgoing,\n            incoming\n        };\n    }\n\n    /**\n     * Creates a new entity\n     * @returns The new entity\n     */\n    private createTable(): ITable {\n        let index = 1;\n        let name = `Table${index}`;\n        for (this.schema.tables.length; this.schema.tables.find((tables) => tables.name === name); index++) {\n            name = `Table${index}`;\n        }\n        const schemas = new Set(this.schema.tables.map((tables) => tables.schema));\n\n        return {\n            id: uuidv4(),\n            name: name,\n            schema: schemas.size > 0 ? Array.from(schemas)[0] : 'dbo',\n            columns: [\n                {\n                    id: uuidv4(),\n                    name: \"column_1\",\n                    dataType: \"int\",\n                    isPrimaryKey: true,\n                    isIdentity: true,\n                }\n            ],\n            foreignKeys: []\n        }\n    }\n\n    /**\n     * Updates the active cell state entity\n     * @param editedTable describes the new entity\n     * @param editedOutgoingEdges describes the new relationships\n     * @returns void\n     */\n    public updateActiveCellStateTable(editedTable: ITable) {\n        this.mxGraph.model.beginUpdate();\n\n        const state = this._activeCellState;\n        if (state === undefined) {\n            // No active cell state found. Make this a no-op.\n            return;\n        }\n\n        const oldTable = state.cell.value as SchemaDesignerTable;\n\n        const incomingEdges = this.mxModel.getIncomingEdges(state.cell);\n        const outgoingEdges = this.mxModel.getOutgoingEdges(state.cell);\n\n        const incomingEdgesIds = incomingEdges.map((edge) => {\n            const edgeValue = edge.value as EdgeCellValue;\n            return oldTable.columns[edgeValue.targetRow - 1].id;\n        });\n\n        const outgoingEdgesIds = outgoingEdges.map((edge) => {\n            const edgeValue = edge.value as EdgeCellValue;\n            return oldTable.columns[edgeValue.sourceRow - 1].id;\n        });\n\n        this.mxGraph.labelChanged(state.cell, {\n            id: editedTable.id,\n            name: editedTable.name,\n            schema: editedTable.schema,\n            columns: editedTable.columns\n        });\n\n        state.cell.value.editor = false;\n\n        this.mxGraph.resizeCell(state.cell, new mx.mxRectangle(state.x, state.y, oldTable.width, oldTable.height), true);\n        this.mxGraph.refresh(state.cell);\n\n        // Delete all edges;\n        const edges = this.mxGraph.getEdges(state.cell);\n        edges.forEach(e => {\n            this.mxGraph.getModel().remove(e);\n        });\n\n        incomingEdges.forEach((edge, index) => {\n            const incomingEdgeId = incomingEdgesIds[index];\n            const edgeValue = edge.value as EdgeCellValue;\n            edgeValue.referencedTableName = editedTable.name;\n            edgeValue.referencedSchemaName = editedTable.schema;\n            const column = editedTable.columns.find((column) => column.id === incomingEdgeId);\n            if (column !== undefined) {\n                edgeValue.referencedColumns = [column.name];\n                this.renderForeignKey(edgeValue, edge.source.value);\n            }\n        });\n\n        outgoingEdges.forEach((edge, index) => {\n            const outgoingEdgeId = outgoingEdgesIds[index];\n            const edgeValue = edge.value as EdgeCellValue;\n            const column = editedTable.columns.find((column) => column.id === outgoingEdgeId);\n            if (column !== undefined) {\n                edgeValue.columns = [column.name];\n                this.renderForeignKey(edgeValue, editedTable);\n            }\n        });\n\n        // Update the cell position\n        this.autoLayout();\n\n        this.mxGraph.model.endUpdate();\n    }\n\n    // Gets the foreign keys for a table\n    public getForeignKeysForTable(tableCell: mxCell): IForeignKey[] {\n        const outgoingEdges = this.mxModel.getOutgoingEdges(tableCell);\n\n        const foreignKeyMap = outgoingEdges.reduce((map: Map<string, IForeignKey>, edge) => {\n            const edgeValue = edge.value as EdgeCellValue;\n            if (map.has(edgeValue.id)) {\n                const existingForeignKey = map.get(edgeValue.id)!;\n                existingForeignKey.columns.push(...edgeValue.columns.slice());\n                existingForeignKey.referencedColumns.push(...edgeValue.referencedColumns.slice());\n            } else {\n                map.set(edgeValue.id, {\n                    id: edgeValue.id,\n                    name: edgeValue.name,\n                    columns: edgeValue.columns.slice(),\n                    referencedSchemaName: edgeValue.referencedSchemaName,\n                    referencedTableName: edgeValue.referencedTableName,\n                    referencedColumns: edgeValue.referencedColumns.slice(),\n                    onDeleteAction: edgeValue.onDeleteAction,\n                    onUpdateAction: edgeValue.onUpdateAction\n                });\n            }\n            return map;\n        }, new Map<string, IForeignKey>());\n\n        return Array.from(foreignKeyMap.values());\n    }\n}\n\n\n\n"],
  "mappings": "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",
  "names": ["factory", "td", "h", "w", "result", "req", "cell", "name", "shape", "evt", "active", "clip", "snapX", "state", "snapY", "c1x", "c1y", "c2x", "c2y", "flex", "block", "i", "parent", "div", "pt", "handler", "checkShape", "snapToPoint", "snapToTerminal", "checkRemove", "document", "obj", "template", "style", "edge", "icon", "str", "iconName", "mx", "import_mxgraph", "factory", "OnAction", "h", "cell", "cell", "maxX", "cell", "name", "column"]
}
