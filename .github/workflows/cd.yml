name: CD
on:
    schedule:
      - cron: '0 0 * * *'
    push:
      branches:
        - main
    workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  create_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Dependencies
        run: npm install
      
      - name: Check if tag is present
        id: tag_check
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "version=${VERSION}" >> $GITHUB_ENV
          if git rev-parse "${VERSION}" >/dev/null 2>&1; then
            echo "Tag v${VERSION} already exists."
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "Tag v${VERSION} does not exist."
            echo "exists=false" >> $GITHUB_ENV
          fi

      - name: Create npm package
        run: npm pack
      
      - name: Extract package contents
        run: npm pack
        id: npm_pack

      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: release
          path: ./release
          fetch-depth: 0

      - name: Extract package contents
        run: |
          tar -xzf *.tgz --strip-components=1 -C ./release

      - name: Push package contents to a new branch
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          cd ./release
          git add .
          CHANGED_FILES=$(git diff-index HEAD)
          if [ -n "$CHANGED_FILES" ]; then
            echo "Pushing with message: Release v${{ env.version }}"
            git commit -m "Release v${{ env.version }}"
            echo "Pushing with message: Release v${{ env.version }}"
            git push origin release
            echo "skip_release=false" >> $GITHUB_ENV
          else
            echo "No changes to push"
            echo "skip_release=true" >> $GITHUB_ENV
          fi
          
      
      - name: Generate release notes
        if: env.skip_release == 'false'
        run: |
          cd ./release
          PREV_TAG=$(git describe --tags --abbrev=0)
          echo "${PREV_TAG}"
          GIT_LOG=$(git log --pretty=format:"%h - %s (%an)" "${PREV_TAG}..HEAD")
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "${GIT_LOG}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Printing release notes
        if: env.skip_release == 'false'
        run: |
          echo " ${{ env.RELEASE_NOTES }} "
          echo v${{ env.version }}
          echo ${{ env.exists }}

      - name: Create Release
        if: env.exists == 'false' && env.skip_release == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.version }}
          release_name: Release v${{ env.version }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false
          commitish: release


      